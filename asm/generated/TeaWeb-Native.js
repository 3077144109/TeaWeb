// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 35184;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

   



   

  var _llvm_ctlz_i32=true;

  var _llvm_pow_f64=Math_pow;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



var debug_table_ii = ["0", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNKSt9bad_alloc4whatEv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "0", "___stdout_write", "___stdio_seek", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_write", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_v = ["0"];
var debug_table_vi = ["0", "0", "0", "0", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "0", "0", "0", "0", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "0", "0", "0", "__ZNSt9bad_allocD2Ev", "__ZNSt9bad_allocD0Ev", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"];
var debug_table_viiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "0"];
var debug_table_viiiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0", "0", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "0", "0"];
var debug_table_viiiiiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_downmix_float", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  viiii: " + debug_table_viiii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiii: " + debug_table_viiiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  ii: " + debug_table_ii[x] + "  "); abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_pow_f64": _llvm_pow_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _codec_opus_createNativeHandle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $5 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 48000;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 (_printf(25720,$vararg_buffer)|0);
 $8 = (__Znwj(12)|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
 __ZN10OpusHandleC2Ev($8);
 $4 = $8;
 HEAP32[$5>>2] = 0;
 $9 = $2;
 $10 = (_opus_decoder_create(48000,$9,$5)|0);
 $11 = $4;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = $10;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $13;
 (_printf(25785,$vararg_buffer3)|0);
 $14 = $2;
 $15 = $3;
 $16 = (_opus_encoder_create(48000,$14,$15,$5)|0);
 $17 = $4;
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$5>>2]|0;
 $19 = $4;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $18;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $21;
 (_printf(25796,$vararg_buffer6)|0);
 $22 = $4;
 STACKTOP = sp;return ($22|0);
}
function __ZN10OpusHandleC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 1;
 STACKTOP = sp;return;
}
function _codec_opus_deleteNativeHandle($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _opus_decoder_destroy($10);
 }
 $11 = $1;
 $12 = ((($11)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  _opus_encoder_destroy($17);
 }
 $18 = $1;
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ($19|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 STACKTOP = sp;return;
}
function _codec_opus_encode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = HEAP32[$10>>2]|0;
 $12 = $6;
 $13 = $7;
 $14 = $5;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13>>>0) / ($16>>>0))&-1;
 $18 = $6;
 $19 = $8;
 $20 = (_opus_encode_float($11,$12,$17,$18,$19)|0);
 $9 = $20;
 $21 = $9;
 $4 = $21;
 $22 = $4;
 STACKTOP = sp;return ($22|0);
}
function _codec_opus_decode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $7;
 $15 = $6;
 $16 = $8;
 $17 = (($16>>>0) / 4)&-1;
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17>>>0) / ($20>>>0))&-1;
 $22 = (_opus_decode_float($12,$13,$14,$15,$21,0)|0);
 $9 = $22;
 $23 = $9;
 $4 = $23;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _codec_opus_changeApplication($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)!=(2048);
 $7 = $4;
 $8 = ($7|0)!=(2049);
 $or$cond = $6 & $8;
 $9 = $4;
 $10 = ($9|0)!=(2051);
 $or$cond3 = $or$cond & $10;
 if ($or$cond3) {
  $2 = 1;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $11 = $3;
  $12 = HEAP32[$11>>2]|0;
  $13 = $4;
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_opus_encoder_ctl($12,4000,$vararg_buffer)|0);
  $2 = $14;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function _opus_decoder_get_size($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<(1);
 $8 = $2;
 $9 = ($8|0)>(2);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $10 = (_silk_Get_Decoder_Size($3)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0);
 if ($12) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $13 = HEAP32[$3>>2]|0;
  $14 = (_align($13)|0);
  HEAP32[$3>>2] = $14;
  $15 = $2;
  $16 = (_celt_decoder_get_size($15)|0);
  $4 = $16;
  $17 = (_align(88)|0);
  $18 = HEAP32[$3>>2]|0;
  $19 = (($17) + ($18))|0;
  $20 = $4;
  $21 = (($19) + ($20))|0;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _align($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 4;
 $3 = $1;
 $4 = $2;
 $5 = (($3) + ($4))|0;
 $6 = (($5) - 1)|0;
 $7 = $2;
 $8 = (($6>>>0) / ($7>>>0))&-1;
 $9 = $2;
 $10 = Math_imul($8, $9)|0;
 STACKTOP = sp;return ($10|0);
}
function _opus_decoder_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $10 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $5;
 $12 = ($11|0)!=(48000);
 $13 = $5;
 $14 = ($13|0)!=(24000);
 $or$cond = $12 & $14;
 $15 = $5;
 $16 = ($15|0)!=(16000);
 $or$cond3 = $or$cond & $16;
 $17 = $5;
 $18 = ($17|0)!=(12000);
 $or$cond5 = $or$cond3 & $18;
 $19 = $5;
 $20 = ($19|0)!=(8000);
 $or$cond7 = $or$cond5 & $20;
 if (!($or$cond7)) {
  $21 = $6;
  $22 = ($21|0)!=(1);
  $23 = $6;
  $24 = ($23|0)!=(2);
  $or$cond9 = $22 & $24;
  if (!($or$cond9)) {
   $25 = $4;
   $26 = $6;
   $27 = (_opus_decoder_get_size($26)|0);
   $28 = $27;
   _memset(($25|0),0,($28|0))|0;
   $29 = (_silk_Get_Decoder_Size($10)|0);
   $9 = $29;
   $30 = $9;
   $31 = ($30|0)!=(0);
   if ($31) {
    $3 = -3;
    $91 = $3;
    STACKTOP = sp;return ($91|0);
   }
   $32 = HEAP32[$10>>2]|0;
   $33 = (_align($32)|0);
   HEAP32[$10>>2] = $33;
   $34 = (_align(88)|0);
   $35 = $4;
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = $34;
   $37 = $4;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$10>>2]|0;
   $41 = (($39) + ($40))|0;
   $42 = $4;
   HEAP32[$42>>2] = $41;
   $43 = $4;
   $44 = $4;
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($43) + ($46)|0);
   $7 = $47;
   $48 = $4;
   $49 = $4;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + ($50)|0);
   $8 = $51;
   $52 = $6;
   $53 = $4;
   $54 = ((($53)) + 8|0);
   HEAP32[$54>>2] = $52;
   $55 = $4;
   $56 = ((($55)) + 48|0);
   HEAP32[$56>>2] = $52;
   $57 = $5;
   $58 = $4;
   $59 = ((($58)) + 12|0);
   HEAP32[$59>>2] = $57;
   $60 = $4;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $4;
   $64 = ((($63)) + 16|0);
   $65 = ((($64)) + 8|0);
   HEAP32[$65>>2] = $62;
   $66 = $4;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $4;
   $70 = ((($69)) + 16|0);
   HEAP32[$70>>2] = $68;
   $71 = $7;
   $72 = (_silk_InitDecoder($71)|0);
   $9 = $72;
   $73 = $9;
   $74 = ($73|0)!=(0);
   if ($74) {
    $3 = -3;
    $91 = $3;
    STACKTOP = sp;return ($91|0);
   }
   $75 = $8;
   $76 = $5;
   $77 = $6;
   $78 = (_celt_decoder_init($75,$76,$77)|0);
   $9 = $78;
   $79 = $9;
   $80 = ($79|0)!=(0);
   if ($80) {
    $3 = -3;
    $91 = $3;
    STACKTOP = sp;return ($91|0);
   } else {
    $81 = $8;
    HEAP32[$vararg_buffer>>2] = 0;
    (_opus_custom_decoder_ctl($81,10016,$vararg_buffer)|0);
    $82 = $4;
    $83 = ((($82)) + 60|0);
    HEAP32[$83>>2] = 0;
    $84 = $5;
    $85 = (($84|0) / 400)&-1;
    $86 = $4;
    $87 = ((($86)) + 64|0);
    HEAP32[$87>>2] = $85;
    $88 = (_opus_select_arch()|0);
    $89 = $4;
    $90 = ((($89)) + 44|0);
    HEAP32[$90>>2] = $88;
    $3 = 0;
    $91 = $3;
    STACKTOP = sp;return ($91|0);
   }
  }
 }
 $3 = -1;
 $91 = $3;
 STACKTOP = sp;return ($91|0);
}
function _opus_select_arch() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _opus_decoder_create($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)!=(48000);
 $11 = $4;
 $12 = ($11|0)!=(24000);
 $or$cond = $10 & $12;
 $13 = $4;
 $14 = ($13|0)!=(16000);
 $or$cond3 = $or$cond & $14;
 $15 = $4;
 $16 = ($15|0)!=(12000);
 $or$cond5 = $or$cond3 & $16;
 $17 = $4;
 $18 = ($17|0)!=(8000);
 $or$cond7 = $or$cond5 & $18;
 if (!($or$cond7)) {
  $19 = $5;
  $20 = ($19|0)!=(1);
  $21 = $5;
  $22 = ($21|0)!=(2);
  $or$cond9 = $20 & $22;
  if (!($or$cond9)) {
   $26 = $5;
   $27 = (_opus_decoder_get_size($26)|0);
   $28 = (_opus_alloc($27)|0);
   $8 = $28;
   $29 = $8;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = $6;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     $33 = $6;
     HEAP32[$33>>2] = -7;
    }
    $3 = 0;
    $46 = $3;
    STACKTOP = sp;return ($46|0);
   }
   $34 = $8;
   $35 = $4;
   $36 = $5;
   $37 = (_opus_decoder_init($34,$35,$36)|0);
   $7 = $37;
   $38 = $6;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = $7;
    $41 = $6;
    HEAP32[$41>>2] = $40;
   }
   $42 = $7;
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $8;
    _opus_free($44);
    $8 = 0;
   }
   $45 = $8;
   $3 = $45;
   $46 = $3;
   STACKTOP = sp;return ($46|0);
  }
 }
 $23 = $6;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $6;
  HEAP32[$25>>2] = -1;
 }
 $3 = 0;
 $46 = $3;
 STACKTOP = sp;return ($46|0);
}
function _opus_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _opus_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function _opus_decode_native($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $22 = sp + 36|0;
 $23 = sp + 192|0;
 $28 = sp + 96|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $34 = $15;
 $35 = ($34|0)<(0);
 $36 = $15;
 $37 = ($36|0)>(1);
 $or$cond = $35 | $37;
 if ($or$cond) {
  $9 = -1;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $38 = $15;
 $39 = ($38|0)!=(0);
 $40 = $12;
 $41 = ($40|0)==(0);
 $or$cond3 = $39 | $41;
 $42 = $11;
 $43 = ($42|0)==(0|0);
 $or$cond5 = $or$cond3 | $43;
 if ($or$cond5) {
  $44 = $14;
  $45 = $10;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47|0) / 400)&-1;
  $49 = (($44|0) % ($48|0))&-1;
  $50 = ($49|0)!=(0);
  if ($50) {
   $9 = -1;
   $242 = $9;
   STACKTOP = sp;return ($242|0);
  }
 }
 $51 = $12;
 $52 = ($51|0)==(0);
 $53 = $11;
 $54 = ($53|0)==(0|0);
 $or$cond7 = $52 | $54;
 if ($or$cond7) {
  $29 = 0;
  while(1) {
   $55 = $10;
   $56 = $13;
   $57 = $29;
   $58 = $10;
   $59 = ((($58)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = Math_imul($57, $60)|0;
   $62 = (($56) + ($61<<2)|0);
   $63 = $14;
   $64 = $29;
   $65 = (($63) - ($64))|0;
   $66 = (_opus_decode_frame($55,0,0,$62,$65,0)|0);
   $30 = $66;
   $67 = $30;
   $68 = ($67|0)<(0);
   $69 = $30;
   if ($68) {
    label = 9;
    break;
   }
   $70 = $29;
   $71 = (($70) + ($69))|0;
   $29 = $71;
   $72 = $29;
   $73 = $14;
   $74 = ($72|0)<($73|0);
   if (!($74)) {
    label = 11;
    break;
   }
  }
  if ((label|0) == 9) {
   $9 = $69;
   $242 = $9;
   STACKTOP = sp;return ($242|0);
  }
  else if ((label|0) == 11) {
   (__opus_false()|0);
   $75 = $29;
   $76 = $10;
   $77 = ((($76)) + 72|0);
   HEAP32[$77>>2] = $75;
   $78 = $29;
   $9 = $78;
   $242 = $9;
   STACKTOP = sp;return ($242|0);
  }
 }
 $79 = $12;
 $80 = ($79|0)<(0);
 if ($80) {
  $9 = -1;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $81 = $11;
 $82 = (_opus_packet_get_mode($81)|0);
 $26 = $82;
 $83 = $11;
 $84 = (_opus_packet_get_bandwidth($83)|0);
 $25 = $84;
 $85 = $11;
 $86 = $10;
 $87 = ((($86)) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (_opus_packet_get_samples_per_frame($85,$88)|0);
 $24 = $89;
 $90 = $11;
 $91 = (_opus_packet_get_nb_channels($90)|0);
 $27 = $91;
 $92 = $11;
 $93 = $12;
 $94 = $16;
 $95 = $17;
 $96 = (_opus_packet_parse_impl($92,$93,$94,$23,0,$28,$22,$95)|0);
 $21 = $96;
 $97 = $21;
 $98 = ($97|0)<(0);
 if ($98) {
  $99 = $21;
  $9 = $99;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $100 = HEAP32[$22>>2]|0;
 $101 = $11;
 $102 = (($101) + ($100)|0);
 $11 = $102;
 $103 = $15;
 $104 = ($103|0)!=(0);
 if ($104) {
  $105 = $14;
  $106 = $24;
  $107 = ($105|0)<($106|0);
  $108 = $26;
  $109 = ($108|0)==(1002);
  $or$cond9 = $107 | $109;
  if (!($or$cond9)) {
   $110 = $10;
   $111 = ((($110)) + 56|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(1002);
   if (!($113)) {
    $119 = $10;
    $120 = ((($119)) + 72|0);
    $121 = HEAP32[$120>>2]|0;
    $31 = $121;
    $122 = $14;
    $123 = $24;
    $124 = (($122) - ($123))|0;
    $125 = ($124|0)!=(0);
    if ($125) {
     $126 = $10;
     $127 = $13;
     $128 = $14;
     $129 = $24;
     $130 = (($128) - ($129))|0;
     $131 = $18;
     $132 = (_opus_decode_native($126,0,0,$127,$130,0,0,0,$131)|0);
     $32 = $132;
     $133 = $32;
     $134 = ($133|0)<(0);
     if ($134) {
      $135 = $31;
      $136 = $10;
      $137 = ((($136)) + 72|0);
      HEAP32[$137>>2] = $135;
      $138 = $32;
      $9 = $138;
      $242 = $9;
      STACKTOP = sp;return ($242|0);
     }
    }
    $139 = $26;
    $140 = $10;
    $141 = ((($140)) + 56|0);
    HEAP32[$141>>2] = $139;
    $142 = $25;
    $143 = $10;
    $144 = ((($143)) + 52|0);
    HEAP32[$144>>2] = $142;
    $145 = $24;
    $146 = $10;
    $147 = ((($146)) + 64|0);
    HEAP32[$147>>2] = $145;
    $148 = $27;
    $149 = $10;
    $150 = ((($149)) + 48|0);
    HEAP32[$150>>2] = $148;
    $151 = $10;
    $152 = $11;
    $153 = HEAP16[$28>>1]|0;
    $154 = $153 << 16 >> 16;
    $155 = $13;
    $156 = $10;
    $157 = ((($156)) + 8|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $14;
    $160 = $24;
    $161 = (($159) - ($160))|0;
    $162 = Math_imul($158, $161)|0;
    $163 = (($155) + ($162<<2)|0);
    $164 = $24;
    $165 = (_opus_decode_frame($151,$152,$154,$163,$164,1)|0);
    $32 = $165;
    $166 = $32;
    $167 = ($166|0)<(0);
    if ($167) {
     $168 = $32;
     $9 = $168;
     $242 = $9;
     STACKTOP = sp;return ($242|0);
    } else {
     (__opus_false()|0);
     $169 = $14;
     $170 = $10;
     $171 = ((($170)) + 72|0);
     HEAP32[$171>>2] = $169;
     $172 = $14;
     $9 = $172;
     $242 = $9;
     STACKTOP = sp;return ($242|0);
    }
   }
  }
  $114 = $10;
  $115 = $13;
  $116 = $14;
  $117 = $18;
  $118 = (_opus_decode_native($114,0,0,$115,$116,0,0,0,$117)|0);
  $9 = $118;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $173 = $21;
 $174 = $24;
 $175 = Math_imul($173, $174)|0;
 $176 = $14;
 $177 = ($175|0)>($176|0);
 if ($177) {
  $9 = -2;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $178 = $26;
 $179 = $10;
 $180 = ((($179)) + 56|0);
 HEAP32[$180>>2] = $178;
 $181 = $25;
 $182 = $10;
 $183 = ((($182)) + 52|0);
 HEAP32[$183>>2] = $181;
 $184 = $24;
 $185 = $10;
 $186 = ((($185)) + 64|0);
 HEAP32[$186>>2] = $184;
 $187 = $27;
 $188 = $10;
 $189 = ((($188)) + 48|0);
 HEAP32[$189>>2] = $187;
 $20 = 0;
 $19 = 0;
 while(1) {
  $190 = $19;
  $191 = $21;
  $192 = ($190|0)<($191|0);
  if (!($192)) {
   break;
  }
  $193 = $10;
  $194 = $11;
  $195 = $19;
  $196 = (($28) + ($195<<1)|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197 << 16 >> 16;
  $199 = $13;
  $200 = $20;
  $201 = $10;
  $202 = ((($201)) + 8|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = Math_imul($200, $203)|0;
  $205 = (($199) + ($204<<2)|0);
  $206 = $14;
  $207 = $20;
  $208 = (($206) - ($207))|0;
  $209 = (_opus_decode_frame($193,$194,$198,$205,$208,0)|0);
  $33 = $209;
  $210 = $33;
  $211 = ($210|0)<(0);
  if ($211) {
   label = 31;
   break;
  }
  $213 = $19;
  $214 = (($28) + ($213<<1)|0);
  $215 = HEAP16[$214>>1]|0;
  $216 = $215 << 16 >> 16;
  $217 = $11;
  $218 = (($217) + ($216)|0);
  $11 = $218;
  $219 = $33;
  $220 = $20;
  $221 = (($220) + ($219))|0;
  $20 = $221;
  $222 = $19;
  $223 = (($222) + 1)|0;
  $19 = $223;
 }
 if ((label|0) == 31) {
  $212 = $33;
  $9 = $212;
  $242 = $9;
  STACKTOP = sp;return ($242|0);
 }
 $224 = $20;
 $225 = $10;
 $226 = ((($225)) + 72|0);
 HEAP32[$226>>2] = $224;
 (__opus_false()|0);
 $227 = $18;
 $228 = ($227|0)!=(0);
 if ($228) {
  $229 = $13;
  $230 = $20;
  $231 = $10;
  $232 = ((($231)) + 8|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $10;
  $235 = ((($234)) + 76|0);
  _opus_pcm_soft_clip($229,$230,$233,$235);
 } else {
  $236 = $10;
  $237 = ((($236)) + 76|0);
  $238 = ((($237)) + 4|0);
  HEAPF32[$238>>2] = 0.0;
  $239 = $10;
  $240 = ((($239)) + 76|0);
  HEAPF32[$240>>2] = 0.0;
 }
 $241 = $20;
 $9 = $241;
 $242 = $9;
 STACKTOP = sp;return ($242|0);
}
function _opus_decode_frame($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$26 = 0, $$alloca_mul = 0, $$alloca_mul102 = 0, $$alloca_mul104 = 0, $$alloca_mul106 = 0, $$sink = 0, $$sink23 = 0, $$sink25 = 0, $$sink6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0.0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0.0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond20 = 0, $or$cond22 = 0, $or$cond3 = 0, $or$cond8 = 0;
 var $vararg_buffer = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer52 = sp + 80|0;
 $vararg_buffer49 = sp + 72|0;
 $vararg_buffer47 = sp + 64|0;
 $vararg_buffer44 = sp + 56|0;
 $vararg_buffer41 = sp + 48|0;
 $vararg_buffer39 = sp + 40|0;
 $vararg_buffer36 = sp + 32|0;
 $vararg_buffer33 = sp + 24|0;
 $vararg_buffer30 = sp + 16|0;
 $vararg_buffer27 = sp + 8|0;
 $vararg_buffer = sp;
 $18 = sp + 216|0;
 $19 = sp + 212|0;
 $38 = sp + 136|0;
 $49 = sp + 312|0;
 $50 = sp + 92|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = 0;
 $17 = 0;
 $23 = 0;
 $27 = 0;
 $29 = 0;
 $30 = 0;
 $31 = 0;
 HEAP32[$38>>2] = 0;
 $53 = $7;
 $54 = $7;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($53) + ($56)|0);
 $13 = $57;
 $58 = $7;
 $59 = $7;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + ($60)|0);
 $14 = $61;
 $62 = $7;
 $63 = ((($62)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64|0) / 50)&-1;
 $36 = $65;
 $66 = $36;
 $67 = $66 >> 1;
 $35 = $67;
 $68 = $35;
 $69 = $68 >> 1;
 $34 = $69;
 $70 = $34;
 $71 = $70 >> 1;
 $33 = $71;
 $72 = $11;
 $73 = $33;
 $74 = ($72|0)<($73|0);
 if ($74) {
  $6 = -2;
  $765 = $6;
  STACKTOP = sp;return ($765|0);
 }
 $75 = $11;
 $76 = $7;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78|0) / 25)&-1;
 $80 = ($79*3)|0;
 $81 = ($75|0)<($80|0);
 if ($81) {
  $82 = $11;
  $88 = $82;
 } else {
  $83 = $7;
  $84 = ((($83)) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85|0) / 25)&-1;
  $87 = ($86*3)|0;
  $88 = $87;
 }
 $11 = $88;
 $89 = $9;
 $90 = ($89|0)<=(1);
 if ($90) {
  $8 = 0;
  $91 = $11;
  $92 = $7;
  $93 = ((($92)) + 64|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($91|0)<($94|0);
  if ($95) {
   $96 = $11;
   $100 = $96;
  } else {
   $97 = $7;
   $98 = ((($97)) + 64|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99;
  }
  $11 = $100;
 }
 $101 = $8;
 $102 = ($101|0)!=(0|0);
 do {
  if ($102) {
   $103 = $7;
   $104 = ((($103)) + 64|0);
   $105 = HEAP32[$104>>2]|0;
   $25 = $105;
   $106 = $7;
   $107 = ((($106)) + 56|0);
   $108 = HEAP32[$107>>2]|0;
   $26 = $108;
   $109 = $8;
   $110 = $9;
   _ec_dec_init($18,$109,$110);
  } else {
   $111 = $11;
   $25 = $111;
   $112 = $7;
   $113 = ((($112)) + 60|0);
   $114 = HEAP32[$113>>2]|0;
   $26 = $114;
   $115 = $26;
   $116 = ($115|0)==(0);
   if ($116) {
    $15 = 0;
    while(1) {
     $117 = $15;
     $118 = $25;
     $119 = $7;
     $120 = ((($119)) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = Math_imul($118, $121)|0;
     $123 = ($117|0)<($122|0);
     if (!($123)) {
      break;
     }
     $124 = $10;
     $125 = $15;
     $126 = (($124) + ($125<<2)|0);
     HEAPF32[$126>>2] = 0.0;
     $127 = $15;
     $128 = (($127) + 1)|0;
     $15 = $128;
    }
    $129 = $25;
    $6 = $129;
    $765 = $6;
    STACKTOP = sp;return ($765|0);
   }
   $130 = $25;
   $131 = $36;
   $132 = ($130|0)>($131|0);
   if ($132) {
    while(1) {
     $133 = $7;
     $134 = $10;
     $135 = $25;
     $136 = $36;
     $137 = ($135|0)<($136|0);
     $138 = $25;
     $139 = $36;
     $140 = $137 ? $138 : $139;
     $141 = (_opus_decode_frame($133,0,0,$134,$140,0)|0);
     $40 = $141;
     $142 = $40;
     $143 = ($142|0)<(0);
     $144 = $40;
     if ($143) {
      label = 20;
      break;
     }
     $145 = $7;
     $146 = ((($145)) + 8|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = Math_imul($144, $147)|0;
     $149 = $10;
     $150 = (($149) + ($148<<2)|0);
     $10 = $150;
     $151 = $40;
     $152 = $25;
     $153 = (($152) - ($151))|0;
     $25 = $153;
     $154 = $25;
     $155 = ($154|0)>(0);
     if (!($155)) {
      label = 22;
      break;
     }
    }
    if ((label|0) == 20) {
     $6 = $144;
     $765 = $6;
     STACKTOP = sp;return ($765|0);
    }
    else if ((label|0) == 22) {
     $156 = $11;
     $6 = $156;
     $765 = $6;
     STACKTOP = sp;return ($765|0);
    }
   }
   $157 = $25;
   $158 = $36;
   $159 = ($157|0)<($158|0);
   if ($159) {
    $160 = $25;
    $161 = $35;
    $162 = ($160|0)>($161|0);
    if ($162) {
     $163 = $35;
     $25 = $163;
     break;
    }
    $164 = $26;
    $165 = ($164|0)!=(1000);
    if ($165) {
     $166 = $25;
     $167 = $34;
     $168 = ($166|0)>($167|0);
     if ($168) {
      $169 = $25;
      $170 = $35;
      $171 = ($169|0)<($170|0);
      if ($171) {
       $172 = $34;
       $25 = $172;
      }
     }
    }
   }
  }
 } while(0);
 $39 = 0;
 $21 = 1;
 $22 = 1;
 $173 = $8;
 $174 = ($173|0)!=(0|0);
 do {
  if ($174) {
   $175 = $7;
   $176 = ((($175)) + 60|0);
   $177 = HEAP32[$176>>2]|0;
   $178 = ($177|0)>(0);
   if ($178) {
    $179 = $26;
    $180 = ($179|0)==(1002);
    if ($180) {
     $181 = $7;
     $182 = ((($181)) + 60|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)!=(1002);
     if ($184) {
      $185 = $7;
      $186 = ((($185)) + 68|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ($187|0)!=(0);
      if ($188) {
       label = 35;
      }
     } else {
      label = 35;
     }
    } else {
     label = 35;
    }
    if ((label|0) == 35) {
     $189 = $26;
     $190 = ($189|0)!=(1002);
     if (!($190)) {
      break;
     }
     $191 = $7;
     $192 = ((($191)) + 60|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($193|0)==(1002);
     if (!($194)) {
      break;
     }
    }
    $27 = 1;
    $195 = $26;
    $196 = ($195|0)==(1002);
    $197 = $34;
    $198 = $7;
    $199 = ((($198)) + 8|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = Math_imul($197, $200)|0;
    if ($196) {
     $22 = $201;
     break;
    } else {
     $21 = $201;
     break;
    }
   }
  }
 } while(0);
 $202 = $22;
 $203 = (_llvm_stacksave()|0);
 $41 = $203;
 $$alloca_mul = $202<<2;
 $204 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $205 = $27;
 $206 = ($205|0)!=(0);
 $207 = $26;
 $208 = ($207|0)==(1002);
 $or$cond = $206 & $208;
 if ($or$cond) {
  $23 = $204;
  $209 = $7;
  $210 = $23;
  $211 = $34;
  $212 = $25;
  $213 = ($211|0)<($212|0);
  $214 = $34;
  $215 = $25;
  $216 = $213 ? $214 : $215;
  (_opus_decode_frame($209,0,0,$210,$216,0)|0);
 }
 $217 = $25;
 $218 = $11;
 $219 = ($217|0)>($218|0);
 L62: do {
  if ($219) {
   $6 = -1;
   $42 = 1;
  } else {
   $220 = $25;
   $11 = $220;
   $221 = $26;
   $222 = ($221|0)==(1002);
   $223 = $39;
   $224 = ($223|0)!=(0);
   $or$cond3 = $222 | $224;
   if ($or$cond3) {
    $235 = 1;
   } else {
    $225 = $35;
    $226 = $11;
    $227 = ($225|0)>($226|0);
    $228 = $35;
    $229 = $11;
    $230 = $227 ? $228 : $229;
    $231 = $7;
    $232 = ((($231)) + 8|0);
    $233 = HEAP32[$232>>2]|0;
    $234 = Math_imul($230, $233)|0;
    $235 = $234;
   }
   $20 = $235;
   $236 = $20;
   $$alloca_mul102 = $236<<1;
   $237 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul102)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul102)|0)+15)&-16)|0);;
   $238 = $26;
   $239 = ($238|0)!=(1002);
   L68: do {
    if ($239) {
     $45 = $237;
     $240 = $7;
     $241 = ((($240)) + 60|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = ($242|0)==(1002);
     if ($243) {
      $244 = $13;
      (_silk_InitDecoder($244)|0);
     }
     $245 = $25;
     $246 = ($245*1000)|0;
     $247 = $7;
     $248 = ((($247)) + 12|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (($246|0) / ($249|0))&-1;
     $251 = (10)>($250|0);
     if ($251) {
      $261 = 10;
     } else {
      $252 = $25;
      $253 = ($252*1000)|0;
      $254 = $7;
      $255 = ((($254)) + 12|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($253|0) / ($256|0))&-1;
      $261 = $257;
     }
     $258 = $7;
     $259 = ((($258)) + 16|0);
     $260 = ((($259)) + 16|0);
     HEAP32[$260>>2] = $261;
     $262 = $8;
     $263 = ($262|0)!=(0|0);
     if ($263) {
      $264 = $7;
      $265 = ((($264)) + 48|0);
      $266 = HEAP32[$265>>2]|0;
      $267 = $7;
      $268 = ((($267)) + 16|0);
      $269 = ((($268)) + 4|0);
      HEAP32[$269>>2] = $266;
      $270 = $26;
      $271 = ($270|0)==(1000);
      $272 = $7;
      if ($271) {
       $273 = ((($272)) + 52|0);
       $274 = HEAP32[$273>>2]|0;
       $275 = ($274|0)==(1101);
       $276 = $7;
       if ($275) {
        $$sink = 8000;$$sink6 = $276;
       } else {
        $277 = ((($276)) + 52|0);
        $278 = HEAP32[$277>>2]|0;
        $279 = ($278|0)==(1102);
        $280 = $7;
        $281 = $7;
        $$ = $279 ? $280 : $281;
        $$26 = $279 ? 12000 : 16000;
        $$sink = $$26;$$sink6 = $$;
       }
      } else {
       $$sink = 16000;$$sink6 = $272;
      }
      $282 = ((($$sink6)) + 16|0);
      $283 = ((($282)) + 12|0);
      HEAP32[$283>>2] = $$sink;
     }
     $284 = $8;
     $285 = ($284|0)==(0|0);
     $286 = $12;
     $287 = $286<<1;
     $288 = $285 ? 1 : $287;
     $43 = $288;
     $44 = 0;
     L83: while(1) {
      $289 = $44;
      $290 = ($289|0)==(0);
      $291 = $290&1;
      $46 = $291;
      $292 = $13;
      $293 = $7;
      $294 = ((($293)) + 16|0);
      $295 = $43;
      $296 = $46;
      $297 = $45;
      $298 = $7;
      $299 = ((($298)) + 44|0);
      $300 = HEAP32[$299>>2]|0;
      $301 = (_silk_Decode($292,$294,$295,$296,$18,$297,$19,$300)|0);
      $16 = $301;
      $302 = $16;
      $303 = ($302|0)!=(0);
      L85: do {
       if ($303) {
        $304 = $43;
        $305 = ($304|0)!=(0);
        if (!($305)) {
         break L83;
        }
        $306 = $11;
        HEAP32[$19>>2] = $306;
        $15 = 0;
        while(1) {
         $307 = $15;
         $308 = $11;
         $309 = $7;
         $310 = ((($309)) + 8|0);
         $311 = HEAP32[$310>>2]|0;
         $312 = Math_imul($308, $311)|0;
         $313 = ($307|0)<($312|0);
         if (!($313)) {
          break L85;
         }
         $314 = $45;
         $315 = $15;
         $316 = (($314) + ($315<<1)|0);
         HEAP16[$316>>1] = 0;
         $317 = $15;
         $318 = (($317) + 1)|0;
         $15 = $318;
        }
       }
      } while(0);
      $319 = HEAP32[$19>>2]|0;
      $320 = $7;
      $321 = ((($320)) + 8|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = Math_imul($319, $322)|0;
      $324 = $45;
      $325 = (($324) + ($323<<1)|0);
      $45 = $325;
      $326 = HEAP32[$19>>2]|0;
      $327 = $44;
      $328 = (($327) + ($326))|0;
      $44 = $328;
      $329 = $44;
      $330 = $11;
      $331 = ($329|0)<($330|0);
      if (!($331)) {
       break L68;
      }
     }
     $6 = -3;
     $42 = 1;
     break L62;
    }
   } while(0);
   $28 = 0;
   $332 = $12;
   $333 = ($332|0)==(0);
   $334 = $26;
   $335 = ($334|0)!=(1002);
   $or$cond8 = $333 & $335;
   $336 = $8;
   $337 = ($336|0)!=(0|0);
   $or$cond10 = $or$cond8 & $337;
   if ($or$cond10) {
    $338 = (_ec_tell($18)|0);
    $339 = (($338) + 17)|0;
    $340 = $7;
    $341 = ((($340)) + 56|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = ($342|0)==(1001);
    $344 = $343&1;
    $345 = ($344*20)|0;
    $346 = (($339) + ($345))|0;
    $347 = $9;
    $348 = $347<<3;
    $349 = ($346|0)<=($348|0);
    if ($349) {
     $350 = $26;
     $351 = ($350|0)==(1001);
     if ($351) {
      $352 = (_ec_dec_bit_logp($18,12)|0);
      $29 = $352;
     } else {
      $29 = 1;
     }
     $353 = $29;
     $354 = ($353|0)!=(0);
     if ($354) {
      $355 = (_ec_dec_bit_logp($18,1)|0);
      $31 = $355;
      $356 = $26;
      $357 = ($356|0)==(1001);
      if ($357) {
       $358 = (_ec_dec_uint($18,256)|0);
       $359 = (($358) + 2)|0;
       $365 = $359;
      } else {
       $360 = $9;
       $361 = (_ec_tell($18)|0);
       $362 = (($361) + 7)|0;
       $363 = $362 >> 3;
       $364 = (($360) - ($363))|0;
       $365 = $364;
      }
      $30 = $365;
      $366 = $30;
      $367 = $9;
      $368 = (($367) - ($366))|0;
      $9 = $368;
      $369 = $9;
      $370 = $369<<3;
      $371 = (_ec_tell($18)|0);
      $372 = ($370|0)<($371|0);
      if ($372) {
       $9 = 0;
       $30 = 0;
       $29 = 0;
      }
      $373 = $30;
      $374 = ((($18)) + 4|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = (($375) - ($373))|0;
      HEAP32[$374>>2] = $376;
     }
    }
   }
   $377 = $26;
   $378 = ($377|0)!=(1002);
   if ($378) {
    $28 = 17;
   }
   $47 = 21;
   $379 = $7;
   $380 = ((($379)) + 52|0);
   $381 = HEAP32[$380>>2]|0;
   switch ($381|0) {
   case 1101:  {
    $47 = 13;
    break;
   }
   case 1103: case 1102:  {
    $47 = 17;
    break;
   }
   case 1104:  {
    $47 = 19;
    break;
   }
   case 1105:  {
    $47 = 21;
    break;
   }
   default: {
   }
   }
   $382 = $14;
   $383 = $47;
   HEAP32[$vararg_buffer>>2] = $383;
   (_opus_custom_decoder_ctl($382,10012,$vararg_buffer)|0);
   $384 = $14;
   $385 = $7;
   $386 = ((($385)) + 48|0);
   $387 = HEAP32[$386>>2]|0;
   HEAP32[$vararg_buffer27>>2] = $387;
   (_opus_custom_decoder_ctl($384,10008,$vararg_buffer27)|0);
   $388 = $29;
   $389 = ($388|0)!=(0);
   if ($389) {
    $27 = 0;
    $21 = 1;
   }
   $390 = $21;
   $$alloca_mul104 = $390<<2;
   $391 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul104)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul104)|0)+15)&-16)|0);;
   $392 = $27;
   $393 = ($392|0)!=(0);
   $394 = $26;
   $395 = ($394|0)!=(1002);
   $or$cond12 = $393 & $395;
   if ($or$cond12) {
    $23 = $391;
    $396 = $7;
    $397 = $23;
    $398 = $34;
    $399 = $25;
    $400 = ($398|0)<($399|0);
    $401 = $34;
    $402 = $25;
    $403 = $400 ? $401 : $402;
    (_opus_decode_frame($396,0,0,$397,$403,0)|0);
   }
   $404 = $29;
   $405 = ($404|0)!=(0);
   if ($405) {
    $406 = $34;
    $407 = $7;
    $408 = ((($407)) + 8|0);
    $409 = HEAP32[$408>>2]|0;
    $410 = Math_imul($406, $409)|0;
    $411 = $410;
   } else {
    $411 = 1;
   }
   $24 = $411;
   $412 = $24;
   $$alloca_mul106 = $412<<2;
   $413 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul106)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul106)|0)+15)&-16)|0);;
   $414 = $29;
   $415 = ($414|0)!=(0);
   $416 = $31;
   $417 = ($416|0)!=(0);
   $or$cond14 = $415 & $417;
   if ($or$cond14) {
    $418 = $14;
    HEAP32[$vararg_buffer30>>2] = 0;
    (_opus_custom_decoder_ctl($418,10010,$vararg_buffer30)|0);
    $419 = $14;
    $420 = $8;
    $421 = $9;
    $422 = (($420) + ($421)|0);
    $423 = $30;
    $424 = $34;
    (_celt_decode_with_ec($419,$422,$423,$413,$424,0,0)|0);
    $425 = $14;
    $426 = $38;
    $427 = $38;
    $428 = (($426) - ($427))|0;
    $429 = (($428|0) / 4)&-1;
    $430 = (($38) + ($429<<2)|0);
    HEAP32[$vararg_buffer33>>2] = $430;
    (_opus_custom_decoder_ctl($425,4031,$vararg_buffer33)|0);
   }
   $431 = $14;
   $432 = $28;
   HEAP32[$vararg_buffer36>>2] = $432;
   (_opus_custom_decoder_ctl($431,10010,$vararg_buffer36)|0);
   $433 = $26;
   $434 = ($433|0)!=(1000);
   do {
    if ($434) {
     $435 = $36;
     $436 = $11;
     $437 = ($435|0)<($436|0);
     $438 = $36;
     $439 = $11;
     $440 = $437 ? $438 : $439;
     $48 = $440;
     $441 = $26;
     $442 = $7;
     $443 = ((($442)) + 60|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ($441|0)!=($444|0);
     do {
      if ($445) {
       $446 = $7;
       $447 = ((($446)) + 60|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = ($448|0)>(0);
       if (!($449)) {
        break;
       }
       $450 = $7;
       $451 = ((($450)) + 68|0);
       $452 = HEAP32[$451>>2]|0;
       $453 = ($452|0)!=(0);
       if ($453) {
        break;
       }
       $454 = $14;
       (_opus_custom_decoder_ctl($454,4028,$vararg_buffer39)|0);
      }
     } while(0);
     $455 = $14;
     $456 = $12;
     $457 = ($456|0)!=(0);
     $458 = $8;
     $459 = $457 ? 0 : $458;
     $460 = $9;
     $461 = $10;
     $462 = $48;
     $463 = $39;
     $464 = (_celt_decode_with_ec($455,$459,$460,$461,$462,$18,$463)|0);
     $17 = $464;
    } else {
     ;HEAP8[$49>>0]=HEAP8[25818>>0]|0;HEAP8[$49+1>>0]=HEAP8[25818+1>>0]|0;
     $465 = $39;
     $466 = ($465|0)!=(0);
     L139: do {
      if (!($466)) {
       $15 = 0;
       while(1) {
        $467 = $15;
        $468 = $11;
        $469 = $7;
        $470 = ((($469)) + 8|0);
        $471 = HEAP32[$470>>2]|0;
        $472 = Math_imul($468, $471)|0;
        $473 = ($467|0)<($472|0);
        if (!($473)) {
         break L139;
        }
        $474 = $10;
        $475 = $15;
        $476 = (($474) + ($475<<2)|0);
        HEAPF32[$476>>2] = 0.0;
        $477 = $15;
        $478 = (($477) + 1)|0;
        $15 = $478;
       }
      }
     } while(0);
     $479 = $7;
     $480 = ((($479)) + 60|0);
     $481 = HEAP32[$480>>2]|0;
     $482 = ($481|0)==(1001);
     if ($482) {
      $483 = $29;
      $484 = ($483|0)!=(0);
      $485 = $31;
      $486 = ($485|0)!=(0);
      $or$cond16 = $484 & $486;
      if ($or$cond16) {
       $487 = $7;
       $488 = ((($487)) + 68|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = ($489|0)!=(0);
       if ($490) {
        break;
       }
      }
      $491 = $14;
      HEAP32[$vararg_buffer41>>2] = 0;
      (_opus_custom_decoder_ctl($491,10010,$vararg_buffer41)|0);
      $492 = $14;
      $493 = $10;
      $494 = $33;
      $495 = $39;
      (_celt_decode_with_ec($492,$49,2,$493,$494,0,$495)|0);
     }
    }
   } while(0);
   $496 = $26;
   $497 = ($496|0)==(1002);
   $498 = $39;
   $499 = ($498|0)!=(0);
   $or$cond18 = $497 | $499;
   L150: do {
    if (!($or$cond18)) {
     $15 = 0;
     while(1) {
      $500 = $15;
      $501 = $11;
      $502 = $7;
      $503 = ((($502)) + 8|0);
      $504 = HEAP32[$503>>2]|0;
      $505 = Math_imul($501, $504)|0;
      $506 = ($500|0)<($505|0);
      if (!($506)) {
       break L150;
      }
      $507 = $10;
      $508 = $15;
      $509 = (($507) + ($508<<2)|0);
      $510 = +HEAPF32[$509>>2];
      $511 = $15;
      $512 = (($237) + ($511<<1)|0);
      $513 = HEAP16[$512>>1]|0;
      $514 = $513 << 16 >> 16;
      $515 = (+($514|0));
      $516 = 3.0517578125E-5 * $515;
      $517 = $510 + $516;
      $518 = $10;
      $519 = $15;
      $520 = (($518) + ($519<<2)|0);
      HEAPF32[$520>>2] = $517;
      $521 = $15;
      $522 = (($521) + 1)|0;
      $15 = $522;
     }
    }
   } while(0);
   $523 = $14;
   $524 = $50;
   $525 = $50;
   $526 = (($524) - ($525))|0;
   $527 = (($526|0) / 4)&-1;
   $528 = (($50) + ($527<<2)|0);
   HEAP32[$vararg_buffer44>>2] = $528;
   (_opus_custom_decoder_ctl($523,10015,$vararg_buffer44)|0);
   $529 = HEAP32[$50>>2]|0;
   $530 = ((($529)) + 60|0);
   $531 = HEAP32[$530>>2]|0;
   $37 = $531;
   $532 = $29;
   $533 = ($532|0)==(0);
   $534 = $31;
   $535 = ($534|0)!=(0);
   $or$cond20 = $533 | $535;
   if (!($or$cond20)) {
    $536 = $14;
    (_opus_custom_decoder_ctl($536,4028,$vararg_buffer47)|0);
    $537 = $14;
    HEAP32[$vararg_buffer49>>2] = 0;
    (_opus_custom_decoder_ctl($537,10010,$vararg_buffer49)|0);
    $538 = $14;
    $539 = $8;
    $540 = $9;
    $541 = (($539) + ($540)|0);
    $542 = $30;
    $543 = $34;
    (_celt_decode_with_ec($538,$541,$542,$413,$543,0,0)|0);
    $544 = $14;
    $545 = $38;
    $546 = $38;
    $547 = (($545) - ($546))|0;
    $548 = (($547|0) / 4)&-1;
    $549 = (($38) + ($548<<2)|0);
    HEAP32[$vararg_buffer52>>2] = $549;
    (_opus_custom_decoder_ctl($544,4031,$vararg_buffer52)|0);
    $550 = $10;
    $551 = $7;
    $552 = ((($551)) + 8|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = $11;
    $555 = $33;
    $556 = (($554) - ($555))|0;
    $557 = Math_imul($553, $556)|0;
    $558 = (($550) + ($557<<2)|0);
    $559 = $7;
    $560 = ((($559)) + 8|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = $33;
    $563 = Math_imul($561, $562)|0;
    $564 = (($413) + ($563<<2)|0);
    $565 = $10;
    $566 = $7;
    $567 = ((($566)) + 8|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = $11;
    $570 = $33;
    $571 = (($569) - ($570))|0;
    $572 = Math_imul($568, $571)|0;
    $573 = (($565) + ($572<<2)|0);
    $574 = $33;
    $575 = $7;
    $576 = ((($575)) + 8|0);
    $577 = HEAP32[$576>>2]|0;
    $578 = $37;
    $579 = $7;
    $580 = ((($579)) + 12|0);
    $581 = HEAP32[$580>>2]|0;
    _smooth_fade($558,$564,$573,$574,$577,$578,$581);
   }
   $582 = $29;
   $583 = ($582|0)!=(0);
   $584 = $31;
   $585 = ($584|0)!=(0);
   $or$cond22 = $583 & $585;
   if ($or$cond22) {
    $32 = 0;
    while(1) {
     $586 = $32;
     $587 = $7;
     $588 = ((($587)) + 8|0);
     $589 = HEAP32[$588>>2]|0;
     $590 = ($586|0)<($589|0);
     if (!($590)) {
      break;
     }
     $15 = 0;
     while(1) {
      $591 = $15;
      $592 = $33;
      $593 = ($591|0)<($592|0);
      if (!($593)) {
       break;
      }
      $594 = $7;
      $595 = ((($594)) + 8|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = $15;
      $598 = Math_imul($596, $597)|0;
      $599 = $32;
      $600 = (($598) + ($599))|0;
      $601 = (($413) + ($600<<2)|0);
      $602 = +HEAPF32[$601>>2];
      $603 = $10;
      $604 = $7;
      $605 = ((($604)) + 8|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = $15;
      $608 = Math_imul($606, $607)|0;
      $609 = $32;
      $610 = (($608) + ($609))|0;
      $611 = (($603) + ($610<<2)|0);
      HEAPF32[$611>>2] = $602;
      $612 = $15;
      $613 = (($612) + 1)|0;
      $15 = $613;
     }
     $614 = $32;
     $615 = (($614) + 1)|0;
     $32 = $615;
    }
    $616 = $7;
    $617 = ((($616)) + 8|0);
    $618 = HEAP32[$617>>2]|0;
    $619 = $33;
    $620 = Math_imul($618, $619)|0;
    $621 = (($413) + ($620<<2)|0);
    $622 = $10;
    $623 = $7;
    $624 = ((($623)) + 8|0);
    $625 = HEAP32[$624>>2]|0;
    $626 = $33;
    $627 = Math_imul($625, $626)|0;
    $628 = (($622) + ($627<<2)|0);
    $629 = $10;
    $630 = $7;
    $631 = ((($630)) + 8|0);
    $632 = HEAP32[$631>>2]|0;
    $633 = $33;
    $634 = Math_imul($632, $633)|0;
    $635 = (($629) + ($634<<2)|0);
    $636 = $33;
    $637 = $7;
    $638 = ((($637)) + 8|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = $37;
    $641 = $7;
    $642 = ((($641)) + 12|0);
    $643 = HEAP32[$642>>2]|0;
    _smooth_fade($621,$628,$635,$636,$639,$640,$643);
   }
   $644 = $27;
   $645 = ($644|0)!=(0);
   do {
    if ($645) {
     $646 = $25;
     $647 = $34;
     $648 = ($646|0)>=($647|0);
     if (!($648)) {
      $693 = $23;
      $694 = $10;
      $695 = $10;
      $696 = $33;
      $697 = $7;
      $698 = ((($697)) + 8|0);
      $699 = HEAP32[$698>>2]|0;
      $700 = $37;
      $701 = $7;
      $702 = ((($701)) + 12|0);
      $703 = HEAP32[$702>>2]|0;
      _smooth_fade($693,$694,$695,$696,$699,$700,$703);
      break;
     }
     $15 = 0;
     while(1) {
      $649 = $15;
      $650 = $7;
      $651 = ((($650)) + 8|0);
      $652 = HEAP32[$651>>2]|0;
      $653 = $33;
      $654 = Math_imul($652, $653)|0;
      $655 = ($649|0)<($654|0);
      $656 = $23;
      if (!($655)) {
       break;
      }
      $657 = $15;
      $658 = (($656) + ($657<<2)|0);
      $659 = +HEAPF32[$658>>2];
      $660 = $10;
      $661 = $15;
      $662 = (($660) + ($661<<2)|0);
      HEAPF32[$662>>2] = $659;
      $663 = $15;
      $664 = (($663) + 1)|0;
      $15 = $664;
     }
     $665 = $7;
     $666 = ((($665)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = $33;
     $669 = Math_imul($667, $668)|0;
     $670 = (($656) + ($669<<2)|0);
     $671 = $10;
     $672 = $7;
     $673 = ((($672)) + 8|0);
     $674 = HEAP32[$673>>2]|0;
     $675 = $33;
     $676 = Math_imul($674, $675)|0;
     $677 = (($671) + ($676<<2)|0);
     $678 = $10;
     $679 = $7;
     $680 = ((($679)) + 8|0);
     $681 = HEAP32[$680>>2]|0;
     $682 = $33;
     $683 = Math_imul($681, $682)|0;
     $684 = (($678) + ($683<<2)|0);
     $685 = $33;
     $686 = $7;
     $687 = ((($686)) + 8|0);
     $688 = HEAP32[$687>>2]|0;
     $689 = $37;
     $690 = $7;
     $691 = ((($690)) + 12|0);
     $692 = HEAP32[$691>>2]|0;
     _smooth_fade($670,$677,$684,$685,$688,$689,$692);
    }
   } while(0);
   $704 = $7;
   $705 = ((($704)) + 40|0);
   $706 = HEAP32[$705>>2]|0;
   $707 = ($706|0)!=(0);
   L180: do {
    if ($707) {
     $708 = $7;
     $709 = ((($708)) + 40|0);
     $710 = HEAP32[$709>>2]|0;
     $711 = (+($710|0));
     $712 = 6.4881407888606191E-4 * $711;
     $713 = $712;
     $714 = 0.69314718055994529 * $713;
     $715 = (+Math_exp((+$714)));
     $716 = $715;
     $51 = $716;
     $15 = 0;
     while(1) {
      $717 = $15;
      $718 = $11;
      $719 = $7;
      $720 = ((($719)) + 8|0);
      $721 = HEAP32[$720>>2]|0;
      $722 = Math_imul($718, $721)|0;
      $723 = ($717|0)<($722|0);
      if (!($723)) {
       break L180;
      }
      $724 = $10;
      $725 = $15;
      $726 = (($724) + ($725<<2)|0);
      $727 = +HEAPF32[$726>>2];
      $728 = $51;
      $729 = $727 * $728;
      $52 = $729;
      $730 = $52;
      $731 = $10;
      $732 = $15;
      $733 = (($731) + ($732<<2)|0);
      HEAPF32[$733>>2] = $730;
      $734 = $15;
      $735 = (($734) + 1)|0;
      $15 = $735;
     }
    }
   } while(0);
   $736 = $9;
   $737 = ($736|0)<=(1);
   if ($737) {
    $738 = $7;
    $$sink23 = 0;$$sink25 = $738;
   } else {
    $739 = ((($18)) + 28|0);
    $740 = HEAP32[$739>>2]|0;
    $741 = HEAP32[$38>>2]|0;
    $742 = $740 ^ $741;
    $743 = $7;
    $$sink23 = $742;$$sink25 = $743;
   }
   $744 = ((($$sink25)) + 84|0);
   HEAP32[$744>>2] = $$sink23;
   $745 = $26;
   $746 = $7;
   $747 = ((($746)) + 60|0);
   HEAP32[$747>>2] = $745;
   $748 = $29;
   $749 = ($748|0)!=(0);
   if ($749) {
    $750 = $31;
    $751 = ($750|0)!=(0);
    $752 = $751 ^ 1;
    $754 = $752;
   } else {
    $754 = 0;
   }
   $753 = $754&1;
   $755 = $7;
   $756 = ((($755)) + 68|0);
   HEAP32[$756>>2] = $753;
   $757 = $17;
   $758 = ($757|0)>=(0);
   if ($758) {
    (__opus_false()|0);
   }
   $759 = $17;
   $760 = ($759|0)<(0);
   $761 = $17;
   $762 = $25;
   $763 = $760 ? $761 : $762;
   $6 = $763;
   $42 = 1;
  }
 } while(0);
 $764 = $41;
 _llvm_stackrestore(($764|0));
 $765 = $6;
 STACKTOP = sp;return ($765|0);
}
function __opus_false() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _opus_packet_get_mode($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $2 = 1002;
  } else {
   $8 = $1;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = $10 & 96;
   $12 = ($11|0)==(96);
   if ($12) {
    $2 = 1001;
    break;
   } else {
    $2 = 1000;
    break;
   }
  }
 } while(0);
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _opus_packet_get_bandwidth($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)!=(0);
 $8 = $1;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 if ($7) {
  $11 = $10 >> 5;
  $12 = $11 & 3;
  $13 = (1102 + ($12))|0;
  $2 = $13;
  $14 = $2;
  $15 = ($14|0)==(1102);
  $$ = $15 ? 1101 : $13;
  $2 = $$;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $16 = $10 & 96;
 $17 = ($16|0)==(96);
 $18 = $1;
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 if ($17) {
  $21 = $20 & 16;
  $22 = ($21|0)!=(0);
  $23 = $22 ? 1105 : 1104;
  $2 = $23;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $20 >> 5;
  $25 = $24 & 3;
  $26 = (1101 + ($25))|0;
  $2 = $26;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _opus_packet_get_nb_channels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 4;
 $6 = ($5|0)!=(0);
 $7 = $6 ? 2 : 1;
 STACKTOP = sp;return ($7|0);
}
function _ec_tell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _smooth_fade($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $18 = $13;
 $19 = (48000 / ($18|0))&-1;
 $16 = $19;
 $15 = 0;
 while(1) {
  $20 = $15;
  $21 = $11;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $14 = 0;
  while(1) {
   $23 = $14;
   $24 = $10;
   $25 = ($23|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $12;
   $27 = $14;
   $28 = $16;
   $29 = Math_imul($27, $28)|0;
   $30 = (($26) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $12;
   $33 = $14;
   $34 = $16;
   $35 = Math_imul($33, $34)|0;
   $36 = (($32) + ($35<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $31 * $37;
   $17 = $38;
   $39 = $17;
   $40 = $8;
   $41 = $14;
   $42 = $11;
   $43 = Math_imul($41, $42)|0;
   $44 = $15;
   $45 = (($43) + ($44))|0;
   $46 = (($40) + ($45<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $39 * $47;
   $49 = $17;
   $50 = 1.0 - $49;
   $51 = $7;
   $52 = $14;
   $53 = $11;
   $54 = Math_imul($52, $53)|0;
   $55 = $15;
   $56 = (($54) + ($55))|0;
   $57 = (($51) + ($56<<2)|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $50 * $58;
   $60 = $48 + $59;
   $61 = $9;
   $62 = $14;
   $63 = $11;
   $64 = Math_imul($62, $63)|0;
   $65 = $15;
   $66 = (($64) + ($65))|0;
   $67 = (($61) + ($66<<2)|0);
   HEAPF32[$67>>2] = $60;
   $68 = $14;
   $69 = (($68) + 1)|0;
   $14 = $69;
  }
  $70 = $15;
  $71 = (($70) + 1)|0;
  $15 = $71;
 }
 STACKTOP = sp;return;
}
function _opus_packet_get_nb_frames($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)<(1);
 do {
  if ($7) {
   $2 = -1;
  } else {
   $8 = $3;
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   $11 = $10 & 3;
   $5 = $11;
   $12 = $5;
   $13 = ($12|0)==(0);
   if ($13) {
    $2 = 1;
    break;
   }
   $14 = $5;
   $15 = ($14|0)!=(3);
   if ($15) {
    $2 = 2;
    break;
   }
   $16 = $4;
   $17 = ($16|0)<(2);
   if ($17) {
    $2 = -4;
    break;
   } else {
    $18 = $3;
    $19 = ((($18)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $21 & 63;
    $2 = $22;
    break;
   }
  }
 } while(0);
 $23 = $2;
 STACKTOP = sp;return ($23|0);
}
function _opus_decode_float($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $11;
 $14 = ($13|0)<=(0);
 if ($14) {
  $6 = -1;
  $22 = $6;
  STACKTOP = sp;return ($22|0);
 } else {
  $15 = $7;
  $16 = $8;
  $17 = $9;
  $18 = $10;
  $19 = $11;
  $20 = $12;
  $21 = (_opus_decode_native($15,$16,$17,$18,$19,$20,0,0,0)|0);
  $6 = $21;
  $22 = $6;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _opus_decoder_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _opus_free($2);
 STACKTOP = sp;return;
}
function _opus_encoder_get_size($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<(1);
 $8 = $2;
 $9 = ($8|0)>(2);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $10 = (_silk_Get_Encoder_Size($3)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0);
 if ($12) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  $13 = HEAP32[$3>>2]|0;
  $14 = (_align_7($13)|0);
  HEAP32[$3>>2] = $14;
  $15 = $2;
  $16 = (_celt_encoder_get_size($15)|0);
  $4 = $16;
  $17 = (_align_7(18220)|0);
  $18 = HEAP32[$3>>2]|0;
  $19 = (($17) + ($18))|0;
  $20 = $4;
  $21 = (($19) + ($20))|0;
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _align_7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 4;
 $3 = $1;
 $4 = $2;
 $5 = (($3) + ($4))|0;
 $6 = (($5) - 1)|0;
 $7 = $2;
 $8 = (($6>>>0) / ($7>>>0))&-1;
 $9 = $2;
 $10 = Math_imul($8, $9)|0;
 STACKTOP = sp;return ($10|0);
}
function _opus_encoder_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer = sp;
 $13 = sp + 12|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = ($14|0)!=(48000);
 $16 = $6;
 $17 = ($16|0)!=(24000);
 $or$cond = $15 & $17;
 $18 = $6;
 $19 = ($18|0)!=(16000);
 $or$cond3 = $or$cond & $19;
 $20 = $6;
 $21 = ($20|0)!=(12000);
 $or$cond5 = $or$cond3 & $21;
 $22 = $6;
 $23 = ($22|0)!=(8000);
 $or$cond7 = $or$cond5 & $23;
 if (!($or$cond7)) {
  $24 = $7;
  $25 = ($24|0)!=(1);
  $26 = $7;
  $27 = ($26|0)!=(2);
  $or$cond9 = $25 & $27;
  if (!($or$cond9)) {
   $28 = $8;
   $29 = ($28|0)!=(2048);
   $30 = $8;
   $31 = ($30|0)!=(2049);
   $or$cond11 = $29 & $31;
   $32 = $8;
   $33 = ($32|0)!=(2051);
   $or$cond13 = $or$cond11 & $33;
   if (!($or$cond13)) {
    $34 = $5;
    $35 = $7;
    $36 = (_opus_encoder_get_size($35)|0);
    $37 = $36;
    _memset(($34|0),0,($37|0))|0;
    $38 = (_silk_Get_Encoder_Size($13)|0);
    $12 = $38;
    $39 = $12;
    $40 = ($39|0)!=(0);
    if ($40) {
     $4 = -1;
     $201 = $4;
     STACKTOP = sp;return ($201|0);
    }
    $41 = HEAP32[$13>>2]|0;
    $42 = (_align_7($41)|0);
    HEAP32[$13>>2] = $42;
    $43 = (_align_7(18220)|0);
    $44 = $5;
    $45 = ((($44)) + 4|0);
    HEAP32[$45>>2] = $43;
    $46 = $5;
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[$13>>2]|0;
    $50 = (($48) + ($49))|0;
    $51 = $5;
    HEAP32[$51>>2] = $50;
    $52 = $5;
    $53 = $5;
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($52) + ($55)|0);
    $9 = $56;
    $57 = $5;
    $58 = $5;
    $59 = HEAP32[$58>>2]|0;
    $60 = (($57) + ($59)|0);
    $10 = $60;
    $61 = $7;
    $62 = $5;
    $63 = ((($62)) + 100|0);
    HEAP32[$63>>2] = $61;
    $64 = $5;
    $65 = ((($64)) + 14288|0);
    HEAP32[$65>>2] = $61;
    $66 = $6;
    $67 = $5;
    $68 = ((($67)) + 132|0);
    HEAP32[$68>>2] = $66;
    $69 = (_opus_select_arch_8()|0);
    $70 = $5;
    $71 = ((($70)) + 168|0);
    HEAP32[$71>>2] = $69;
    $72 = $9;
    $73 = $5;
    $74 = ((($73)) + 168|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $5;
    $77 = ((($76)) + 8|0);
    $78 = (_silk_InitEncoder($72,$75,$77)|0);
    $12 = $78;
    $79 = $12;
    $80 = ($79|0)!=(0);
    if ($80) {
     $4 = -3;
     $201 = $4;
     STACKTOP = sp;return ($201|0);
    }
    $81 = $7;
    $82 = $5;
    $83 = ((($82)) + 8|0);
    HEAP32[$83>>2] = $81;
    $84 = $7;
    $85 = $5;
    $86 = ((($85)) + 8|0);
    $87 = ((($86)) + 4|0);
    HEAP32[$87>>2] = $84;
    $88 = $5;
    $89 = ((($88)) + 132|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $5;
    $92 = ((($91)) + 8|0);
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $90;
    $94 = $5;
    $95 = ((($94)) + 8|0);
    $96 = ((($95)) + 12|0);
    HEAP32[$96>>2] = 16000;
    $97 = $5;
    $98 = ((($97)) + 8|0);
    $99 = ((($98)) + 16|0);
    HEAP32[$99>>2] = 8000;
    $100 = $5;
    $101 = ((($100)) + 8|0);
    $102 = ((($101)) + 20|0);
    HEAP32[$102>>2] = 16000;
    $103 = $5;
    $104 = ((($103)) + 8|0);
    $105 = ((($104)) + 24|0);
    HEAP32[$105>>2] = 20;
    $106 = $5;
    $107 = ((($106)) + 8|0);
    $108 = ((($107)) + 28|0);
    HEAP32[$108>>2] = 25000;
    $109 = $5;
    $110 = ((($109)) + 8|0);
    $111 = ((($110)) + 32|0);
    HEAP32[$111>>2] = 0;
    $112 = $5;
    $113 = ((($112)) + 8|0);
    $114 = ((($113)) + 36|0);
    HEAP32[$114>>2] = 9;
    $115 = $5;
    $116 = ((($115)) + 8|0);
    $117 = ((($116)) + 40|0);
    HEAP32[$117>>2] = 0;
    $118 = $5;
    $119 = ((($118)) + 8|0);
    $120 = ((($119)) + 44|0);
    HEAP32[$120>>2] = 0;
    $121 = $5;
    $122 = ((($121)) + 8|0);
    $123 = ((($122)) + 48|0);
    HEAP32[$123>>2] = 0;
    $124 = $5;
    $125 = ((($124)) + 8|0);
    $126 = ((($125)) + 64|0);
    HEAP32[$126>>2] = 0;
    $127 = $10;
    $128 = $6;
    $129 = $7;
    $130 = $5;
    $131 = ((($130)) + 168|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = (_celt_encoder_init($127,$128,$129,$132)|0);
    $11 = $133;
    $134 = $11;
    $135 = ($134|0)!=(0);
    if ($135) {
     $4 = -3;
     $201 = $4;
     STACKTOP = sp;return ($201|0);
    } else {
     $136 = $10;
     HEAP32[$vararg_buffer>>2] = 0;
     (_opus_custom_encoder_ctl($136,10016,$vararg_buffer)|0);
     $137 = $10;
     $138 = $5;
     $139 = ((($138)) + 8|0);
     $140 = ((($139)) + 36|0);
     $141 = HEAP32[$140>>2]|0;
     HEAP32[$vararg_buffer14>>2] = $141;
     (_opus_custom_encoder_ctl($137,4010,$vararg_buffer14)|0);
     $142 = $5;
     $143 = ((($142)) + 136|0);
     HEAP32[$143>>2] = 1;
     $144 = $5;
     $145 = ((($144)) + 140|0);
     HEAP32[$145>>2] = 1;
     $146 = $5;
     $147 = ((($146)) + 152|0);
     HEAP32[$147>>2] = -1000;
     $148 = $6;
     $149 = $7;
     $150 = Math_imul($148, $149)|0;
     $151 = (3000 + ($150))|0;
     $152 = $5;
     $153 = ((($152)) + 148|0);
     HEAP32[$153>>2] = $151;
     $154 = $8;
     $155 = $5;
     $156 = ((($155)) + 96|0);
     HEAP32[$156>>2] = $154;
     $157 = $5;
     $158 = ((($157)) + 112|0);
     HEAP32[$158>>2] = -1000;
     $159 = $5;
     $160 = ((($159)) + 116|0);
     HEAP32[$160>>2] = -1000;
     $161 = $5;
     $162 = ((($161)) + 120|0);
     HEAP32[$162>>2] = 1105;
     $163 = $5;
     $164 = ((($163)) + 108|0);
     HEAP32[$164>>2] = -1000;
     $165 = $5;
     $166 = ((($165)) + 124|0);
     HEAP32[$166>>2] = -1000;
     $167 = $5;
     $168 = ((($167)) + 128|0);
     HEAP32[$168>>2] = -1;
     $169 = $5;
     $170 = ((($169)) + 132|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171|0) / 100)&-1;
     $173 = $5;
     $174 = ((($173)) + 160|0);
     HEAP32[$174>>2] = $172;
     $175 = $5;
     $176 = ((($175)) + 156|0);
     HEAP32[$176>>2] = 24;
     $177 = $5;
     $178 = ((($177)) + 144|0);
     HEAP32[$178>>2] = 5000;
     $179 = $5;
     $180 = ((($179)) + 132|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = (($181|0) / 250)&-1;
     $183 = $5;
     $184 = ((($183)) + 104|0);
     HEAP32[$184>>2] = $182;
     $185 = $5;
     $186 = ((($185)) + 14292|0);
     HEAP16[$186>>1] = 16384;
     $187 = $5;
     $188 = ((($187)) + 14300|0);
     HEAPF32[$188>>2] = 1.0;
     $189 = (_silk_lin2log(60)|0);
     $190 = $189 << 8;
     $191 = $5;
     $192 = ((($191)) + 14296|0);
     HEAP32[$192>>2] = $190;
     $193 = $5;
     $194 = ((($193)) + 14344|0);
     HEAP32[$194>>2] = 1;
     $195 = $5;
     $196 = ((($195)) + 14320|0);
     HEAP32[$196>>2] = 1001;
     $197 = $5;
     $198 = ((($197)) + 14336|0);
     HEAP32[$198>>2] = 1105;
     $199 = $5;
     $200 = ((($199)) + 172|0);
     _tonality_analysis_init($200);
     $4 = 0;
     $201 = $4;
     STACKTOP = sp;return ($201|0);
    }
   }
  }
 }
 $4 = -1;
 $201 = $4;
 STACKTOP = sp;return ($201|0);
}
function _opus_select_arch_8() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _opus_encoder_create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = ($11|0)!=(48000);
 $13 = $5;
 $14 = ($13|0)!=(24000);
 $or$cond = $12 & $14;
 $15 = $5;
 $16 = ($15|0)!=(16000);
 $or$cond3 = $or$cond & $16;
 $17 = $5;
 $18 = ($17|0)!=(12000);
 $or$cond5 = $or$cond3 & $18;
 $19 = $5;
 $20 = ($19|0)!=(8000);
 $or$cond7 = $or$cond5 & $20;
 if (!($or$cond7)) {
  $21 = $6;
  $22 = ($21|0)!=(1);
  $23 = $6;
  $24 = ($23|0)!=(2);
  $or$cond9 = $22 & $24;
  if (!($or$cond9)) {
   $25 = $7;
   $26 = ($25|0)!=(2048);
   $27 = $7;
   $28 = ($27|0)!=(2049);
   $or$cond11 = $26 & $28;
   $29 = $7;
   $30 = ($29|0)!=(2051);
   $or$cond13 = $or$cond11 & $30;
   if (!($or$cond13)) {
    $34 = $6;
    $35 = (_opus_encoder_get_size($34)|0);
    $36 = (_opus_alloc_11($35)|0);
    $10 = $36;
    $37 = $10;
    $38 = ($37|0)==(0|0);
    if ($38) {
     $39 = $8;
     $40 = ($39|0)!=(0|0);
     if ($40) {
      $41 = $8;
      HEAP32[$41>>2] = -7;
     }
     $4 = 0;
     $55 = $4;
     STACKTOP = sp;return ($55|0);
    }
    $42 = $10;
    $43 = $5;
    $44 = $6;
    $45 = $7;
    $46 = (_opus_encoder_init($42,$43,$44,$45)|0);
    $9 = $46;
    $47 = $8;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $49 = $9;
     $50 = $8;
     HEAP32[$50>>2] = $49;
    }
    $51 = $9;
    $52 = ($51|0)!=(0);
    if ($52) {
     $53 = $10;
     _opus_free_12($53);
     $10 = 0;
    }
    $54 = $10;
    $4 = $54;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
   }
  }
 }
 $31 = $8;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $8;
  HEAP32[$33>>2] = -1;
 }
 $4 = 0;
 $55 = $4;
 STACKTOP = sp;return ($55|0);
}
function _opus_alloc_11($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _opus_free_12($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function _downmix_float($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $18 = $7;
 $14 = $18;
 $16 = 0;
 while(1) {
  $19 = $16;
  $20 = $9;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $14;
  $23 = $16;
  $24 = $10;
  $25 = (($23) + ($24))|0;
  $26 = $13;
  $27 = Math_imul($25, $26)|0;
  $28 = $11;
  $29 = (($27) + ($28))|0;
  $30 = (($22) + ($29<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $31 * 32768.0;
  $33 = $8;
  $34 = $16;
  $35 = (($33) + ($34<<2)|0);
  HEAPF32[$35>>2] = $32;
  $36 = $16;
  $37 = (($36) + 1)|0;
  $16 = $37;
 }
 $38 = $12;
 $39 = ($38|0)>(-1);
 L5: do {
  if ($39) {
   $16 = 0;
   while(1) {
    $40 = $16;
    $41 = $9;
    $42 = ($40|0)<($41|0);
    if (!($42)) {
     break L5;
    }
    $43 = $14;
    $44 = $16;
    $45 = $10;
    $46 = (($44) + ($45))|0;
    $47 = $13;
    $48 = Math_imul($46, $47)|0;
    $49 = $12;
    $50 = (($48) + ($49))|0;
    $51 = (($43) + ($50<<2)|0);
    $52 = +HEAPF32[$51>>2];
    $53 = $52 * 32768.0;
    $54 = $8;
    $55 = $16;
    $56 = (($54) + ($55<<2)|0);
    $57 = +HEAPF32[$56>>2];
    $58 = $57 + $53;
    HEAPF32[$56>>2] = $58;
    $59 = $16;
    $60 = (($59) + 1)|0;
    $16 = $60;
   }
  } else {
   $61 = $12;
   $62 = ($61|0)==(-2);
   if ($62) {
    $17 = 1;
    while(1) {
     $63 = $17;
     $64 = $13;
     $65 = ($63|0)<($64|0);
     if (!($65)) {
      break L5;
     }
     $16 = 0;
     while(1) {
      $66 = $16;
      $67 = $9;
      $68 = ($66|0)<($67|0);
      if (!($68)) {
       break;
      }
      $69 = $14;
      $70 = $16;
      $71 = $10;
      $72 = (($70) + ($71))|0;
      $73 = $13;
      $74 = Math_imul($72, $73)|0;
      $75 = $17;
      $76 = (($74) + ($75))|0;
      $77 = (($69) + ($76<<2)|0);
      $78 = +HEAPF32[$77>>2];
      $79 = $78 * 32768.0;
      $80 = $8;
      $81 = $16;
      $82 = (($80) + ($81<<2)|0);
      $83 = +HEAPF32[$82>>2];
      $84 = $83 + $79;
      HEAPF32[$82>>2] = $84;
      $85 = $16;
      $86 = (($85) + 1)|0;
      $16 = $86;
     }
     $87 = $17;
     $88 = (($87) + 1)|0;
     $17 = $88;
    }
   }
  }
 } while(0);
 $15 = 1.0;
 $89 = $13;
 $90 = ($89|0)==(-2);
 if ($90) {
  $91 = $13;
  $92 = (+($91|0));
  $93 = $15;
  $94 = $93 / $92;
  $15 = $94;
 } else {
  $95 = $15;
  $96 = $95 / 2.0;
  $15 = $96;
 }
 $16 = 0;
 while(1) {
  $97 = $16;
  $98 = $9;
  $99 = ($97|0)<($98|0);
  if (!($99)) {
   break;
  }
  $100 = $15;
  $101 = $8;
  $102 = $16;
  $103 = (($101) + ($102<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $104 * $100;
  HEAPF32[$103>>2] = $105;
  $106 = $16;
  $107 = (($106) + 1)|0;
  $16 = $107;
 }
 STACKTOP = sp;return;
}
function _frame_size_select($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $6;
 $10 = (($9|0) / 400)&-1;
 $11 = ($8|0)<($10|0);
 if ($11) {
  $3 = -1;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $12 = $5;
 $13 = ($12|0)==(5000);
 do {
  if ($13) {
   $14 = $4;
   $7 = $14;
  } else {
   $15 = $5;
   $16 = ($15|0)==(5010);
   if ($16) {
    $17 = $6;
    $18 = (($17|0) / 50)&-1;
    $7 = $18;
    break;
   }
   $19 = $5;
   $20 = ($19|0)>=(5001);
   $21 = $5;
   $22 = ($21|0)<=(5006);
   $or$cond = $20 & $22;
   if (!($or$cond)) {
    $3 = -1;
    $69 = $3;
    STACKTOP = sp;return ($69|0);
   }
   $23 = $6;
   $24 = ($23*3)|0;
   $25 = (($24|0) / 50)&-1;
   $26 = $6;
   $27 = (($26|0) / 400)&-1;
   $28 = $5;
   $29 = (($28) - 5001)|0;
   $30 = $27 << $29;
   $31 = ($25|0)<($30|0);
   $32 = $6;
   if ($31) {
    $33 = ($32*3)|0;
    $34 = (($33|0) / 50)&-1;
    $39 = $34;
   } else {
    $35 = (($32|0) / 400)&-1;
    $36 = $5;
    $37 = (($36) - 5001)|0;
    $38 = $35 << $37;
    $39 = $38;
   }
   $7 = $39;
  }
 } while(0);
 $40 = $7;
 $41 = $4;
 $42 = ($40|0)>($41|0);
 if ($42) {
  $3 = -1;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $43 = $7;
 $44 = ($43*400)|0;
 $45 = $6;
 $46 = ($44|0)!=($45|0);
 if ($46) {
  $47 = $7;
  $48 = ($47*200)|0;
  $49 = $6;
  $50 = ($48|0)!=($49|0);
  if ($50) {
   $51 = $7;
   $52 = ($51*100)|0;
   $53 = $6;
   $54 = ($52|0)!=($53|0);
   if ($54) {
    $55 = $7;
    $56 = ($55*50)|0;
    $57 = $6;
    $58 = ($56|0)!=($57|0);
    if ($58) {
     $59 = $7;
     $60 = ($59*25)|0;
     $61 = $6;
     $62 = ($60|0)!=($61|0);
     if ($62) {
      $63 = $7;
      $64 = ($63*50)|0;
      $65 = $6;
      $66 = ($65*3)|0;
      $67 = ($64|0)!=($66|0);
      if ($67) {
       $3 = -1;
       $69 = $3;
       STACKTOP = sp;return ($69|0);
      }
     }
    }
   }
  }
 }
 $68 = $7;
 $3 = $68;
 $69 = $3;
 STACKTOP = sp;return ($69|0);
}
function _compute_frame_size($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $20 = $12;
 $21 = ($20|0)==(5010);
 if ($21) {
  $22 = $11;
  $23 = $14;
  $24 = (($23|0) / 200)&-1;
  $25 = ($22|0)>=($24|0);
  if ($25) {
   $19 = 3;
   $26 = $10;
   $27 = $11;
   $28 = $13;
   $29 = $14;
   $30 = $15;
   $31 = $18;
   $32 = $16;
   $33 = $17;
   $34 = (_optimize_framesize($26,$27,$28,$29,$30,0.0,$31,$32,$33)|0);
   $19 = $34;
   while(1) {
    $35 = $14;
    $36 = (($35|0) / 400)&-1;
    $37 = $19;
    $38 = $36 << $37;
    $39 = $11;
    $40 = ($38|0)>($39|0);
    if (!($40)) {
     break;
    }
    $41 = $19;
    $42 = (($41) + -1)|0;
    $19 = $42;
   }
   $43 = $14;
   $44 = (($43|0) / 400)&-1;
   $45 = $19;
   $46 = $44 << $45;
   $11 = $46;
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $47 = $11;
  $48 = $12;
  $49 = $14;
  $50 = (_frame_size_select($47,$48,$49)|0);
  $11 = $50;
 }
 $51 = $11;
 $52 = ($51|0)<(0);
 if ($52) {
  $9 = -1;
  $54 = $9;
  STACKTOP = sp;return ($54|0);
 } else {
  $53 = $11;
  $9 = $53;
  $54 = $9;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _optimize_framesize($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $20 = sp + 144|0;
 $21 = sp + 36|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $23 = 0;
 $31 = $12;
 $32 = (($31|0) / 400)&-1;
 $24 = $32;
 $33 = $24;
 $34 = (_llvm_stacksave()|0);
 $27 = $34;
 $$alloca_mul = $33<<2;
 $35 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $36 = $15;
 $37 = +HEAPF32[$36>>2];
 HEAPF32[$20>>2] = $37;
 $38 = $15;
 $39 = +HEAPF32[$38>>2];
 $40 = 1.0000000036274937E-15 + $39;
 $41 = 1.0 / $40;
 HEAPF32[$21>>2] = $41;
 $42 = $16;
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $24;
  $45 = $44<<1;
  $46 = $16;
  $47 = (($45) - ($46))|0;
  $26 = $47;
  $48 = $26;
  $49 = $10;
  $50 = (($49) - ($48))|0;
  $10 = $50;
  $51 = $15;
  $52 = ((($51)) + 4|0);
  $53 = +HEAPF32[$52>>2];
  $54 = ((($20)) + 4|0);
  HEAPF32[$54>>2] = $53;
  $55 = $15;
  $56 = ((($55)) + 4|0);
  $57 = +HEAPF32[$56>>2];
  $58 = 1.0000000036274937E-15 + $57;
  $59 = 1.0 / $58;
  $60 = ((($21)) + 4|0);
  HEAPF32[$60>>2] = $59;
  $61 = $15;
  $62 = ((($61)) + 8|0);
  $63 = +HEAPF32[$62>>2];
  $64 = ((($20)) + 8|0);
  HEAPF32[$64>>2] = $63;
  $65 = $15;
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF32[$66>>2];
  $68 = 1.0000000036274937E-15 + $67;
  $69 = 1.0 / $68;
  $70 = ((($21)) + 8|0);
  HEAPF32[$70>>2] = $69;
  $25 = 3;
 } else {
  $25 = 1;
  $26 = 0;
 }
 $71 = $10;
 $72 = $24;
 $73 = (($71|0) / ($72|0))&-1;
 $74 = ($73|0)<(24);
 if ($74) {
  $75 = $10;
  $76 = $24;
  $77 = (($75|0) / ($76|0))&-1;
  $78 = $77;
 } else {
  $78 = 24;
 }
 $18 = $78;
 $22 = 0.0;
 $19 = 0;
 while(1) {
  $79 = $19;
  $80 = $18;
  $81 = ($79|0)<($80|0);
  if (!($81)) {
   break;
  }
  $28 = 1.0000000036274937E-15;
  $82 = $17;
  $83 = $9;
  $84 = $24;
  $85 = $19;
  $86 = $24;
  $87 = Math_imul($85, $86)|0;
  $88 = $26;
  $89 = (($87) + ($88))|0;
  $90 = $11;
  FUNCTION_TABLE_viiiiiii[$82 & 31]($83,$35,$84,$89,0,-2,$90);
  $91 = $19;
  $92 = ($91|0)==(0);
  if ($92) {
   $93 = +HEAPF32[$35>>2];
   $22 = $93;
  }
  $30 = 0;
  while(1) {
   $94 = $30;
   $95 = $24;
   $96 = ($94|0)<($95|0);
   if (!($96)) {
    break;
   }
   $97 = $30;
   $98 = (($35) + ($97<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $29 = $99;
   $100 = $29;
   $101 = $22;
   $102 = $100 - $101;
   $103 = $29;
   $104 = $22;
   $105 = $103 - $104;
   $106 = $102 * $105;
   $107 = $28;
   $108 = $107 + $106;
   $28 = $108;
   $109 = $29;
   $22 = $109;
   $110 = $30;
   $111 = (($110) + 1)|0;
   $30 = $111;
  }
  $112 = $28;
  $113 = $19;
  $114 = $25;
  $115 = (($113) + ($114))|0;
  $116 = (($20) + ($115<<2)|0);
  HEAPF32[$116>>2] = $112;
  $117 = $28;
  $118 = 1.0 / $117;
  $119 = $19;
  $120 = $25;
  $121 = (($119) + ($120))|0;
  $122 = (($21) + ($121<<2)|0);
  HEAPF32[$122>>2] = $118;
  $123 = $19;
  $124 = (($123) + 1)|0;
  $19 = $124;
 }
 $125 = $19;
 $126 = $25;
 $127 = (($125) + ($126))|0;
 $128 = (($127) - 1)|0;
 $129 = (($20) + ($128<<2)|0);
 $130 = +HEAPF32[$129>>2];
 $131 = $19;
 $132 = $25;
 $133 = (($131) + ($132))|0;
 $134 = (($20) + ($133<<2)|0);
 HEAPF32[$134>>2] = $130;
 $135 = $16;
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $18;
  $138 = (($137) + 2)|0;
  $139 = (24)<($138|0);
  $140 = $18;
  $141 = (($140) + 2)|0;
  $142 = $139 ? 24 : $141;
  $18 = $142;
 }
 $143 = $18;
 $144 = $14;
 $145 = 0.5 * $144;
 $146 = 1.0 + $145;
 $147 = $11;
 $148 = ($147*60)|0;
 $149 = (($148) + 40)|0;
 $150 = (+($149|0));
 $151 = $146 * $150;
 $152 = (~~(($151)));
 $153 = $13;
 $154 = (($153|0) / 400)&-1;
 $155 = (_transient_viterbi($20,$21,$143,$152,$154)|0);
 $23 = $155;
 $156 = $23;
 $157 = 1 << $156;
 $158 = (($20) + ($157<<2)|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $15;
 HEAPF32[$160>>2] = $159;
 $161 = $16;
 $162 = ($161|0)!=(0);
 if (!($162)) {
  $177 = $23;
  $178 = $27;
  _llvm_stackrestore(($178|0));
  STACKTOP = sp;return ($177|0);
 }
 $163 = $23;
 $164 = 1 << $163;
 $165 = (($164) + 1)|0;
 $166 = (($20) + ($165<<2)|0);
 $167 = +HEAPF32[$166>>2];
 $168 = $15;
 $169 = ((($168)) + 4|0);
 HEAPF32[$169>>2] = $167;
 $170 = $23;
 $171 = 1 << $170;
 $172 = (($171) + 2)|0;
 $173 = (($20) + ($172<<2)|0);
 $174 = +HEAPF32[$173>>2];
 $175 = $15;
 $176 = ((($175)) + 8|0);
 HEAPF32[$176>>2] = $174;
 $177 = $23;
 $178 = $27;
 _llvm_stackrestore(($178|0));
 STACKTOP = sp;return ($177|0);
}
function _transient_viterbi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink3 = 0.0, $$sink4 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0.0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3136|0);
 $11 = sp + 1568|0;
 $12 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $21 = $9;
 $22 = ($21|0)<(80);
 do {
  if ($22) {
   $15 = 0.0;
  } else {
   $23 = $9;
   $24 = ($23|0)>(160);
   if ($24) {
    $15 = 1.0;
    break;
   } else {
    $25 = $9;
    $26 = (+($25|0));
    $27 = $26 - 80.0;
    $28 = $27 / 80.0;
    $15 = $28;
    break;
   }
  }
 } while(0);
 $10 = 0;
 while(1) {
  $29 = $10;
  $30 = ($29|0)<(16);
  if (!($30)) {
   break;
  }
  $31 = $10;
  $32 = (($12) + ($31<<2)|0);
  HEAP32[$32>>2] = -1;
  $33 = $10;
  $34 = (($11) + ($33<<2)|0);
  HEAPF32[$34>>2] = 1.0E+10;
  $35 = $10;
  $36 = (($35) + 1)|0;
  $10 = $36;
 }
 $10 = 0;
 while(1) {
  $37 = $10;
  $38 = ($37|0)<(4);
  if (!($38)) {
   break;
  }
  $39 = $8;
  $40 = $9;
  $41 = $10;
  $42 = 1 << $41;
  $43 = Math_imul($40, $42)|0;
  $44 = (($39) + ($43))|0;
  $45 = (+($44|0));
  $46 = $15;
  $47 = $5;
  $48 = $6;
  $49 = $10;
  $50 = $7;
  $51 = (($50) + 1)|0;
  $52 = (+_transient_boost($47,$48,$49,$51));
  $53 = $46 * $52;
  $54 = 1.0 + $53;
  $55 = $45 * $54;
  $56 = $10;
  $57 = 1 << $56;
  $58 = (($11) + ($57<<2)|0);
  HEAPF32[$58>>2] = $55;
  $59 = $10;
  $60 = $10;
  $61 = 1 << $60;
  $62 = (($12) + ($61<<2)|0);
  HEAP32[$62>>2] = $59;
  $63 = $10;
  $64 = (($63) + 1)|0;
  $10 = $64;
 }
 $10 = 1;
 while(1) {
  $65 = $10;
  $66 = $7;
  $67 = ($65|0)<($66|0);
  if (!($67)) {
   break;
  }
  $16 = 2;
  while(1) {
   $68 = $16;
   $69 = ($68|0)<(16);
   if (!($69)) {
    break;
   }
   $70 = $10;
   $71 = (($70) - 1)|0;
   $72 = (($11) + ($71<<6)|0);
   $73 = $16;
   $74 = (($73) - 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = +HEAPF32[$75>>2];
   $77 = $10;
   $78 = (($11) + ($77<<6)|0);
   $79 = $16;
   $80 = (($78) + ($79<<2)|0);
   HEAPF32[$80>>2] = $76;
   $81 = $16;
   $82 = (($81) - 1)|0;
   $83 = $10;
   $84 = (($12) + ($83<<6)|0);
   $85 = $16;
   $86 = (($84) + ($85<<2)|0);
   HEAP32[$86>>2] = $82;
   $87 = $16;
   $88 = (($87) + 1)|0;
   $16 = $88;
  }
  $16 = 0;
  while(1) {
   $89 = $16;
   $90 = ($89|0)<(4);
   $91 = $10;
   if (!($90)) {
    break;
   }
   $92 = (($12) + ($91<<6)|0);
   $93 = $16;
   $94 = 1 << $93;
   $95 = (($92) + ($94<<2)|0);
   HEAP32[$95>>2] = 1;
   $96 = $10;
   $97 = (($96) - 1)|0;
   $98 = (($11) + ($97<<6)|0);
   $99 = ((($98)) + 4|0);
   $100 = +HEAPF32[$99>>2];
   $18 = $100;
   $17 = 1;
   while(1) {
    $101 = $17;
    $102 = ($101|0)<(4);
    if (!($102)) {
     break;
    }
    $103 = $10;
    $104 = (($103) - 1)|0;
    $105 = (($11) + ($104<<6)|0);
    $106 = $17;
    $107 = (($106) + 1)|0;
    $108 = 1 << $107;
    $109 = (($108) - 1)|0;
    $110 = (($105) + ($109<<2)|0);
    $111 = +HEAPF32[$110>>2];
    $20 = $111;
    $112 = $20;
    $113 = $18;
    $114 = $112 < $113;
    if ($114) {
     $115 = $17;
     $116 = (($115) + 1)|0;
     $117 = 1 << $116;
     $118 = (($117) - 1)|0;
     $119 = $10;
     $120 = (($12) + ($119<<6)|0);
     $121 = $16;
     $122 = 1 << $121;
     $123 = (($120) + ($122<<2)|0);
     HEAP32[$123>>2] = $118;
     $124 = $20;
     $18 = $124;
    }
    $125 = $17;
    $126 = (($125) + 1)|0;
    $17 = $126;
   }
   $127 = $8;
   $128 = $9;
   $129 = $16;
   $130 = 1 << $129;
   $131 = Math_imul($128, $130)|0;
   $132 = (($127) + ($131))|0;
   $133 = (+($132|0));
   $134 = $15;
   $135 = $5;
   $136 = $10;
   $137 = (($135) + ($136<<2)|0);
   $138 = $6;
   $139 = $10;
   $140 = (($138) + ($139<<2)|0);
   $141 = $16;
   $142 = $7;
   $143 = $10;
   $144 = (($142) - ($143))|0;
   $145 = (($144) + 1)|0;
   $146 = (+_transient_boost($137,$140,$141,$145));
   $147 = $134 * $146;
   $148 = 1.0 + $147;
   $149 = $133 * $148;
   $19 = $149;
   $150 = $18;
   $151 = $10;
   $152 = (($11) + ($151<<6)|0);
   $153 = $16;
   $154 = 1 << $153;
   $155 = (($152) + ($154<<2)|0);
   HEAPF32[$155>>2] = $150;
   $156 = $7;
   $157 = $10;
   $158 = (($156) - ($157))|0;
   $159 = $16;
   $160 = 1 << $159;
   $161 = ($158|0)<($160|0);
   $162 = $19;
   if ($161) {
    $163 = $7;
    $164 = $10;
    $165 = (($163) - ($164))|0;
    $166 = (+($165|0));
    $167 = $162 * $166;
    $168 = $16;
    $169 = 1 << $168;
    $170 = (+($169|0));
    $171 = $167 / $170;
    $172 = $10;
    $173 = (($11) + ($172<<6)|0);
    $174 = $16;
    $$sink = $174;$$sink3 = $171;$$sink4 = $173;
   } else {
    $175 = $10;
    $176 = (($11) + ($175<<6)|0);
    $177 = $16;
    $$sink = $177;$$sink3 = $162;$$sink4 = $176;
   }
   $178 = 1 << $$sink;
   $179 = (($$sink4) + ($178<<2)|0);
   $180 = +HEAPF32[$179>>2];
   $181 = $180 + $$sink3;
   HEAPF32[$179>>2] = $181;
   $182 = $16;
   $183 = (($182) + 1)|0;
   $16 = $183;
  }
  $184 = (($91) + 1)|0;
  $10 = $184;
 }
 $14 = 1;
 $185 = $7;
 $186 = (($185) - 1)|0;
 $187 = (($11) + ($186<<6)|0);
 $188 = ((($187)) + 4|0);
 $189 = +HEAPF32[$188>>2];
 $13 = $189;
 $10 = 2;
 while(1) {
  $190 = $10;
  $191 = ($190|0)<(16);
  $192 = $7;
  $193 = (($192) - 1)|0;
  if (!($191)) {
   break;
  }
  $194 = (($11) + ($193<<6)|0);
  $195 = $10;
  $196 = (($194) + ($195<<2)|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $13;
  $199 = $197 < $198;
  if ($199) {
   $200 = $7;
   $201 = (($200) - 1)|0;
   $202 = (($11) + ($201<<6)|0);
   $203 = $10;
   $204 = (($202) + ($203<<2)|0);
   $205 = +HEAPF32[$204>>2];
   $13 = $205;
   $206 = $10;
   $14 = $206;
  }
  $207 = $10;
  $208 = (($207) + 1)|0;
  $10 = $208;
 }
 $10 = $193;
 while(1) {
  $209 = $10;
  $210 = ($209|0)>=(0);
  if (!($210)) {
   break;
  }
  $211 = $10;
  $212 = (($12) + ($211<<6)|0);
  $213 = $14;
  $214 = (($212) + ($213<<2)|0);
  $215 = HEAP32[$214>>2]|0;
  $14 = $215;
  $216 = $10;
  $217 = (($216) + -1)|0;
  $10 = $217;
 }
 $218 = $14;
 STACKTOP = sp;return ($218|0);
}
function _transient_boost($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 0.0;
 $11 = 0.0;
 $13 = $7;
 $14 = $6;
 $15 = 1 << $14;
 $16 = (($15) + 1)|0;
 $17 = ($13|0)<($16|0);
 if ($17) {
  $18 = $7;
  $22 = $18;
 } else {
  $19 = $6;
  $20 = 1 << $19;
  $21 = (($20) + 1)|0;
  $22 = $21;
 }
 $9 = $22;
 $8 = 0;
 while(1) {
  $23 = $8;
  $24 = $9;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $4;
  $27 = $8;
  $28 = (($26) + ($27<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $10;
  $31 = $30 + $29;
  $10 = $31;
  $32 = $5;
  $33 = $8;
  $34 = (($32) + ($33<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $11;
  $37 = $36 + $35;
  $11 = $37;
  $38 = $8;
  $39 = (($38) + 1)|0;
  $8 = $39;
 }
 $40 = $10;
 $41 = $11;
 $42 = $40 * $41;
 $43 = $9;
 $44 = $9;
 $45 = Math_imul($43, $44)|0;
 $46 = (+($45|0));
 $47 = $42 / $46;
 $12 = $47;
 $48 = $12;
 $49 = $48 - 2.0;
 $50 = 0.05000000074505806 * $49;
 $51 = 0.0 > $50;
 if ($51) {
  $56 = 0.0;
 } else {
  $52 = $12;
  $53 = $52 - 2.0;
  $54 = 0.05000000074505806 * $53;
  $56 = $54;
 }
 $55 = $56;
 $57 = (+Math_sqrt((+$55)));
 $58 = $57;
 $59 = 1.0 < $58;
 if ($59) {
  $71 = 1.0;
  STACKTOP = sp;return (+$71);
 }
 $60 = $12;
 $61 = $60 - 2.0;
 $62 = 0.05000000074505806 * $61;
 $63 = 0.0 > $62;
 if ($63) {
  $68 = 0.0;
 } else {
  $64 = $12;
  $65 = $64 - 2.0;
  $66 = 0.05000000074505806 * $65;
  $68 = $66;
 }
 $67 = $68;
 $69 = (+Math_sqrt((+$67)));
 $70 = $69;
 $71 = $70;
 STACKTOP = sp;return (+$71);
}
function _compute_stereo_width($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0;
 var $208 = 0.0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0;
 var $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0;
 var $299 = 0.0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0;
 var $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $26 = $6;
 $27 = $5;
 $28 = (($26|0) / ($27|0))&-1;
 $18 = $28;
 $29 = $18;
 $30 = (50)>($29|0);
 $31 = $18;
 $32 = $30 ? 50 : $31;
 $33 = (+($32|0));
 $34 = 25.0 / $33;
 $35 = 1.0 - $34;
 $20 = $35;
 $13 = 0.0;
 $12 = 0.0;
 $11 = 0.0;
 $19 = 0;
 while(1) {
  $36 = $19;
  $37 = $5;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $21 = 0.0;
  $22 = 0.0;
  $23 = 0.0;
  $39 = $4;
  $40 = $19;
  $41 = $40<<1;
  $42 = (($39) + ($41<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $24 = $43;
  $44 = $4;
  $45 = $19;
  $46 = $45<<1;
  $47 = (($46) + 1)|0;
  $48 = (($44) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $25 = $49;
  $50 = $24;
  $51 = $24;
  $52 = $50 * $51;
  $21 = $52;
  $53 = $24;
  $54 = $25;
  $55 = $53 * $54;
  $22 = $55;
  $56 = $25;
  $57 = $25;
  $58 = $56 * $57;
  $23 = $58;
  $59 = $4;
  $60 = $19;
  $61 = $60<<1;
  $62 = (($61) + 2)|0;
  $63 = (($59) + ($62<<2)|0);
  $64 = +HEAPF32[$63>>2];
  $24 = $64;
  $65 = $4;
  $66 = $19;
  $67 = $66<<1;
  $68 = (($67) + 3)|0;
  $69 = (($65) + ($68<<2)|0);
  $70 = +HEAPF32[$69>>2];
  $25 = $70;
  $71 = $24;
  $72 = $24;
  $73 = $71 * $72;
  $74 = $21;
  $75 = $74 + $73;
  $21 = $75;
  $76 = $24;
  $77 = $25;
  $78 = $76 * $77;
  $79 = $22;
  $80 = $79 + $78;
  $22 = $80;
  $81 = $25;
  $82 = $25;
  $83 = $81 * $82;
  $84 = $23;
  $85 = $84 + $83;
  $23 = $85;
  $86 = $4;
  $87 = $19;
  $88 = $87<<1;
  $89 = (($88) + 4)|0;
  $90 = (($86) + ($89<<2)|0);
  $91 = +HEAPF32[$90>>2];
  $24 = $91;
  $92 = $4;
  $93 = $19;
  $94 = $93<<1;
  $95 = (($94) + 5)|0;
  $96 = (($92) + ($95<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $25 = $97;
  $98 = $24;
  $99 = $24;
  $100 = $98 * $99;
  $101 = $21;
  $102 = $101 + $100;
  $21 = $102;
  $103 = $24;
  $104 = $25;
  $105 = $103 * $104;
  $106 = $22;
  $107 = $106 + $105;
  $22 = $107;
  $108 = $25;
  $109 = $25;
  $110 = $108 * $109;
  $111 = $23;
  $112 = $111 + $110;
  $23 = $112;
  $113 = $4;
  $114 = $19;
  $115 = $114<<1;
  $116 = (($115) + 6)|0;
  $117 = (($113) + ($116<<2)|0);
  $118 = +HEAPF32[$117>>2];
  $24 = $118;
  $119 = $4;
  $120 = $19;
  $121 = $120<<1;
  $122 = (($121) + 7)|0;
  $123 = (($119) + ($122<<2)|0);
  $124 = +HEAPF32[$123>>2];
  $25 = $124;
  $125 = $24;
  $126 = $24;
  $127 = $125 * $126;
  $128 = $21;
  $129 = $128 + $127;
  $21 = $129;
  $130 = $24;
  $131 = $25;
  $132 = $130 * $131;
  $133 = $22;
  $134 = $133 + $132;
  $22 = $134;
  $135 = $25;
  $136 = $25;
  $137 = $135 * $136;
  $138 = $23;
  $139 = $138 + $137;
  $23 = $139;
  $140 = $21;
  $141 = $11;
  $142 = $141 + $140;
  $11 = $142;
  $143 = $22;
  $144 = $12;
  $145 = $144 + $143;
  $12 = $145;
  $146 = $23;
  $147 = $13;
  $148 = $147 + $146;
  $13 = $148;
  $149 = $19;
  $150 = (($149) + 4)|0;
  $19 = $150;
 }
 $151 = $20;
 $152 = $11;
 $153 = $7;
 $154 = +HEAPF32[$153>>2];
 $155 = $152 - $154;
 $156 = $151 * $155;
 $157 = $7;
 $158 = +HEAPF32[$157>>2];
 $159 = $158 + $156;
 HEAPF32[$157>>2] = $159;
 $160 = $20;
 $161 = $12;
 $162 = $7;
 $163 = ((($162)) + 4|0);
 $164 = +HEAPF32[$163>>2];
 $165 = $161 - $164;
 $166 = $160 * $165;
 $167 = $7;
 $168 = ((($167)) + 4|0);
 $169 = +HEAPF32[$168>>2];
 $170 = $169 + $166;
 HEAPF32[$168>>2] = $170;
 $171 = $20;
 $172 = $13;
 $173 = $7;
 $174 = ((($173)) + 8|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $172 - $175;
 $177 = $171 * $176;
 $178 = $7;
 $179 = ((($178)) + 8|0);
 $180 = +HEAPF32[$179>>2];
 $181 = $180 + $177;
 HEAPF32[$179>>2] = $181;
 $182 = $7;
 $183 = +HEAPF32[$182>>2];
 $184 = 0.0 > $183;
 if ($184) {
  $188 = 0.0;
 } else {
  $185 = $7;
  $186 = +HEAPF32[$185>>2];
  $188 = $186;
 }
 $187 = $7;
 HEAPF32[$187>>2] = $188;
 $189 = $7;
 $190 = ((($189)) + 4|0);
 $191 = +HEAPF32[$190>>2];
 $192 = 0.0 > $191;
 if ($192) {
  $198 = 0.0;
 } else {
  $193 = $7;
  $194 = ((($193)) + 4|0);
  $195 = +HEAPF32[$194>>2];
  $198 = $195;
 }
 $196 = $7;
 $197 = ((($196)) + 4|0);
 HEAPF32[$197>>2] = $198;
 $199 = $7;
 $200 = ((($199)) + 8|0);
 $201 = +HEAPF32[$200>>2];
 $202 = 0.0 > $201;
 if ($202) {
  $208 = 0.0;
 } else {
  $203 = $7;
  $204 = ((($203)) + 8|0);
  $205 = +HEAPF32[$204>>2];
  $208 = $205;
 }
 $206 = $7;
 $207 = ((($206)) + 8|0);
 HEAPF32[$207>>2] = $208;
 $209 = $7;
 $210 = +HEAPF32[$209>>2];
 $211 = $7;
 $212 = ((($211)) + 8|0);
 $213 = +HEAPF32[$212>>2];
 $214 = $210 > $213;
 $215 = $7;
 $216 = ((($215)) + 8|0);
 $$sink = $214 ? $215 : $216;
 $217 = +HEAPF32[$$sink>>2];
 $218 = $217 > 7.9999997979030013E-4;
 if ($218) {
  $219 = $7;
  $220 = +HEAPF32[$219>>2];
  $221 = $220;
  $222 = (+Math_sqrt((+$221)));
  $223 = $222;
  $14 = $223;
  $224 = $7;
  $225 = ((($224)) + 8|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $226;
  $228 = (+Math_sqrt((+$227)));
  $229 = $228;
  $15 = $229;
  $230 = $14;
  $231 = $230;
  $232 = (+Math_sqrt((+$231)));
  $233 = $232;
  $16 = $233;
  $234 = $15;
  $235 = $234;
  $236 = (+Math_sqrt((+$235)));
  $237 = $236;
  $17 = $237;
  $238 = $7;
  $239 = ((($238)) + 4|0);
  $240 = +HEAPF32[$239>>2];
  $241 = $14;
  $242 = $15;
  $243 = $241 * $242;
  $244 = $240 < $243;
  if ($244) {
   $245 = $7;
   $246 = ((($245)) + 4|0);
   $247 = +HEAPF32[$246>>2];
   $253 = $247;
  } else {
   $248 = $14;
   $249 = $15;
   $250 = $248 * $249;
   $253 = $250;
  }
  $251 = $7;
  $252 = ((($251)) + 4|0);
  HEAPF32[$252>>2] = $253;
  $254 = $7;
  $255 = ((($254)) + 4|0);
  $256 = +HEAPF32[$255>>2];
  $257 = $14;
  $258 = $15;
  $259 = $257 * $258;
  $260 = 1.0000000036274937E-15 + $259;
  $261 = $256 / $260;
  $8 = $261;
  $262 = $16;
  $263 = $17;
  $264 = $262 - $263;
  $265 = $264;
  $266 = (+Math_abs((+$265)));
  $267 = $266;
  $268 = 1.0 * $267;
  $269 = $16;
  $270 = 1.0000000036274937E-15 + $269;
  $271 = $17;
  $272 = $270 + $271;
  $273 = $268 / $272;
  $9 = $273;
  $274 = $8;
  $275 = $8;
  $276 = $274 * $275;
  $277 = 1.0 - $276;
  $278 = $277;
  $279 = (+Math_sqrt((+$278)));
  $280 = $279;
  $281 = $9;
  $282 = $280 * $281;
  $10 = $282;
  $283 = $10;
  $284 = $7;
  $285 = ((($284)) + 12|0);
  $286 = +HEAPF32[$285>>2];
  $287 = $283 - $286;
  $288 = $18;
  $289 = (+($288|0));
  $290 = $287 / $289;
  $291 = $7;
  $292 = ((($291)) + 12|0);
  $293 = +HEAPF32[$292>>2];
  $294 = $293 + $290;
  HEAPF32[$292>>2] = $294;
  $295 = $7;
  $296 = ((($295)) + 16|0);
  $297 = +HEAPF32[$296>>2];
  $298 = $18;
  $299 = (+($298|0));
  $300 = 0.019999999552965164 / $299;
  $301 = $297 - $300;
  $302 = $7;
  $303 = ((($302)) + 12|0);
  $304 = +HEAPF32[$303>>2];
  $305 = $301 > $304;
  $306 = $7;
  if ($305) {
   $307 = ((($306)) + 16|0);
   $308 = +HEAPF32[$307>>2];
   $309 = $18;
   $310 = (+($309|0));
   $311 = 0.019999999552965164 / $310;
   $312 = $308 - $311;
   $317 = $312;
  } else {
   $313 = ((($306)) + 12|0);
   $314 = +HEAPF32[$313>>2];
   $317 = $314;
  }
  $315 = $7;
  $316 = ((($315)) + 16|0);
  HEAPF32[$316>>2] = $317;
 } else {
  $10 = 0.0;
  $8 = 1.0;
  $9 = 0.0;
 }
 $318 = $7;
 $319 = ((($318)) + 16|0);
 $320 = +HEAPF32[$319>>2];
 $321 = 20.0 * $320;
 $322 = 1.0 < $321;
 if ($322) {
  $327 = 1.0;
  STACKTOP = sp;return (+$327);
 }
 $323 = $7;
 $324 = ((($323)) + 16|0);
 $325 = +HEAPF32[$324>>2];
 $326 = 20.0 * $325;
 $327 = $326;
 STACKTOP = sp;return (+$327);
}
function _opus_encode_native($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$alloca_mul = 0, $$alloca_mul215 = 0, $$alloca_mul217 = 0, $$alloca_mul219 = 0, $$old = 0, $$old51 = 0, $$sink = 0, $$sink12$sink = 0, $$sink14$sink = 0, $$sink17 = 0, $$sink25 = 0, $$sink30 = 0, $$sink32 = 0, $$sink33 = 0, $$sink40 = 0, $$sink42 = 0, $$sink48 = 0, $$sink50 = 0, $$sink6$sink = 0, $$sink8$sink = 0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0.0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0.0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0.0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0;
 var $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0;
 var $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0;
 var $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0;
 var $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0;
 var $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0;
 var $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0;
 var $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0;
 var $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0;
 var $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0;
 var $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0;
 var $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0;
 var $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0;
 var $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0;
 var $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0;
 var $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0.0, $1397 = 0.0, $1398 = 0;
 var $1399 = 0.0, $14 = 0, $140 = 0, $1400 = 0.0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0;
 var $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0;
 var $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0;
 var $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0;
 var $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0;
 var $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0;
 var $1506 = 0.0, $1507 = 0, $1508 = 0.0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0.0, $1515 = 0.0, $1516 = 0.0, $1517 = 0.0, $1518 = 0, $1519 = 0.0, $152 = 0, $1520 = 0.0, $1521 = 0.0, $1522 = 0, $1523 = 0;
 var $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0;
 var $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0;
 var $1560 = 0, $1561 = 0, $1562 = 0.0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0.0, $1573 = 0, $1574 = 0.0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0;
 var $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0.0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0.0, $1594 = 0.0, $1595 = 0.0, $1596 = 0;
 var $1597 = 0.0, $1598 = 0.0, $1599 = 0.0, $16 = 0, $160 = 0, $1600 = 0.0, $1601 = 0.0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0.0, $1607 = 0, $1608 = 0.0, $1609 = 0.0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0.0;
 var $1614 = 0.0, $1615 = 0.0, $1616 = 0.0, $1617 = 0, $1618 = 0.0, $1619 = 0.0, $162 = 0, $1620 = 0.0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0;
 var $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0;
 var $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0;
 var $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0;
 var $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0;
 var $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0;
 var $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0;
 var $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0;
 var $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0;
 var $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0;
 var $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0;
 var $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0;
 var $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0;
 var $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0;
 var $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0;
 var $1885 = 0, $1886 = 0.0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0;
 var $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0.0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0;
 var $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0;
 var $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0;
 var $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0;
 var $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0;
 var $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0.0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0;
 var $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0;
 var $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0;
 var $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0;
 var $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0.0, $2069 = 0, $207 = 0, $2070 = 0.0, $2071 = 0.0, $2072 = 0.0, $2073 = 0.0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0;
 var $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0;
 var $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0;
 var $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0;
 var $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0;
 var $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0;
 var $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0;
 var $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0;
 var $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0;
 var $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0;
 var $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0;
 var $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0;
 var $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0.0, $2299 = 0;
 var $23 = 0, $230 = 0, $2300 = 0.0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0.0, $2305 = 0.0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0;
 var $2317 = 0, $2318 = 0, $2319 = 0.0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0;
 var $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0;
 var $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0.0;
 var $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0.0, $2376 = 0.0, $2377 = 0.0, $2378 = 0.0, $2379 = 0.0, $238 = 0, $2380 = 0.0, $2381 = 0.0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0;
 var $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0;
 var $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0;
 var $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0.0, $2440 = 0, $2441 = 0, $2442 = 0;
 var $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0.0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0.0, $2460 = 0;
 var $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0.0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0;
 var $248 = 0.0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0.0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0;
 var $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0;
 var $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0;
 var $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0;
 var $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0;
 var $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0;
 var $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0;
 var $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0;
 var $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0;
 var $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0;
 var $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0;
 var $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0;
 var $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0.0, $512 = 0.0, $513 = 0.0;
 var $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0.0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0.0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0.0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0.0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $or$cond = 0, $or$cond11 = 0, $or$cond16 = 0, $or$cond19 = 0, $or$cond21 = 0;
 var $or$cond3 = 0, $or$cond35 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond44 = 0, $or$cond44$not = 0, $or$cond5 = 0, $or$cond52 = 0, $vararg_buffer = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer110 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0;
 var $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer110 = sp + 168|0;
 $vararg_buffer107 = sp + 160|0;
 $vararg_buffer104 = sp + 152|0;
 $vararg_buffer102 = sp + 144|0;
 $vararg_buffer99 = sp + 136|0;
 $vararg_buffer97 = sp + 128|0;
 $vararg_buffer94 = sp + 120|0;
 $vararg_buffer92 = sp + 112|0;
 $vararg_buffer89 = sp + 104|0;
 $vararg_buffer86 = sp + 96|0;
 $vararg_buffer83 = sp + 88|0;
 $vararg_buffer80 = sp + 80|0;
 $vararg_buffer77 = sp + 72|0;
 $vararg_buffer74 = sp + 64|0;
 $vararg_buffer71 = sp + 56|0;
 $vararg_buffer68 = sp + 48|0;
 $vararg_buffer65 = sp + 40|0;
 $vararg_buffer62 = sp + 32|0;
 $vararg_buffer59 = sp + 24|0;
 $vararg_buffer56 = sp + 16|0;
 $vararg_buffer53 = sp + 8|0;
 $vararg_buffer = sp;
 $31 = sp + 976|0;
 $32 = sp + 928|0;
 $41 = sp + 888|0;
 $54 = sp + 836|0;
 $55 = sp + 808|0;
 $66 = sp + 680|0;
 $69 = sp + 640|0;
 $83 = sp + 284|0;
 $100 = sp + 220|0;
 $110 = sp + 1056|0;
 $112 = sp + 1054|0;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $30 = 0;
 $34 = 0;
 $35 = 0;
 $36 = 0;
 $37 = 0;
 $38 = 0;
 $40 = 0;
 HEAP32[$41>>2] = 0;
 $56 = -1;
 $57 = -1;
 $115 = $18;
 $116 = (1276)<($115|0);
 $117 = $18;
 $118 = $116 ? 1276 : $117;
 $51 = $118;
 $119 = $14;
 $120 = ((($119)) + 18216|0);
 HEAP32[$120>>2] = 0;
 $121 = $14;
 $122 = ((($121)) + 144|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)!=(0);
 if ($124) {
  label = 8;
 } else {
  $125 = $16;
  $126 = ($125*400)|0;
  $127 = $14;
  $128 = ((($127)) + 132|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ($126|0)!=($129|0);
  if ($130) {
   $131 = $16;
   $132 = ($131*200)|0;
   $133 = $14;
   $134 = ((($133)) + 132|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = ($132|0)!=($135|0);
   if ($136) {
    $137 = $16;
    $138 = ($137*100)|0;
    $139 = $14;
    $140 = ((($139)) + 132|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($138|0)!=($141|0);
    if ($142) {
     $143 = $16;
     $144 = ($143*50)|0;
     $145 = $14;
     $146 = ((($145)) + 132|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($144|0)!=($147|0);
     if ($148) {
      $149 = $16;
      $150 = ($149*25)|0;
      $151 = $14;
      $152 = ((($151)) + 132|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($150|0)!=($153|0);
      if ($154) {
       $155 = $16;
       $156 = ($155*50)|0;
       $157 = $14;
       $158 = ((($157)) + 132|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159*3)|0;
       $161 = ($156|0)!=($160|0);
       if (!($161)) {
        label = 8;
       }
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $162 = $16;
  $163 = ($162*400)|0;
  $164 = $14;
  $165 = ((($164)) + 132|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($163|0)<($166|0);
  $168 = $51;
  $169 = ($168|0)<=(0);
  $or$cond = $167 | $169;
  if (!($or$cond)) {
   $170 = $14;
   $171 = $14;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = (($170) + ($173)|0);
   $27 = $174;
   $175 = $14;
   $176 = $14;
   $177 = HEAP32[$176>>2]|0;
   $178 = (($175) + ($177)|0);
   $28 = $178;
   $179 = $14;
   $180 = ((($179)) + 96|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($181|0)==(2051);
   if ($182) {
    $46 = 0;
   } else {
    $183 = $14;
    $184 = ((($183)) + 104|0);
    $185 = HEAP32[$184>>2]|0;
    $46 = $185;
   }
   $186 = $19;
   $187 = $14;
   $188 = ((($187)) + 156|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($186|0)<($189|0);
   if ($190) {
    $191 = $19;
    $195 = $191;
   } else {
    $192 = $14;
    $193 = ((($192)) + 156|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $194;
   }
   $19 = $195;
   $196 = $28;
   $197 = $54;
   $198 = $54;
   $199 = (($197) - ($198))|0;
   $200 = (($199|0) / 4)&-1;
   $201 = (($54) + ($200<<2)|0);
   HEAP32[$vararg_buffer>>2] = $201;
   (_opus_custom_encoder_ctl($196,10015,$vararg_buffer)|0);
   HEAP32[$55>>2] = 0;
   $202 = $14;
   $203 = ((($202)) + 8|0);
   $204 = ((($203)) + 36|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ($205|0)>=(7);
   if ($206) {
    $207 = $14;
    $208 = ((($207)) + 132|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = ($209|0)==(48000);
    if ($210) {
     $211 = $14;
     $212 = ((($211)) + 172|0);
     $213 = ((($212)) + 8508|0);
     $214 = HEAP32[$213>>2]|0;
     $56 = $214;
     $215 = $14;
     $216 = ((($215)) + 172|0);
     $217 = ((($216)) + 8512|0);
     $218 = HEAP32[$217>>2]|0;
     $57 = $218;
     $219 = $14;
     $220 = ((($219)) + 172|0);
     $221 = HEAP32[$54>>2]|0;
     $222 = $20;
     $223 = $21;
     $224 = $16;
     $225 = $22;
     $226 = $23;
     $227 = $24;
     $228 = $14;
     $229 = ((($228)) + 132|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $19;
     $232 = $25;
     _run_analysis($220,$221,$222,$223,$224,$225,$226,$227,$230,$231,$232,$55);
    }
   }
   $233 = $14;
   $234 = ((($233)) + 128|0);
   HEAP32[$234>>2] = -1;
   $235 = $14;
   $236 = ((($235)) + 18212|0);
   HEAP32[$236>>2] = 0;
   $237 = HEAP32[$55>>2]|0;
   $238 = ($237|0)!=(0);
   do {
    if ($238) {
     $239 = $14;
     $240 = ((($239)) + 112|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = ($241|0)==(-1000);
     if ($242) {
      $243 = ((($55)) + 20|0);
      $244 = +HEAPF32[$243>>2];
      $245 = 1.0 - $244;
      $246 = 100.0 * $245;
      $247 = $246;
      $248 = 0.5 + $247;
      $249 = (+Math_floor((+$248)));
      $250 = (~~(($249)));
      $251 = $14;
      $252 = ((($251)) + 128|0);
      HEAP32[$252>>2] = $250;
     }
     $253 = ((($55)) + 24|0);
     $254 = HEAP32[$253>>2]|0;
     $58 = $254;
     $255 = $58;
     $256 = ($255|0)<=(12);
     if ($256) {
      $257 = $14;
      $258 = ((($257)) + 18212|0);
      HEAP32[$258>>2] = 1101;
      break;
     }
     $259 = $58;
     $260 = ($259|0)<=(14);
     if ($260) {
      $261 = $14;
      $262 = ((($261)) + 18212|0);
      HEAP32[$262>>2] = 1102;
      break;
     }
     $263 = $58;
     $264 = ($263|0)<=(16);
     if ($264) {
      $265 = $14;
      $266 = ((($265)) + 18212|0);
      HEAP32[$266>>2] = 1103;
      break;
     } else {
      $267 = $58;
      $268 = ($267|0)<=(18);
      $269 = $14;
      $270 = ((($269)) + 18212|0);
      $$sink = $268 ? 1104 : 1105;
      HEAP32[$270>>2] = $$sink;
      break;
     }
    }
   } while(0);
   $271 = $14;
   $272 = ((($271)) + 100|0);
   $273 = HEAP32[$272>>2]|0;
   $274 = ($273|0)==(2);
   if ($274) {
    $275 = $14;
    $276 = ((($275)) + 108|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = ($277|0)!=(1);
    if ($278) {
     $279 = $15;
     $280 = $16;
     $281 = $14;
     $282 = ((($281)) + 132|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = $14;
     $285 = ((($284)) + 14352|0);
     $286 = (+_compute_stereo_width($279,$280,$283,$285));
     $53 = $286;
    } else {
     label = 32;
    }
   } else {
    label = 32;
   }
   if ((label|0) == 32) {
    $53 = 0.0;
   }
   $287 = $46;
   $52 = $287;
   $288 = $14;
   $289 = $16;
   $290 = $51;
   $291 = (_user_bitrate_to_bitrate($288,$289,$290)|0);
   $292 = $14;
   $293 = ((($292)) + 148|0);
   HEAP32[$293>>2] = $291;
   $294 = $14;
   $295 = ((($294)) + 132|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $16;
   $298 = (($296|0) / ($297|0))&-1;
   $47 = $298;
   $299 = $51;
   $300 = ($299|0)<(3);
   do {
    if (!($300)) {
     $301 = $14;
     $302 = ((($301)) + 148|0);
     $303 = HEAP32[$302>>2]|0;
     $304 = $47;
     $305 = ($304*3)|0;
     $306 = $305<<3;
     $307 = ($303|0)<($306|0);
     if (!($307)) {
      $308 = $47;
      $309 = ($308|0)<(50);
      if ($309) {
       $310 = $51;
       $311 = $47;
       $312 = Math_imul($310, $311)|0;
       $313 = ($312|0)<(300);
       if ($313) {
        break;
       }
       $314 = $14;
       $315 = ((($314)) + 148|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)<(2400);
       if ($317) {
        break;
       }
      }
      $353 = $14;
      $354 = ((($353)) + 136|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = ($355|0)!=(0);
      if (!($356)) {
       $357 = $14;
       $358 = ((($357)) + 148|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = $47;
       $361 = $360<<2;
       $362 = (($359) + ($361))|0;
       $363 = $47;
       $364 = $363<<3;
       $365 = (($362|0) / ($364|0))&-1;
       $366 = $51;
       $367 = ($365|0)<($366|0);
       if ($367) {
        $368 = $14;
        $369 = ((($368)) + 148|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = $47;
        $372 = $371<<2;
        $373 = (($370) + ($372))|0;
        $374 = $47;
        $375 = $374<<3;
        $376 = (($373|0) / ($375|0))&-1;
        $378 = $376;
       } else {
        $377 = $51;
        $378 = $377;
       }
       $61 = $378;
       $379 = $61;
       $380 = $47;
       $381 = $380<<3;
       $382 = Math_imul($379, $381)|0;
       $383 = $14;
       $384 = ((($383)) + 148|0);
       HEAP32[$384>>2] = $382;
       $385 = $61;
       $51 = $385;
      }
      $386 = $47;
      $387 = $51;
      $388 = Math_imul($386, $387)|0;
      $389 = $388<<3;
      $48 = $389;
      $390 = $14;
      $391 = ((($390)) + 148|0);
      $392 = HEAP32[$391>>2]|0;
      $393 = $14;
      $394 = ((($393)) + 100|0);
      $395 = HEAP32[$394>>2]|0;
      $396 = ($395*40)|0;
      $397 = (($396) + 20)|0;
      $398 = $14;
      $399 = ((($398)) + 132|0);
      $400 = HEAP32[$399>>2]|0;
      $401 = $16;
      $402 = (($400|0) / ($401|0))&-1;
      $403 = (($402) - 50)|0;
      $404 = Math_imul($397, $403)|0;
      $405 = (($392) - ($404))|0;
      $45 = $405;
      $406 = $14;
      $407 = ((($406)) + 112|0);
      $408 = HEAP32[$407>>2]|0;
      $409 = ($408|0)==(3001);
      do {
       if ($409) {
        $44 = 127;
       } else {
        $410 = $14;
        $411 = ((($410)) + 112|0);
        $412 = HEAP32[$411>>2]|0;
        $413 = ($412|0)==(3002);
        if ($413) {
         $44 = 0;
         break;
        }
        $414 = $14;
        $415 = ((($414)) + 128|0);
        $416 = HEAP32[$415>>2]|0;
        $417 = ($416|0)>=(0);
        $418 = $14;
        if ($417) {
         $419 = ((($418)) + 128|0);
         $420 = HEAP32[$419>>2]|0;
         $421 = ($420*327)|0;
         $422 = $421 >> 8;
         $44 = $422;
         $423 = $14;
         $424 = ((($423)) + 96|0);
         $425 = HEAP32[$424>>2]|0;
         $426 = ($425|0)==(2049);
         if (!($426)) {
          break;
         }
         $427 = $44;
         $428 = ($427|0)<(115);
         $429 = $44;
         $430 = $428 ? $429 : 115;
         $44 = $430;
         break;
        }
        $431 = ((($418)) + 96|0);
        $432 = HEAP32[$431>>2]|0;
        $433 = ($432|0)==(2048);
        if ($433) {
         $44 = 115;
         break;
        } else {
         $44 = 48;
         break;
        }
       }
      } while(0);
      $434 = $14;
      $435 = ((($434)) + 108|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ($436|0)!=(-1000);
      if ($437) {
       $438 = $14;
       $439 = ((($438)) + 100|0);
       $440 = HEAP32[$439>>2]|0;
       $441 = ($440|0)==(2);
       if ($441) {
        $442 = $14;
        $443 = ((($442)) + 108|0);
        $444 = HEAP32[$443>>2]|0;
        $445 = $14;
        $$sink6$sink = $444;$$sink8$sink = $445;
       } else {
        label = 71;
       }
      } else {
       label = 71;
      }
      do {
       if ((label|0) == 71) {
        $446 = $14;
        $447 = ((($446)) + 100|0);
        $448 = HEAP32[$447>>2]|0;
        $449 = ($448|0)==(2);
        if (!($449)) {
         $468 = $14;
         $469 = ((($468)) + 100|0);
         $470 = HEAP32[$469>>2]|0;
         $471 = $14;
         $$sink6$sink = $470;$$sink8$sink = $471;
         break;
        }
        $450 = $44;
        $451 = $44;
        $452 = Math_imul($450, $451)|0;
        $453 = 0;
        $454 = $453 >> 14;
        $455 = (30000 + ($454))|0;
        $62 = $455;
        $456 = $14;
        $457 = ((($456)) + 14288|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = ($458|0)==(2);
        $460 = $62;
        if ($459) {
         $461 = (($460) - 1000)|0;
         $62 = $461;
        } else {
         $462 = (($460) + 1000)|0;
         $62 = $462;
        }
        $463 = $45;
        $464 = $62;
        $465 = ($463|0)>($464|0);
        $466 = $465 ? 2 : 1;
        $467 = $14;
        $$sink6$sink = $466;$$sink8$sink = $467;
       }
      } while(0);
      $472 = ((($$sink8$sink)) + 14288|0);
      HEAP32[$472>>2] = $$sink6$sink;
      $473 = $14;
      $474 = ((($473)) + 148|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = $14;
      $477 = ((($476)) + 14288|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($478*40)|0;
      $480 = (($479) + 20)|0;
      $481 = $14;
      $482 = ((($481)) + 132|0);
      $483 = HEAP32[$482>>2]|0;
      $484 = $16;
      $485 = (($483|0) / ($484|0))&-1;
      $486 = (($485) - 50)|0;
      $487 = Math_imul($480, $486)|0;
      $488 = (($475) - ($487))|0;
      $45 = $488;
      $489 = $14;
      $490 = ((($489)) + 96|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = ($491|0)==(2051);
      $493 = $14;
      do {
       if ($492) {
        $$sink12$sink = 1002;$$sink14$sink = $493;
        label = 91;
       } else {
        $494 = ((($493)) + 124|0);
        $495 = HEAP32[$494>>2]|0;
        $496 = ($495|0)==(-1000);
        if (!($496)) {
         $576 = $14;
         $577 = ((($576)) + 124|0);
         $578 = HEAP32[$577>>2]|0;
         $579 = $14;
         $$sink12$sink = $578;$$sink14$sink = $579;
         label = 91;
         break;
        }
        $497 = $53;
        $498 = 1.0 - $497;
        $499 = HEAP32[22]|0;
        $500 = (+($499|0));
        $501 = $498 * $500;
        $502 = $53;
        $503 = HEAP32[(96)>>2]|0;
        $504 = (+($503|0));
        $505 = $502 * $504;
        $506 = $501 + $505;
        $507 = (~~(($506)));
        $63 = $507;
        $508 = $53;
        $509 = 1.0 - $508;
        $510 = HEAP32[(100)>>2]|0;
        $511 = (+($510|0));
        $512 = $509 * $511;
        $513 = $53;
        $514 = HEAP32[(100)>>2]|0;
        $515 = (+($514|0));
        $516 = $513 * $515;
        $517 = $512 + $516;
        $518 = (~~(($517)));
        $64 = $518;
        $519 = $64;
        $520 = $44;
        $521 = $44;
        $522 = Math_imul($520, $521)|0;
        $523 = $63;
        $524 = $64;
        $525 = (($523) - ($524))|0;
        $526 = Math_imul($522, $525)|0;
        $527 = $526 >> 14;
        $528 = (($519) + ($527))|0;
        $65 = $528;
        $529 = $14;
        $530 = ((($529)) + 96|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = ($531|0)==(2048);
        if ($532) {
         $533 = $65;
         $534 = (($533) + 8000)|0;
         $65 = $534;
        }
        $535 = $14;
        $536 = ((($535)) + 14324|0);
        $537 = HEAP32[$536>>2]|0;
        $538 = ($537|0)==(1002);
        do {
         if ($538) {
          $539 = $65;
          $540 = (($539) - 4000)|0;
          $65 = $540;
         } else {
          $541 = $14;
          $542 = ((($541)) + 14324|0);
          $543 = HEAP32[$542>>2]|0;
          $544 = ($543|0)>(0);
          if (!($544)) {
           break;
          }
          $545 = $65;
          $546 = (($545) + 4000)|0;
          $65 = $546;
         }
        } while(0);
        $547 = $45;
        $548 = $65;
        $549 = ($547|0)>=($548|0);
        $550 = $549 ? 1002 : 1000;
        $551 = $14;
        $552 = ((($551)) + 14320|0);
        HEAP32[$552>>2] = $550;
        $553 = $14;
        $554 = ((($553)) + 8|0);
        $555 = ((($554)) + 40|0);
        $556 = HEAP32[$555>>2]|0;
        $557 = ($556|0)!=(0);
        do {
         if ($557) {
          $558 = $14;
          $559 = ((($558)) + 8|0);
          $560 = ((($559)) + 32|0);
          $561 = HEAP32[$560>>2]|0;
          $562 = $44;
          $563 = (128 - ($562))|0;
          $564 = $563 >> 4;
          $565 = ($561|0)>($564|0);
          if (!($565)) {
           break;
          }
          $566 = $14;
          $567 = ((($566)) + 14320|0);
          HEAP32[$567>>2] = 1000;
         }
        } while(0);
        $568 = $14;
        $569 = ((($568)) + 8|0);
        $570 = ((($569)) + 44|0);
        $571 = HEAP32[$570>>2]|0;
        $572 = ($571|0)!=(0);
        $573 = $44;
        $574 = ($573|0)>(100);
        $or$cond11 = $572 & $574;
        if (!($or$cond11)) {
         break;
        }
        $575 = $14;
        $$sink12$sink = 1000;$$sink14$sink = $575;
        label = 91;
       }
      } while(0);
      if ((label|0) == 91) {
       $580 = ((($$sink14$sink)) + 14320|0);
       HEAP32[$580>>2] = $$sink12$sink;
      }
      $581 = $14;
      $582 = ((($581)) + 14320|0);
      $583 = HEAP32[$582>>2]|0;
      $584 = ($583|0)!=(1002);
      if ($584) {
       $585 = $16;
       $586 = $14;
       $587 = ((($586)) + 132|0);
       $588 = HEAP32[$587>>2]|0;
       $589 = (($588|0) / 100)&-1;
       $590 = ($585|0)<($589|0);
       if ($590) {
        $591 = $14;
        $592 = ((($591)) + 14320|0);
        HEAP32[$592>>2] = 1002;
       }
      }
      $593 = $14;
      $594 = ((($593)) + 164|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = ($595|0)!=(0);
      if ($596) {
       $597 = $14;
       $598 = ((($597)) + 14320|0);
       HEAP32[$598>>2] = 1002;
      }
      $599 = $51;
      $600 = $47;
      $601 = ($600|0)>(50);
      $602 = $601 ? 12000 : 8000;
      $603 = $16;
      $604 = Math_imul($602, $603)|0;
      $605 = $14;
      $606 = ((($605)) + 132|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = $607<<3;
      $609 = (($604|0) / ($608|0))&-1;
      $610 = ($599|0)<($609|0);
      if ($610) {
       $611 = $14;
       $612 = ((($611)) + 14320|0);
       HEAP32[$612>>2] = 1002;
      }
      $613 = $14;
      $614 = ((($613)) + 14288|0);
      $615 = HEAP32[$614>>2]|0;
      $616 = ($615|0)==(1);
      do {
       if ($616) {
        $617 = $14;
        $618 = ((($617)) + 14328|0);
        $619 = HEAP32[$618>>2]|0;
        $620 = ($619|0)==(2);
        if (!($620)) {
         label = 105;
         break;
        }
        $621 = $14;
        $622 = ((($621)) + 8|0);
        $623 = ((($622)) + 56|0);
        $624 = HEAP32[$623>>2]|0;
        $625 = ($624|0)==(0);
        if (!($625)) {
         label = 105;
         break;
        }
        $626 = $14;
        $627 = ((($626)) + 14320|0);
        $628 = HEAP32[$627>>2]|0;
        $629 = ($628|0)!=(1002);
        if (!($629)) {
         label = 105;
         break;
        }
        $630 = $14;
        $631 = ((($630)) + 14324|0);
        $632 = HEAP32[$631>>2]|0;
        $633 = ($632|0)!=(1002);
        if (!($633)) {
         label = 105;
         break;
        }
        $634 = $14;
        $635 = ((($634)) + 8|0);
        $636 = ((($635)) + 56|0);
        HEAP32[$636>>2] = 1;
        $637 = $14;
        $638 = ((($637)) + 14288|0);
        HEAP32[$638>>2] = 2;
       } else {
        label = 105;
       }
      } while(0);
      if ((label|0) == 105) {
       $639 = $14;
       $640 = ((($639)) + 8|0);
       $641 = ((($640)) + 56|0);
       HEAP32[$641>>2] = 0;
      }
      $642 = $14;
      $643 = ((($642)) + 14324|0);
      $644 = HEAP32[$643>>2]|0;
      $645 = ($644|0)>(0);
      do {
       if ($645) {
        $646 = $14;
        $647 = ((($646)) + 14320|0);
        $648 = HEAP32[$647>>2]|0;
        $649 = ($648|0)!=(1002);
        if ($649) {
         $650 = $14;
         $651 = ((($650)) + 14324|0);
         $652 = HEAP32[$651>>2]|0;
         $653 = ($652|0)==(1002);
         if (!($653)) {
          label = 109;
         }
        } else {
         label = 109;
        }
        if ((label|0) == 109) {
         $654 = $14;
         $655 = ((($654)) + 14320|0);
         $656 = HEAP32[$655>>2]|0;
         $657 = ($656|0)==(1002);
         if (!($657)) {
          break;
         }
         $658 = $14;
         $659 = ((($658)) + 14324|0);
         $660 = HEAP32[$659>>2]|0;
         $661 = ($660|0)!=(1002);
         if (!($661)) {
          break;
         }
        }
        $36 = 1;
        $662 = $14;
        $663 = ((($662)) + 14320|0);
        $664 = HEAP32[$663>>2]|0;
        $665 = ($664|0)!=(1002);
        $666 = $665&1;
        $38 = $666;
        $667 = $38;
        $668 = ($667|0)!=(0);
        if ($668) {
         break;
        }
        $669 = $16;
        $670 = $14;
        $671 = ((($670)) + 132|0);
        $672 = HEAP32[$671>>2]|0;
        $673 = (($672|0) / 100)&-1;
        $674 = ($669|0)>=($673|0);
        if ($674) {
         $675 = $14;
         $676 = ((($675)) + 14324|0);
         $677 = HEAP32[$676>>2]|0;
         $678 = $14;
         $679 = ((($678)) + 14320|0);
         HEAP32[$679>>2] = $677;
         $40 = 1;
         break;
        } else {
         $36 = 0;
         break;
        }
       }
      } while(0);
      $680 = $14;
      $681 = ((($680)) + 14340|0);
      $682 = HEAP32[$681>>2]|0;
      $683 = ($682|0)!=(0);
      if ($683) {
       $36 = 1;
       $38 = 1;
       $684 = $14;
       $685 = ((($684)) + 14340|0);
       HEAP32[$685>>2] = 0;
       $34 = 1;
      }
      $686 = $36;
      $687 = ($686|0)!=(0);
      do {
       if ($687) {
        $688 = $51;
        $689 = $14;
        $690 = ((($689)) + 132|0);
        $691 = HEAP32[$690>>2]|0;
        $692 = (($691|0) / 200)&-1;
        $693 = Math_imul($688, $692)|0;
        $694 = $16;
        $695 = $14;
        $696 = ((($695)) + 132|0);
        $697 = HEAP32[$696>>2]|0;
        $698 = (($697|0) / 200)&-1;
        $699 = (($694) + ($698))|0;
        $700 = (($693|0) / ($699|0))&-1;
        $701 = (257)<($700|0);
        if ($701) {
         $715 = 257;
        } else {
         $702 = $51;
         $703 = $14;
         $704 = ((($703)) + 132|0);
         $705 = HEAP32[$704>>2]|0;
         $706 = (($705|0) / 200)&-1;
         $707 = Math_imul($702, $706)|0;
         $708 = $16;
         $709 = $14;
         $710 = ((($709)) + 132|0);
         $711 = HEAP32[$710>>2]|0;
         $712 = (($711|0) / 200)&-1;
         $713 = (($708) + ($712))|0;
         $714 = (($707|0) / ($713|0))&-1;
         $715 = $714;
        }
        $37 = $715;
        $716 = $14;
        $717 = ((($716)) + 136|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = ($718|0)!=(0);
        if (!($719)) {
         break;
        }
        $720 = $37;
        $721 = $14;
        $722 = ((($721)) + 148|0);
        $723 = HEAP32[$722>>2]|0;
        $724 = (($723|0) / 1600)&-1;
        $725 = ($720|0)<($724|0);
        if ($725) {
         $726 = $37;
         $731 = $726;
        } else {
         $727 = $14;
         $728 = ((($727)) + 148|0);
         $729 = HEAP32[$728>>2]|0;
         $730 = (($729|0) / 1600)&-1;
         $731 = $730;
        }
        $37 = $731;
       }
      } while(0);
      $732 = $14;
      $733 = ((($732)) + 14320|0);
      $734 = HEAP32[$733>>2]|0;
      $735 = ($734|0)!=(1002);
      do {
       if ($735) {
        $736 = $14;
        $737 = ((($736)) + 14324|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = ($738|0)==(1002);
        if (!($739)) {
         break;
        }
        $740 = $27;
        $741 = $14;
        $742 = ((($741)) + 168|0);
        $743 = HEAP32[$742>>2]|0;
        (_silk_InitEncoder($740,$743,$66)|0);
        $34 = 1;
       }
      } while(0);
      $744 = $14;
      $745 = ((($744)) + 14320|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = ($746|0)==(1002);
      do {
       if ($747) {
        label = 131;
       } else {
        $748 = $14;
        $749 = ((($748)) + 14344|0);
        $750 = HEAP32[$749>>2]|0;
        $751 = ($750|0)!=(0);
        if ($751) {
         label = 131;
         break;
        }
        $752 = $14;
        $753 = ((($752)) + 8|0);
        $754 = ((($753)) + 72|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = ($755|0)!=(0);
        if ($756) {
         label = 131;
        }
       }
      } while(0);
      do {
       if ((label|0) == 131) {
        $70 = 1105;
        $757 = $45;
        $71 = $757;
        $758 = $14;
        $759 = ((($758)) + 14320|0);
        $760 = HEAP32[$759>>2]|0;
        $761 = ($760|0)!=(1002);
        do {
         if ($761) {
          $762 = $71;
          $763 = $14;
          $764 = ((($763)) + 8|0);
          $765 = ((($764)) + 36|0);
          $766 = HEAP32[$765>>2]|0;
          $767 = (45 + ($766))|0;
          $768 = Math_imul($762, $767)|0;
          $769 = (($768|0) / 50)&-1;
          $71 = $769;
          $770 = $14;
          $771 = ((($770)) + 136|0);
          $772 = HEAP32[$771>>2]|0;
          $773 = ($772|0)!=(0);
          if ($773) {
           break;
          }
          $774 = $71;
          $775 = (($774) - 1000)|0;
          $71 = $775;
         }
        } while(0);
        $776 = $14;
        $777 = ((($776)) + 100|0);
        $778 = HEAP32[$777>>2]|0;
        $779 = ($778|0)==(2);
        do {
         if ($779) {
          $780 = $14;
          $781 = ((($780)) + 108|0);
          $782 = HEAP32[$781>>2]|0;
          $783 = ($782|0)!=(1);
          if (!($783)) {
           label = 137;
           break;
          }
          $67 = 104;
          $68 = 136;
         } else {
          label = 137;
         }
        } while(0);
        if ((label|0) == 137) {
         $67 = 168;
         $68 = 200;
        }
        $29 = 0;
        while(1) {
         $784 = $29;
         $785 = ($784|0)<(8);
         if (!($785)) {
          break;
         }
         $786 = $68;
         $787 = $29;
         $788 = (($786) + ($787<<2)|0);
         $789 = HEAP32[$788>>2]|0;
         $790 = $44;
         $791 = $44;
         $792 = Math_imul($790, $791)|0;
         $793 = $67;
         $794 = $29;
         $795 = (($793) + ($794<<2)|0);
         $796 = HEAP32[$795>>2]|0;
         $797 = $68;
         $798 = $29;
         $799 = (($797) + ($798<<2)|0);
         $800 = HEAP32[$799>>2]|0;
         $801 = (($796) - ($800))|0;
         $802 = Math_imul($792, $801)|0;
         $803 = $802 >> 14;
         $804 = (($789) + ($803))|0;
         $805 = $29;
         $806 = (($69) + ($805<<2)|0);
         HEAP32[$806>>2] = $804;
         $807 = $29;
         $808 = (($807) + 1)|0;
         $29 = $808;
        }
        while(1) {
         $809 = $70;
         $810 = (($809) - 1102)|0;
         $811 = $810<<1;
         $812 = (($69) + ($811<<2)|0);
         $813 = HEAP32[$812>>2]|0;
         $72 = $813;
         $814 = $70;
         $815 = (($814) - 1102)|0;
         $816 = $815<<1;
         $817 = (($816) + 1)|0;
         $818 = (($69) + ($817<<2)|0);
         $819 = HEAP32[$818>>2]|0;
         $73 = $819;
         $820 = $14;
         $821 = ((($820)) + 14344|0);
         $822 = HEAP32[$821>>2]|0;
         $823 = ($822|0)!=(0);
         do {
          if (!($823)) {
           $824 = $14;
           $825 = ((($824)) + 14336|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = $70;
           $828 = ($826|0)>=($827|0);
           $829 = $73;
           $830 = $72;
           if ($828) {
            $831 = (($830) - ($829))|0;
            $72 = $831;
            break;
           } else {
            $832 = (($830) + ($829))|0;
            $72 = $832;
            break;
           }
          }
         } while(0);
         $833 = $71;
         $834 = $72;
         $835 = ($833|0)>=($834|0);
         if ($835) {
          break;
         }
         $836 = $70;
         $837 = (($836) + -1)|0;
         $70 = $837;
         $838 = ($837|0)>(1101);
         if (!($838)) {
          break;
         }
        }
        $839 = $70;
        $840 = $14;
        $841 = ((($840)) + 14336|0);
        HEAP32[$841>>2] = $839;
        $842 = $14;
        $843 = ((($842)) + 14344|0);
        $844 = HEAP32[$843>>2]|0;
        $845 = ($844|0)!=(0);
        if ($845) {
         break;
        }
        $846 = $14;
        $847 = ((($846)) + 14320|0);
        $848 = HEAP32[$847>>2]|0;
        $849 = ($848|0)!=(1002);
        if (!($849)) {
         break;
        }
        $850 = $14;
        $851 = ((($850)) + 8|0);
        $852 = ((($851)) + 76|0);
        $853 = HEAP32[$852>>2]|0;
        $854 = ($853|0)!=(0);
        if ($854) {
         break;
        }
        $855 = $14;
        $856 = ((($855)) + 14336|0);
        $857 = HEAP32[$856>>2]|0;
        $858 = ($857|0)>(1103);
        if (!($858)) {
         break;
        }
        $859 = $14;
        $860 = ((($859)) + 14336|0);
        HEAP32[$860>>2] = 1103;
       }
      } while(0);
      $861 = $14;
      $862 = ((($861)) + 14336|0);
      $863 = HEAP32[$862>>2]|0;
      $864 = $14;
      $865 = ((($864)) + 120|0);
      $866 = HEAP32[$865>>2]|0;
      $867 = ($863|0)>($866|0);
      if ($867) {
       $868 = $14;
       $869 = ((($868)) + 120|0);
       $870 = HEAP32[$869>>2]|0;
       $871 = $14;
       $872 = ((($871)) + 14336|0);
       HEAP32[$872>>2] = $870;
      }
      $873 = $14;
      $874 = ((($873)) + 116|0);
      $875 = HEAP32[$874>>2]|0;
      $876 = ($875|0)!=(-1000);
      if ($876) {
       $877 = $14;
       $878 = ((($877)) + 116|0);
       $879 = HEAP32[$878>>2]|0;
       $880 = $14;
       $881 = ((($880)) + 14336|0);
       HEAP32[$881>>2] = $879;
      }
      $882 = $14;
      $883 = ((($882)) + 14320|0);
      $884 = HEAP32[$883>>2]|0;
      $885 = ($884|0)!=(1002);
      $886 = $48;
      $887 = ($886|0)<(15000);
      $or$cond16 = $885 & $887;
      if ($or$cond16) {
       $888 = $14;
       $889 = ((($888)) + 14336|0);
       $890 = HEAP32[$889>>2]|0;
       $891 = ($890|0)<(1103);
       if ($891) {
        $892 = $14;
        $893 = ((($892)) + 14336|0);
        $894 = HEAP32[$893>>2]|0;
        $897 = $894;
       } else {
        $897 = 1103;
       }
       $895 = $14;
       $896 = ((($895)) + 14336|0);
       HEAP32[$896>>2] = $897;
      }
      $898 = $14;
      $899 = ((($898)) + 132|0);
      $900 = HEAP32[$899>>2]|0;
      $901 = ($900|0)<=(24000);
      do {
       if ($901) {
        $902 = $14;
        $903 = ((($902)) + 14336|0);
        $904 = HEAP32[$903>>2]|0;
        $905 = ($904|0)>(1104);
        if (!($905)) {
         break;
        }
        $906 = $14;
        $907 = ((($906)) + 14336|0);
        HEAP32[$907>>2] = 1104;
       }
      } while(0);
      $908 = $14;
      $909 = ((($908)) + 132|0);
      $910 = HEAP32[$909>>2]|0;
      $911 = ($910|0)<=(16000);
      do {
       if ($911) {
        $912 = $14;
        $913 = ((($912)) + 14336|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = ($914|0)>(1103);
        if (!($915)) {
         break;
        }
        $916 = $14;
        $917 = ((($916)) + 14336|0);
        HEAP32[$917>>2] = 1103;
       }
      } while(0);
      $918 = $14;
      $919 = ((($918)) + 132|0);
      $920 = HEAP32[$919>>2]|0;
      $921 = ($920|0)<=(12000);
      do {
       if ($921) {
        $922 = $14;
        $923 = ((($922)) + 14336|0);
        $924 = HEAP32[$923>>2]|0;
        $925 = ($924|0)>(1102);
        if (!($925)) {
         break;
        }
        $926 = $14;
        $927 = ((($926)) + 14336|0);
        HEAP32[$927>>2] = 1102;
       }
      } while(0);
      $928 = $14;
      $929 = ((($928)) + 132|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = ($930|0)<=(8000);
      do {
       if ($931) {
        $932 = $14;
        $933 = ((($932)) + 14336|0);
        $934 = HEAP32[$933>>2]|0;
        $935 = ($934|0)>(1101);
        if (!($935)) {
         break;
        }
        $936 = $14;
        $937 = ((($936)) + 14336|0);
        HEAP32[$937>>2] = 1101;
       }
      } while(0);
      $938 = $14;
      $939 = ((($938)) + 18212|0);
      $940 = HEAP32[$939>>2]|0;
      $941 = ($940|0)!=(0);
      do {
       if ($941) {
        $942 = $14;
        $943 = ((($942)) + 116|0);
        $944 = HEAP32[$943>>2]|0;
        $945 = ($944|0)==(-1000);
        if (!($945)) {
         break;
        }
        $946 = $45;
        $947 = $14;
        $948 = ((($947)) + 14288|0);
        $949 = HEAP32[$948>>2]|0;
        $950 = ($949*18000)|0;
        $951 = ($946|0)<=($950|0);
        do {
         if ($951) {
          $952 = $14;
          $953 = ((($952)) + 14320|0);
          $954 = HEAP32[$953>>2]|0;
          $955 = ($954|0)==(1002);
          if (!($955)) {
           label = 177;
           break;
          }
          $74 = 1101;
         } else {
          label = 177;
         }
        } while(0);
        L223: do {
         if ((label|0) == 177) {
          $956 = $45;
          $957 = $14;
          $958 = ((($957)) + 14288|0);
          $959 = HEAP32[$958>>2]|0;
          $960 = ($959*24000)|0;
          $961 = ($956|0)<=($960|0);
          do {
           if ($961) {
            $962 = $14;
            $963 = ((($962)) + 14320|0);
            $964 = HEAP32[$963>>2]|0;
            $965 = ($964|0)==(1002);
            if (!($965)) {
             break;
            }
            $74 = 1102;
            break L223;
           }
          } while(0);
          $966 = $45;
          $967 = $14;
          $968 = ((($967)) + 14288|0);
          $969 = HEAP32[$968>>2]|0;
          $970 = ($969*30000)|0;
          $971 = ($966|0)<=($970|0);
          if ($971) {
           $74 = 1103;
           break;
          }
          $972 = $45;
          $973 = $14;
          $974 = ((($973)) + 14288|0);
          $975 = HEAP32[$974>>2]|0;
          $976 = ($975*44000)|0;
          $977 = ($972|0)<=($976|0);
          if ($977) {
           $74 = 1104;
           break;
          } else {
           $74 = 1105;
           break;
          }
         }
        } while(0);
        $978 = $14;
        $979 = ((($978)) + 18212|0);
        $980 = HEAP32[$979>>2]|0;
        $981 = $74;
        $982 = ($980|0)>($981|0);
        if ($982) {
         $983 = $14;
         $984 = ((($983)) + 18212|0);
         $985 = HEAP32[$984>>2]|0;
         $989 = $985;
        } else {
         $986 = $74;
         $989 = $986;
        }
        $987 = $14;
        $988 = ((($987)) + 18212|0);
        HEAP32[$988>>2] = $989;
        $990 = $14;
        $991 = ((($990)) + 14336|0);
        $992 = HEAP32[$991>>2]|0;
        $993 = $14;
        $994 = ((($993)) + 18212|0);
        $995 = HEAP32[$994>>2]|0;
        $996 = ($992|0)<($995|0);
        $997 = $14;
        $998 = ((($997)) + 18212|0);
        $999 = ((($997)) + 14336|0);
        $$sink17 = $996 ? $999 : $998;
        $1000 = HEAP32[$$sink17>>2]|0;
        $1001 = $14;
        $1002 = ((($1001)) + 14336|0);
        HEAP32[$1002>>2] = $1000;
       }
      } while(0);
      $1003 = $28;
      $1004 = $19;
      HEAP32[$vararg_buffer53>>2] = $1004;
      (_opus_custom_encoder_ctl($1003,4036,$vararg_buffer53)|0);
      $1005 = $14;
      $1006 = ((($1005)) + 14320|0);
      $1007 = HEAP32[$1006>>2]|0;
      $1008 = ($1007|0)==(1002);
      do {
       if ($1008) {
        $1009 = $14;
        $1010 = ((($1009)) + 14336|0);
        $1011 = HEAP32[$1010>>2]|0;
        $1012 = ($1011|0)==(1102);
        if (!($1012)) {
         break;
        }
        $1013 = $14;
        $1014 = ((($1013)) + 14336|0);
        HEAP32[$1014>>2] = 1103;
       }
      } while(0);
      $1015 = $14;
      $1016 = ((($1015)) + 164|0);
      $1017 = HEAP32[$1016>>2]|0;
      $1018 = ($1017|0)!=(0);
      if ($1018) {
       $1019 = $14;
       $1020 = ((($1019)) + 14336|0);
       HEAP32[$1020>>2] = 1101;
      }
      $1021 = $16;
      $1022 = $14;
      $1023 = ((($1022)) + 132|0);
      $1024 = HEAP32[$1023>>2]|0;
      $1025 = (($1024|0) / 50)&-1;
      $1026 = ($1021|0)>($1025|0);
      do {
       if ($1026) {
        $1027 = $14;
        $1028 = ((($1027)) + 14320|0);
        $1029 = HEAP32[$1028>>2]|0;
        $1030 = ($1029|0)==(1002);
        if (!($1030)) {
         $1031 = $14;
         $1032 = ((($1031)) + 14336|0);
         $1033 = HEAP32[$1032>>2]|0;
         $1034 = ($1033|0)>(1103);
         if (!($1034)) {
          break;
         }
        }
        $1035 = $56;
        $1036 = ($1035|0)!=(-1);
        if ($1036) {
         $1037 = $56;
         $1038 = $14;
         $1039 = ((($1038)) + 172|0);
         $1040 = ((($1039)) + 8508|0);
         HEAP32[$1040>>2] = $1037;
         $1041 = $57;
         $1042 = $14;
         $1043 = ((($1042)) + 172|0);
         $1044 = ((($1043)) + 8512|0);
         HEAP32[$1044>>2] = $1041;
        }
        $1045 = $16;
        $1046 = $14;
        $1047 = ((($1046)) + 132|0);
        $1048 = HEAP32[$1047>>2]|0;
        $1049 = (($1048|0) / 25)&-1;
        $1050 = ($1045|0)>($1049|0);
        $1051 = $1050 ? 3 : 2;
        $75 = $1051;
        $1052 = $18;
        $1053 = (($1052) - 3)|0;
        $1054 = $75;
        $1055 = (($1053|0) / ($1054|0))&-1;
        $1056 = (1276)<($1055|0);
        if ($1056) {
         $1061 = 1276;
        } else {
         $1057 = $18;
         $1058 = (($1057) - 3)|0;
         $1059 = $75;
         $1060 = (($1058|0) / ($1059|0))&-1;
         $1061 = $1060;
        }
        $80 = $1061;
        $1062 = $75;
        $1063 = $80;
        $1064 = Math_imul($1062, $1063)|0;
        $1065 = (_llvm_stacksave()|0);
        $82 = $1065;
        $$alloca_mul = $1064;
        $1066 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
        (_opus_repacketizer_init($83)|0);
        $1067 = $14;
        $1068 = ((($1067)) + 124|0);
        $1069 = HEAP32[$1068>>2]|0;
        $76 = $1069;
        $1070 = $14;
        $1071 = ((($1070)) + 116|0);
        $1072 = HEAP32[$1071>>2]|0;
        $77 = $1072;
        $1073 = $14;
        $1074 = ((($1073)) + 108|0);
        $1075 = HEAP32[$1074>>2]|0;
        $78 = $1075;
        $1076 = $14;
        $1077 = ((($1076)) + 14320|0);
        $1078 = HEAP32[$1077>>2]|0;
        $1079 = $14;
        $1080 = ((($1079)) + 124|0);
        HEAP32[$1080>>2] = $1078;
        $1081 = $14;
        $1082 = ((($1081)) + 14336|0);
        $1083 = HEAP32[$1082>>2]|0;
        $1084 = $14;
        $1085 = ((($1084)) + 116|0);
        HEAP32[$1085>>2] = $1083;
        $1086 = $14;
        $1087 = ((($1086)) + 14288|0);
        $1088 = HEAP32[$1087>>2]|0;
        $1089 = $14;
        $1090 = ((($1089)) + 108|0);
        HEAP32[$1090>>2] = $1088;
        $1091 = $14;
        $1092 = ((($1091)) + 8|0);
        $1093 = ((($1092)) + 56|0);
        $1094 = HEAP32[$1093>>2]|0;
        $79 = $1094;
        $1095 = $79;
        $1096 = ($1095|0)!=(0);
        $1097 = $14;
        if ($1096) {
         $1098 = ((($1097)) + 108|0);
         HEAP32[$1098>>2] = 1;
        } else {
         $1099 = ((($1097)) + 14288|0);
         $1100 = HEAP32[$1099>>2]|0;
         $1101 = $14;
         $1102 = ((($1101)) + 14328|0);
         HEAP32[$1102>>2] = $1100;
        }
        $29 = 0;
        while(1) {
         $1103 = $29;
         $1104 = $75;
         $1105 = ($1103|0)<($1104|0);
         $1106 = $14;
         if (!($1105)) {
          label = 214;
          break;
         }
         $1107 = ((($1106)) + 8|0);
         $1108 = ((($1107)) + 56|0);
         HEAP32[$1108>>2] = 0;
         $1109 = $40;
         $1110 = ($1109|0)!=(0);
         do {
          if ($1110) {
           $1111 = $29;
           $1112 = $75;
           $1113 = (($1112) - 1)|0;
           $1114 = ($1111|0)==($1113|0);
           if (!($1114)) {
            break;
           }
           $1115 = $14;
           $1116 = ((($1115)) + 124|0);
           HEAP32[$1116>>2] = 1002;
          }
         } while(0);
         $1117 = $14;
         $1118 = $15;
         $1119 = $29;
         $1120 = $14;
         $1121 = ((($1120)) + 100|0);
         $1122 = HEAP32[$1121>>2]|0;
         $1123 = $14;
         $1124 = ((($1123)) + 132|0);
         $1125 = HEAP32[$1124>>2]|0;
         $1126 = Math_imul($1122, $1125)|0;
         $1127 = (($1126|0) / 50)&-1;
         $1128 = Math_imul($1119, $1127)|0;
         $1129 = (($1118) + ($1128<<2)|0);
         $1130 = $14;
         $1131 = ((($1130)) + 132|0);
         $1132 = HEAP32[$1131>>2]|0;
         $1133 = (($1132|0) / 50)&-1;
         $1134 = $29;
         $1135 = $80;
         $1136 = Math_imul($1134, $1135)|0;
         $1137 = (($1066) + ($1136)|0);
         $1138 = $80;
         $1139 = $19;
         $1140 = $22;
         $1141 = $23;
         $1142 = $24;
         $1143 = $25;
         $1144 = $26;
         $1145 = (_opus_encode_native($1117,$1129,$1133,$1137,$1138,$1139,0,0,$1140,$1141,$1142,$1143,$1144)|0);
         $84 = $1145;
         $1146 = $84;
         $1147 = ($1146|0)<(0);
         if ($1147) {
          label = 210;
          break;
         }
         $1148 = $29;
         $1149 = $80;
         $1150 = Math_imul($1148, $1149)|0;
         $1151 = (($1066) + ($1150)|0);
         $1152 = $84;
         $1153 = (_opus_repacketizer_cat($83,$1151,$1152)|0);
         $30 = $1153;
         $1154 = $30;
         $1155 = ($1154|0)<(0);
         if ($1155) {
          label = 212;
          break;
         }
         $1156 = $29;
         $1157 = (($1156) + 1)|0;
         $29 = $1157;
        }
        do {
         if ((label|0) == 210) {
          $13 = -3;
          $85 = 1;
         }
         else if ((label|0) == 212) {
          $13 = -3;
          $85 = 1;
         }
         else if ((label|0) == 214) {
          $1158 = ((($1106)) + 136|0);
          $1159 = HEAP32[$1158>>2]|0;
          $1160 = ($1159|0)!=(0);
          if ($1160) {
           $1161 = $18;
           $81 = $1161;
          } else {
           $1162 = $14;
           $1163 = ((($1162)) + 148|0);
           $1164 = HEAP32[$1163>>2]|0;
           $1165 = ($1164*3)|0;
           $1166 = $75;
           $1167 = (1200 / ($1166|0))&-1;
           $1168 = (($1165|0) / ($1167|0))&-1;
           $1169 = $18;
           $1170 = ($1168|0)<($1169|0);
           if ($1170) {
            $1171 = $14;
            $1172 = ((($1171)) + 148|0);
            $1173 = HEAP32[$1172>>2]|0;
            $1174 = ($1173*3)|0;
            $1175 = $75;
            $1176 = (1200 / ($1175|0))&-1;
            $1177 = (($1174|0) / ($1176|0))&-1;
            $1179 = $1177;
           } else {
            $1178 = $18;
            $1179 = $1178;
           }
           $81 = $1179;
          }
          $1180 = $75;
          $1181 = $17;
          $1182 = $81;
          $1183 = $14;
          $1184 = ((($1183)) + 136|0);
          $1185 = HEAP32[$1184>>2]|0;
          $1186 = ($1185|0)!=(0);
          $1187 = $1186 ^ 1;
          $1188 = $1187&1;
          $1189 = (_opus_repacketizer_out_range_impl($83,0,$1180,$1181,$1182,0,$1188)|0);
          $30 = $1189;
          $1190 = $30;
          $1191 = ($1190|0)<(0);
          if ($1191) {
           $13 = -3;
           $85 = 1;
           break;
          } else {
           $1192 = $76;
           $1193 = $14;
           $1194 = ((($1193)) + 124|0);
           HEAP32[$1194>>2] = $1192;
           $1195 = $77;
           $1196 = $14;
           $1197 = ((($1196)) + 116|0);
           HEAP32[$1197>>2] = $1195;
           $1198 = $78;
           $1199 = $14;
           $1200 = ((($1199)) + 108|0);
           HEAP32[$1200>>2] = $1198;
           $1201 = $79;
           $1202 = $14;
           $1203 = ((($1202)) + 8|0);
           $1204 = ((($1203)) + 56|0);
           HEAP32[$1204>>2] = $1201;
           $1205 = $30;
           $13 = $1205;
           $85 = 1;
           break;
          }
         }
        } while(0);
        $1206 = $82;
        _llvm_stackrestore(($1206|0));
        $2706 = $13;
        STACKTOP = sp;return ($2706|0);
       }
      } while(0);
      $1207 = $14;
      $1208 = ((($1207)) + 14336|0);
      $1209 = HEAP32[$1208>>2]|0;
      $49 = $1209;
      $1210 = $14;
      $1211 = ((($1210)) + 14320|0);
      $1212 = HEAP32[$1211>>2]|0;
      $1213 = ($1212|0)==(1000);
      $1214 = $49;
      $1215 = ($1214|0)>(1103);
      $or$cond19 = $1213 & $1215;
      if ($or$cond19) {
       $1216 = $14;
       $1217 = ((($1216)) + 14320|0);
       HEAP32[$1217>>2] = 1001;
      }
      $1218 = $14;
      $1219 = ((($1218)) + 14320|0);
      $1220 = HEAP32[$1219>>2]|0;
      $1221 = ($1220|0)==(1001);
      $1222 = $49;
      $1223 = ($1222|0)<=(1103);
      $or$cond21 = $1221 & $1223;
      if ($or$cond21) {
       $1224 = $14;
       $1225 = ((($1224)) + 14320|0);
       HEAP32[$1225>>2] = 1000;
      }
      $1226 = $51;
      $1227 = $37;
      $1228 = (($1226) - ($1227))|0;
      $1229 = $14;
      $1230 = ((($1229)) + 148|0);
      $1231 = HEAP32[$1230>>2]|0;
      $1232 = $16;
      $1233 = Math_imul($1231, $1232)|0;
      $1234 = $14;
      $1235 = ((($1234)) + 132|0);
      $1236 = HEAP32[$1235>>2]|0;
      $1237 = $1236<<3;
      $1238 = (($1233|0) / ($1237|0))&-1;
      $1239 = ($1228|0)<($1238|0);
      if ($1239) {
       $1240 = $51;
       $1241 = $37;
       $1242 = (($1240) - ($1241))|0;
       $1254 = $1242;
      } else {
       $1243 = $14;
       $1244 = ((($1243)) + 148|0);
       $1245 = HEAP32[$1244>>2]|0;
       $1246 = $16;
       $1247 = Math_imul($1245, $1246)|0;
       $1248 = $14;
       $1249 = ((($1248)) + 132|0);
       $1250 = HEAP32[$1249>>2]|0;
       $1251 = $1250<<3;
       $1252 = (($1247|0) / ($1251|0))&-1;
       $1254 = $1252;
      }
      $1253 = (($1254) - 1)|0;
      $33 = $1253;
      $1255 = $17;
      $1256 = ((($1255)) + 1|0);
      $17 = $1256;
      $1257 = $17;
      $1258 = $51;
      $1259 = (($1258) - 1)|0;
      _ec_enc_init($32,$1257,$1259);
      $1260 = $52;
      $1261 = $16;
      $1262 = (($1260) + ($1261))|0;
      $1263 = $14;
      $1264 = ((($1263)) + 100|0);
      $1265 = HEAP32[$1264>>2]|0;
      $1266 = Math_imul($1262, $1265)|0;
      $1267 = (_llvm_stacksave()|0);
      $86 = $1267;
      $$alloca_mul215 = $1266<<2;
      $1268 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul215)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul215)|0)+15)&-16)|0);;
      $1269 = $14;
      $1270 = ((($1269)) + 14372|0);
      $1271 = $14;
      $1272 = ((($1271)) + 160|0);
      $1273 = HEAP32[$1272>>2]|0;
      $1274 = $52;
      $1275 = (($1273) - ($1274))|0;
      $1276 = $14;
      $1277 = ((($1276)) + 100|0);
      $1278 = HEAP32[$1277>>2]|0;
      $1279 = Math_imul($1275, $1278)|0;
      $1280 = (($1270) + ($1279<<2)|0);
      $1281 = $52;
      $1282 = $14;
      $1283 = ((($1282)) + 100|0);
      $1284 = HEAP32[$1283>>2]|0;
      $1285 = Math_imul($1281, $1284)|0;
      $1286 = $1285<<2;
      $1287 = $14;
      $1288 = ((($1287)) + 14372|0);
      $1289 = $14;
      $1290 = ((($1289)) + 160|0);
      $1291 = HEAP32[$1290>>2]|0;
      $1292 = $52;
      $1293 = (($1291) - ($1292))|0;
      $1294 = $14;
      $1295 = ((($1294)) + 100|0);
      $1296 = HEAP32[$1295>>2]|0;
      $1297 = Math_imul($1293, $1296)|0;
      $1298 = (($1288) + ($1297<<2)|0);
      $1299 = $1268;
      $1300 = $1298;
      $1301 = (($1299) - ($1300))|0;
      $1302 = (($1301|0) / 4)&-1;
      $1303 = 0;
      $1304 = (($1286) + ($1303))|0;
      _memcpy(($1268|0),($1280|0),($1304|0))|0;
      $1305 = $14;
      $1306 = ((($1305)) + 14320|0);
      $1307 = HEAP32[$1306>>2]|0;
      $1308 = ($1307|0)==(1002);
      if ($1308) {
       $1309 = (_silk_lin2log(60)|0);
       $1310 = $1309 << 8;
       $43 = $1310;
      } else {
       $1311 = $27;
       $1312 = ((($1311)) + 8|0);
       $1313 = HEAP32[$1312>>2]|0;
       $43 = $1313;
      }
      $1314 = $14;
      $1315 = ((($1314)) + 14296|0);
      $1316 = HEAP32[$1315>>2]|0;
      $1317 = $43;
      $1318 = $14;
      $1319 = ((($1318)) + 14296|0);
      $1320 = HEAP32[$1319>>2]|0;
      $1321 = (($1317) - ($1320))|0;
      $1322 = $1321 >> 16;
      $1323 = ($1322*983)|0;
      $1324 = $43;
      $1325 = $14;
      $1326 = ((($1325)) + 14296|0);
      $1327 = HEAP32[$1326>>2]|0;
      $1328 = (($1324) - ($1327))|0;
      $1329 = $1328 & 65535;
      $1330 = ($1329*983)|0;
      $1331 = $1330 >> 16;
      $1332 = (($1323) + ($1331))|0;
      $1333 = (($1316) + ($1332))|0;
      $1334 = $14;
      $1335 = ((($1334)) + 14296|0);
      HEAP32[$1335>>2] = $1333;
      $1336 = $14;
      $1337 = ((($1336)) + 14296|0);
      $1338 = HEAP32[$1337>>2]|0;
      $1339 = $1338 >> 8;
      $1340 = (_silk_log2lin($1339)|0);
      $42 = $1340;
      $1341 = $14;
      $1342 = ((($1341)) + 96|0);
      $1343 = HEAP32[$1342>>2]|0;
      $1344 = ($1343|0)==(2048);
      $1345 = $15;
      if ($1344) {
       $1346 = $42;
       $1347 = $52;
       $1348 = $14;
       $1349 = ((($1348)) + 100|0);
       $1350 = HEAP32[$1349>>2]|0;
       $1351 = Math_imul($1347, $1350)|0;
       $1352 = (($1268) + ($1351<<2)|0);
       $1353 = $14;
       $1354 = ((($1353)) + 14304|0);
       $1355 = $16;
       $1356 = $14;
       $1357 = ((($1356)) + 100|0);
       $1358 = HEAP32[$1357>>2]|0;
       $1359 = $14;
       $1360 = ((($1359)) + 132|0);
       $1361 = HEAP32[$1360>>2]|0;
       _hp_cutoff($1345,$1346,$1352,$1354,$1355,$1358,$1361);
      } else {
       $1362 = $52;
       $1363 = $14;
       $1364 = ((($1363)) + 100|0);
       $1365 = HEAP32[$1364>>2]|0;
       $1366 = Math_imul($1362, $1365)|0;
       $1367 = (($1268) + ($1366<<2)|0);
       $1368 = $14;
       $1369 = ((($1368)) + 14304|0);
       $1370 = $16;
       $1371 = $14;
       $1372 = ((($1371)) + 100|0);
       $1373 = HEAP32[$1372>>2]|0;
       $1374 = $14;
       $1375 = ((($1374)) + 132|0);
       $1376 = HEAP32[$1375>>2]|0;
       _dc_reject($1345,3,$1367,$1369,$1370,$1373,$1376);
      }
      $1377 = $26;
      $1378 = ($1377|0)!=(0);
      do {
       if ($1378) {
        $1379 = $52;
        $1380 = $14;
        $1381 = ((($1380)) + 100|0);
        $1382 = HEAP32[$1381>>2]|0;
        $1383 = Math_imul($1379, $1382)|0;
        $1384 = (($1268) + ($1383<<2)|0);
        $1385 = $52;
        $1386 = $14;
        $1387 = ((($1386)) + 100|0);
        $1388 = HEAP32[$1387>>2]|0;
        $1389 = Math_imul($1385, $1388)|0;
        $1390 = (($1268) + ($1389<<2)|0);
        $1391 = $16;
        $1392 = $14;
        $1393 = ((($1392)) + 100|0);
        $1394 = HEAP32[$1393>>2]|0;
        $1395 = Math_imul($1391, $1394)|0;
        $1396 = (+_celt_inner_prod_c($1384,$1390,$1395));
        $87 = $1396;
        $1397 = $87;
        $1398 = $1397 < 1.0E+9;
        if ($1398) {
         $1399 = $87;
         $1400 = $87;
         $1401 = $1399 != $1400;
         if (!($1401)) {
          break;
         }
        }
        $1402 = $52;
        $1403 = $14;
        $1404 = ((($1403)) + 100|0);
        $1405 = HEAP32[$1404>>2]|0;
        $1406 = Math_imul($1402, $1405)|0;
        $1407 = (($1268) + ($1406<<2)|0);
        $1408 = $16;
        $1409 = $14;
        $1410 = ((($1409)) + 100|0);
        $1411 = HEAP32[$1410>>2]|0;
        $1412 = Math_imul($1408, $1411)|0;
        $1413 = $1412<<2;
        _memset(($1407|0),0,($1413|0))|0;
        $1414 = $14;
        $1415 = ((($1414)) + 14304|0);
        $1416 = ((($1415)) + 12|0);
        HEAPF32[$1416>>2] = 0.0;
        $1417 = $14;
        $1418 = ((($1417)) + 14304|0);
        $1419 = ((($1418)) + 8|0);
        HEAPF32[$1419>>2] = 0.0;
        $1420 = $14;
        $1421 = ((($1420)) + 14304|0);
        $1422 = ((($1421)) + 4|0);
        HEAPF32[$1422>>2] = 0.0;
        $1423 = $14;
        $1424 = ((($1423)) + 14304|0);
        HEAPF32[$1424>>2] = 0.0;
       }
      } while(0);
      $50 = 1.0;
      $1425 = $14;
      $1426 = ((($1425)) + 14320|0);
      $1427 = HEAP32[$1426>>2]|0;
      $1428 = ($1427|0)!=(1002);
      if ($1428) {
       $1429 = $14;
       $1430 = ((($1429)) + 100|0);
       $1431 = HEAP32[$1430>>2]|0;
       $1432 = $16;
       $1433 = Math_imul($1431, $1432)|0;
       $1434 = (_llvm_stacksave()|0);
       $90 = $1434;
       $$alloca_mul217 = $1433<<1;
       $1435 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul217)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul217)|0)+15)&-16)|0);;
       $1436 = $33;
       $1437 = $1436<<3;
       $1438 = $47;
       $1439 = Math_imul($1437, $1438)|0;
       $88 = $1439;
       $1440 = $14;
       $1441 = ((($1440)) + 14320|0);
       $1442 = HEAP32[$1441>>2]|0;
       $1443 = ($1442|0)==(1001);
       do {
        if ($1443) {
         $1444 = $14;
         $1445 = ((($1444)) + 14288|0);
         $1446 = HEAP32[$1445>>2]|0;
         $1447 = $14;
         $1448 = ((($1447)) + 132|0);
         $1449 = HEAP32[$1448>>2]|0;
         $1450 = $16;
         $1451 = ($1450*100)|0;
         $1452 = ($1449|0)==($1451|0);
         $1453 = $1452&1;
         $1454 = ($1453*1000)|0;
         $1455 = (5000 + ($1454))|0;
         $1456 = Math_imul($1446, $1455)|0;
         $1457 = $14;
         $1458 = ((($1457)) + 8|0);
         $1459 = ((($1458)) + 28|0);
         HEAP32[$1459>>2] = $1456;
         $1460 = $49;
         $1461 = ($1460|0)==(1104);
         $1462 = $88;
         $1463 = $14;
         $1464 = ((($1463)) + 8|0);
         $1465 = ((($1464)) + 28|0);
         $1466 = HEAP32[$1465>>2]|0;
         $1467 = (($1462) - ($1466))|0;
         if ($1461) {
          $1468 = $1467<<1;
          $1469 = (($1468|0) / 3)&-1;
          $1470 = $14;
          $$sink25 = $1469;$$sink48 = $1470;
         } else {
          $1471 = ($1467*3)|0;
          $1472 = (($1471|0) / 5)&-1;
          $1473 = $14;
          $$sink25 = $1472;$$sink48 = $1473;
         }
         $1474 = ((($$sink48)) + 8|0);
         $1475 = ((($1474)) + 28|0);
         $1476 = HEAP32[$1475>>2]|0;
         $1477 = (($1476) + ($$sink25))|0;
         HEAP32[$1475>>2] = $1477;
         $1478 = $14;
         $1479 = ((($1478)) + 8|0);
         $1480 = ((($1479)) + 28|0);
         $1481 = HEAP32[$1480>>2]|0;
         $1482 = $88;
         $1483 = $1482<<2;
         $1484 = (($1483|0) / 5)&-1;
         $1485 = ($1481|0)>($1484|0);
         if ($1485) {
          $1486 = $88;
          $1487 = $1486<<2;
          $1488 = (($1487|0) / 5)&-1;
          $1489 = $14;
          $1490 = ((($1489)) + 8|0);
          $1491 = ((($1490)) + 28|0);
          HEAP32[$1491>>2] = $1488;
         }
         $1492 = $14;
         $1493 = ((($1492)) + 14348|0);
         $1494 = HEAP32[$1493>>2]|0;
         $1495 = ($1494|0)!=(0|0);
         if ($1495) {
          break;
         }
         $1496 = $88;
         $1497 = $14;
         $1498 = ((($1497)) + 8|0);
         $1499 = ((($1498)) + 28|0);
         $1500 = HEAP32[$1499>>2]|0;
         $1501 = (($1496) - ($1500))|0;
         $89 = $1501;
         $1502 = $49;
         $1503 = ($1502|0)==(1104);
         $1504 = $1503 ? 3000 : 3600;
         $91 = $1504;
         $1505 = $89;
         $1506 = (+($1505|0));
         $1507 = $89;
         $1508 = (+($1507|0));
         $1509 = $14;
         $1510 = ((($1509)) + 14288|0);
         $1511 = HEAP32[$1510>>2]|0;
         $1512 = $91;
         $1513 = Math_imul($1511, $1512)|0;
         $1514 = (+($1513|0));
         $1515 = $1508 + $1514;
         $1516 = $1506 / $1515;
         $50 = $1516;
         $1517 = $50;
         $1518 = $1517 < 0.8571428656578064;
         $1519 = $50;
         $1520 = $1519 + 0.1428571492433548;
         $1521 = $1518 ? $1520 : 1.0;
         $50 = $1521;
        } else {
         $1522 = $88;
         $1523 = $14;
         $1524 = ((($1523)) + 8|0);
         $1525 = ((($1524)) + 28|0);
         HEAP32[$1525>>2] = $1522;
        }
       } while(0);
       $1526 = $14;
       $1527 = ((($1526)) + 14348|0);
       $1528 = HEAP32[$1527>>2]|0;
       $1529 = ($1528|0)!=(0|0);
       do {
        if ($1529) {
         $1530 = $14;
         $1531 = ((($1530)) + 136|0);
         $1532 = HEAP32[$1531>>2]|0;
         $1533 = ($1532|0)!=(0);
         if (!($1533)) {
          break;
         }
         $1534 = $14;
         $1535 = ((($1534)) + 164|0);
         $1536 = HEAP32[$1535>>2]|0;
         $1537 = ($1536|0)!=(0);
         if ($1537) {
          break;
         }
         $92 = 0.0;
         $96 = 17;
         $97 = 16000;
         $1538 = $14;
         $1539 = ((($1538)) + 14336|0);
         $1540 = HEAP32[$1539>>2]|0;
         $1541 = ($1540|0)==(1101);
         do {
          if ($1541) {
           $96 = 13;
           $97 = 8000;
          } else {
           $1542 = $14;
           $1543 = ((($1542)) + 14336|0);
           $1544 = HEAP32[$1543>>2]|0;
           $1545 = ($1544|0)==(1102);
           if (!($1545)) {
            break;
           }
           $96 = 15;
           $97 = 12000;
          }
         } while(0);
         $95 = 0;
         while(1) {
          $1546 = $95;
          $1547 = $14;
          $1548 = ((($1547)) + 100|0);
          $1549 = HEAP32[$1548>>2]|0;
          $1550 = ($1546|0)<($1549|0);
          if (!($1550)) {
           break;
          }
          $29 = 0;
          while(1) {
           $1551 = $29;
           $1552 = $96;
           $1553 = ($1551|0)<($1552|0);
           if (!($1553)) {
            break;
           }
           $1554 = $14;
           $1555 = ((($1554)) + 14348|0);
           $1556 = HEAP32[$1555>>2]|0;
           $1557 = $95;
           $1558 = ($1557*21)|0;
           $1559 = $29;
           $1560 = (($1558) + ($1559))|0;
           $1561 = (($1556) + ($1560<<2)|0);
           $1562 = +HEAPF32[$1561>>2];
           $1563 = $1562 < 0.5;
           if ($1563) {
            $1564 = $14;
            $1565 = ((($1564)) + 14348|0);
            $1566 = HEAP32[$1565>>2]|0;
            $1567 = $95;
            $1568 = ($1567*21)|0;
            $1569 = $29;
            $1570 = (($1568) + ($1569))|0;
            $1571 = (($1566) + ($1570<<2)|0);
            $1572 = +HEAPF32[$1571>>2];
            $1574 = $1572;
           } else {
            $1574 = 0.5;
           }
           $1573 = $1574 > -2.0;
           do {
            if ($1573) {
             $1575 = $14;
             $1576 = ((($1575)) + 14348|0);
             $1577 = HEAP32[$1576>>2]|0;
             $1578 = $95;
             $1579 = ($1578*21)|0;
             $1580 = $29;
             $1581 = (($1579) + ($1580))|0;
             $1582 = (($1577) + ($1581<<2)|0);
             $1583 = +HEAPF32[$1582>>2];
             $1584 = $1583 < 0.5;
             if (!($1584)) {
              $1594 = 0.5;
              break;
             }
             $1585 = $14;
             $1586 = ((($1585)) + 14348|0);
             $1587 = HEAP32[$1586>>2]|0;
             $1588 = $95;
             $1589 = ($1588*21)|0;
             $1590 = $29;
             $1591 = (($1589) + ($1590))|0;
             $1592 = (($1587) + ($1591<<2)|0);
             $1593 = +HEAPF32[$1592>>2];
             $1594 = $1593;
            } else {
             $1594 = -2.0;
            }
           } while(0);
           $98 = $1594;
           $1595 = $98;
           $1596 = $1595 > 0.0;
           if ($1596) {
            $1597 = $98;
            $1598 = 0.5 * $1597;
            $98 = $1598;
           }
           $1599 = $98;
           $1600 = $92;
           $1601 = $1600 + $1599;
           $92 = $1601;
           $1602 = $29;
           $1603 = (($1602) + 1)|0;
           $29 = $1603;
          }
          $1604 = $95;
          $1605 = (($1604) + 1)|0;
          $95 = $1605;
         }
         $1606 = $92;
         $1607 = $96;
         $1608 = (+($1607|0));
         $1609 = $1606 / $1608;
         $1610 = $14;
         $1611 = ((($1610)) + 100|0);
         $1612 = HEAP32[$1611>>2]|0;
         $1613 = (+($1612|0));
         $1614 = $1609 * $1613;
         $93 = $1614;
         $1615 = $93;
         $1616 = $1615 + 0.20000000298023224;
         $93 = $1616;
         $1617 = $97;
         $1618 = (+($1617<<16>>16));
         $1619 = $93;
         $1620 = $1618 * $1619;
         $1621 = (~~(($1620)));
         $94 = $1621;
         $1622 = $94;
         $1623 = $14;
         $1624 = ((($1623)) + 8|0);
         $1625 = ((($1624)) + 28|0);
         $1626 = HEAP32[$1625>>2]|0;
         $1627 = Math_imul(-2, $1626)|0;
         $1628 = (($1627|0) / 3)&-1;
         $1629 = ($1622|0)>($1628|0);
         if ($1629) {
          $1630 = $94;
          $1637 = $1630;
         } else {
          $1631 = $14;
          $1632 = ((($1631)) + 8|0);
          $1633 = ((($1632)) + 28|0);
          $1634 = HEAP32[$1633>>2]|0;
          $1635 = Math_imul(-2, $1634)|0;
          $1636 = (($1635|0) / 3)&-1;
          $1637 = $1636;
         }
         $94 = $1637;
         $1638 = $14;
         $1639 = ((($1638)) + 14336|0);
         $1640 = HEAP32[$1639>>2]|0;
         $1641 = ($1640|0)==(1104);
         do {
          if ($1641) {
           label = 276;
          } else {
           $1642 = $14;
           $1643 = ((($1642)) + 14336|0);
           $1644 = HEAP32[$1643>>2]|0;
           $1645 = ($1644|0)==(1105);
           if ($1645) {
            label = 276;
            break;
           }
           $1650 = $94;
           $1651 = $14;
           $$sink30 = $1650;$$sink50 = $1651;
          }
         } while(0);
         if ((label|0) == 276) {
          $1646 = $94;
          $1647 = ($1646*3)|0;
          $1648 = (($1647|0) / 5)&-1;
          $1649 = $14;
          $$sink30 = $1648;$$sink50 = $1649;
         }
         $1652 = ((($$sink50)) + 8|0);
         $1653 = ((($1652)) + 28|0);
         $1654 = HEAP32[$1653>>2]|0;
         $1655 = (($1654) + ($$sink30))|0;
         HEAP32[$1653>>2] = $1655;
         $1656 = $94;
         $1657 = $16;
         $1658 = Math_imul($1656, $1657)|0;
         $1659 = $14;
         $1660 = ((($1659)) + 132|0);
         $1661 = HEAP32[$1660>>2]|0;
         $1662 = $1661<<3;
         $1663 = (($1658|0) / ($1662|0))&-1;
         $1664 = $33;
         $1665 = (($1664) + ($1663))|0;
         $33 = $1665;
        }
       } while(0);
       $1666 = $16;
       $1667 = ($1666*1000)|0;
       $1668 = $14;
       $1669 = ((($1668)) + 132|0);
       $1670 = HEAP32[$1669>>2]|0;
       $1671 = (($1667|0) / ($1670|0))&-1;
       $1672 = $14;
       $1673 = ((($1672)) + 8|0);
       $1674 = ((($1673)) + 24|0);
       HEAP32[$1674>>2] = $1671;
       $1675 = $14;
       $1676 = ((($1675)) + 100|0);
       $1677 = HEAP32[$1676>>2]|0;
       $1678 = $14;
       $1679 = ((($1678)) + 8|0);
       HEAP32[$1679>>2] = $1677;
       $1680 = $14;
       $1681 = ((($1680)) + 14288|0);
       $1682 = HEAP32[$1681>>2]|0;
       $1683 = $14;
       $1684 = ((($1683)) + 8|0);
       $1685 = ((($1684)) + 4|0);
       HEAP32[$1685>>2] = $1682;
       $1686 = $49;
       $1687 = ($1686|0)==(1101);
       if ($1687) {
        $1688 = $14;
        $1689 = ((($1688)) + 8|0);
        $1690 = ((($1689)) + 20|0);
        HEAP32[$1690>>2] = 8000;
       } else {
        $1691 = $49;
        $1692 = ($1691|0)==(1102);
        $1693 = $14;
        $1694 = ((($1693)) + 8|0);
        $1695 = ((($1694)) + 20|0);
        $$sink32 = $1692 ? 12000 : 16000;
        HEAP32[$1695>>2] = $$sink32;
       }
       $1696 = $14;
       $1697 = ((($1696)) + 14320|0);
       $1698 = HEAP32[$1697>>2]|0;
       $1699 = ($1698|0)==(1001);
       $1700 = $14;
       $1701 = ((($1700)) + 8|0);
       $1702 = ((($1701)) + 16|0);
       $$sink33 = $1699 ? 16000 : 8000;
       HEAP32[$1702>>2] = $$sink33;
       $1703 = $14;
       $1704 = ((($1703)) + 14320|0);
       $1705 = HEAP32[$1704>>2]|0;
       $1706 = ($1705|0)==(1000);
       do {
        if ($1706) {
         $1707 = $48;
         $99 = $1707;
         $1708 = $14;
         $1709 = ((($1708)) + 8|0);
         $1710 = ((($1709)) + 12|0);
         HEAP32[$1710>>2] = 16000;
         $1711 = $47;
         $1712 = ($1711|0)>(50);
         if ($1712) {
          $1713 = $99;
          $1714 = $1713<<1;
          $1715 = (($1714|0) / 3)&-1;
          $99 = $1715;
         }
         $1716 = $99;
         $1717 = ($1716|0)<(13000);
         if ($1717) {
          $1718 = $14;
          $1719 = ((($1718)) + 8|0);
          $1720 = ((($1719)) + 12|0);
          HEAP32[$1720>>2] = 12000;
          $1721 = $14;
          $1722 = ((($1721)) + 8|0);
          $1723 = ((($1722)) + 20|0);
          $1724 = HEAP32[$1723>>2]|0;
          $1725 = (12000)<($1724|0);
          if ($1725) {
           $1733 = 12000;
          } else {
           $1726 = $14;
           $1727 = ((($1726)) + 8|0);
           $1728 = ((($1727)) + 20|0);
           $1729 = HEAP32[$1728>>2]|0;
           $1733 = $1729;
          }
          $1730 = $14;
          $1731 = ((($1730)) + 8|0);
          $1732 = ((($1731)) + 20|0);
          HEAP32[$1732>>2] = $1733;
         }
         $1734 = $99;
         $1735 = ($1734|0)<(9600);
         if (!($1735)) {
          break;
         }
         $1736 = $14;
         $1737 = ((($1736)) + 8|0);
         $1738 = ((($1737)) + 12|0);
         HEAP32[$1738>>2] = 8000;
         $1739 = $14;
         $1740 = ((($1739)) + 8|0);
         $1741 = ((($1740)) + 20|0);
         $1742 = HEAP32[$1741>>2]|0;
         $1743 = (8000)<($1742|0);
         if ($1743) {
          $1751 = 8000;
         } else {
          $1744 = $14;
          $1745 = ((($1744)) + 8|0);
          $1746 = ((($1745)) + 20|0);
          $1747 = HEAP32[$1746>>2]|0;
          $1751 = $1747;
         }
         $1748 = $14;
         $1749 = ((($1748)) + 8|0);
         $1750 = ((($1749)) + 20|0);
         HEAP32[$1750>>2] = $1751;
        } else {
         $1752 = $14;
         $1753 = ((($1752)) + 8|0);
         $1754 = ((($1753)) + 12|0);
         HEAP32[$1754>>2] = 16000;
        }
       } while(0);
       $1755 = $14;
       $1756 = ((($1755)) + 136|0);
       $1757 = HEAP32[$1756>>2]|0;
       $1758 = ($1757|0)!=(0);
       $1759 = $1758 ^ 1;
       $1760 = $1759&1;
       $1761 = $14;
       $1762 = ((($1761)) + 8|0);
       $1763 = ((($1762)) + 48|0);
       HEAP32[$1763>>2] = $1760;
       $1764 = $51;
       $1765 = (($1764) - 1)|0;
       $1766 = $37;
       $1767 = (($1765) - ($1766))|0;
       $1768 = (1275)<($1767|0);
       if ($1768) {
        $1773 = 1275;
       } else {
        $1769 = $51;
        $1770 = (($1769) - 1)|0;
        $1771 = $37;
        $1772 = (($1770) - ($1771))|0;
        $1773 = $1772;
       }
       HEAP32[$31>>2] = $1773;
       $1774 = HEAP32[$31>>2]|0;
       $1775 = $1774<<3;
       $1776 = $14;
       $1777 = ((($1776)) + 8|0);
       $1778 = ((($1777)) + 52|0);
       HEAP32[$1778>>2] = $1775;
       $1779 = $14;
       $1780 = ((($1779)) + 14320|0);
       $1781 = HEAP32[$1780>>2]|0;
       $1782 = ($1781|0)==(1001);
       if ($1782) {
        $1783 = $14;
        $1784 = ((($1783)) + 8|0);
        $1785 = ((($1784)) + 52|0);
        $1786 = HEAP32[$1785>>2]|0;
        $1787 = ($1786*9)|0;
        $1788 = (($1787|0) / 10)&-1;
        $1789 = $14;
        $1790 = ((($1789)) + 8|0);
        $1791 = ((($1790)) + 52|0);
        HEAP32[$1791>>2] = $1788;
       }
       $1792 = $14;
       $1793 = ((($1792)) + 8|0);
       $1794 = ((($1793)) + 48|0);
       $1795 = HEAP32[$1794>>2]|0;
       $1796 = ($1795|0)!=(0);
       if ($1796) {
        $1797 = $14;
        $1798 = ((($1797)) + 8|0);
        $1799 = ((($1798)) + 28|0);
        $1800 = HEAP32[$1799>>2]|0;
        $1801 = $16;
        $1802 = Math_imul($1800, $1801)|0;
        $1803 = $14;
        $1804 = ((($1803)) + 132|0);
        $1805 = HEAP32[$1804>>2]|0;
        $1806 = $1805<<3;
        $1807 = (($1802|0) / ($1806|0))&-1;
        $1808 = $1807<<3;
        $1809 = $14;
        $1810 = ((($1809)) + 8|0);
        $1811 = ((($1810)) + 52|0);
        HEAP32[$1811>>2] = $1808;
        $1812 = $14;
        $1813 = ((($1812)) + 8|0);
        $1814 = ((($1813)) + 28|0);
        $1815 = HEAP32[$1814>>2]|0;
        $1816 = (($1815) - 2000)|0;
        $1817 = (1)>($1816|0);
        if ($1817) {
         $1826 = 1;
        } else {
         $1818 = $14;
         $1819 = ((($1818)) + 8|0);
         $1820 = ((($1819)) + 28|0);
         $1821 = HEAP32[$1820>>2]|0;
         $1822 = (($1821) - 2000)|0;
         $1826 = $1822;
        }
        $1823 = $14;
        $1824 = ((($1823)) + 8|0);
        $1825 = ((($1824)) + 28|0);
        HEAP32[$1825>>2] = $1826;
       }
       $1827 = $34;
       $1828 = ($1827|0)!=(0);
       if ($1828) {
        HEAP32[$100>>2] = 0;
        $1829 = $14;
        $1830 = ((($1829)) + 100|0);
        $1831 = HEAP32[$1830>>2]|0;
        $1832 = $14;
        $1833 = ((($1832)) + 160|0);
        $1834 = HEAP32[$1833>>2]|0;
        $1835 = $14;
        $1836 = ((($1835)) + 104|0);
        $1837 = HEAP32[$1836>>2]|0;
        $1838 = (($1834) - ($1837))|0;
        $1839 = $14;
        $1840 = ((($1839)) + 132|0);
        $1841 = HEAP32[$1840>>2]|0;
        $1842 = (($1841|0) / 400)&-1;
        $1843 = (($1838) - ($1842))|0;
        $1844 = Math_imul($1831, $1843)|0;
        $101 = $1844;
        $1845 = $14;
        $1846 = ((($1845)) + 14372|0);
        $1847 = $101;
        $1848 = (($1846) + ($1847<<2)|0);
        $1849 = $14;
        $1850 = ((($1849)) + 14372|0);
        $1851 = $101;
        $1852 = (($1850) + ($1851<<2)|0);
        $1853 = HEAP32[$54>>2]|0;
        $1854 = ((($1853)) + 4|0);
        $1855 = HEAP32[$1854>>2]|0;
        $1856 = $14;
        $1857 = ((($1856)) + 132|0);
        $1858 = HEAP32[$1857>>2]|0;
        $1859 = (($1858|0) / 400)&-1;
        $1860 = $14;
        $1861 = ((($1860)) + 100|0);
        $1862 = HEAP32[$1861>>2]|0;
        $1863 = HEAP32[$54>>2]|0;
        $1864 = ((($1863)) + 60|0);
        $1865 = HEAP32[$1864>>2]|0;
        $1866 = $14;
        $1867 = ((($1866)) + 132|0);
        $1868 = HEAP32[$1867>>2]|0;
        _gain_fade($1848,$1852,0.0,1.0,$1855,$1859,$1862,$1865,$1868);
        $1869 = $14;
        $1870 = ((($1869)) + 14372|0);
        $1871 = $101;
        $1872 = $1871<<2;
        _memset(($1870|0),0,($1872|0))|0;
        $29 = 0;
        while(1) {
         $1873 = $29;
         $1874 = $14;
         $1875 = ((($1874)) + 160|0);
         $1876 = HEAP32[$1875>>2]|0;
         $1877 = $14;
         $1878 = ((($1877)) + 100|0);
         $1879 = HEAP32[$1878>>2]|0;
         $1880 = Math_imul($1876, $1879)|0;
         $1881 = ($1873|0)<($1880|0);
         if (!($1881)) {
          break;
         }
         $1882 = $14;
         $1883 = ((($1882)) + 14372|0);
         $1884 = $29;
         $1885 = (($1883) + ($1884<<2)|0);
         $1886 = +HEAPF32[$1885>>2];
         $1887 = (_FLOAT2INT16_13($1886)|0);
         $1888 = $29;
         $1889 = (($1435) + ($1888<<1)|0);
         HEAP16[$1889>>1] = $1887;
         $1890 = $29;
         $1891 = (($1890) + 1)|0;
         $29 = $1891;
        }
        $1892 = $27;
        $1893 = $14;
        $1894 = ((($1893)) + 8|0);
        $1895 = $14;
        $1896 = ((($1895)) + 160|0);
        $1897 = HEAP32[$1896>>2]|0;
        (_silk_Encode($1892,$1894,$1435,$1897,0,$100,1)|0);
       }
       $29 = 0;
       while(1) {
        $1898 = $29;
        $1899 = $16;
        $1900 = $14;
        $1901 = ((($1900)) + 100|0);
        $1902 = HEAP32[$1901>>2]|0;
        $1903 = Math_imul($1899, $1902)|0;
        $1904 = ($1898|0)<($1903|0);
        if (!($1904)) {
         break;
        }
        $1905 = $52;
        $1906 = $14;
        $1907 = ((($1906)) + 100|0);
        $1908 = HEAP32[$1907>>2]|0;
        $1909 = Math_imul($1905, $1908)|0;
        $1910 = $29;
        $1911 = (($1909) + ($1910))|0;
        $1912 = (($1268) + ($1911<<2)|0);
        $1913 = +HEAPF32[$1912>>2];
        $1914 = (_FLOAT2INT16_13($1913)|0);
        $1915 = $29;
        $1916 = (($1435) + ($1915<<1)|0);
        HEAP16[$1916>>1] = $1914;
        $1917 = $29;
        $1918 = (($1917) + 1)|0;
        $29 = $1918;
       }
       $1919 = $27;
       $1920 = $14;
       $1921 = ((($1920)) + 8|0);
       $1922 = $16;
       $1923 = (_silk_Encode($1919,$1921,$1435,$1922,$32,$31,0)|0);
       $30 = $1923;
       $1924 = $30;
       $1925 = ($1924|0)!=(0);
       do {
        if ($1925) {
         $13 = -3;
         $85 = 1;
        } else {
         $1926 = HEAP32[$31>>2]|0;
         $1927 = ($1926|0)==(0);
         $1928 = $14;
         if ($1927) {
          $1929 = ((($1928)) + 18216|0);
          HEAP32[$1929>>2] = 0;
          $1930 = $14;
          $1931 = ((($1930)) + 14320|0);
          $1932 = HEAP32[$1931>>2]|0;
          $1933 = $14;
          $1934 = ((($1933)) + 132|0);
          $1935 = HEAP32[$1934>>2]|0;
          $1936 = $16;
          $1937 = (($1935|0) / ($1936|0))&-1;
          $1938 = $49;
          $1939 = $14;
          $1940 = ((($1939)) + 14288|0);
          $1941 = HEAP32[$1940>>2]|0;
          $1942 = (_gen_toc($1932,$1937,$1938,$1941)|0);
          $1943 = $17;
          $1944 = ((($1943)) + -1|0);
          HEAP8[$1944>>0] = $1942;
          $13 = 1;
          $85 = 1;
          break;
         }
         $1945 = ((($1928)) + 14320|0);
         $1946 = HEAP32[$1945>>2]|0;
         $1947 = ($1946|0)==(1000);
         do {
          if ($1947) {
           $1948 = $14;
           $1949 = ((($1948)) + 8|0);
           $1950 = ((($1949)) + 68|0);
           $1951 = HEAP32[$1950>>2]|0;
           $1952 = ($1951|0)==(8000);
           if ($1952) {
            $49 = 1101;
            break;
           }
           $1953 = $14;
           $1954 = ((($1953)) + 8|0);
           $1955 = ((($1954)) + 68|0);
           $1956 = HEAP32[$1955>>2]|0;
           $1957 = ($1956|0)==(12000);
           if ($1957) {
            $49 = 1102;
            break;
           }
           $1958 = $14;
           $1959 = ((($1958)) + 8|0);
           $1960 = ((($1959)) + 68|0);
           $1961 = HEAP32[$1960>>2]|0;
           $1962 = ($1961|0)==(16000);
           if (!($1962)) {
            break;
           }
           $49 = 1103;
          }
         } while(0);
         $1963 = $14;
         $1964 = ((($1963)) + 8|0);
         $1965 = ((($1964)) + 84|0);
         $1966 = HEAP32[$1965>>2]|0;
         $1967 = $14;
         $1968 = ((($1967)) + 8|0);
         $1969 = ((($1968)) + 60|0);
         HEAP32[$1969>>2] = $1966;
         $1970 = $14;
         $1971 = ((($1970)) + 8|0);
         $1972 = ((($1971)) + 60|0);
         $1973 = HEAP32[$1972>>2]|0;
         $1974 = ($1973|0)!=(0);
         if ($1974) {
          $36 = 1;
          $38 = 0;
          $1975 = $14;
          $1976 = ((($1975)) + 14340|0);
          HEAP32[$1976>>2] = 1;
         }
         $85 = 0;
        }
       } while(0);
       $1977 = $90;
       _llvm_stackrestore(($1977|0));
       $1978 = $85;
       $cond = ($1978|0)==(0);
       if ($cond) {
        label = 325;
       }
      } else {
       label = 325;
      }
      L430: do {
       if ((label|0) == 325) {
        $102 = 21;
        $1979 = $49;
        switch ($1979|0) {
        case 1101:  {
         $102 = 13;
         break;
        }
        case 1103: case 1102:  {
         $102 = 17;
         break;
        }
        case 1104:  {
         $102 = 19;
         break;
        }
        case 1105:  {
         $102 = 21;
         break;
        }
        default: {
        }
        }
        $1980 = $28;
        $1981 = $102;
        HEAP32[$vararg_buffer56>>2] = $1981;
        (_opus_custom_encoder_ctl($1980,10012,$vararg_buffer56)|0);
        $1982 = $28;
        $1983 = $14;
        $1984 = ((($1983)) + 14288|0);
        $1985 = HEAP32[$1984>>2]|0;
        HEAP32[$vararg_buffer59>>2] = $1985;
        (_opus_custom_encoder_ctl($1982,10008,$vararg_buffer59)|0);
        $1986 = $28;
        HEAP32[$vararg_buffer62>>2] = -1;
        (_opus_custom_encoder_ctl($1986,4002,$vararg_buffer62)|0);
        $1987 = $14;
        $1988 = ((($1987)) + 14320|0);
        $1989 = HEAP32[$1988>>2]|0;
        $1990 = ($1989|0)!=(1000);
        do {
         if ($1990) {
          $103 = 2.0;
          $1991 = $28;
          HEAP32[$vararg_buffer65>>2] = 0;
          (_opus_custom_encoder_ctl($1991,4006,$vararg_buffer65)|0);
          $1992 = $14;
          $1993 = ((($1992)) + 8|0);
          $1994 = ((($1993)) + 64|0);
          $1995 = HEAP32[$1994>>2]|0;
          $1996 = ($1995|0)!=(0);
          if ($1996) {
           $103 = 0.0;
          }
          $1997 = $28;
          $1998 = $103;
          $1999 = (~~(($1998)));
          HEAP32[$vararg_buffer68>>2] = $1999;
          (_opus_custom_encoder_ctl($1997,10002,$vararg_buffer68)|0);
          $2000 = $14;
          $2001 = ((($2000)) + 14320|0);
          $2002 = HEAP32[$2001>>2]|0;
          $2003 = ($2002|0)==(1001);
          if ($2003) {
           $2004 = (_ec_tell_14($32)|0);
           $2005 = (($2004) + 7)|0;
           $2006 = $2005 >> 3;
           $104 = $2006;
           $2007 = $36;
           $2008 = ($2007|0)!=(0);
           if ($2008) {
            $2009 = $14;
            $2010 = ((($2009)) + 14320|0);
            $2011 = HEAP32[$2010>>2]|0;
            $2012 = ($2011|0)==(1001);
            $2013 = $2012 ? 3 : 1;
            $2014 = $104;
            $2015 = (($2014) + ($2013))|0;
            $104 = $2015;
           }
           $2016 = $14;
           $2017 = ((($2016)) + 136|0);
           $2018 = HEAP32[$2017>>2]|0;
           $2019 = ($2018|0)!=(0);
           $2020 = $104;
           $2021 = $33;
           if ($2019) {
            $2022 = (($2020) + ($2021))|0;
            $2023 = $14;
            $2024 = ((($2023)) + 8|0);
            $2025 = ((($2024)) + 28|0);
            $2026 = HEAP32[$2025>>2]|0;
            $2027 = $16;
            $2028 = Math_imul($2026, $2027)|0;
            $2029 = $14;
            $2030 = ((($2029)) + 132|0);
            $2031 = HEAP32[$2030>>2]|0;
            $2032 = $2031<<3;
            $2033 = (($2028|0) / ($2032|0))&-1;
            $2034 = (($2022) - ($2033))|0;
            $39 = $2034;
            break;
           } else {
            $2035 = ($2020|0)>($2021|0);
            $2036 = $104;
            $2037 = $33;
            $2038 = $2035 ? $2036 : $2037;
            $39 = $2038;
            break;
           }
          }
          $2039 = $14;
          $2040 = ((($2039)) + 136|0);
          $2041 = HEAP32[$2040>>2]|0;
          $2042 = ($2041|0)!=(0);
          if (!($2042)) {
           $2090 = $33;
           $39 = $2090;
           break;
          }
          $105 = 0;
          $2043 = $14;
          $2044 = ((($2043)) + 144|0);
          $2045 = HEAP32[$2044>>2]|0;
          $2046 = ($2045|0)==(5010);
          do {
           if ($2046) {
            $2047 = $16;
            $2048 = $14;
            $2049 = ((($2048)) + 132|0);
            $2050 = HEAP32[$2049>>2]|0;
            $2051 = (($2050|0) / 50)&-1;
            $2052 = ($2047|0)!=($2051|0);
            if (!($2052)) {
             break;
            }
            $2053 = $14;
            $2054 = ((($2053)) + 14288|0);
            $2055 = HEAP32[$2054>>2]|0;
            $2056 = ($2055*60)|0;
            $2057 = (($2056) + 40)|0;
            $2058 = $14;
            $2059 = ((($2058)) + 132|0);
            $2060 = HEAP32[$2059>>2]|0;
            $2061 = $16;
            $2062 = (($2060|0) / ($2061|0))&-1;
            $2063 = (($2062) - 50)|0;
            $2064 = Math_imul($2057, $2063)|0;
            $105 = $2064;
            $2065 = HEAP32[$55>>2]|0;
            $2066 = ($2065|0)!=(0);
            if (!($2066)) {
             break;
            }
            $2067 = $105;
            $2068 = (+($2067|0));
            $2069 = ((($55)) + 4|0);
            $2070 = +HEAPF32[$2069>>2];
            $2071 = 0.5 * $2070;
            $2072 = 1.0 + $2071;
            $2073 = $2068 * $2072;
            $2074 = (~~(($2073)));
            $105 = $2074;
           }
          } while(0);
          $2075 = $28;
          HEAP32[$vararg_buffer71>>2] = 1;
          (_opus_custom_encoder_ctl($2075,4006,$vararg_buffer71)|0);
          $2076 = $28;
          $2077 = $14;
          $2078 = ((($2077)) + 140|0);
          $2079 = HEAP32[$2078>>2]|0;
          HEAP32[$vararg_buffer74>>2] = $2079;
          (_opus_custom_encoder_ctl($2076,4020,$vararg_buffer74)|0);
          $2080 = $28;
          $2081 = $14;
          $2082 = ((($2081)) + 148|0);
          $2083 = HEAP32[$2082>>2]|0;
          $2084 = $105;
          $2085 = (($2083) + ($2084))|0;
          HEAP32[$vararg_buffer77>>2] = $2085;
          (_opus_custom_encoder_ctl($2080,4002,$vararg_buffer77)|0);
          $2086 = $51;
          $2087 = (($2086) - 1)|0;
          $2088 = $37;
          $2089 = (($2087) - ($2088))|0;
          $39 = $2089;
         } else {
          $39 = 0;
         }
        } while(0);
        $2091 = $14;
        $2092 = ((($2091)) + 100|0);
        $2093 = HEAP32[$2092>>2]|0;
        $2094 = $14;
        $2095 = ((($2094)) + 132|0);
        $2096 = HEAP32[$2095>>2]|0;
        $2097 = Math_imul($2093, $2096)|0;
        $2098 = (($2097|0) / 400)&-1;
        $$alloca_mul219 = $2098<<2;
        $2099 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul219)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul219)|0)+15)&-16)|0);;
        $2100 = $14;
        $2101 = ((($2100)) + 14320|0);
        $2102 = HEAP32[$2101>>2]|0;
        $2103 = ($2102|0)!=(1000);
        do {
         if ($2103) {
          $2104 = $14;
          $2105 = ((($2104)) + 14320|0);
          $2106 = HEAP32[$2105>>2]|0;
          $2107 = $14;
          $2108 = ((($2107)) + 14324|0);
          $2109 = HEAP32[$2108>>2]|0;
          $2110 = ($2106|0)!=($2109|0);
          if (!($2110)) {
           break;
          }
          $2111 = $14;
          $2112 = ((($2111)) + 14324|0);
          $2113 = HEAP32[$2112>>2]|0;
          $2114 = ($2113|0)>(0);
          if (!($2114)) {
           break;
          }
          $2115 = $14;
          $2116 = ((($2115)) + 14372|0);
          $2117 = $14;
          $2118 = ((($2117)) + 160|0);
          $2119 = HEAP32[$2118>>2]|0;
          $2120 = $52;
          $2121 = (($2119) - ($2120))|0;
          $2122 = $14;
          $2123 = ((($2122)) + 132|0);
          $2124 = HEAP32[$2123>>2]|0;
          $2125 = (($2124|0) / 400)&-1;
          $2126 = (($2121) - ($2125))|0;
          $2127 = $14;
          $2128 = ((($2127)) + 100|0);
          $2129 = HEAP32[$2128>>2]|0;
          $2130 = Math_imul($2126, $2129)|0;
          $2131 = (($2116) + ($2130<<2)|0);
          $2132 = $14;
          $2133 = ((($2132)) + 100|0);
          $2134 = HEAP32[$2133>>2]|0;
          $2135 = $14;
          $2136 = ((($2135)) + 132|0);
          $2137 = HEAP32[$2136>>2]|0;
          $2138 = Math_imul($2134, $2137)|0;
          $2139 = (($2138|0) / 400)&-1;
          $2140 = $2139<<2;
          $2141 = $14;
          $2142 = ((($2141)) + 14372|0);
          $2143 = $14;
          $2144 = ((($2143)) + 160|0);
          $2145 = HEAP32[$2144>>2]|0;
          $2146 = $52;
          $2147 = (($2145) - ($2146))|0;
          $2148 = $14;
          $2149 = ((($2148)) + 132|0);
          $2150 = HEAP32[$2149>>2]|0;
          $2151 = (($2150|0) / 400)&-1;
          $2152 = (($2147) - ($2151))|0;
          $2153 = $14;
          $2154 = ((($2153)) + 100|0);
          $2155 = HEAP32[$2154>>2]|0;
          $2156 = Math_imul($2152, $2155)|0;
          $2157 = (($2142) + ($2156<<2)|0);
          $2158 = $2099;
          $2159 = $2157;
          $2160 = (($2158) - ($2159))|0;
          $2161 = (($2160|0) / 4)&-1;
          $2162 = 0;
          $2163 = (($2140) + ($2162))|0;
          _memcpy(($2099|0),($2131|0),($2163|0))|0;
         }
        } while(0);
        $2164 = $14;
        $2165 = ((($2164)) + 100|0);
        $2166 = HEAP32[$2165>>2]|0;
        $2167 = $14;
        $2168 = ((($2167)) + 160|0);
        $2169 = HEAP32[$2168>>2]|0;
        $2170 = $16;
        $2171 = $52;
        $2172 = (($2170) + ($2171))|0;
        $2173 = (($2169) - ($2172))|0;
        $2174 = Math_imul($2166, $2173)|0;
        $2175 = ($2174|0)>(0);
        $2176 = $14;
        $2177 = ((($2176)) + 14372|0);
        if ($2175) {
         $2178 = $14;
         $2179 = ((($2178)) + 14372|0);
         $2180 = $14;
         $2181 = ((($2180)) + 100|0);
         $2182 = HEAP32[$2181>>2]|0;
         $2183 = $16;
         $2184 = Math_imul($2182, $2183)|0;
         $2185 = (($2179) + ($2184<<2)|0);
         $2186 = $14;
         $2187 = ((($2186)) + 100|0);
         $2188 = HEAP32[$2187>>2]|0;
         $2189 = $14;
         $2190 = ((($2189)) + 160|0);
         $2191 = HEAP32[$2190>>2]|0;
         $2192 = $16;
         $2193 = (($2191) - ($2192))|0;
         $2194 = $52;
         $2195 = (($2193) - ($2194))|0;
         $2196 = Math_imul($2188, $2195)|0;
         $2197 = $2196<<2;
         $2198 = $14;
         $2199 = ((($2198)) + 14372|0);
         $2200 = $14;
         $2201 = ((($2200)) + 14372|0);
         $2202 = $14;
         $2203 = ((($2202)) + 100|0);
         $2204 = HEAP32[$2203>>2]|0;
         $2205 = $16;
         $2206 = Math_imul($2204, $2205)|0;
         $2207 = (($2201) + ($2206<<2)|0);
         $2208 = $2199;
         $2209 = $2207;
         $2210 = (($2208) - ($2209))|0;
         $2211 = (($2210|0) / 4)&-1;
         $2212 = 0;
         $2213 = (($2197) + ($2212))|0;
         _memmove(($2177|0),($2185|0),($2213|0))|0;
         $2214 = $14;
         $2215 = ((($2214)) + 14372|0);
         $2216 = $14;
         $2217 = ((($2216)) + 100|0);
         $2218 = HEAP32[$2217>>2]|0;
         $2219 = $14;
         $2220 = ((($2219)) + 160|0);
         $2221 = HEAP32[$2220>>2]|0;
         $2222 = $16;
         $2223 = (($2221) - ($2222))|0;
         $2224 = $52;
         $2225 = (($2223) - ($2224))|0;
         $2226 = Math_imul($2218, $2225)|0;
         $2227 = (($2215) + ($2226<<2)|0);
         $2228 = $16;
         $2229 = $52;
         $2230 = (($2228) + ($2229))|0;
         $2231 = $14;
         $2232 = ((($2231)) + 100|0);
         $2233 = HEAP32[$2232>>2]|0;
         $2234 = Math_imul($2230, $2233)|0;
         $2235 = $2234<<2;
         $2236 = $14;
         $2237 = ((($2236)) + 14372|0);
         $2238 = $14;
         $2239 = ((($2238)) + 100|0);
         $2240 = HEAP32[$2239>>2]|0;
         $2241 = $14;
         $2242 = ((($2241)) + 160|0);
         $2243 = HEAP32[$2242>>2]|0;
         $2244 = $16;
         $2245 = (($2243) - ($2244))|0;
         $2246 = $52;
         $2247 = (($2245) - ($2246))|0;
         $2248 = Math_imul($2240, $2247)|0;
         $2249 = (($2237) + ($2248<<2)|0);
         $2250 = $2249;
         $2251 = $1268;
         $2252 = (($2250) - ($2251))|0;
         $2253 = (($2252|0) / 4)&-1;
         $2254 = 0;
         $2255 = (($2235) + ($2254))|0;
         _memcpy(($2227|0),($1268|0),($2255|0))|0;
        } else {
         $2256 = $16;
         $2257 = $52;
         $2258 = (($2256) + ($2257))|0;
         $2259 = $14;
         $2260 = ((($2259)) + 160|0);
         $2261 = HEAP32[$2260>>2]|0;
         $2262 = (($2258) - ($2261))|0;
         $2263 = $14;
         $2264 = ((($2263)) + 100|0);
         $2265 = HEAP32[$2264>>2]|0;
         $2266 = Math_imul($2262, $2265)|0;
         $2267 = (($1268) + ($2266<<2)|0);
         $2268 = $14;
         $2269 = ((($2268)) + 160|0);
         $2270 = HEAP32[$2269>>2]|0;
         $2271 = $14;
         $2272 = ((($2271)) + 100|0);
         $2273 = HEAP32[$2272>>2]|0;
         $2274 = Math_imul($2270, $2273)|0;
         $2275 = $2274<<2;
         $2276 = $14;
         $2277 = ((($2276)) + 14372|0);
         $2278 = $16;
         $2279 = $52;
         $2280 = (($2278) + ($2279))|0;
         $2281 = $14;
         $2282 = ((($2281)) + 160|0);
         $2283 = HEAP32[$2282>>2]|0;
         $2284 = (($2280) - ($2283))|0;
         $2285 = $14;
         $2286 = ((($2285)) + 100|0);
         $2287 = HEAP32[$2286>>2]|0;
         $2288 = Math_imul($2284, $2287)|0;
         $2289 = (($1268) + ($2288<<2)|0);
         $2290 = $2277;
         $2291 = $2289;
         $2292 = (($2290) - ($2291))|0;
         $2293 = (($2292|0) / 4)&-1;
         $2294 = 0;
         $2295 = (($2275) + ($2294))|0;
         _memcpy(($2177|0),($2267|0),($2295|0))|0;
        }
        $2296 = $14;
        $2297 = ((($2296)) + 14300|0);
        $2298 = +HEAPF32[$2297>>2];
        $2299 = $2298 < 1.0;
        $2300 = $50;
        $2301 = $2300 < 1.0;
        $or$cond35 = $2299 | $2301;
        if ($or$cond35) {
         $2302 = $14;
         $2303 = ((($2302)) + 14300|0);
         $2304 = +HEAPF32[$2303>>2];
         $2305 = $50;
         $2306 = HEAP32[$54>>2]|0;
         $2307 = ((($2306)) + 4|0);
         $2308 = HEAP32[$2307>>2]|0;
         $2309 = $16;
         $2310 = $14;
         $2311 = ((($2310)) + 100|0);
         $2312 = HEAP32[$2311>>2]|0;
         $2313 = HEAP32[$54>>2]|0;
         $2314 = ((($2313)) + 60|0);
         $2315 = HEAP32[$2314>>2]|0;
         $2316 = $14;
         $2317 = ((($2316)) + 132|0);
         $2318 = HEAP32[$2317>>2]|0;
         _gain_fade($1268,$1268,$2304,$2305,$2308,$2309,$2312,$2315,$2318);
        }
        $2319 = $50;
        $2320 = $14;
        $2321 = ((($2320)) + 14300|0);
        HEAPF32[$2321>>2] = $2319;
        $2322 = $14;
        $2323 = ((($2322)) + 14320|0);
        $2324 = HEAP32[$2323>>2]|0;
        $2325 = ($2324|0)!=(1001);
        if ($2325) {
         label = 358;
        } else {
         $2326 = $14;
         $2327 = ((($2326)) + 14288|0);
         $2328 = HEAP32[$2327>>2]|0;
         $2329 = ($2328|0)==(1);
         if ($2329) {
          label = 358;
         }
        }
        if ((label|0) == 358) {
         $2330 = $45;
         $2331 = (($2330) - 30000)|0;
         $2332 = (0)>($2331|0);
         $2333 = $45;
         $2334 = (($2333) - 30000)|0;
         $2335 = $2332 ? 0 : $2334;
         $2336 = $2335<<1;
         $2337 = (16384)<($2336|0);
         if ($2337) {
          $2348 = 16384;
         } else {
          $2338 = $45;
          $2339 = (($2338) - 30000)|0;
          $2340 = (0)>($2339|0);
          $2341 = $45;
          $2342 = (($2341) - 30000)|0;
          $2343 = $2340 ? 0 : $2342;
          $2344 = $2343<<1;
          $2348 = $2344;
         }
         $2345 = $14;
         $2346 = ((($2345)) + 8|0);
         $2347 = ((($2346)) + 80|0);
         HEAP32[$2347>>2] = $2348;
        }
        $2349 = $14;
        $2350 = ((($2349)) + 14348|0);
        $2351 = HEAP32[$2350>>2]|0;
        $2352 = ($2351|0)!=(0|0);
        do {
         if (!($2352)) {
          $2353 = $14;
          $2354 = ((($2353)) + 100|0);
          $2355 = HEAP32[$2354>>2]|0;
          $2356 = ($2355|0)==(2);
          if (!($2356)) {
           break;
          }
          $2357 = $14;
          $2358 = ((($2357)) + 14292|0);
          $2359 = HEAP16[$2358>>1]|0;
          $2360 = $2359 << 16 >> 16;
          $2361 = ($2360|0)<(16384);
          if (!($2361)) {
           $2362 = $14;
           $2363 = ((($2362)) + 8|0);
           $2364 = ((($2363)) + 80|0);
           $2365 = HEAP32[$2364>>2]|0;
           $2366 = ($2365|0)<(16384);
           if (!($2366)) {
            break;
           }
          }
          $2367 = $14;
          $2368 = ((($2367)) + 14292|0);
          $2369 = HEAP16[$2368>>1]|0;
          $2370 = (+($2369<<16>>16));
          $106 = $2370;
          $2371 = $14;
          $2372 = ((($2371)) + 8|0);
          $2373 = ((($2372)) + 80|0);
          $2374 = HEAP32[$2373>>2]|0;
          $2375 = (+($2374|0));
          $107 = $2375;
          $2376 = $106;
          $2377 = $2376 * 6.103515625E-5;
          $106 = $2377;
          $2378 = $107;
          $2379 = $2378 * 6.103515625E-5;
          $107 = $2379;
          $2380 = $106;
          $2381 = $107;
          $2382 = HEAP32[$54>>2]|0;
          $2383 = ((($2382)) + 4|0);
          $2384 = HEAP32[$2383>>2]|0;
          $2385 = $16;
          $2386 = $14;
          $2387 = ((($2386)) + 100|0);
          $2388 = HEAP32[$2387>>2]|0;
          $2389 = HEAP32[$54>>2]|0;
          $2390 = ((($2389)) + 60|0);
          $2391 = HEAP32[$2390>>2]|0;
          $2392 = $14;
          $2393 = ((($2392)) + 132|0);
          $2394 = HEAP32[$2393>>2]|0;
          _stereo_fade($1268,$1268,$2380,$2381,$2384,$2385,$2388,$2391,$2394);
          $2395 = $14;
          $2396 = ((($2395)) + 8|0);
          $2397 = ((($2396)) + 80|0);
          $2398 = HEAP32[$2397>>2]|0;
          $2399 = $2398&65535;
          $2400 = $14;
          $2401 = ((($2400)) + 14292|0);
          HEAP16[$2401>>1] = $2399;
         }
        } while(0);
        $2402 = $14;
        $2403 = ((($2402)) + 14320|0);
        $2404 = HEAP32[$2403>>2]|0;
        $2405 = ($2404|0)!=(1002);
        do {
         if ($2405) {
          $2406 = (_ec_tell_14($32)|0);
          $2407 = (($2406) + 17)|0;
          $2408 = $14;
          $2409 = ((($2408)) + 14320|0);
          $2410 = HEAP32[$2409>>2]|0;
          $2411 = ($2410|0)==(1001);
          $2412 = $2411&1;
          $2413 = ($2412*20)|0;
          $2414 = (($2407) + ($2413))|0;
          $2415 = $51;
          $2416 = (($2415) - 1)|0;
          $2417 = $2416<<3;
          $2418 = ($2414|0)<=($2417|0);
          if (!($2418)) {
           label = 383;
           break;
          }
          $2419 = $14;
          $2420 = ((($2419)) + 14320|0);
          $2421 = HEAP32[$2420>>2]|0;
          $2422 = ($2421|0)==(1001);
          do {
           if ($2422) {
            $2423 = $36;
            $2424 = ($2423|0)!=(0);
            if (!($2424)) {
             $2425 = (_ec_tell_14($32)|0);
             $2426 = (($2425) + 37)|0;
             $2427 = $39;
             $2428 = $2427<<3;
             $2429 = ($2426|0)<=($2428|0);
             if (!($2429)) {
              break;
             }
            }
            $2430 = $36;
            _ec_enc_bit_logp($32,$2430,12);
           }
          } while(0);
          $2431 = $36;
          $2432 = ($2431|0)!=(0);
          if (!($2432)) {
           break;
          }
          $2433 = $38;
          _ec_enc_bit_logp($32,$2433,1);
          $2434 = $14;
          $2435 = ((($2434)) + 14320|0);
          $2436 = HEAP32[$2435>>2]|0;
          $2437 = ($2436|0)==(1001);
          $2438 = $51;
          $2439 = (($2438) - 1)|0;
          if ($2437) {
           $2440 = $39;
           $2441 = (($2439) - ($2440))|0;
           $108 = $2441;
          } else {
           $2442 = (_ec_tell_14($32)|0);
           $2443 = (($2442) + 7)|0;
           $2444 = $2443 >> 3;
           $2445 = (($2439) - ($2444))|0;
           $108 = $2445;
          }
          $2446 = $108;
          $2447 = $14;
          $2448 = ((($2447)) + 148|0);
          $2449 = HEAP32[$2448>>2]|0;
          $2450 = (($2449|0) / 1600)&-1;
          $2451 = ($2446|0)<($2450|0);
          if ($2451) {
           $2452 = $108;
           $2457 = $2452;
          } else {
           $2453 = $14;
           $2454 = ((($2453)) + 148|0);
           $2455 = HEAP32[$2454>>2]|0;
           $2456 = (($2455|0) / 1600)&-1;
           $2457 = $2456;
          }
          $37 = $2457;
          $2458 = $37;
          $2459 = (2)>($2458|0);
          $2460 = $37;
          $2461 = $2459 ? 2 : $2460;
          $2462 = (257)<($2461|0);
          if ($2462) {
           $2467 = 257;
          } else {
           $2463 = $37;
           $2464 = (2)>($2463|0);
           $2465 = $37;
           $2466 = $2464 ? 2 : $2465;
           $2467 = $2466;
          }
          $37 = $2467;
          $2468 = $14;
          $2469 = ((($2468)) + 14320|0);
          $2470 = HEAP32[$2469>>2]|0;
          $2471 = ($2470|0)==(1001);
          if (!($2471)) {
           break;
          }
          $2472 = $37;
          $2473 = (($2472) - 2)|0;
          _ec_enc_uint($32,$2473,256);
         } else {
          label = 383;
         }
        } while(0);
        if ((label|0) == 383) {
         $36 = 0;
        }
        $2474 = $36;
        $2475 = ($2474|0)!=(0);
        if (!($2475)) {
         $2476 = $14;
         $2477 = ((($2476)) + 14340|0);
         HEAP32[$2477>>2] = 0;
         $37 = 0;
        }
        $2478 = $14;
        $2479 = ((($2478)) + 14320|0);
        $2480 = HEAP32[$2479>>2]|0;
        $2481 = ($2480|0)!=(1002);
        if ($2481) {
         $35 = 17;
        }
        $2482 = $14;
        $2483 = ((($2482)) + 14320|0);
        $2484 = HEAP32[$2483>>2]|0;
        $2485 = ($2484|0)==(1000);
        if ($2485) {
         $2486 = (_ec_tell_14($32)|0);
         $2487 = (($2486) + 7)|0;
         $2488 = $2487 >> 3;
         $30 = $2488;
         _ec_enc_done($32);
         $2489 = $30;
         $39 = $2489;
        } else {
         $2490 = $51;
         $2491 = (($2490) - 1)|0;
         $2492 = $37;
         $2493 = (($2491) - ($2492))|0;
         $2494 = $39;
         $2495 = ($2493|0)<($2494|0);
         if ($2495) {
          $2496 = $51;
          $2497 = (($2496) - 1)|0;
          $2498 = $37;
          $2499 = (($2497) - ($2498))|0;
          $2501 = $2499;
         } else {
          $2500 = $39;
          $2501 = $2500;
         }
         $39 = $2501;
         $2502 = $39;
         _ec_enc_shrink($32,$2502);
        }
        $2503 = $36;
        $2504 = ($2503|0)!=(0);
        if ($2504) {
         label = 396;
        } else {
         $2505 = $14;
         $2506 = ((($2505)) + 14320|0);
         $2507 = HEAP32[$2506>>2]|0;
         $2508 = ($2507|0)!=(1000);
         if ($2508) {
          label = 396;
         }
        }
        if ((label|0) == 396) {
         $2509 = $28;
         $2510 = $55;
         $2511 = $55;
         $2512 = (($2510) - ($2511))|0;
         $2513 = (($2512|0) / 28)&-1;
         $2514 = (($55) + (($2513*28)|0)|0);
         HEAP32[$vararg_buffer80>>2] = $2514;
         (_opus_custom_encoder_ctl($2509,10022,$vararg_buffer80)|0);
        }
        $2515 = $36;
        $2516 = ($2515|0)!=(0);
        $2517 = $38;
        $2518 = ($2517|0)!=(0);
        $or$cond37 = $2516 & $2518;
        do {
         if ($or$cond37) {
          $2519 = $28;
          HEAP32[$vararg_buffer83>>2] = 0;
          (_opus_custom_encoder_ctl($2519,10010,$vararg_buffer83)|0);
          $2520 = $28;
          HEAP32[$vararg_buffer86>>2] = 0;
          (_opus_custom_encoder_ctl($2520,4006,$vararg_buffer86)|0);
          $2521 = $28;
          $2522 = $14;
          $2523 = ((($2522)) + 132|0);
          $2524 = HEAP32[$2523>>2]|0;
          $2525 = (($2524|0) / 200)&-1;
          $2526 = $17;
          $2527 = $39;
          $2528 = (($2526) + ($2527)|0);
          $2529 = $37;
          $2530 = (_celt_encode_with_ec($2521,$1268,$2525,$2528,$2529,0)|0);
          $109 = $2530;
          $2531 = $109;
          $2532 = ($2531|0)<(0);
          if ($2532) {
           $13 = -3;
           $85 = 1;
           break L430;
          } else {
           $2533 = $28;
           $2534 = $41;
           $2535 = $41;
           $2536 = (($2534) - ($2535))|0;
           $2537 = (($2536|0) / 4)&-1;
           $2538 = (($41) + ($2537<<2)|0);
           HEAP32[$vararg_buffer89>>2] = $2538;
           (_opus_custom_encoder_ctl($2533,4031,$vararg_buffer89)|0);
           $2539 = $28;
           (_opus_custom_encoder_ctl($2539,4028,$vararg_buffer92)|0);
           break;
          }
         }
        } while(0);
        $2540 = $28;
        $2541 = $35;
        HEAP32[$vararg_buffer94>>2] = $2541;
        (_opus_custom_encoder_ctl($2540,10010,$vararg_buffer94)|0);
        $2542 = $14;
        $2543 = ((($2542)) + 14320|0);
        $2544 = HEAP32[$2543>>2]|0;
        $2545 = ($2544|0)!=(1000);
        do {
         if ($2545) {
          $2546 = $14;
          $2547 = ((($2546)) + 14320|0);
          $2548 = HEAP32[$2547>>2]|0;
          $2549 = $14;
          $2550 = ((($2549)) + 14324|0);
          $2551 = HEAP32[$2550>>2]|0;
          $2552 = ($2548|0)!=($2551|0);
          do {
           if ($2552) {
            $2553 = $14;
            $2554 = ((($2553)) + 14324|0);
            $2555 = HEAP32[$2554>>2]|0;
            $2556 = ($2555|0)>(0);
            if (!($2556)) {
             break;
            }
            $2557 = $28;
            (_opus_custom_encoder_ctl($2557,4028,$vararg_buffer97)|0);
            $2558 = $28;
            $2559 = $14;
            $2560 = ((($2559)) + 132|0);
            $2561 = HEAP32[$2560>>2]|0;
            $2562 = (($2561|0) / 400)&-1;
            (_celt_encode_with_ec($2558,$2099,$2562,$110,2,0)|0);
            $2563 = $28;
            HEAP32[$vararg_buffer99>>2] = 0;
            (_opus_custom_encoder_ctl($2563,10002,$vararg_buffer99)|0);
           }
          } while(0);
          $2564 = (_ec_tell_14($32)|0);
          $2565 = $39;
          $2566 = $2565<<3;
          $2567 = ($2564|0)<=($2566|0);
          if (!($2567)) {
           break;
          }
          $2568 = $28;
          $2569 = $16;
          $2570 = $39;
          $2571 = (_celt_encode_with_ec($2568,$1268,$2569,0,$2570,$32)|0);
          $30 = $2571;
          $2572 = $30;
          $2573 = ($2572|0)<(0);
          if (!($2573)) {
           break;
          }
          $13 = -3;
          $85 = 1;
          break L430;
         }
        } while(0);
        $2574 = $36;
        $2575 = ($2574|0)==(0);
        $2576 = $38;
        $2577 = ($2576|0)!=(0);
        $or$cond39 = $2575 | $2577;
        do {
         if (!($or$cond39)) {
          $2578 = $14;
          $2579 = ((($2578)) + 132|0);
          $2580 = HEAP32[$2579>>2]|0;
          $2581 = (($2580|0) / 200)&-1;
          $113 = $2581;
          $2582 = $14;
          $2583 = ((($2582)) + 132|0);
          $2584 = HEAP32[$2583>>2]|0;
          $2585 = (($2584|0) / 400)&-1;
          $114 = $2585;
          $2586 = $28;
          (_opus_custom_encoder_ctl($2586,4028,$vararg_buffer102)|0);
          $2587 = $28;
          HEAP32[$vararg_buffer104>>2] = 0;
          (_opus_custom_encoder_ctl($2587,10010,$vararg_buffer104)|0);
          $2588 = $28;
          HEAP32[$vararg_buffer107>>2] = 0;
          (_opus_custom_encoder_ctl($2588,10002,$vararg_buffer107)|0);
          $2589 = $28;
          $2590 = $14;
          $2591 = ((($2590)) + 100|0);
          $2592 = HEAP32[$2591>>2]|0;
          $2593 = $16;
          $2594 = $113;
          $2595 = (($2593) - ($2594))|0;
          $2596 = $114;
          $2597 = (($2595) - ($2596))|0;
          $2598 = Math_imul($2592, $2597)|0;
          $2599 = (($1268) + ($2598<<2)|0);
          $2600 = $114;
          (_celt_encode_with_ec($2589,$2599,$2600,$112,2,0)|0);
          $2601 = $28;
          $2602 = $14;
          $2603 = ((($2602)) + 100|0);
          $2604 = HEAP32[$2603>>2]|0;
          $2605 = $16;
          $2606 = $113;
          $2607 = (($2605) - ($2606))|0;
          $2608 = Math_imul($2604, $2607)|0;
          $2609 = (($1268) + ($2608<<2)|0);
          $2610 = $113;
          $2611 = $17;
          $2612 = $39;
          $2613 = (($2611) + ($2612)|0);
          $2614 = $37;
          $2615 = (_celt_encode_with_ec($2601,$2609,$2610,$2613,$2614,0)|0);
          $111 = $2615;
          $2616 = $111;
          $2617 = ($2616|0)<(0);
          if ($2617) {
           $13 = -3;
           $85 = 1;
           break L430;
          } else {
           $2618 = $28;
           $2619 = $41;
           $2620 = $41;
           $2621 = (($2619) - ($2620))|0;
           $2622 = (($2621|0) / 4)&-1;
           $2623 = (($41) + ($2622<<2)|0);
           HEAP32[$vararg_buffer110>>2] = $2623;
           (_opus_custom_encoder_ctl($2618,4031,$vararg_buffer110)|0);
           break;
          }
         }
        } while(0);
        $2624 = $17;
        $2625 = ((($2624)) + -1|0);
        $17 = $2625;
        $2626 = $14;
        $2627 = ((($2626)) + 14320|0);
        $2628 = HEAP32[$2627>>2]|0;
        $2629 = $14;
        $2630 = ((($2629)) + 132|0);
        $2631 = HEAP32[$2630>>2]|0;
        $2632 = $16;
        $2633 = (($2631|0) / ($2632|0))&-1;
        $2634 = $49;
        $2635 = $14;
        $2636 = ((($2635)) + 14288|0);
        $2637 = HEAP32[$2636>>2]|0;
        $2638 = (_gen_toc($2628,$2633,$2634,$2637)|0);
        $2639 = $17;
        HEAP8[$2639>>0] = $2638;
        $2640 = ((($32)) + 28|0);
        $2641 = HEAP32[$2640>>2]|0;
        $2642 = HEAP32[$41>>2]|0;
        $2643 = $2641 ^ $2642;
        $2644 = $14;
        $2645 = ((($2644)) + 18216|0);
        HEAP32[$2645>>2] = $2643;
        $2646 = $40;
        $2647 = ($2646|0)!=(0);
        $2648 = $14;
        if ($2647) {
         $$sink40 = 1002;$$sink42 = $2648;
        } else {
         $2649 = ((($2648)) + 14320|0);
         $2650 = HEAP32[$2649>>2]|0;
         $2651 = $14;
         $$sink40 = $2650;$$sink42 = $2651;
        }
        $2652 = ((($$sink42)) + 14324|0);
        HEAP32[$2652>>2] = $$sink40;
        $2653 = $14;
        $2654 = ((($2653)) + 14288|0);
        $2655 = HEAP32[$2654>>2]|0;
        $2656 = $14;
        $2657 = ((($2656)) + 14328|0);
        HEAP32[$2657>>2] = $2655;
        $2658 = $16;
        $2659 = $14;
        $2660 = ((($2659)) + 14332|0);
        HEAP32[$2660>>2] = $2658;
        $2661 = $14;
        $2662 = ((($2661)) + 14344|0);
        HEAP32[$2662>>2] = 0;
        $2663 = (_ec_tell_14($32)|0);
        $2664 = $51;
        $2665 = (($2664) - 1)|0;
        $2666 = $2665<<3;
        $2667 = ($2663|0)>($2666|0);
        L557: do {
         if ($2667) {
          $2668 = $51;
          $2669 = ($2668|0)<(2);
          if ($2669) {
           $13 = -2;
           $85 = 1;
           break L430;
          } else {
           $2670 = $17;
           $2671 = ((($2670)) + 1|0);
           HEAP8[$2671>>0] = 0;
           $30 = 1;
           $2672 = $14;
           $2673 = ((($2672)) + 18216|0);
           HEAP32[$2673>>2] = 0;
           break;
          }
         } else {
          $2674 = $14;
          $2675 = ((($2674)) + 14320|0);
          $2676 = HEAP32[$2675>>2]|0;
          $2677 = ($2676|0)!=(1000);
          $2678 = $36;
          $2679 = ($2678|0)!=(0);
          $or$cond44 = $2677 | $2679;
          $or$cond44$not = $or$cond44 ^ 1;
          $2680 = $30;
          $2681 = ($2680|0)>(2);
          $or$cond52 = $or$cond44$not & $2681;
          if (!($or$cond52)) {
           break;
          }
          while(1) {
           $2682 = $17;
           $2683 = $30;
           $2684 = (($2682) + ($2683)|0);
           $2685 = HEAP8[$2684>>0]|0;
           $2686 = $2685&255;
           $2687 = ($2686|0)==(0);
           if (!($2687)) {
            break L557;
           }
           $2688 = $30;
           $2689 = (($2688) + -1)|0;
           $30 = $2689;
           $$old = $30;
           $$old51 = ($$old|0)>(2);
           if (!($$old51)) {
            break;
           }
          }
         }
        } while(0);
        $2690 = $37;
        $2691 = (1 + ($2690))|0;
        $2692 = $30;
        $2693 = (($2692) + ($2691))|0;
        $30 = $2693;
        $2694 = $14;
        $2695 = ((($2694)) + 136|0);
        $2696 = HEAP32[$2695>>2]|0;
        $2697 = ($2696|0)!=(0);
        do {
         if (!($2697)) {
          $2698 = $17;
          $2699 = $30;
          $2700 = $51;
          $2701 = (_opus_packet_pad($2698,$2699,$2700)|0);
          $2702 = ($2701|0)!=(0);
          if ($2702) {
           $13 = -3;
           $85 = 1;
           break L430;
          } else {
           $2703 = $51;
           $30 = $2703;
           break;
          }
         }
        } while(0);
        $2704 = $30;
        $13 = $2704;
        $85 = 1;
       }
      } while(0);
      $2705 = $86;
      _llvm_stackrestore(($2705|0));
      $2706 = $13;
      STACKTOP = sp;return ($2706|0);
     }
    }
   } while(0);
   $318 = $14;
   $319 = ((($318)) + 14320|0);
   $320 = HEAP32[$319>>2]|0;
   $59 = $320;
   $321 = $14;
   $322 = ((($321)) + 14336|0);
   $323 = HEAP32[$322>>2]|0;
   $324 = ($323|0)==(0);
   if ($324) {
    $328 = 1101;
   } else {
    $325 = $14;
    $326 = ((($325)) + 14336|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $327;
   }
   $60 = $328;
   $329 = $59;
   $330 = ($329|0)==(0);
   if ($330) {
    $59 = 1000;
   }
   $331 = $47;
   $332 = ($331|0)>(100);
   if ($332) {
    $59 = 1002;
   }
   $333 = $47;
   $334 = ($333|0)<(50);
   if ($334) {
    $59 = 1000;
   }
   $335 = $59;
   $336 = ($335|0)==(1000);
   $337 = $60;
   $338 = ($337|0)>(1103);
   $or$cond3 = $336 & $338;
   do {
    if ($or$cond3) {
     $60 = 1103;
    } else {
     $339 = $59;
     $340 = ($339|0)==(1002);
     $341 = $60;
     $342 = ($341|0)==(1102);
     $or$cond5 = $340 & $342;
     if ($or$cond5) {
      $60 = 1101;
      break;
     }
     $343 = $60;
     $344 = ($343|0)<=(1104);
     if ($344) {
      $60 = 1104;
     }
    }
   } while(0);
   $345 = $59;
   $346 = $47;
   $347 = $60;
   $348 = $14;
   $349 = ((($348)) + 14288|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = (_gen_toc($345,$346,$347,$350)|0);
   $352 = $17;
   HEAP8[$352>>0] = $351;
   $13 = 1;
   $2706 = $13;
   STACKTOP = sp;return ($2706|0);
  }
 }
 $13 = -1;
 $2706 = $13;
 STACKTOP = sp;return ($2706|0);
}
function _user_bitrate_to_bitrate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $4;
  $10 = ((($9)) + 132|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11|0) / 400)&-1;
  $5 = $12;
 }
 $13 = $4;
 $14 = ((($13)) + 152|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(-1000);
 $17 = $4;
 if ($16) {
  $18 = ((($17)) + 132|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19*60)|0;
  $21 = $5;
  $22 = (($20|0) / ($21|0))&-1;
  $23 = $4;
  $24 = ((($23)) + 132|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = ((($26)) + 100|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = Math_imul($25, $28)|0;
  $30 = (($22) + ($29))|0;
  $3 = $30;
  $45 = $3;
  STACKTOP = sp;return ($45|0);
 }
 $31 = ((($17)) + 152|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(-1);
 if ($33) {
  $34 = $6;
  $35 = $34<<3;
  $36 = $4;
  $37 = ((($36)) + 132|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = Math_imul($35, $38)|0;
  $40 = $5;
  $41 = (($39|0) / ($40|0))&-1;
  $3 = $41;
  $45 = $3;
  STACKTOP = sp;return ($45|0);
 } else {
  $42 = $4;
  $43 = ((($42)) + 152|0);
  $44 = HEAP32[$43>>2]|0;
  $3 = $44;
  $45 = $3;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _gen_toc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $11 = $5;
  $12 = ($11|0)<(400);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = $13 << 1;
  $5 = $14;
  $15 = $8;
  $16 = (($15) + 1)|0;
  $8 = $16;
 }
 $17 = $4;
 $18 = ($17|0)==(1000);
 do {
  if ($18) {
   $19 = $6;
   $20 = (($19) - 1101)|0;
   $21 = $20 << 5;
   $22 = $21&255;
   $9 = $22;
   $23 = $8;
   $24 = (($23) - 2)|0;
   $25 = $24 << 3;
   $26 = $9;
   $27 = $26&255;
   $28 = $27 | $25;
   $29 = $28&255;
   $9 = $29;
  } else {
   $30 = $4;
   $31 = ($30|0)==(1002);
   if ($31) {
    $32 = $6;
    $33 = (($32) - 1102)|0;
    $10 = $33;
    $34 = $10;
    $35 = ($34|0)<(0);
    $$ = $35 ? 0 : $33;
    $10 = $$;
    $9 = -128;
    $36 = $10;
    $37 = $36 << 5;
    $38 = $9;
    $39 = $38&255;
    $40 = $39 | $37;
    $41 = $40&255;
    $9 = $41;
    $42 = $8;
    $43 = $42 << 3;
    $44 = $9;
    $45 = $44&255;
    $46 = $45 | $43;
    $47 = $46&255;
    $9 = $47;
    break;
   } else {
    $9 = 96;
    $48 = $6;
    $49 = (($48) - 1104)|0;
    $50 = $49 << 4;
    $51 = $9;
    $52 = $51&255;
    $53 = $52 | $50;
    $54 = $53&255;
    $9 = $54;
    $55 = $8;
    $56 = (($55) - 2)|0;
    $57 = $56 << 3;
    $58 = $9;
    $59 = $58&255;
    $60 = $59 | $57;
    $61 = $60&255;
    $9 = $61;
    break;
   }
  }
 } while(0);
 $62 = $7;
 $63 = ($62|0)==(2);
 $64 = $63&1;
 $65 = $64 << 2;
 $66 = $9;
 $67 = $66&255;
 $68 = $67 | $65;
 $69 = $68&255;
 $9 = $69;
 $70 = $9;
 STACKTOP = sp;return ($70|0);
}
function _hp_cutoff($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $14 = sp + 24|0;
 $15 = sp + 16|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $8;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*2471)|0;
 $23 = $13;
 $24 = (($23|0) / 1000)&-1;
 $25 = (($22|0) / ($24|0))&-1;
 $16 = $25;
 $26 = $16;
 $27 = ($26*471)|0;
 $28 = (268435456 - ($27))|0;
 $17 = $28;
 $29 = $17;
 HEAP32[$14>>2] = $29;
 $30 = $17;
 $31 = (0 - ($30))|0;
 $32 = $31 << 1;
 $33 = ((($14)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = $17;
 $35 = ((($14)) + 8|0);
 HEAP32[$35>>2] = $34;
 $36 = $17;
 $37 = $36 >> 6;
 $18 = $37;
 $38 = $18;
 $39 = $38 >> 16;
 $40 = $16;
 $41 = $40 >> 16;
 $42 = $16;
 $43 = $42&65535;
 $44 = $43 << 16 >> 16;
 $45 = Math_imul($41, $44)|0;
 $46 = $16;
 $47 = $46 & 65535;
 $48 = $16;
 $49 = $48&65535;
 $50 = $49 << 16 >> 16;
 $51 = Math_imul($47, $50)|0;
 $52 = $51 >> 16;
 $53 = (($45) + ($52))|0;
 $54 = $16;
 $55 = $16;
 $56 = $55 >> 15;
 $57 = (($56) + 1)|0;
 $58 = $57 >> 1;
 $59 = Math_imul($54, $58)|0;
 $60 = (($53) + ($59))|0;
 $61 = (($60) - 8388608)|0;
 $62 = $61&65535;
 $63 = $62 << 16 >> 16;
 $64 = Math_imul($39, $63)|0;
 $65 = $18;
 $66 = $65 & 65535;
 $67 = $16;
 $68 = $67 >> 16;
 $69 = $16;
 $70 = $69&65535;
 $71 = $70 << 16 >> 16;
 $72 = Math_imul($68, $71)|0;
 $73 = $16;
 $74 = $73 & 65535;
 $75 = $16;
 $76 = $75&65535;
 $77 = $76 << 16 >> 16;
 $78 = Math_imul($74, $77)|0;
 $79 = $78 >> 16;
 $80 = (($72) + ($79))|0;
 $81 = $16;
 $82 = $16;
 $83 = $82 >> 15;
 $84 = (($83) + 1)|0;
 $85 = $84 >> 1;
 $86 = Math_imul($81, $85)|0;
 $87 = (($80) + ($86))|0;
 $88 = (($87) - 8388608)|0;
 $89 = $88&65535;
 $90 = $89 << 16 >> 16;
 $91 = Math_imul($66, $90)|0;
 $92 = $91 >> 16;
 $93 = (($64) + ($92))|0;
 $94 = $18;
 $95 = $16;
 $96 = $95 >> 16;
 $97 = $16;
 $98 = $97&65535;
 $99 = $98 << 16 >> 16;
 $100 = Math_imul($96, $99)|0;
 $101 = $16;
 $102 = $101 & 65535;
 $103 = $16;
 $104 = $103&65535;
 $105 = $104 << 16 >> 16;
 $106 = Math_imul($102, $105)|0;
 $107 = $106 >> 16;
 $108 = (($100) + ($107))|0;
 $109 = $16;
 $110 = $16;
 $111 = $110 >> 15;
 $112 = (($111) + 1)|0;
 $113 = $112 >> 1;
 $114 = Math_imul($109, $113)|0;
 $115 = (($108) + ($114))|0;
 $116 = (($115) - 8388608)|0;
 $117 = $116 >> 15;
 $118 = (($117) + 1)|0;
 $119 = $118 >> 1;
 $120 = Math_imul($94, $119)|0;
 $121 = (($93) + ($120))|0;
 HEAP32[$15>>2] = $121;
 $122 = $18;
 $123 = $122 >> 16;
 $124 = $18;
 $125 = $124&65535;
 $126 = $125 << 16 >> 16;
 $127 = Math_imul($123, $126)|0;
 $128 = $18;
 $129 = $128 & 65535;
 $130 = $18;
 $131 = $130&65535;
 $132 = $131 << 16 >> 16;
 $133 = Math_imul($129, $132)|0;
 $134 = $133 >> 16;
 $135 = (($127) + ($134))|0;
 $136 = $18;
 $137 = $18;
 $138 = $137 >> 15;
 $139 = (($138) + 1)|0;
 $140 = $139 >> 1;
 $141 = Math_imul($136, $140)|0;
 $142 = (($135) + ($141))|0;
 $143 = ((($15)) + 4|0);
 HEAP32[$143>>2] = $142;
 $144 = $7;
 $145 = $10;
 $146 = $9;
 $147 = $11;
 $148 = $12;
 _silk_biquad_float($144,$14,$15,$145,$146,$147,$148);
 $149 = $12;
 $150 = ($149|0)==(2);
 if (!($150)) {
  STACKTOP = sp;return;
 }
 $151 = $7;
 $152 = ((($151)) + 4|0);
 $153 = $10;
 $154 = ((($153)) + 8|0);
 $155 = $9;
 $156 = ((($155)) + 4|0);
 $157 = $11;
 $158 = $12;
 _silk_biquad_float($152,$14,$15,$154,$156,$157,$158);
 STACKTOP = sp;return;
}
function _dc_reject($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $20 = $8;
 $21 = (+($20|0));
 $22 = 4.0 * $21;
 $23 = $13;
 $24 = (+($23|0));
 $25 = $22 / $24;
 $16 = $25;
 $14 = 0;
 while(1) {
  $26 = $14;
  $27 = $12;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $15 = 0;
  while(1) {
   $29 = $15;
   $30 = $11;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $32 = $7;
   $33 = $12;
   $34 = $15;
   $35 = Math_imul($33, $34)|0;
   $36 = $14;
   $37 = (($35) + ($36))|0;
   $38 = (($32) + ($37<<2)|0);
   $39 = +HEAPF32[$38>>2];
   $17 = $39;
   $40 = $17;
   $41 = $10;
   $42 = $14;
   $43 = $42<<1;
   $44 = (($41) + ($43<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $46 = $40 - $45;
   $18 = $46;
   $47 = $10;
   $48 = $14;
   $49 = $48<<1;
   $50 = (($47) + ($49<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $16;
   $53 = $17;
   $54 = $10;
   $55 = $14;
   $56 = $55<<1;
   $57 = (($54) + ($56<<2)|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $53 - $58;
   $60 = $52 * $59;
   $61 = $51 + $60;
   $62 = $61 + 1.0000000031710769E-30;
   $63 = $10;
   $64 = $14;
   $65 = $64<<1;
   $66 = (($63) + ($65<<2)|0);
   HEAPF32[$66>>2] = $62;
   $67 = $18;
   $68 = $10;
   $69 = $14;
   $70 = $69<<1;
   $71 = (($70) + 1)|0;
   $72 = (($68) + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $67 - $73;
   $19 = $74;
   $75 = $10;
   $76 = $14;
   $77 = $76<<1;
   $78 = (($77) + 1)|0;
   $79 = (($75) + ($78<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $16;
   $82 = $18;
   $83 = $10;
   $84 = $14;
   $85 = $84<<1;
   $86 = (($85) + 1)|0;
   $87 = (($83) + ($86<<2)|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $82 - $88;
   $90 = $81 * $89;
   $91 = $80 + $90;
   $92 = $91 + 1.0000000031710769E-30;
   $93 = $10;
   $94 = $14;
   $95 = $94<<1;
   $96 = (($95) + 1)|0;
   $97 = (($93) + ($96<<2)|0);
   HEAPF32[$97>>2] = $92;
   $98 = $19;
   $99 = $9;
   $100 = $12;
   $101 = $15;
   $102 = Math_imul($100, $101)|0;
   $103 = $14;
   $104 = (($102) + ($103))|0;
   $105 = (($99) + ($104<<2)|0);
   HEAPF32[$105>>2] = $98;
   $106 = $15;
   $107 = (($106) + 1)|0;
   $15 = $107;
  }
  $108 = $14;
  $109 = (($108) + 1)|0;
  $14 = $109;
 }
 STACKTOP = sp;return;
}
function _celt_inner_prod_c($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $7;
  if (!($10)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 * $19;
  $21 = $11 + $20;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 STACKTOP = sp;return (+$11);
}
function _gain_fade($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $26 = $17;
 $27 = (48000 / ($26|0))&-1;
 $19 = $27;
 $28 = $13;
 $29 = $19;
 $30 = (($28|0) / ($29|0))&-1;
 $20 = $30;
 $31 = $15;
 $32 = ($31|0)==(1);
 $18 = 0;
 L1: do {
  if ($32) {
   while(1) {
    $33 = $18;
    $34 = $20;
    $35 = ($33|0)<($34|0);
    if (!($35)) {
     break L1;
    }
    $36 = $16;
    $37 = $18;
    $38 = $19;
    $39 = Math_imul($37, $38)|0;
    $40 = (($36) + ($39<<2)|0);
    $41 = +HEAPF32[$40>>2];
    $42 = $16;
    $43 = $18;
    $44 = $19;
    $45 = Math_imul($43, $44)|0;
    $46 = (($42) + ($45<<2)|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $41 * $47;
    $23 = $48;
    $49 = $23;
    $50 = $12;
    $51 = $49 * $50;
    $52 = $23;
    $53 = 1.0 - $52;
    $54 = $11;
    $55 = $53 * $54;
    $56 = $51 + $55;
    $22 = $56;
    $57 = $22;
    $58 = $9;
    $59 = $18;
    $60 = (($58) + ($59<<2)|0);
    $61 = +HEAPF32[$60>>2];
    $62 = $57 * $61;
    $63 = $10;
    $64 = $18;
    $65 = (($63) + ($64<<2)|0);
    HEAPF32[$65>>2] = $62;
    $66 = $18;
    $67 = (($66) + 1)|0;
    $18 = $67;
   }
  } else {
   while(1) {
    $68 = $18;
    $69 = $20;
    $70 = ($68|0)<($69|0);
    if (!($70)) {
     break L1;
    }
    $71 = $16;
    $72 = $18;
    $73 = $19;
    $74 = Math_imul($72, $73)|0;
    $75 = (($71) + ($74<<2)|0);
    $76 = +HEAPF32[$75>>2];
    $77 = $16;
    $78 = $18;
    $79 = $19;
    $80 = Math_imul($78, $79)|0;
    $81 = (($77) + ($80<<2)|0);
    $82 = +HEAPF32[$81>>2];
    $83 = $76 * $82;
    $25 = $83;
    $84 = $25;
    $85 = $12;
    $86 = $84 * $85;
    $87 = $25;
    $88 = 1.0 - $87;
    $89 = $11;
    $90 = $88 * $89;
    $91 = $86 + $90;
    $24 = $91;
    $92 = $24;
    $93 = $9;
    $94 = $18;
    $95 = $94<<1;
    $96 = (($93) + ($95<<2)|0);
    $97 = +HEAPF32[$96>>2];
    $98 = $92 * $97;
    $99 = $10;
    $100 = $18;
    $101 = $100<<1;
    $102 = (($99) + ($101<<2)|0);
    HEAPF32[$102>>2] = $98;
    $103 = $24;
    $104 = $9;
    $105 = $18;
    $106 = $105<<1;
    $107 = (($106) + 1)|0;
    $108 = (($104) + ($107<<2)|0);
    $109 = +HEAPF32[$108>>2];
    $110 = $103 * $109;
    $111 = $10;
    $112 = $18;
    $113 = $112<<1;
    $114 = (($113) + 1)|0;
    $115 = (($111) + ($114<<2)|0);
    HEAPF32[$115>>2] = $110;
    $116 = $18;
    $117 = (($116) + 1)|0;
    $18 = $117;
   }
  }
 } while(0);
 $21 = 0;
 while(1) {
  $118 = $20;
  $18 = $118;
  while(1) {
   $119 = $18;
   $120 = $14;
   $121 = ($119|0)<($120|0);
   if (!($121)) {
    break;
   }
   $122 = $12;
   $123 = $9;
   $124 = $18;
   $125 = $15;
   $126 = Math_imul($124, $125)|0;
   $127 = $21;
   $128 = (($126) + ($127))|0;
   $129 = (($123) + ($128<<2)|0);
   $130 = +HEAPF32[$129>>2];
   $131 = $122 * $130;
   $132 = $10;
   $133 = $18;
   $134 = $15;
   $135 = Math_imul($133, $134)|0;
   $136 = $21;
   $137 = (($135) + ($136))|0;
   $138 = (($132) + ($137<<2)|0);
   HEAPF32[$138>>2] = $131;
   $139 = $18;
   $140 = (($139) + 1)|0;
   $18 = $140;
  }
  $141 = $21;
  $142 = (($141) + 1)|0;
  $21 = $142;
  $143 = $15;
  $144 = ($142|0)<($143|0);
  if (!($144)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _FLOAT2INT16_13($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 * 32768.0;
 $1 = $3;
 $4 = $1;
 $5 = $4 > -32768.0;
 $6 = $1;
 $7 = $5 ? $6 : -32768.0;
 $1 = $7;
 $8 = $1;
 $9 = $8 < 32767.0;
 $10 = $1;
 $11 = $9 ? $10 : 32767.0;
 $1 = $11;
 $12 = $1;
 $13 = (_lrintf($12)|0);
 $14 = $13&65535;
 STACKTOP = sp;return ($14|0);
}
function _ec_tell_14($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _stereo_fade($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0;
 var $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $25 = $17;
 $26 = (48000 / ($25|0))&-1;
 $20 = $26;
 $27 = $13;
 $28 = $20;
 $29 = (($27|0) / ($28|0))&-1;
 $19 = $29;
 $30 = $11;
 $31 = 1.0 - $30;
 $11 = $31;
 $32 = $12;
 $33 = 1.0 - $32;
 $12 = $33;
 $18 = 0;
 while(1) {
  $34 = $18;
  $35 = $19;
  $36 = ($34|0)<($35|0);
  if (!($36)) {
   break;
  }
  $37 = $16;
  $38 = $18;
  $39 = $20;
  $40 = Math_imul($38, $39)|0;
  $41 = (($37) + ($40<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $16;
  $44 = $18;
  $45 = $20;
  $46 = Math_imul($44, $45)|0;
  $47 = (($43) + ($46<<2)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $42 * $48;
  $23 = $49;
  $50 = $23;
  $51 = $12;
  $52 = $50 * $51;
  $53 = $23;
  $54 = 1.0 - $53;
  $55 = $11;
  $56 = $54 * $55;
  $57 = $52 + $56;
  $22 = $57;
  $58 = $9;
  $59 = $18;
  $60 = $15;
  $61 = Math_imul($59, $60)|0;
  $62 = (($58) + ($61<<2)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $9;
  $65 = $18;
  $66 = $15;
  $67 = Math_imul($65, $66)|0;
  $68 = (($67) + 1)|0;
  $69 = (($64) + ($68<<2)|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $63 - $70;
  $72 = 0.5 * $71;
  $21 = $72;
  $73 = $22;
  $74 = $21;
  $75 = $73 * $74;
  $21 = $75;
  $76 = $10;
  $77 = $18;
  $78 = $15;
  $79 = Math_imul($77, $78)|0;
  $80 = (($76) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $21;
  $83 = $81 - $82;
  $84 = $10;
  $85 = $18;
  $86 = $15;
  $87 = Math_imul($85, $86)|0;
  $88 = (($84) + ($87<<2)|0);
  HEAPF32[$88>>2] = $83;
  $89 = $10;
  $90 = $18;
  $91 = $15;
  $92 = Math_imul($90, $91)|0;
  $93 = (($92) + 1)|0;
  $94 = (($89) + ($93<<2)|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $21;
  $97 = $95 + $96;
  $98 = $10;
  $99 = $18;
  $100 = $15;
  $101 = Math_imul($99, $100)|0;
  $102 = (($101) + 1)|0;
  $103 = (($98) + ($102<<2)|0);
  HEAPF32[$103>>2] = $97;
  $104 = $18;
  $105 = (($104) + 1)|0;
  $18 = $105;
 }
 while(1) {
  $106 = $18;
  $107 = $14;
  $108 = ($106|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $9;
  $110 = $18;
  $111 = $15;
  $112 = Math_imul($110, $111)|0;
  $113 = (($109) + ($112<<2)|0);
  $114 = +HEAPF32[$113>>2];
  $115 = $9;
  $116 = $18;
  $117 = $15;
  $118 = Math_imul($116, $117)|0;
  $119 = (($118) + 1)|0;
  $120 = (($115) + ($119<<2)|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $114 - $121;
  $123 = 0.5 * $122;
  $24 = $123;
  $124 = $12;
  $125 = $24;
  $126 = $124 * $125;
  $24 = $126;
  $127 = $10;
  $128 = $18;
  $129 = $15;
  $130 = Math_imul($128, $129)|0;
  $131 = (($127) + ($130<<2)|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $24;
  $134 = $132 - $133;
  $135 = $10;
  $136 = $18;
  $137 = $15;
  $138 = Math_imul($136, $137)|0;
  $139 = (($135) + ($138<<2)|0);
  HEAPF32[$139>>2] = $134;
  $140 = $10;
  $141 = $18;
  $142 = $15;
  $143 = Math_imul($141, $142)|0;
  $144 = (($143) + 1)|0;
  $145 = (($140) + ($144<<2)|0);
  $146 = +HEAPF32[$145>>2];
  $147 = $24;
  $148 = $146 + $147;
  $149 = $10;
  $150 = $18;
  $151 = $15;
  $152 = Math_imul($150, $151)|0;
  $153 = (($152) + 1)|0;
  $154 = (($149) + ($153<<2)|0);
  HEAPF32[$154>>2] = $148;
  $155 = $18;
  $156 = (($155) + 1)|0;
  $18 = $156;
 }
 STACKTOP = sp;return;
}
function _silk_biquad_float($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 16|0;
 $18 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 $22 = $21 * 3.7252902984619141E-9;
 HEAPF32[$17>>2] = $22;
 $23 = $9;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 $27 = $26 * 3.7252902984619141E-9;
 $28 = ((($17)) + 4|0);
 HEAPF32[$28>>2] = $27;
 $29 = $8;
 $30 = HEAP32[$29>>2]|0;
 $31 = (+($30|0));
 $32 = $31 * 3.7252902984619141E-9;
 HEAPF32[$18>>2] = $32;
 $33 = $8;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+($35|0));
 $37 = $36 * 3.7252902984619141E-9;
 $38 = ((($18)) + 4|0);
 HEAPF32[$38>>2] = $37;
 $39 = $8;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (+($41|0));
 $43 = $42 * 3.7252902984619141E-9;
 $44 = ((($18)) + 8|0);
 HEAPF32[$44>>2] = $43;
 $14 = 0;
 while(1) {
  $45 = $14;
  $46 = $12;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $48 = $7;
  $49 = $14;
  $50 = $13;
  $51 = Math_imul($49, $50)|0;
  $52 = (($48) + ($51<<2)|0);
  $53 = +HEAPF32[$52>>2];
  $16 = $53;
  $54 = $10;
  $55 = +HEAPF32[$54>>2];
  $56 = +HEAPF32[$18>>2];
  $57 = $16;
  $58 = $56 * $57;
  $59 = $55 + $58;
  $15 = $59;
  $60 = $10;
  $61 = ((($60)) + 4|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $15;
  $64 = +HEAPF32[$17>>2];
  $65 = $63 * $64;
  $66 = $62 - $65;
  $67 = ((($18)) + 4|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $16;
  $70 = $68 * $69;
  $71 = $66 + $70;
  $72 = $10;
  HEAPF32[$72>>2] = $71;
  $73 = $15;
  $74 = - $73;
  $75 = ((($17)) + 4|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $74 * $76;
  $78 = ((($18)) + 8|0);
  $79 = +HEAPF32[$78>>2];
  $80 = $16;
  $81 = $79 * $80;
  $82 = $77 + $81;
  $83 = $82 + 1.0000000031710769E-30;
  $84 = $10;
  $85 = ((($84)) + 4|0);
  HEAPF32[$85>>2] = $83;
  $86 = $15;
  $87 = $11;
  $88 = $14;
  $89 = $13;
  $90 = Math_imul($88, $89)|0;
  $91 = (($87) + ($90<<2)|0);
  HEAPF32[$91>>2] = $86;
  $92 = $14;
  $93 = (($92) + 1)|0;
  $14 = $93;
 }
 STACKTOP = sp;return;
}
function _opus_encode_float($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = ((($12)) + 96|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(2051);
 if ($15) {
  $11 = 0;
 } else {
  $16 = $5;
  $17 = ((($16)) + 104|0);
  $18 = HEAP32[$17>>2]|0;
  $11 = $18;
 }
 $19 = $6;
 $20 = $7;
 $21 = $5;
 $22 = ((($21)) + 144|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $5;
 $25 = ((($24)) + 100|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $5;
 $28 = ((($27)) + 132|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $5;
 $31 = ((($30)) + 148|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $11;
 $34 = $5;
 $35 = ((($34)) + 172|0);
 $36 = ((($35)) + 6872|0);
 $37 = (_compute_frame_size($19,$20,$23,$26,$29,$32,$33,19,$36)|0);
 $10 = $37;
 $38 = $5;
 $39 = $6;
 $40 = $10;
 $41 = $8;
 $42 = $9;
 $43 = $6;
 $44 = $7;
 $45 = $5;
 $46 = ((($45)) + 100|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (_opus_encode_native($38,$39,$40,$41,$42,24,$43,$44,0,-2,$47,19,1)|0);
 STACKTOP = sp;return ($48|0);
}
function _opus_encoder_ctl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$old = 0, $$old6 = 0, $$sink = 0, $$sink17 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current100 = 0, $arglist_current103 = 0, $arglist_current106 = 0, $arglist_current109 = 0, $arglist_current112 = 0, $arglist_current115 = 0, $arglist_current118 = 0, $arglist_current121 = 0, $arglist_current124 = 0, $arglist_current130 = 0, $arglist_current133 = 0, $arglist_current136 = 0, $arglist_current139 = 0, $arglist_current142 = 0, $arglist_current145 = 0, $arglist_current148 = 0, $arglist_current151 = 0;
 var $arglist_current154 = 0, $arglist_current157 = 0, $arglist_current160 = 0, $arglist_current163 = 0, $arglist_current166 = 0, $arglist_current169 = 0, $arglist_current172 = 0, $arglist_current178 = 0, $arglist_current181 = 0, $arglist_current184 = 0, $arglist_current189 = 0, $arglist_current192 = 0, $arglist_current198 = 0, $arglist_current204 = 0, $arglist_current79 = 0, $arglist_current82 = 0, $arglist_current85 = 0, $arglist_current88 = 0, $arglist_current91 = 0, $arglist_current94 = 0;
 var $arglist_current97 = 0, $arglist_next = 0, $arglist_next101 = 0, $arglist_next104 = 0, $arglist_next107 = 0, $arglist_next110 = 0, $arglist_next113 = 0, $arglist_next116 = 0, $arglist_next119 = 0, $arglist_next122 = 0, $arglist_next125 = 0, $arglist_next131 = 0, $arglist_next134 = 0, $arglist_next137 = 0, $arglist_next140 = 0, $arglist_next143 = 0, $arglist_next146 = 0, $arglist_next149 = 0, $arglist_next152 = 0, $arglist_next155 = 0;
 var $arglist_next158 = 0, $arglist_next161 = 0, $arglist_next164 = 0, $arglist_next167 = 0, $arglist_next170 = 0, $arglist_next173 = 0, $arglist_next179 = 0, $arglist_next182 = 0, $arglist_next185 = 0, $arglist_next190 = 0, $arglist_next193 = 0, $arglist_next199 = 0, $arglist_next205 = 0, $arglist_next80 = 0, $arglist_next83 = 0, $arglist_next86 = 0, $arglist_next89 = 0, $arglist_next92 = 0, $arglist_next95 = 0, $arglist_next98 = 0;
 var $expanded = 0, $expanded100 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0, $expanded107 = 0, $expanded109 = 0, $expanded11 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded12 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0;
 var $expanded124 = 0, $expanded125 = 0, $expanded127 = 0, $expanded128 = 0, $expanded13 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0, $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0;
 var $expanded15 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded155 = 0, $expanded156 = 0, $expanded158 = 0, $expanded159 = 0, $expanded16 = 0, $expanded160 = 0, $expanded162 = 0, $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0;
 var $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded18 = 0, $expanded180 = 0, $expanded181 = 0, $expanded183 = 0, $expanded184 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded19 = 0, $expanded190 = 0, $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded197 = 0, $expanded198 = 0, $expanded2 = 0;
 var $expanded20 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded204 = 0, $expanded205 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0, $expanded211 = 0, $expanded212 = 0, $expanded214 = 0, $expanded215 = 0, $expanded216 = 0, $expanded218 = 0, $expanded219 = 0, $expanded22 = 0, $expanded221 = 0, $expanded222 = 0, $expanded223 = 0;
 var $expanded225 = 0, $expanded226 = 0, $expanded228 = 0, $expanded229 = 0, $expanded23 = 0, $expanded230 = 0, $expanded232 = 0, $expanded233 = 0, $expanded235 = 0, $expanded236 = 0, $expanded237 = 0, $expanded239 = 0, $expanded240 = 0, $expanded242 = 0, $expanded243 = 0, $expanded244 = 0, $expanded246 = 0, $expanded247 = 0, $expanded249 = 0, $expanded25 = 0;
 var $expanded250 = 0, $expanded251 = 0, $expanded253 = 0, $expanded254 = 0, $expanded256 = 0, $expanded257 = 0, $expanded258 = 0, $expanded26 = 0, $expanded260 = 0, $expanded261 = 0, $expanded263 = 0, $expanded264 = 0, $expanded265 = 0, $expanded267 = 0, $expanded268 = 0, $expanded27 = 0, $expanded270 = 0, $expanded271 = 0, $expanded272 = 0, $expanded29 = 0;
 var $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0, $expanded44 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded53 = 0, $expanded54 = 0;
 var $expanded55 = 0, $expanded57 = 0, $expanded58 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded64 = 0, $expanded65 = 0, $expanded67 = 0, $expanded68 = 0, $expanded69 = 0, $expanded71 = 0, $expanded72 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0;
 var $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0, $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond16 = 0, $or$cond20 = 0;
 var $or$cond23 = 0, $or$cond26 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond32 = 0, $or$cond35 = 0, $or$cond38 = 0, $or$cond41 = 0, $or$cond44 = 0, $or$cond47 = 0, $or$cond5 = 0, $or$cond50 = 0, $or$cond53 = 0, $or$cond56 = 0, $or$cond59 = 0, $or$cond62 = 0, $or$cond65 = 0, $or$cond68 = 0, $or$cond7 = 0, $or$cond71 = 0;
 var $or$cond74 = 0, $or$cond77 = 0, $vararg_buffer = 0, $vararg_buffer126 = 0, $vararg_buffer174 = 0, $vararg_buffer186 = 0, $vararg_buffer194 = 0, $vararg_buffer200 = 0, $vararg_buffer206 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $vararg_buffer206 = sp + 48|0;
 $vararg_buffer200 = sp + 40|0;
 $vararg_buffer194 = sp + 32|0;
 $vararg_buffer186 = sp + 24|0;
 $vararg_buffer174 = sp + 16|0;
 $vararg_buffer126 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 464|0;
 $79 = sp + 88|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 HEAP32[$7>>2] = $varargs;
 $89 = $3;
 $90 = $3;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + ($91)|0);
 $6 = $92;
 $93 = $4;
 L1: do {
  switch ($93|0) {
  case 4000:  {
   $arglist_current = HEAP32[$7>>2]|0;
   $94 = $arglist_current;
   $95 = ((0) + 4|0);
   $expanded2 = $95;
   $expanded = (($expanded2) - 1)|0;
   $96 = (($94) + ($expanded))|0;
   $97 = ((0) + 4|0);
   $expanded6 = $97;
   $expanded5 = (($expanded6) - 1)|0;
   $expanded4 = $expanded5 ^ -1;
   $98 = $96 & $expanded4;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $arglist_next = ((($99)) + 4|0);
   HEAP32[$7>>2] = $arglist_next;
   $9 = $100;
   $101 = $9;
   $8 = $101;
   $102 = $8;
   $103 = ($102|0)!=(2048);
   $104 = $8;
   $105 = ($104|0)!=(2049);
   $or$cond = $103 & $105;
   $106 = $8;
   $107 = ($106|0)!=(2051);
   $or$cond3 = $or$cond & $107;
   do {
    if (!($or$cond3)) {
     $108 = $3;
     $109 = ((($108)) + 14344|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)!=(0);
     if (!($111)) {
      $112 = $3;
      $113 = ((($112)) + 96|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = $8;
      $116 = ($114|0)!=($115|0);
      if ($116) {
       break;
      }
     }
     $117 = $8;
     $118 = $3;
     $119 = ((($118)) + 96|0);
     HEAP32[$119>>2] = $117;
     label = 95;
     break L1;
    }
   } while(0);
   $5 = -1;
   label = 95;
   break;
  }
  case 4001:  {
   $arglist_current79 = HEAP32[$7>>2]|0;
   $120 = $arglist_current79;
   $121 = ((0) + 4|0);
   $expanded9 = $121;
   $expanded8 = (($expanded9) - 1)|0;
   $122 = (($120) + ($expanded8))|0;
   $123 = ((0) + 4|0);
   $expanded13 = $123;
   $expanded12 = (($expanded13) - 1)|0;
   $expanded11 = $expanded12 ^ -1;
   $124 = $122 & $expanded11;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $arglist_next80 = ((($125)) + 4|0);
   HEAP32[$7>>2] = $arglist_next80;
   $11 = $126;
   $127 = $11;
   $10 = $127;
   $128 = $10;
   $129 = ($128|0)!=(0|0);
   if ($129) {
    $130 = $3;
    $131 = ((($130)) + 96|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $10;
    HEAP32[$133>>2] = $132;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4002:  {
   $arglist_current82 = HEAP32[$7>>2]|0;
   $134 = $arglist_current82;
   $135 = ((0) + 4|0);
   $expanded16 = $135;
   $expanded15 = (($expanded16) - 1)|0;
   $136 = (($134) + ($expanded15))|0;
   $137 = ((0) + 4|0);
   $expanded20 = $137;
   $expanded19 = (($expanded20) - 1)|0;
   $expanded18 = $expanded19 ^ -1;
   $138 = $136 & $expanded18;
   $139 = $138;
   $140 = HEAP32[$139>>2]|0;
   $arglist_next83 = ((($139)) + 4|0);
   HEAP32[$7>>2] = $arglist_next83;
   $13 = $140;
   $141 = $13;
   $12 = $141;
   $142 = $12;
   $143 = ($142|0)!=(-1000);
   $144 = $12;
   $145 = ($144|0)!=(-1);
   $or$cond5 = $143 & $145;
   do {
    if ($or$cond5) {
     $146 = $12;
     $147 = ($146|0)<=(0);
     if ($147) {
      label = 96;
      break L1;
     }
     $148 = $12;
     $149 = ($148|0)<=(500);
     if ($149) {
      $12 = 500;
      break;
     }
     $150 = $12;
     $151 = $3;
     $152 = ((($151)) + 100|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153*300000)|0;
     $155 = ($150|0)>($154|0);
     if ($155) {
      $156 = $3;
      $157 = ((($156)) + 100|0);
      $158 = HEAP32[$157>>2]|0;
      $159 = ($158*300000)|0;
      $12 = $159;
     }
    }
   } while(0);
   $160 = $12;
   $161 = $3;
   $162 = ((($161)) + 152|0);
   HEAP32[$162>>2] = $160;
   label = 95;
   break;
  }
  case 4003:  {
   $arglist_current85 = HEAP32[$7>>2]|0;
   $163 = $arglist_current85;
   $164 = ((0) + 4|0);
   $expanded23 = $164;
   $expanded22 = (($expanded23) - 1)|0;
   $165 = (($163) + ($expanded22))|0;
   $166 = ((0) + 4|0);
   $expanded27 = $166;
   $expanded26 = (($expanded27) - 1)|0;
   $expanded25 = $expanded26 ^ -1;
   $167 = $165 & $expanded25;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $arglist_next86 = ((($168)) + 4|0);
   HEAP32[$7>>2] = $arglist_next86;
   $15 = $169;
   $170 = $15;
   $14 = $170;
   $171 = $14;
   $172 = ($171|0)!=(0|0);
   if ($172) {
    $173 = $3;
    $174 = $3;
    $175 = ((($174)) + 14332|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (_user_bitrate_to_bitrate($173,$176,1276)|0);
    $178 = $14;
    HEAP32[$178>>2] = $177;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4022:  {
   $arglist_current88 = HEAP32[$7>>2]|0;
   $179 = $arglist_current88;
   $180 = ((0) + 4|0);
   $expanded30 = $180;
   $expanded29 = (($expanded30) - 1)|0;
   $181 = (($179) + ($expanded29))|0;
   $182 = ((0) + 4|0);
   $expanded34 = $182;
   $expanded33 = (($expanded34) - 1)|0;
   $expanded32 = $expanded33 ^ -1;
   $183 = $181 & $expanded32;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $arglist_next89 = ((($184)) + 4|0);
   HEAP32[$7>>2] = $arglist_next89;
   $17 = $185;
   $186 = $17;
   $16 = $186;
   $187 = $16;
   $188 = ($187|0)<(1);
   $$old = $16;
   if ($188) {
    $$old6 = ($$old|0)!=(-1000);
    if ($$old6) {
     label = 96;
     break L1;
    }
   } else {
    $189 = $3;
    $190 = ((($189)) + 100|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($$old|0)>($191|0);
    $193 = $16;
    $194 = ($193|0)!=(-1000);
    $or$cond7 = $192 & $194;
    if ($or$cond7) {
     label = 96;
     break L1;
    }
   }
   $195 = $16;
   $196 = $3;
   $197 = ((($196)) + 108|0);
   HEAP32[$197>>2] = $195;
   label = 95;
   break;
  }
  case 4023:  {
   $arglist_current91 = HEAP32[$7>>2]|0;
   $198 = $arglist_current91;
   $199 = ((0) + 4|0);
   $expanded37 = $199;
   $expanded36 = (($expanded37) - 1)|0;
   $200 = (($198) + ($expanded36))|0;
   $201 = ((0) + 4|0);
   $expanded41 = $201;
   $expanded40 = (($expanded41) - 1)|0;
   $expanded39 = $expanded40 ^ -1;
   $202 = $200 & $expanded39;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $arglist_next92 = ((($203)) + 4|0);
   HEAP32[$7>>2] = $arglist_next92;
   $19 = $204;
   $205 = $19;
   $18 = $205;
   $206 = $18;
   $207 = ($206|0)!=(0|0);
   if ($207) {
    $208 = $3;
    $209 = ((($208)) + 108|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = $18;
    HEAP32[$211>>2] = $210;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4004:  {
   $arglist_current94 = HEAP32[$7>>2]|0;
   $212 = $arglist_current94;
   $213 = ((0) + 4|0);
   $expanded44 = $213;
   $expanded43 = (($expanded44) - 1)|0;
   $214 = (($212) + ($expanded43))|0;
   $215 = ((0) + 4|0);
   $expanded48 = $215;
   $expanded47 = (($expanded48) - 1)|0;
   $expanded46 = $expanded47 ^ -1;
   $216 = $214 & $expanded46;
   $217 = $216;
   $218 = HEAP32[$217>>2]|0;
   $arglist_next95 = ((($217)) + 4|0);
   HEAP32[$7>>2] = $arglist_next95;
   $21 = $218;
   $219 = $21;
   $20 = $219;
   $220 = $20;
   $221 = ($220|0)<(1101);
   $222 = $20;
   $223 = ($222|0)>(1105);
   $or$cond10 = $221 | $223;
   if ($or$cond10) {
    label = 96;
   } else {
    $224 = $20;
    $225 = $3;
    $226 = ((($225)) + 120|0);
    HEAP32[$226>>2] = $224;
    $227 = $3;
    $228 = ((($227)) + 120|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)==(1101);
    $231 = $3;
    if ($230) {
     $232 = ((($231)) + 8|0);
     $233 = ((($232)) + 12|0);
     HEAP32[$233>>2] = 8000;
     label = 95;
     break L1;
    } else {
     $234 = ((($231)) + 120|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = ($235|0)==(1102);
     $237 = $3;
     $238 = ((($237)) + 8|0);
     $239 = ((($238)) + 12|0);
     $$sink = $236 ? 12000 : 16000;
     HEAP32[$239>>2] = $$sink;
     label = 95;
     break L1;
    }
   }
   break;
  }
  case 4005:  {
   $arglist_current97 = HEAP32[$7>>2]|0;
   $240 = $arglist_current97;
   $241 = ((0) + 4|0);
   $expanded51 = $241;
   $expanded50 = (($expanded51) - 1)|0;
   $242 = (($240) + ($expanded50))|0;
   $243 = ((0) + 4|0);
   $expanded55 = $243;
   $expanded54 = (($expanded55) - 1)|0;
   $expanded53 = $expanded54 ^ -1;
   $244 = $242 & $expanded53;
   $245 = $244;
   $246 = HEAP32[$245>>2]|0;
   $arglist_next98 = ((($245)) + 4|0);
   HEAP32[$7>>2] = $arglist_next98;
   $23 = $246;
   $247 = $23;
   $22 = $247;
   $248 = $22;
   $249 = ($248|0)!=(0|0);
   if ($249) {
    $250 = $3;
    $251 = ((($250)) + 120|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $22;
    HEAP32[$253>>2] = $252;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4008:  {
   $arglist_current100 = HEAP32[$7>>2]|0;
   $254 = $arglist_current100;
   $255 = ((0) + 4|0);
   $expanded58 = $255;
   $expanded57 = (($expanded58) - 1)|0;
   $256 = (($254) + ($expanded57))|0;
   $257 = ((0) + 4|0);
   $expanded62 = $257;
   $expanded61 = (($expanded62) - 1)|0;
   $expanded60 = $expanded61 ^ -1;
   $258 = $256 & $expanded60;
   $259 = $258;
   $260 = HEAP32[$259>>2]|0;
   $arglist_next101 = ((($259)) + 4|0);
   HEAP32[$7>>2] = $arglist_next101;
   $25 = $260;
   $261 = $25;
   $24 = $261;
   $262 = $24;
   $263 = ($262|0)<(1101);
   $264 = $24;
   $265 = ($264|0)>(1105);
   $or$cond13 = $263 | $265;
   $266 = $24;
   $267 = ($266|0)!=(-1000);
   $or$cond16 = $or$cond13 & $267;
   if ($or$cond16) {
    label = 96;
   } else {
    $268 = $24;
    $269 = $3;
    $270 = ((($269)) + 116|0);
    HEAP32[$270>>2] = $268;
    $271 = $3;
    $272 = ((($271)) + 116|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ($273|0)==(1101);
    $275 = $3;
    if ($274) {
     $276 = ((($275)) + 8|0);
     $277 = ((($276)) + 12|0);
     HEAP32[$277>>2] = 8000;
     label = 95;
     break L1;
    } else {
     $278 = ((($275)) + 116|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(1102);
     $281 = $3;
     $282 = ((($281)) + 8|0);
     $283 = ((($282)) + 12|0);
     $$sink17 = $280 ? 12000 : 16000;
     HEAP32[$283>>2] = $$sink17;
     label = 95;
     break L1;
    }
   }
   break;
  }
  case 4009:  {
   $arglist_current103 = HEAP32[$7>>2]|0;
   $284 = $arglist_current103;
   $285 = ((0) + 4|0);
   $expanded65 = $285;
   $expanded64 = (($expanded65) - 1)|0;
   $286 = (($284) + ($expanded64))|0;
   $287 = ((0) + 4|0);
   $expanded69 = $287;
   $expanded68 = (($expanded69) - 1)|0;
   $expanded67 = $expanded68 ^ -1;
   $288 = $286 & $expanded67;
   $289 = $288;
   $290 = HEAP32[$289>>2]|0;
   $arglist_next104 = ((($289)) + 4|0);
   HEAP32[$7>>2] = $arglist_next104;
   $27 = $290;
   $291 = $27;
   $26 = $291;
   $292 = $26;
   $293 = ($292|0)!=(0|0);
   if ($293) {
    $294 = $3;
    $295 = ((($294)) + 14336|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = $26;
    HEAP32[$297>>2] = $296;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4016:  {
   $arglist_current106 = HEAP32[$7>>2]|0;
   $298 = $arglist_current106;
   $299 = ((0) + 4|0);
   $expanded72 = $299;
   $expanded71 = (($expanded72) - 1)|0;
   $300 = (($298) + ($expanded71))|0;
   $301 = ((0) + 4|0);
   $expanded76 = $301;
   $expanded75 = (($expanded76) - 1)|0;
   $expanded74 = $expanded75 ^ -1;
   $302 = $300 & $expanded74;
   $303 = $302;
   $304 = HEAP32[$303>>2]|0;
   $arglist_next107 = ((($303)) + 4|0);
   HEAP32[$7>>2] = $arglist_next107;
   $29 = $304;
   $305 = $29;
   $28 = $305;
   $306 = $28;
   $307 = ($306|0)<(0);
   $308 = $28;
   $309 = ($308|0)>(1);
   $or$cond20 = $307 | $309;
   if ($or$cond20) {
    label = 96;
   } else {
    $310 = $28;
    $311 = $3;
    $312 = ((($311)) + 8|0);
    $313 = ((($312)) + 44|0);
    HEAP32[$313>>2] = $310;
    label = 95;
   }
   break;
  }
  case 4017:  {
   $arglist_current109 = HEAP32[$7>>2]|0;
   $314 = $arglist_current109;
   $315 = ((0) + 4|0);
   $expanded79 = $315;
   $expanded78 = (($expanded79) - 1)|0;
   $316 = (($314) + ($expanded78))|0;
   $317 = ((0) + 4|0);
   $expanded83 = $317;
   $expanded82 = (($expanded83) - 1)|0;
   $expanded81 = $expanded82 ^ -1;
   $318 = $316 & $expanded81;
   $319 = $318;
   $320 = HEAP32[$319>>2]|0;
   $arglist_next110 = ((($319)) + 4|0);
   HEAP32[$7>>2] = $arglist_next110;
   $31 = $320;
   $321 = $31;
   $30 = $321;
   $322 = $30;
   $323 = ($322|0)!=(0|0);
   if ($323) {
    $324 = $3;
    $325 = ((($324)) + 8|0);
    $326 = ((($325)) + 44|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $30;
    HEAP32[$328>>2] = $327;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4010:  {
   $arglist_current112 = HEAP32[$7>>2]|0;
   $329 = $arglist_current112;
   $330 = ((0) + 4|0);
   $expanded86 = $330;
   $expanded85 = (($expanded86) - 1)|0;
   $331 = (($329) + ($expanded85))|0;
   $332 = ((0) + 4|0);
   $expanded90 = $332;
   $expanded89 = (($expanded90) - 1)|0;
   $expanded88 = $expanded89 ^ -1;
   $333 = $331 & $expanded88;
   $334 = $333;
   $335 = HEAP32[$334>>2]|0;
   $arglist_next113 = ((($334)) + 4|0);
   HEAP32[$7>>2] = $arglist_next113;
   $33 = $335;
   $336 = $33;
   $32 = $336;
   $337 = $32;
   $338 = ($337|0)<(0);
   $339 = $32;
   $340 = ($339|0)>(10);
   $or$cond23 = $338 | $340;
   if ($or$cond23) {
    label = 96;
   } else {
    $341 = $32;
    $342 = $3;
    $343 = ((($342)) + 8|0);
    $344 = ((($343)) + 36|0);
    HEAP32[$344>>2] = $341;
    $345 = $6;
    $346 = $32;
    HEAP32[$vararg_buffer>>2] = $346;
    (_opus_custom_encoder_ctl($345,4010,$vararg_buffer)|0);
    label = 95;
   }
   break;
  }
  case 4011:  {
   $arglist_current115 = HEAP32[$7>>2]|0;
   $347 = $arglist_current115;
   $348 = ((0) + 4|0);
   $expanded93 = $348;
   $expanded92 = (($expanded93) - 1)|0;
   $349 = (($347) + ($expanded92))|0;
   $350 = ((0) + 4|0);
   $expanded97 = $350;
   $expanded96 = (($expanded97) - 1)|0;
   $expanded95 = $expanded96 ^ -1;
   $351 = $349 & $expanded95;
   $352 = $351;
   $353 = HEAP32[$352>>2]|0;
   $arglist_next116 = ((($352)) + 4|0);
   HEAP32[$7>>2] = $arglist_next116;
   $35 = $353;
   $354 = $35;
   $34 = $354;
   $355 = $34;
   $356 = ($355|0)!=(0|0);
   if ($356) {
    $357 = $3;
    $358 = ((($357)) + 8|0);
    $359 = ((($358)) + 36|0);
    $360 = HEAP32[$359>>2]|0;
    $361 = $34;
    HEAP32[$361>>2] = $360;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4012:  {
   $arglist_current118 = HEAP32[$7>>2]|0;
   $362 = $arglist_current118;
   $363 = ((0) + 4|0);
   $expanded100 = $363;
   $expanded99 = (($expanded100) - 1)|0;
   $364 = (($362) + ($expanded99))|0;
   $365 = ((0) + 4|0);
   $expanded104 = $365;
   $expanded103 = (($expanded104) - 1)|0;
   $expanded102 = $expanded103 ^ -1;
   $366 = $364 & $expanded102;
   $367 = $366;
   $368 = HEAP32[$367>>2]|0;
   $arglist_next119 = ((($367)) + 4|0);
   HEAP32[$7>>2] = $arglist_next119;
   $37 = $368;
   $369 = $37;
   $36 = $369;
   $370 = $36;
   $371 = ($370|0)<(0);
   $372 = $36;
   $373 = ($372|0)>(1);
   $or$cond26 = $371 | $373;
   if ($or$cond26) {
    label = 96;
   } else {
    $374 = $36;
    $375 = $3;
    $376 = ((($375)) + 8|0);
    $377 = ((($376)) + 40|0);
    HEAP32[$377>>2] = $374;
    label = 95;
   }
   break;
  }
  case 4013:  {
   $arglist_current121 = HEAP32[$7>>2]|0;
   $378 = $arglist_current121;
   $379 = ((0) + 4|0);
   $expanded107 = $379;
   $expanded106 = (($expanded107) - 1)|0;
   $380 = (($378) + ($expanded106))|0;
   $381 = ((0) + 4|0);
   $expanded111 = $381;
   $expanded110 = (($expanded111) - 1)|0;
   $expanded109 = $expanded110 ^ -1;
   $382 = $380 & $expanded109;
   $383 = $382;
   $384 = HEAP32[$383>>2]|0;
   $arglist_next122 = ((($383)) + 4|0);
   HEAP32[$7>>2] = $arglist_next122;
   $39 = $384;
   $385 = $39;
   $38 = $385;
   $386 = $38;
   $387 = ($386|0)!=(0|0);
   if ($387) {
    $388 = $3;
    $389 = ((($388)) + 8|0);
    $390 = ((($389)) + 40|0);
    $391 = HEAP32[$390>>2]|0;
    $392 = $38;
    HEAP32[$392>>2] = $391;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4014:  {
   $arglist_current124 = HEAP32[$7>>2]|0;
   $393 = $arglist_current124;
   $394 = ((0) + 4|0);
   $expanded114 = $394;
   $expanded113 = (($expanded114) - 1)|0;
   $395 = (($393) + ($expanded113))|0;
   $396 = ((0) + 4|0);
   $expanded118 = $396;
   $expanded117 = (($expanded118) - 1)|0;
   $expanded116 = $expanded117 ^ -1;
   $397 = $395 & $expanded116;
   $398 = $397;
   $399 = HEAP32[$398>>2]|0;
   $arglist_next125 = ((($398)) + 4|0);
   HEAP32[$7>>2] = $arglist_next125;
   $41 = $399;
   $400 = $41;
   $40 = $400;
   $401 = $40;
   $402 = ($401|0)<(0);
   $403 = $40;
   $404 = ($403|0)>(100);
   $or$cond29 = $402 | $404;
   if ($or$cond29) {
    label = 96;
   } else {
    $405 = $40;
    $406 = $3;
    $407 = ((($406)) + 8|0);
    $408 = ((($407)) + 32|0);
    HEAP32[$408>>2] = $405;
    $409 = $6;
    $410 = $40;
    HEAP32[$vararg_buffer126>>2] = $410;
    (_opus_custom_encoder_ctl($409,4014,$vararg_buffer126)|0);
    label = 95;
   }
   break;
  }
  case 4015:  {
   $arglist_current130 = HEAP32[$7>>2]|0;
   $411 = $arglist_current130;
   $412 = ((0) + 4|0);
   $expanded121 = $412;
   $expanded120 = (($expanded121) - 1)|0;
   $413 = (($411) + ($expanded120))|0;
   $414 = ((0) + 4|0);
   $expanded125 = $414;
   $expanded124 = (($expanded125) - 1)|0;
   $expanded123 = $expanded124 ^ -1;
   $415 = $413 & $expanded123;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $arglist_next131 = ((($416)) + 4|0);
   HEAP32[$7>>2] = $arglist_next131;
   $43 = $417;
   $418 = $43;
   $42 = $418;
   $419 = $42;
   $420 = ($419|0)!=(0|0);
   if ($420) {
    $421 = $3;
    $422 = ((($421)) + 8|0);
    $423 = ((($422)) + 32|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $42;
    HEAP32[$425>>2] = $424;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4006:  {
   $arglist_current133 = HEAP32[$7>>2]|0;
   $426 = $arglist_current133;
   $427 = ((0) + 4|0);
   $expanded128 = $427;
   $expanded127 = (($expanded128) - 1)|0;
   $428 = (($426) + ($expanded127))|0;
   $429 = ((0) + 4|0);
   $expanded132 = $429;
   $expanded131 = (($expanded132) - 1)|0;
   $expanded130 = $expanded131 ^ -1;
   $430 = $428 & $expanded130;
   $431 = $430;
   $432 = HEAP32[$431>>2]|0;
   $arglist_next134 = ((($431)) + 4|0);
   HEAP32[$7>>2] = $arglist_next134;
   $45 = $432;
   $433 = $45;
   $44 = $433;
   $434 = $44;
   $435 = ($434|0)<(0);
   $436 = $44;
   $437 = ($436|0)>(1);
   $or$cond32 = $435 | $437;
   if ($or$cond32) {
    label = 96;
   } else {
    $438 = $44;
    $439 = $3;
    $440 = ((($439)) + 136|0);
    HEAP32[$440>>2] = $438;
    $441 = $44;
    $442 = (1 - ($441))|0;
    $443 = $3;
    $444 = ((($443)) + 8|0);
    $445 = ((($444)) + 48|0);
    HEAP32[$445>>2] = $442;
    label = 95;
   }
   break;
  }
  case 4007:  {
   $arglist_current136 = HEAP32[$7>>2]|0;
   $446 = $arglist_current136;
   $447 = ((0) + 4|0);
   $expanded135 = $447;
   $expanded134 = (($expanded135) - 1)|0;
   $448 = (($446) + ($expanded134))|0;
   $449 = ((0) + 4|0);
   $expanded139 = $449;
   $expanded138 = (($expanded139) - 1)|0;
   $expanded137 = $expanded138 ^ -1;
   $450 = $448 & $expanded137;
   $451 = $450;
   $452 = HEAP32[$451>>2]|0;
   $arglist_next137 = ((($451)) + 4|0);
   HEAP32[$7>>2] = $arglist_next137;
   $47 = $452;
   $453 = $47;
   $46 = $453;
   $454 = $46;
   $455 = ($454|0)!=(0|0);
   if ($455) {
    $456 = $3;
    $457 = ((($456)) + 136|0);
    $458 = HEAP32[$457>>2]|0;
    $459 = $46;
    HEAP32[$459>>2] = $458;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 11018:  {
   $arglist_current139 = HEAP32[$7>>2]|0;
   $460 = $arglist_current139;
   $461 = ((0) + 4|0);
   $expanded142 = $461;
   $expanded141 = (($expanded142) - 1)|0;
   $462 = (($460) + ($expanded141))|0;
   $463 = ((0) + 4|0);
   $expanded146 = $463;
   $expanded145 = (($expanded146) - 1)|0;
   $expanded144 = $expanded145 ^ -1;
   $464 = $462 & $expanded144;
   $465 = $464;
   $466 = HEAP32[$465>>2]|0;
   $arglist_next140 = ((($465)) + 4|0);
   HEAP32[$7>>2] = $arglist_next140;
   $49 = $466;
   $467 = $49;
   $48 = $467;
   $468 = $48;
   $469 = ($468|0)<(-1);
   $470 = $48;
   $471 = ($470|0)>(100);
   $or$cond35 = $469 | $471;
   if ($or$cond35) {
    label = 96;
   } else {
    $472 = $48;
    $473 = $3;
    $474 = ((($473)) + 128|0);
    HEAP32[$474>>2] = $472;
    label = 95;
   }
   break;
  }
  case 11019:  {
   $arglist_current142 = HEAP32[$7>>2]|0;
   $475 = $arglist_current142;
   $476 = ((0) + 4|0);
   $expanded149 = $476;
   $expanded148 = (($expanded149) - 1)|0;
   $477 = (($475) + ($expanded148))|0;
   $478 = ((0) + 4|0);
   $expanded153 = $478;
   $expanded152 = (($expanded153) - 1)|0;
   $expanded151 = $expanded152 ^ -1;
   $479 = $477 & $expanded151;
   $480 = $479;
   $481 = HEAP32[$480>>2]|0;
   $arglist_next143 = ((($480)) + 4|0);
   HEAP32[$7>>2] = $arglist_next143;
   $51 = $481;
   $482 = $51;
   $50 = $482;
   $483 = $50;
   $484 = ($483|0)!=(0|0);
   if ($484) {
    $485 = $3;
    $486 = ((($485)) + 128|0);
    $487 = HEAP32[$486>>2]|0;
    $488 = $50;
    HEAP32[$488>>2] = $487;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4020:  {
   $arglist_current145 = HEAP32[$7>>2]|0;
   $489 = $arglist_current145;
   $490 = ((0) + 4|0);
   $expanded156 = $490;
   $expanded155 = (($expanded156) - 1)|0;
   $491 = (($489) + ($expanded155))|0;
   $492 = ((0) + 4|0);
   $expanded160 = $492;
   $expanded159 = (($expanded160) - 1)|0;
   $expanded158 = $expanded159 ^ -1;
   $493 = $491 & $expanded158;
   $494 = $493;
   $495 = HEAP32[$494>>2]|0;
   $arglist_next146 = ((($494)) + 4|0);
   HEAP32[$7>>2] = $arglist_next146;
   $53 = $495;
   $496 = $53;
   $52 = $496;
   $497 = $52;
   $498 = ($497|0)<(0);
   $499 = $52;
   $500 = ($499|0)>(1);
   $or$cond38 = $498 | $500;
   if ($or$cond38) {
    label = 96;
   } else {
    $501 = $52;
    $502 = $3;
    $503 = ((($502)) + 140|0);
    HEAP32[$503>>2] = $501;
    label = 95;
   }
   break;
  }
  case 4021:  {
   $arglist_current148 = HEAP32[$7>>2]|0;
   $504 = $arglist_current148;
   $505 = ((0) + 4|0);
   $expanded163 = $505;
   $expanded162 = (($expanded163) - 1)|0;
   $506 = (($504) + ($expanded162))|0;
   $507 = ((0) + 4|0);
   $expanded167 = $507;
   $expanded166 = (($expanded167) - 1)|0;
   $expanded165 = $expanded166 ^ -1;
   $508 = $506 & $expanded165;
   $509 = $508;
   $510 = HEAP32[$509>>2]|0;
   $arglist_next149 = ((($509)) + 4|0);
   HEAP32[$7>>2] = $arglist_next149;
   $55 = $510;
   $511 = $55;
   $54 = $511;
   $512 = $54;
   $513 = ($512|0)!=(0|0);
   if ($513) {
    $514 = $3;
    $515 = ((($514)) + 140|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = $54;
    HEAP32[$517>>2] = $516;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4024:  {
   $arglist_current151 = HEAP32[$7>>2]|0;
   $518 = $arglist_current151;
   $519 = ((0) + 4|0);
   $expanded170 = $519;
   $expanded169 = (($expanded170) - 1)|0;
   $520 = (($518) + ($expanded169))|0;
   $521 = ((0) + 4|0);
   $expanded174 = $521;
   $expanded173 = (($expanded174) - 1)|0;
   $expanded172 = $expanded173 ^ -1;
   $522 = $520 & $expanded172;
   $523 = $522;
   $524 = HEAP32[$523>>2]|0;
   $arglist_next152 = ((($523)) + 4|0);
   HEAP32[$7>>2] = $arglist_next152;
   $57 = $524;
   $525 = $57;
   $56 = $525;
   $526 = $56;
   $527 = ($526|0)!=(-1000);
   $528 = $56;
   $529 = ($528|0)!=(3001);
   $or$cond41 = $527 & $529;
   $530 = $56;
   $531 = ($530|0)!=(3002);
   $or$cond44 = $or$cond41 & $531;
   if ($or$cond44) {
    label = 96;
   } else {
    $532 = $56;
    $533 = $3;
    $534 = ((($533)) + 112|0);
    HEAP32[$534>>2] = $532;
    label = 95;
   }
   break;
  }
  case 4025:  {
   $arglist_current154 = HEAP32[$7>>2]|0;
   $535 = $arglist_current154;
   $536 = ((0) + 4|0);
   $expanded177 = $536;
   $expanded176 = (($expanded177) - 1)|0;
   $537 = (($535) + ($expanded176))|0;
   $538 = ((0) + 4|0);
   $expanded181 = $538;
   $expanded180 = (($expanded181) - 1)|0;
   $expanded179 = $expanded180 ^ -1;
   $539 = $537 & $expanded179;
   $540 = $539;
   $541 = HEAP32[$540>>2]|0;
   $arglist_next155 = ((($540)) + 4|0);
   HEAP32[$7>>2] = $arglist_next155;
   $59 = $541;
   $542 = $59;
   $58 = $542;
   $543 = $58;
   $544 = ($543|0)!=(0|0);
   if ($544) {
    $545 = $3;
    $546 = ((($545)) + 112|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = $58;
    HEAP32[$548>>2] = $547;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4027:  {
   $arglist_current157 = HEAP32[$7>>2]|0;
   $549 = $arglist_current157;
   $550 = ((0) + 4|0);
   $expanded184 = $550;
   $expanded183 = (($expanded184) - 1)|0;
   $551 = (($549) + ($expanded183))|0;
   $552 = ((0) + 4|0);
   $expanded188 = $552;
   $expanded187 = (($expanded188) - 1)|0;
   $expanded186 = $expanded187 ^ -1;
   $553 = $551 & $expanded186;
   $554 = $553;
   $555 = HEAP32[$554>>2]|0;
   $arglist_next158 = ((($554)) + 4|0);
   HEAP32[$7>>2] = $arglist_next158;
   $61 = $555;
   $556 = $61;
   $60 = $556;
   $557 = $60;
   $558 = ($557|0)!=(0|0);
   if ($558) {
    $559 = $3;
    $560 = ((($559)) + 132|0);
    $561 = HEAP32[$560>>2]|0;
    $562 = (($561|0) / 400)&-1;
    $563 = $60;
    HEAP32[$563>>2] = $562;
    $564 = $3;
    $565 = ((($564)) + 96|0);
    $566 = HEAP32[$565>>2]|0;
    $567 = ($566|0)!=(2051);
    if ($567) {
     $568 = $3;
     $569 = ((($568)) + 104|0);
     $570 = HEAP32[$569>>2]|0;
     $571 = $60;
     $572 = HEAP32[$571>>2]|0;
     $573 = (($572) + ($570))|0;
     HEAP32[$571>>2] = $573;
     label = 95;
    } else {
     label = 95;
    }
   } else {
    label = 96;
   }
   break;
  }
  case 4029:  {
   $arglist_current160 = HEAP32[$7>>2]|0;
   $574 = $arglist_current160;
   $575 = ((0) + 4|0);
   $expanded191 = $575;
   $expanded190 = (($expanded191) - 1)|0;
   $576 = (($574) + ($expanded190))|0;
   $577 = ((0) + 4|0);
   $expanded195 = $577;
   $expanded194 = (($expanded195) - 1)|0;
   $expanded193 = $expanded194 ^ -1;
   $578 = $576 & $expanded193;
   $579 = $578;
   $580 = HEAP32[$579>>2]|0;
   $arglist_next161 = ((($579)) + 4|0);
   HEAP32[$7>>2] = $arglist_next161;
   $63 = $580;
   $581 = $63;
   $62 = $581;
   $582 = $62;
   $583 = ($582|0)!=(0|0);
   if ($583) {
    $584 = $3;
    $585 = ((($584)) + 132|0);
    $586 = HEAP32[$585>>2]|0;
    $587 = $62;
    HEAP32[$587>>2] = $586;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4031:  {
   $arglist_current163 = HEAP32[$7>>2]|0;
   $588 = $arglist_current163;
   $589 = ((0) + 4|0);
   $expanded198 = $589;
   $expanded197 = (($expanded198) - 1)|0;
   $590 = (($588) + ($expanded197))|0;
   $591 = ((0) + 4|0);
   $expanded202 = $591;
   $expanded201 = (($expanded202) - 1)|0;
   $expanded200 = $expanded201 ^ -1;
   $592 = $590 & $expanded200;
   $593 = $592;
   $594 = HEAP32[$593>>2]|0;
   $arglist_next164 = ((($593)) + 4|0);
   HEAP32[$7>>2] = $arglist_next164;
   $65 = $594;
   $595 = $65;
   $64 = $595;
   $596 = $64;
   $597 = ($596|0)!=(0|0);
   if ($597) {
    $598 = $3;
    $599 = ((($598)) + 18216|0);
    $600 = HEAP32[$599>>2]|0;
    $601 = $64;
    HEAP32[$601>>2] = $600;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4036:  {
   $arglist_current166 = HEAP32[$7>>2]|0;
   $602 = $arglist_current166;
   $603 = ((0) + 4|0);
   $expanded205 = $603;
   $expanded204 = (($expanded205) - 1)|0;
   $604 = (($602) + ($expanded204))|0;
   $605 = ((0) + 4|0);
   $expanded209 = $605;
   $expanded208 = (($expanded209) - 1)|0;
   $expanded207 = $expanded208 ^ -1;
   $606 = $604 & $expanded207;
   $607 = $606;
   $608 = HEAP32[$607>>2]|0;
   $arglist_next167 = ((($607)) + 4|0);
   HEAP32[$7>>2] = $arglist_next167;
   $67 = $608;
   $609 = $67;
   $66 = $609;
   $610 = $66;
   $611 = ($610|0)<(8);
   $612 = $66;
   $613 = ($612|0)>(24);
   $or$cond47 = $611 | $613;
   if ($or$cond47) {
    label = 96;
   } else {
    $614 = $66;
    $615 = $3;
    $616 = ((($615)) + 156|0);
    HEAP32[$616>>2] = $614;
    label = 95;
   }
   break;
  }
  case 4037:  {
   $arglist_current169 = HEAP32[$7>>2]|0;
   $617 = $arglist_current169;
   $618 = ((0) + 4|0);
   $expanded212 = $618;
   $expanded211 = (($expanded212) - 1)|0;
   $619 = (($617) + ($expanded211))|0;
   $620 = ((0) + 4|0);
   $expanded216 = $620;
   $expanded215 = (($expanded216) - 1)|0;
   $expanded214 = $expanded215 ^ -1;
   $621 = $619 & $expanded214;
   $622 = $621;
   $623 = HEAP32[$622>>2]|0;
   $arglist_next170 = ((($622)) + 4|0);
   HEAP32[$7>>2] = $arglist_next170;
   $69 = $623;
   $624 = $69;
   $68 = $624;
   $625 = $68;
   $626 = ($625|0)!=(0|0);
   if ($626) {
    $627 = $3;
    $628 = ((($627)) + 156|0);
    $629 = HEAP32[$628>>2]|0;
    $630 = $68;
    HEAP32[$630>>2] = $629;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4040:  {
   $arglist_current172 = HEAP32[$7>>2]|0;
   $631 = $arglist_current172;
   $632 = ((0) + 4|0);
   $expanded219 = $632;
   $expanded218 = (($expanded219) - 1)|0;
   $633 = (($631) + ($expanded218))|0;
   $634 = ((0) + 4|0);
   $expanded223 = $634;
   $expanded222 = (($expanded223) - 1)|0;
   $expanded221 = $expanded222 ^ -1;
   $635 = $633 & $expanded221;
   $636 = $635;
   $637 = HEAP32[$636>>2]|0;
   $arglist_next173 = ((($636)) + 4|0);
   HEAP32[$7>>2] = $arglist_next173;
   $71 = $637;
   $638 = $71;
   $70 = $638;
   $639 = $70;
   $640 = ($639|0)!=(5000);
   $641 = $70;
   $642 = ($641|0)!=(5001);
   $or$cond50 = $640 & $642;
   $643 = $70;
   $644 = ($643|0)!=(5002);
   $or$cond53 = $or$cond50 & $644;
   $645 = $70;
   $646 = ($645|0)!=(5003);
   $or$cond56 = $or$cond53 & $646;
   $647 = $70;
   $648 = ($647|0)!=(5004);
   $or$cond59 = $or$cond56 & $648;
   $649 = $70;
   $650 = ($649|0)!=(5005);
   $or$cond62 = $or$cond59 & $650;
   $651 = $70;
   $652 = ($651|0)!=(5006);
   $or$cond65 = $or$cond62 & $652;
   $653 = $70;
   $654 = ($653|0)!=(5010);
   $or$cond68 = $or$cond65 & $654;
   if ($or$cond68) {
    label = 96;
   } else {
    $655 = $70;
    $656 = $3;
    $657 = ((($656)) + 144|0);
    HEAP32[$657>>2] = $655;
    $658 = $6;
    $659 = $70;
    HEAP32[$vararg_buffer174>>2] = $659;
    (_opus_custom_encoder_ctl($658,4040,$vararg_buffer174)|0);
    label = 95;
   }
   break;
  }
  case 4041:  {
   $arglist_current178 = HEAP32[$7>>2]|0;
   $660 = $arglist_current178;
   $661 = ((0) + 4|0);
   $expanded226 = $661;
   $expanded225 = (($expanded226) - 1)|0;
   $662 = (($660) + ($expanded225))|0;
   $663 = ((0) + 4|0);
   $expanded230 = $663;
   $expanded229 = (($expanded230) - 1)|0;
   $expanded228 = $expanded229 ^ -1;
   $664 = $662 & $expanded228;
   $665 = $664;
   $666 = HEAP32[$665>>2]|0;
   $arglist_next179 = ((($665)) + 4|0);
   HEAP32[$7>>2] = $arglist_next179;
   $73 = $666;
   $667 = $73;
   $72 = $667;
   $668 = $72;
   $669 = ($668|0)!=(0|0);
   if ($669) {
    $670 = $3;
    $671 = ((($670)) + 144|0);
    $672 = HEAP32[$671>>2]|0;
    $673 = $72;
    HEAP32[$673>>2] = $672;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4042:  {
   $arglist_current181 = HEAP32[$7>>2]|0;
   $674 = $arglist_current181;
   $675 = ((0) + 4|0);
   $expanded233 = $675;
   $expanded232 = (($expanded233) - 1)|0;
   $676 = (($674) + ($expanded232))|0;
   $677 = ((0) + 4|0);
   $expanded237 = $677;
   $expanded236 = (($expanded237) - 1)|0;
   $expanded235 = $expanded236 ^ -1;
   $678 = $676 & $expanded235;
   $679 = $678;
   $680 = HEAP32[$679>>2]|0;
   $arglist_next182 = ((($679)) + 4|0);
   HEAP32[$7>>2] = $arglist_next182;
   $75 = $680;
   $681 = $75;
   $74 = $681;
   $682 = $74;
   $683 = ($682|0)>(1);
   $684 = $74;
   $685 = ($684|0)<(0);
   $or$cond71 = $683 | $685;
   if ($or$cond71) {
    label = 96;
   } else {
    $686 = $74;
    $687 = $3;
    $688 = ((($687)) + 8|0);
    $689 = ((($688)) + 64|0);
    HEAP32[$689>>2] = $686;
    label = 95;
   }
   break;
  }
  case 4043:  {
   $arglist_current184 = HEAP32[$7>>2]|0;
   $690 = $arglist_current184;
   $691 = ((0) + 4|0);
   $expanded240 = $691;
   $expanded239 = (($expanded240) - 1)|0;
   $692 = (($690) + ($expanded239))|0;
   $693 = ((0) + 4|0);
   $expanded244 = $693;
   $expanded243 = (($expanded244) - 1)|0;
   $expanded242 = $expanded243 ^ -1;
   $694 = $692 & $expanded242;
   $695 = $694;
   $696 = HEAP32[$695>>2]|0;
   $arglist_next185 = ((($695)) + 4|0);
   HEAP32[$7>>2] = $arglist_next185;
   $77 = $696;
   $697 = $77;
   $76 = $697;
   $698 = $76;
   $699 = ($698|0)!=(0|0);
   if ($699) {
    $700 = $3;
    $701 = ((($700)) + 8|0);
    $702 = ((($701)) + 64|0);
    $703 = HEAP32[$702>>2]|0;
    $704 = $76;
    HEAP32[$704>>2] = $703;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  case 4028:  {
   $705 = $3;
   $706 = $3;
   $707 = ((($706)) + 4|0);
   $708 = HEAP32[$707>>2]|0;
   $709 = (($705) + ($708)|0);
   $78 = $709;
   $710 = $3;
   $711 = ((($710)) + 172|0);
   _tonality_analysis_reset($711);
   $712 = $3;
   $713 = ((($712)) + 14288|0);
   $80 = $713;
   $714 = $80;
   $715 = $80;
   $716 = $3;
   $717 = $715;
   $718 = $716;
   $719 = (($717) - ($718))|0;
   $720 = (18220 - ($719))|0;
   $721 = $720;
   _memset(($714|0),0,($721|0))|0;
   $722 = $6;
   (_opus_custom_encoder_ctl($722,4028,$vararg_buffer186)|0);
   $723 = $78;
   $724 = $3;
   $725 = ((($724)) + 168|0);
   $726 = HEAP32[$725>>2]|0;
   (_silk_InitEncoder($723,$726,$79)|0);
   $727 = $3;
   $728 = ((($727)) + 100|0);
   $729 = HEAP32[$728>>2]|0;
   $730 = $3;
   $731 = ((($730)) + 14288|0);
   HEAP32[$731>>2] = $729;
   $732 = $3;
   $733 = ((($732)) + 14292|0);
   HEAP16[$733>>1] = 16384;
   $734 = $3;
   $735 = ((($734)) + 14300|0);
   HEAPF32[$735>>2] = 1.0;
   $736 = $3;
   $737 = ((($736)) + 14344|0);
   HEAP32[$737>>2] = 1;
   $738 = $3;
   $739 = ((($738)) + 14320|0);
   HEAP32[$739>>2] = 1001;
   $740 = $3;
   $741 = ((($740)) + 14336|0);
   HEAP32[$741>>2] = 1105;
   $742 = (_silk_lin2log(60)|0);
   $743 = $742 << 8;
   $744 = $3;
   $745 = ((($744)) + 14296|0);
   HEAP32[$745>>2] = $743;
   label = 95;
   break;
  }
  case 11002:  {
   $arglist_current189 = HEAP32[$7>>2]|0;
   $746 = $arglist_current189;
   $747 = ((0) + 4|0);
   $expanded247 = $747;
   $expanded246 = (($expanded247) - 1)|0;
   $748 = (($746) + ($expanded246))|0;
   $749 = ((0) + 4|0);
   $expanded251 = $749;
   $expanded250 = (($expanded251) - 1)|0;
   $expanded249 = $expanded250 ^ -1;
   $750 = $748 & $expanded249;
   $751 = $750;
   $752 = HEAP32[$751>>2]|0;
   $arglist_next190 = ((($751)) + 4|0);
   HEAP32[$7>>2] = $arglist_next190;
   $82 = $752;
   $753 = $82;
   $81 = $753;
   $754 = $81;
   $755 = ($754|0)<(1000);
   $756 = $81;
   $757 = ($756|0)>(1002);
   $or$cond74 = $755 | $757;
   $758 = $81;
   $759 = ($758|0)!=(-1000);
   $or$cond77 = $or$cond74 & $759;
   if ($or$cond77) {
    label = 96;
   } else {
    $760 = $81;
    $761 = $3;
    $762 = ((($761)) + 124|0);
    HEAP32[$762>>2] = $760;
    label = 95;
   }
   break;
  }
  case 10024:  {
   $arglist_current192 = HEAP32[$7>>2]|0;
   $763 = $arglist_current192;
   $764 = ((0) + 4|0);
   $expanded254 = $764;
   $expanded253 = (($expanded254) - 1)|0;
   $765 = (($763) + ($expanded253))|0;
   $766 = ((0) + 4|0);
   $expanded258 = $766;
   $expanded257 = (($expanded258) - 1)|0;
   $expanded256 = $expanded257 ^ -1;
   $767 = $765 & $expanded256;
   $768 = $767;
   $769 = HEAP32[$768>>2]|0;
   $arglist_next193 = ((($768)) + 4|0);
   HEAP32[$7>>2] = $arglist_next193;
   $84 = $769;
   $770 = $84;
   $83 = $770;
   $771 = $83;
   $772 = $3;
   $773 = ((($772)) + 164|0);
   HEAP32[$773>>2] = $771;
   $774 = $6;
   $775 = $83;
   HEAP32[$vararg_buffer194>>2] = $775;
   $776 = (_opus_custom_encoder_ctl($774,10024,$vararg_buffer194)|0);
   $5 = $776;
   label = 95;
   break;
  }
  case 10026:  {
   $arglist_current198 = HEAP32[$7>>2]|0;
   $777 = $arglist_current198;
   $778 = ((0) + 4|0);
   $expanded261 = $778;
   $expanded260 = (($expanded261) - 1)|0;
   $779 = (($777) + ($expanded260))|0;
   $780 = ((0) + 4|0);
   $expanded265 = $780;
   $expanded264 = (($expanded265) - 1)|0;
   $expanded263 = $expanded264 ^ -1;
   $781 = $779 & $expanded263;
   $782 = $781;
   $783 = HEAP32[$782>>2]|0;
   $arglist_next199 = ((($782)) + 4|0);
   HEAP32[$7>>2] = $arglist_next199;
   $86 = $783;
   $784 = $86;
   $85 = $784;
   $785 = $85;
   $786 = $3;
   $787 = ((($786)) + 14348|0);
   HEAP32[$787>>2] = $785;
   $788 = $6;
   $789 = $85;
   $790 = $85;
   $791 = $85;
   $792 = $790;
   $793 = $791;
   $794 = (($792) - ($793))|0;
   $795 = (($794|0) / 4)&-1;
   $796 = (($789) + ($795<<2)|0);
   HEAP32[$vararg_buffer200>>2] = $796;
   $797 = (_opus_custom_encoder_ctl($788,10026,$vararg_buffer200)|0);
   $5 = $797;
   label = 95;
   break;
  }
  case 10015:  {
   $arglist_current204 = HEAP32[$7>>2]|0;
   $798 = $arglist_current204;
   $799 = ((0) + 4|0);
   $expanded268 = $799;
   $expanded267 = (($expanded268) - 1)|0;
   $800 = (($798) + ($expanded267))|0;
   $801 = ((0) + 4|0);
   $expanded272 = $801;
   $expanded271 = (($expanded272) - 1)|0;
   $expanded270 = $expanded271 ^ -1;
   $802 = $800 & $expanded270;
   $803 = $802;
   $804 = HEAP32[$803>>2]|0;
   $arglist_next205 = ((($803)) + 4|0);
   HEAP32[$7>>2] = $arglist_next205;
   $88 = $804;
   $805 = $88;
   $87 = $805;
   $806 = $87;
   $807 = ($806|0)!=(0|0);
   if ($807) {
    $808 = $6;
    $809 = $87;
    $810 = $87;
    $811 = $87;
    $812 = $810;
    $813 = $811;
    $814 = (($812) - ($813))|0;
    $815 = (($814|0) / 4)&-1;
    $816 = (($809) + ($815<<2)|0);
    HEAP32[$vararg_buffer206>>2] = $816;
    $817 = (_opus_custom_encoder_ctl($808,10015,$vararg_buffer206)|0);
    $5 = $817;
    label = 95;
   } else {
    label = 96;
   }
   break;
  }
  default: {
   $5 = -5;
   label = 95;
  }
  }
 } while(0);
 if ((label|0) == 95) {
  $818 = $5;
  $2 = $818;
  $819 = $2;
  STACKTOP = sp;return ($819|0);
 }
 else if ((label|0) == 96) {
  $2 = -1;
  $819 = $2;
  STACKTOP = sp;return ($819|0);
 }
 return (0)|0;
}
function _opus_encoder_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _opus_free_12($2);
 STACKTOP = sp;return;
}
function _opus_repacketizer_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function _opus_repacketizer_cat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_opus_repacketizer_cat_impl($6,$7,$8,0)|0);
 STACKTOP = sp;return ($9|0);
}
function _opus_repacketizer_cat_impl($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $13 = ($12|0)<(1);
 if ($13) {
  $4 = -4;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $6;
  $19 = HEAP8[$18>>0]|0;
  $20 = $5;
  HEAP8[$20>>0] = $19;
  $21 = $6;
  $22 = (_opus_packet_get_samples_per_frame($21,8000)|0);
  $23 = $5;
  $24 = ((($23)) + 296|0);
  HEAP32[$24>>2] = $22;
 } else {
  $25 = $5;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 & 252;
  $29 = $6;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 & 252;
  $33 = ($28|0)!=($32|0);
  if ($33) {
   $4 = -4;
   $73 = $4;
   STACKTOP = sp;return ($73|0);
  }
 }
 $34 = $6;
 $35 = $7;
 $36 = (_opus_packet_get_nb_frames($34,$35)|0);
 $10 = $36;
 $37 = $10;
 $38 = ($37|0)<(1);
 if ($38) {
  $4 = -4;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 $39 = $10;
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($39) + ($42))|0;
 $44 = $5;
 $45 = ((($44)) + 296|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = Math_imul($43, $46)|0;
 $48 = ($47|0)>(960);
 if ($48) {
  $4 = -4;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 $49 = $6;
 $50 = $7;
 $51 = $8;
 $52 = $5;
 $53 = ((($52)) + 8|0);
 $54 = $5;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($53) + ($56<<2)|0);
 $58 = $5;
 $59 = ((($58)) + 200|0);
 $60 = $5;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($59) + ($62<<1)|0);
 $64 = (_opus_packet_parse_impl($49,$50,$51,$9,$57,$63,0,0)|0);
 $11 = $64;
 $65 = $11;
 $66 = ($65|0)<(1);
 if ($66) {
  $67 = $11;
  $4 = $67;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 } else {
  $68 = $10;
  $69 = $5;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($68))|0;
  HEAP32[$70>>2] = $72;
  $4 = 0;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _opus_repacketizer_out_range_impl($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $9;
 $26 = ($25|0)<(0);
 if (!($26)) {
  $27 = $9;
  $28 = $10;
  $29 = ($27|0)>=($28|0);
  if (!($29)) {
   $30 = $10;
   $31 = $8;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30|0)>($33|0);
   if (!($34)) {
    $35 = $10;
    $36 = $9;
    $37 = (($35) - ($36))|0;
    $16 = $37;
    $38 = $8;
    $39 = ((($38)) + 200|0);
    $40 = $9;
    $41 = (($39) + ($40<<1)|0);
    $18 = $41;
    $42 = $8;
    $43 = ((($42)) + 8|0);
    $44 = $9;
    $45 = (($43) + ($44<<2)|0);
    $19 = $45;
    $46 = $13;
    $47 = ($46|0)!=(0);
    if ($47) {
     $48 = $18;
     $49 = $16;
     $50 = (($49) - 1)|0;
     $51 = (($48) + ($50<<1)|0);
     $52 = HEAP16[$51>>1]|0;
     $53 = $52 << 16 >> 16;
     $54 = ($53|0)>=(252);
     $55 = $54&1;
     $56 = (1 + ($55))|0;
     $17 = $56;
    } else {
     $17 = 0;
    }
    $57 = $11;
    $20 = $57;
    $58 = $16;
    $59 = ($58|0)==(1);
    do {
     if ($59) {
      $60 = $18;
      $61 = HEAP16[$60>>1]|0;
      $62 = $61 << 16 >> 16;
      $63 = (($62) + 1)|0;
      $64 = $17;
      $65 = (($64) + ($63))|0;
      $17 = $65;
      $66 = $17;
      $67 = $12;
      $68 = ($66|0)>($67|0);
      if (!($68)) {
       $69 = $8;
       $70 = HEAP8[$69>>0]|0;
       $71 = $70&255;
       $72 = $71 & 252;
       $73 = $72&255;
       $74 = $20;
       $75 = ((($74)) + 1|0);
       $20 = $75;
       HEAP8[$74>>0] = $73;
       break;
      }
      $7 = -2;
      $349 = $7;
      STACKTOP = sp;return ($349|0);
     } else {
      $76 = $16;
      $77 = ($76|0)==(2);
      if ($77) {
       $78 = $18;
       $79 = ((($78)) + 2|0);
       $80 = HEAP16[$79>>1]|0;
       $81 = $80 << 16 >> 16;
       $82 = $18;
       $83 = HEAP16[$82>>1]|0;
       $84 = $83 << 16 >> 16;
       $85 = ($81|0)==($84|0);
       $86 = $18;
       $87 = HEAP16[$86>>1]|0;
       $88 = $87 << 16 >> 16;
       if ($85) {
        $89 = $88<<1;
        $90 = (($89) + 1)|0;
        $91 = $17;
        $92 = (($91) + ($90))|0;
        $17 = $92;
        $93 = $17;
        $94 = $12;
        $95 = ($93|0)>($94|0);
        if (!($95)) {
         $96 = $8;
         $97 = HEAP8[$96>>0]|0;
         $98 = $97&255;
         $99 = $98 & 252;
         $100 = $99 | 1;
         $101 = $100&255;
         $102 = $20;
         $103 = ((($102)) + 1|0);
         $20 = $103;
         HEAP8[$102>>0] = $101;
         break;
        }
        $7 = -2;
        $349 = $7;
        STACKTOP = sp;return ($349|0);
       } else {
        $104 = $18;
        $105 = ((($104)) + 2|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = $106 << 16 >> 16;
        $108 = (($88) + ($107))|0;
        $109 = (($108) + 2)|0;
        $110 = $18;
        $111 = HEAP16[$110>>1]|0;
        $112 = $111 << 16 >> 16;
        $113 = ($112|0)>=(252);
        $114 = $113&1;
        $115 = (($109) + ($114))|0;
        $116 = $17;
        $117 = (($116) + ($115))|0;
        $17 = $117;
        $118 = $17;
        $119 = $12;
        $120 = ($118|0)>($119|0);
        if (!($120)) {
         $121 = $8;
         $122 = HEAP8[$121>>0]|0;
         $123 = $122&255;
         $124 = $123 & 252;
         $125 = $124 | 2;
         $126 = $125&255;
         $127 = $20;
         $128 = ((($127)) + 1|0);
         $20 = $128;
         HEAP8[$127>>0] = $126;
         $129 = $18;
         $130 = HEAP16[$129>>1]|0;
         $131 = $130 << 16 >> 16;
         $132 = $20;
         $133 = (_encode_size($131,$132)|0);
         $134 = $20;
         $135 = (($134) + ($133)|0);
         $20 = $135;
         break;
        }
        $7 = -2;
        $349 = $7;
        STACKTOP = sp;return ($349|0);
       }
      }
     }
    } while(0);
    $136 = $16;
    $137 = ($136|0)>(2);
    if ($137) {
     label = 23;
    } else {
     $138 = $14;
     $139 = ($138|0)!=(0);
     if ($139) {
      $140 = $17;
      $141 = $12;
      $142 = ($140|0)<($141|0);
      if ($142) {
       label = 23;
      }
     }
    }
    L32: do {
     if ((label|0) == 23) {
      $22 = 0;
      $143 = $11;
      $20 = $143;
      $144 = $13;
      $145 = ($144|0)!=(0);
      if ($145) {
       $146 = $18;
       $147 = $16;
       $148 = (($147) - 1)|0;
       $149 = (($146) + ($148<<1)|0);
       $150 = HEAP16[$149>>1]|0;
       $151 = $150 << 16 >> 16;
       $152 = ($151|0)>=(252);
       $153 = $152&1;
       $154 = (1 + ($153))|0;
       $17 = $154;
      } else {
       $17 = 0;
      }
      $21 = 0;
      $15 = 1;
      while(1) {
       $155 = $15;
       $156 = $16;
       $157 = ($155|0)<($156|0);
       if (!($157)) {
        break;
       }
       $158 = $18;
       $159 = $15;
       $160 = (($158) + ($159<<1)|0);
       $161 = HEAP16[$160>>1]|0;
       $162 = $161 << 16 >> 16;
       $163 = $18;
       $164 = HEAP16[$163>>1]|0;
       $165 = $164 << 16 >> 16;
       $166 = ($162|0)!=($165|0);
       if ($166) {
        label = 29;
        break;
       }
       $167 = $15;
       $168 = (($167) + 1)|0;
       $15 = $168;
      }
      if ((label|0) == 29) {
       $21 = 1;
      }
      $169 = $21;
      $170 = ($169|0)!=(0);
      do {
       if ($170) {
        $171 = $17;
        $172 = (($171) + 2)|0;
        $17 = $172;
        $15 = 0;
        while(1) {
         $173 = $15;
         $174 = $16;
         $175 = (($174) - 1)|0;
         $176 = ($173|0)<($175|0);
         $177 = $18;
         if (!($176)) {
          break;
         }
         $178 = $15;
         $179 = (($177) + ($178<<1)|0);
         $180 = HEAP16[$179>>1]|0;
         $181 = $180 << 16 >> 16;
         $182 = ($181|0)>=(252);
         $183 = $182&1;
         $184 = (1 + ($183))|0;
         $185 = $18;
         $186 = $15;
         $187 = (($185) + ($186<<1)|0);
         $188 = HEAP16[$187>>1]|0;
         $189 = $188 << 16 >> 16;
         $190 = (($184) + ($189))|0;
         $191 = $17;
         $192 = (($191) + ($190))|0;
         $17 = $192;
         $193 = $15;
         $194 = (($193) + 1)|0;
         $15 = $194;
        }
        $195 = $16;
        $196 = (($195) - 1)|0;
        $197 = (($177) + ($196<<1)|0);
        $198 = HEAP16[$197>>1]|0;
        $199 = $198 << 16 >> 16;
        $200 = $17;
        $201 = (($200) + ($199))|0;
        $17 = $201;
        $202 = $17;
        $203 = $12;
        $204 = ($202|0)>($203|0);
        if (!($204)) {
         $205 = $8;
         $206 = HEAP8[$205>>0]|0;
         $207 = $206&255;
         $208 = $207 & 252;
         $209 = $208 | 3;
         $210 = $209&255;
         $211 = $20;
         $212 = ((($211)) + 1|0);
         $20 = $212;
         HEAP8[$211>>0] = $210;
         $213 = $16;
         $214 = $213 | 128;
         $215 = $214&255;
         $216 = $20;
         $217 = ((($216)) + 1|0);
         $20 = $217;
         HEAP8[$216>>0] = $215;
         break;
        }
        $7 = -2;
        $349 = $7;
        STACKTOP = sp;return ($349|0);
       } else {
        $218 = $16;
        $219 = $18;
        $220 = HEAP16[$219>>1]|0;
        $221 = $220 << 16 >> 16;
        $222 = Math_imul($218, $221)|0;
        $223 = (($222) + 2)|0;
        $224 = $17;
        $225 = (($224) + ($223))|0;
        $17 = $225;
        $226 = $17;
        $227 = $12;
        $228 = ($226|0)>($227|0);
        if (!($228)) {
         $229 = $8;
         $230 = HEAP8[$229>>0]|0;
         $231 = $230&255;
         $232 = $231 & 252;
         $233 = $232 | 3;
         $234 = $233&255;
         $235 = $20;
         $236 = ((($235)) + 1|0);
         $20 = $236;
         HEAP8[$235>>0] = $234;
         $237 = $16;
         $238 = $237&255;
         $239 = $20;
         $240 = ((($239)) + 1|0);
         $20 = $240;
         HEAP8[$239>>0] = $238;
         break;
        }
        $7 = -2;
        $349 = $7;
        STACKTOP = sp;return ($349|0);
       }
      } while(0);
      $241 = $14;
      $242 = ($241|0)!=(0);
      if ($242) {
       $243 = $12;
       $244 = $17;
       $245 = (($243) - ($244))|0;
       $246 = $245;
      } else {
       $246 = 0;
      }
      $22 = $246;
      $247 = $22;
      $248 = ($247|0)!=(0);
      if ($248) {
       $249 = $11;
       $250 = ((($249)) + 1|0);
       $251 = HEAP8[$250>>0]|0;
       $252 = $251&255;
       $253 = $252 | 64;
       $254 = $253&255;
       HEAP8[$250>>0] = $254;
       $255 = $22;
       $256 = (($255) - 1)|0;
       $257 = (($256|0) / 255)&-1;
       $23 = $257;
       $15 = 0;
       while(1) {
        $258 = $15;
        $259 = $23;
        $260 = ($258|0)<($259|0);
        if (!($260)) {
         break;
        }
        $261 = $20;
        $262 = ((($261)) + 1|0);
        $20 = $262;
        HEAP8[$261>>0] = -1;
        $263 = $15;
        $264 = (($263) + 1)|0;
        $15 = $264;
       }
       $265 = $22;
       $266 = $23;
       $267 = ($266*255)|0;
       $268 = (($265) - ($267))|0;
       $269 = (($268) - 1)|0;
       $270 = $269&255;
       $271 = $20;
       $272 = ((($271)) + 1|0);
       $20 = $272;
       HEAP8[$271>>0] = $270;
       $273 = $22;
       $274 = $17;
       $275 = (($274) + ($273))|0;
       $17 = $275;
      }
      $276 = $21;
      $277 = ($276|0)!=(0);
      if ($277) {
       $15 = 0;
       while(1) {
        $278 = $15;
        $279 = $16;
        $280 = (($279) - 1)|0;
        $281 = ($278|0)<($280|0);
        if (!($281)) {
         break L32;
        }
        $282 = $18;
        $283 = $15;
        $284 = (($282) + ($283<<1)|0);
        $285 = HEAP16[$284>>1]|0;
        $286 = $285 << 16 >> 16;
        $287 = $20;
        $288 = (_encode_size($286,$287)|0);
        $289 = $20;
        $290 = (($289) + ($288)|0);
        $20 = $290;
        $291 = $15;
        $292 = (($291) + 1)|0;
        $15 = $292;
       }
      }
     }
    } while(0);
    $293 = $13;
    $294 = ($293|0)!=(0);
    if ($294) {
     $295 = $18;
     $296 = $16;
     $297 = (($296) - 1)|0;
     $298 = (($295) + ($297<<1)|0);
     $299 = HEAP16[$298>>1]|0;
     $300 = $299 << 16 >> 16;
     $301 = $20;
     $302 = (_encode_size($300,$301)|0);
     $24 = $302;
     $303 = $24;
     $304 = $20;
     $305 = (($304) + ($303)|0);
     $20 = $305;
    }
    $15 = 0;
    while(1) {
     $306 = $15;
     $307 = $16;
     $308 = ($306|0)<($307|0);
     if (!($308)) {
      break;
     }
     $309 = $20;
     $310 = $19;
     $311 = $15;
     $312 = (($310) + ($311<<2)|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $18;
     $315 = $15;
     $316 = (($314) + ($315<<1)|0);
     $317 = HEAP16[$316>>1]|0;
     $318 = $317 << 16 >> 16;
     $319 = $318;
     $320 = $20;
     $321 = $19;
     $322 = $15;
     $323 = (($321) + ($322<<2)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = $320;
     $326 = $324;
     $327 = (($325) - ($326))|0;
     $328 = 0;
     $329 = (($319) + ($328))|0;
     _memmove(($309|0),($313|0),($329|0))|0;
     $330 = $18;
     $331 = $15;
     $332 = (($330) + ($331<<1)|0);
     $333 = HEAP16[$332>>1]|0;
     $334 = $333 << 16 >> 16;
     $335 = $20;
     $336 = (($335) + ($334)|0);
     $20 = $336;
     $337 = $15;
     $338 = (($337) + 1)|0;
     $15 = $338;
    }
    $339 = $14;
    $340 = ($339|0)!=(0);
    L83: do {
     if ($340) {
      while(1) {
       $341 = $20;
       $342 = $11;
       $343 = $12;
       $344 = (($342) + ($343)|0);
       $345 = ($341>>>0)<($344>>>0);
       if (!($345)) {
        break L83;
       }
       $346 = $20;
       $347 = ((($346)) + 1|0);
       $20 = $347;
       HEAP8[$346>>0] = 0;
      }
     }
    } while(0);
    $348 = $17;
    $7 = $348;
    $349 = $7;
    STACKTOP = sp;return ($349|0);
   }
  }
 }
 $7 = -1;
 $349 = $7;
 STACKTOP = sp;return ($349|0);
}
function _opus_packet_pad($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $7 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ($9|0)<(1);
 if ($10) {
  $3 = -1;
  $53 = $3;
  STACKTOP = sp;return ($53|0);
 }
 $11 = $5;
 $12 = $6;
 $13 = ($11|0)==($12|0);
 if ($13) {
  $3 = 0;
  $53 = $3;
  STACKTOP = sp;return ($53|0);
 }
 $14 = $5;
 $15 = $6;
 $16 = ($14|0)>($15|0);
 if ($16) {
  $3 = -1;
  $53 = $3;
  STACKTOP = sp;return ($53|0);
 }
 (_opus_repacketizer_init($7)|0);
 $17 = $4;
 $18 = $6;
 $19 = (($17) + ($18)|0);
 $20 = $5;
 $21 = (0 - ($20))|0;
 $22 = (($19) + ($21)|0);
 $23 = $4;
 $24 = $5;
 $25 = $24;
 $26 = $4;
 $27 = $6;
 $28 = (($26) + ($27)|0);
 $29 = $5;
 $30 = (0 - ($29))|0;
 $31 = (($28) + ($30)|0);
 $32 = $4;
 $33 = $31;
 $34 = $32;
 $35 = (($33) - ($34))|0;
 $36 = 0;
 $37 = (($25) + ($36))|0;
 _memmove(($22|0),($23|0),($37|0))|0;
 $38 = $4;
 $39 = $6;
 $40 = (($38) + ($39)|0);
 $41 = $5;
 $42 = (0 - ($41))|0;
 $43 = (($40) + ($42)|0);
 $44 = $5;
 (_opus_repacketizer_cat($7,$43,$44)|0);
 $45 = ((($7)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $4;
 $48 = $6;
 $49 = (_opus_repacketizer_out_range_impl($7,0,$46,$47,$48,0,1)|0);
 $8 = $49;
 $50 = $8;
 $51 = ($50|0)>(0);
 if ($51) {
  $3 = 0;
  $53 = $3;
  STACKTOP = sp;return ($53|0);
 } else {
  $52 = $8;
  $3 = $52;
  $53 = $3;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _tonality_analysis_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (_opus_select_arch_33()|0);
 $3 = $1;
 HEAP32[$3>>2] = $2;
 $4 = $1;
 _tonality_analysis_reset($4);
 STACKTOP = sp;return;
}
function _opus_select_arch_33() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _tonality_analysis_reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $2 = $4;
 $5 = $2;
 $6 = $2;
 $7 = $1;
 $8 = $6;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = (14116 - ($10))|0;
 $12 = $11;
 _memset(($5|0),0,($12|0))|0;
 STACKTOP = sp;return;
}
function _tonality_get_info($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 8508|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $3;
 $14 = ((($13)) + 8504|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 8508|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($15) - ($18))|0;
 $7 = $19;
 $20 = $7;
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = $7;
  $23 = (($22) + 200)|0;
  $7 = $23;
 }
 $24 = $5;
 $25 = ($24|0)>(480);
 if ($25) {
  $26 = $6;
  $27 = $3;
  $28 = ((($27)) + 8504|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)!=($29|0);
  if ($30) {
   $31 = $6;
   $32 = (($31) + 1)|0;
   $6 = $32;
   $33 = $6;
   $34 = ($33|0)==(200);
   $$ = $34 ? 0 : $32;
   $6 = $$;
  }
 }
 $35 = $6;
 $36 = $3;
 $37 = ((($36)) + 8504|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 if ($39) {
  $40 = $6;
  $41 = (($40) + -1)|0;
  $6 = $41;
 }
 $42 = $6;
 $43 = ($42|0)<(0);
 if ($43) {
  $6 = 199;
 }
 $44 = $4;
 $45 = $3;
 $46 = ((($45)) + 8516|0);
 $47 = $6;
 $48 = (($46) + (($47*28)|0)|0);
 $49 = $4;
 $50 = $3;
 $51 = ((($50)) + 8516|0);
 $52 = $6;
 $53 = (($51) + (($52*28)|0)|0);
 $54 = $49;
 $55 = $53;
 $56 = (($54) - ($55))|0;
 $57 = (($56|0) / 28)&-1;
 $58 = 0;
 $59 = (28 + ($58))|0;
 _memcpy(($44|0),($48|0),($59|0))|0;
 $60 = $5;
 $61 = (($60|0) / 120)&-1;
 $62 = $3;
 $63 = ((($62)) + 8512|0);
 $$sink = $63;$$sink3 = $61;
 while(1) {
  $64 = HEAP32[$$sink>>2]|0;
  $65 = (($64) + ($$sink3))|0;
  HEAP32[$$sink>>2] = $65;
  $66 = $3;
  $67 = ((($66)) + 8512|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)>=(4);
  $70 = $3;
  if (!($69)) {
   break;
  }
  $71 = ((($70)) + 8512|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) - 4)|0;
  HEAP32[$71>>2] = $73;
  $74 = $3;
  $75 = ((($74)) + 8508|0);
  $$sink = $75;$$sink3 = 1;
 }
 $76 = ((($70)) + 8508|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)>=(200);
 if ($78) {
  $79 = $3;
  $80 = ((($79)) + 8508|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) - 200)|0;
  HEAP32[$80>>2] = $82;
 }
 $83 = $7;
 $84 = (($83) - 10)|0;
 $85 = ($84|0)>(0);
 $86 = $7;
 $87 = (($86) - 10)|0;
 $88 = $85 ? $87 : 0;
 $7 = $88;
 $8 = 0.0;
 $9 = 0;
 while(1) {
  $89 = $9;
  $90 = $7;
  $91 = (200 - ($90))|0;
  $92 = ($89|0)<($91|0);
  if (!($92)) {
   break;
  }
  $93 = $3;
  $94 = ((($93)) + 7688|0);
  $95 = $9;
  $96 = (($94) + ($95<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $8;
  $99 = $98 + $97;
  $8 = $99;
  $100 = $9;
  $101 = (($100) + 1)|0;
  $9 = $101;
 }
 while(1) {
  $102 = $9;
  $103 = ($102|0)<(200);
  if (!($103)) {
   break;
  }
  $104 = $3;
  $105 = ((($104)) + 6888|0);
  $106 = $9;
  $107 = (($105) + ($106<<2)|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $8;
  $110 = $109 + $108;
  $8 = $110;
  $111 = $9;
  $112 = (($111) + 1)|0;
  $9 = $112;
 }
 $113 = $8;
 $114 = $3;
 $115 = ((($114)) + 8492|0);
 $116 = +HEAPF32[$115>>2];
 $117 = $113 * $116;
 $118 = $8;
 $119 = 1.0 - $118;
 $120 = $3;
 $121 = ((($120)) + 8488|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $119 * $122;
 $124 = $117 + $123;
 $8 = $124;
 $125 = $8;
 $126 = $4;
 $127 = ((($126)) + 20|0);
 HEAPF32[$127>>2] = $125;
 STACKTOP = sp;return;
}
function _run_analysis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $26 = $14;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $73 = $23;
  HEAP32[$73>>2] = 0;
  $74 = $12;
  $75 = $23;
  $76 = $16;
  _tonality_get_info($74,$75,$76);
  STACKTOP = sp;return;
 }
 $28 = $20;
 $29 = ($28*195)|0;
 $30 = (($29|0) / 100)&-1;
 $31 = $15;
 $32 = ($30|0)<($31|0);
 if ($32) {
  $33 = $20;
  $34 = ($33*195)|0;
  $35 = (($34|0) / 100)&-1;
  $37 = $35;
 } else {
  $36 = $15;
  $37 = $36;
 }
 $15 = $37;
 $38 = $15;
 $39 = $12;
 $40 = ((($39)) + 6884|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($38) - ($41))|0;
 $25 = $42;
 $43 = $12;
 $44 = ((($43)) + 6884|0);
 $45 = HEAP32[$44>>2]|0;
 $24 = $45;
 while(1) {
  $46 = $12;
  $47 = $13;
  $48 = $14;
  $49 = $25;
  $50 = (480)<($49|0);
  $51 = $25;
  $52 = $50 ? 480 : $51;
  $53 = $24;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $57 = $21;
  $58 = $22;
  _tonality_analysis($46,$47,$48,$52,$53,$54,$55,$56,$57,$58);
  $59 = $24;
  $60 = (($59) + 480)|0;
  $24 = $60;
  $61 = $25;
  $62 = (($61) - 480)|0;
  $25 = $62;
  $63 = $25;
  $64 = ($63|0)>(0);
  if (!($64)) {
   break;
  }
 }
 $65 = $15;
 $66 = $12;
 $67 = ((($66)) + 6884|0);
 HEAP32[$67>>2] = $65;
 $68 = $16;
 $69 = $12;
 $70 = ((($69)) + 6884|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) - ($68))|0;
 HEAP32[$70>>2] = $72;
 $73 = $23;
 HEAP32[$73>>2] = 0;
 $74 = $12;
 $75 = $23;
 $76 = $16;
 _tonality_get_info($74,$75,$76);
 STACKTOP = sp;return;
}
function _tonality_analysis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0.0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0.0, $1003 = 0, $1004 = 0, $1005 = 0.0, $1006 = 0.0, $1007 = 0.0, $1008 = 0.0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0.0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0.0, $1017 = 0.0, $1018 = 0.0, $1019 = 0.0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0.0, $1025 = 0.0, $1026 = 0.0, $1027 = 0.0, $1028 = 0.0, $1029 = 0.0, $103 = 0, $1030 = 0.0, $1031 = 0.0, $1032 = 0, $1033 = 0;
 var $1034 = 0.0, $1035 = 0.0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0.0, $1043 = 0, $1044 = 0, $1045 = 0.0, $1046 = 0.0, $1047 = 0.0, $1048 = 0.0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0.0;
 var $1052 = 0.0, $1053 = 0.0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0.0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0.0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0.0, $1081 = 0.0, $1082 = 0.0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0.0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0.0, $1094 = 0.0, $1095 = 0.0, $1096 = 0.0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0.0, $1103 = 0.0, $1104 = 0.0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0.0, $111 = 0, $1110 = 0.0, $1111 = 0.0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0.0, $1119 = 0.0, $112 = 0.0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0.0, $1125 = 0.0, $1126 = 0.0, $1127 = 0, $1128 = 0, $1129 = 0.0, $113 = 0, $1130 = 0.0, $1131 = 0.0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0.0, $1140 = 0, $1141 = 0;
 var $1142 = 0.0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0.0, $1149 = 0.0, $115 = 0, $1150 = 0.0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0.0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0.0, $1162 = 0.0, $1163 = 0.0, $1164 = 0.0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0.0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0.0, $1181 = 0.0, $1182 = 0.0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0.0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0.0, $1194 = 0.0, $1195 = 0.0, $1196 = 0.0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0.0, $1203 = 0.0, $1204 = 0.0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0.0, $1217 = 0.0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0.0, $1223 = 0.0, $1224 = 0.0, $1225 = 0, $1226 = 0, $1227 = 0.0, $1228 = 0.0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0.0;
 var $1232 = 0.0, $1233 = 0.0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0.0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0.0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0.0, $1259 = 0, $126 = 0.0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0.0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0.0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0.0, $129 = 0, $1290 = 0.0, $1291 = 0.0, $1292 = 0.0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0.0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0.0, $1305 = 0, $1306 = 0.0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0.0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0.0, $1315 = 0, $1316 = 0.0, $1317 = 0.0, $1318 = 0.0, $1319 = 0.0, $132 = 0, $1320 = 0.0, $1321 = 0.0;
 var $1322 = 0.0, $1323 = 0.0, $1324 = 0.0, $1325 = 0.0, $1326 = 0.0, $1327 = 0.0, $1328 = 0.0, $1329 = 0.0, $133 = 0, $1330 = 0, $1331 = 0.0, $1332 = 0.0, $1333 = 0.0, $1334 = 0, $1335 = 0, $1336 = 0.0, $1337 = 0.0, $1338 = 0.0, $1339 = 0, $134 = 0;
 var $1340 = 0.0, $1341 = 0.0, $1342 = 0.0, $1343 = 0.0, $1344 = 0, $1345 = 0.0, $1346 = 0.0, $1347 = 0.0, $1348 = 0, $1349 = 0.0, $135 = 0, $1350 = 0.0, $1351 = 0, $1352 = 0.0, $1353 = 0, $1354 = 0.0, $1355 = 0.0, $1356 = 0.0, $1357 = 0, $1358 = 0;
 var $1359 = 0.0, $136 = 0.0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0.0, $1364 = 0, $1365 = 0.0, $1366 = 0, $1367 = 0, $1368 = 0.0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0.0, $1373 = 0.0, $1374 = 0.0, $1375 = 0.0, $1376 = 0.0;
 var $1377 = 0.0, $1378 = 0.0, $1379 = 0.0, $138 = 0.0, $1380 = 0.0, $1381 = 0.0, $1382 = 0.0, $1383 = 0.0, $1384 = 0.0, $1385 = 0.0, $1386 = 0.0, $1387 = 0.0, $1388 = 0.0, $1389 = 0.0, $139 = 0, $1390 = 0.0, $1391 = 0.0, $1392 = 0, $1393 = 0, $1394 = 0.0;
 var $1395 = 0.0, $1396 = 0.0, $1397 = 0.0, $1398 = 0.0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0.0, $1402 = 0.0, $1403 = 0.0, $1404 = 0.0, $1405 = 0, $1406 = 0, $1407 = 0.0, $1408 = 0.0, $1409 = 0.0, $141 = 0, $1410 = 0.0, $1411 = 0;
 var $1412 = 0, $1413 = 0.0, $1414 = 0.0, $1415 = 0.0, $1416 = 0.0, $1417 = 0.0, $1418 = 0.0, $1419 = 0.0, $142 = 0, $1420 = 0.0, $1421 = 0.0, $1422 = 0.0, $1423 = 0.0, $1424 = 0.0, $1425 = 0.0, $1426 = 0.0, $1427 = 0.0, $1428 = 0.0, $1429 = 0.0, $143 = 0;
 var $1430 = 0.0, $1431 = 0.0, $1432 = 0.0, $1433 = 0.0, $1434 = 0.0, $1435 = 0.0, $1436 = 0.0, $1437 = 0.0, $1438 = 0.0, $1439 = 0.0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0.0, $1445 = 0, $1446 = 0, $1447 = 0.0, $1448 = 0.0;
 var $1449 = 0.0, $145 = 0, $1450 = 0.0, $1451 = 0.0, $1452 = 0.0, $1453 = 0.0, $1454 = 0.0, $1455 = 0.0, $1456 = 0.0, $1457 = 0.0, $1458 = 0.0, $1459 = 0.0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0.0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0.0, $1475 = 0.0, $1476 = 0, $1477 = 0, $1478 = 0.0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0.0, $1483 = 0.0, $1484 = 0.0;
 var $1485 = 0.0, $1486 = 0.0, $1487 = 0.0, $1488 = 0.0, $1489 = 0.0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0.0, $1493 = 0.0, $1494 = 0.0, $1495 = 0.0, $1496 = 0.0, $1497 = 0.0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0.0, $1508 = 0.0, $1509 = 0.0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0.0, $152 = 0;
 var $1520 = 0.0, $1521 = 0.0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0.0, $1529 = 0.0, $153 = 0, $1530 = 0.0, $1531 = 0.0, $1532 = 0.0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0.0, $1537 = 0.0, $1538 = 0.0;
 var $1539 = 0.0, $154 = 0, $1540 = 0.0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0.0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0.0, $1556 = 0.0;
 var $1557 = 0.0, $1558 = 0.0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0.0, $1562 = 0.0, $1563 = 0, $1564 = 0, $1565 = 0.0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0.0, $1571 = 0.0, $1572 = 0.0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0.0, $1578 = 0.0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0.0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0.0, $1591 = 0.0, $1592 = 0.0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0.0, $1597 = 0.0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0.0, $1602 = 0.0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0.0, $1609 = 0.0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0.0, $1621 = 0.0, $1622 = 0, $1623 = 0, $1624 = 0.0, $1625 = 0.0, $1626 = 0, $1627 = 0.0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0.0, $1631 = 0.0, $1632 = 0.0, $1633 = 0.0, $1634 = 0, $1635 = 0, $1636 = 0.0, $1637 = 0.0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0.0, $1641 = 0.0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0.0, $1648 = 0.0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0.0, $166 = 0, $1660 = 0.0, $1661 = 0, $1662 = 0, $1663 = 0.0, $1664 = 0.0;
 var $1665 = 0, $1666 = 0.0, $1667 = 0, $1668 = 0, $1669 = 0.0, $167 = 0, $1670 = 0.0, $1671 = 0.0, $1672 = 0.0, $1673 = 0, $1674 = 0, $1675 = 0.0, $1676 = 0.0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0.0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0.0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0.0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0;
 var $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0;
 var $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0;
 var $378 = 0.0, $379 = 0.0, $38 = 0.0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0;
 var $396 = 0, $397 = 0.0, $398 = 0.0, $399 = 0.0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0;
 var $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0.0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0.0, $431 = 0.0;
 var $432 = 0.0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0;
 var $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0.0, $536 = 0.0, $537 = 0.0, $538 = 0.0, $539 = 0, $54 = 0.0, $540 = 0;
 var $541 = 0.0, $542 = 0.0, $543 = 0.0, $544 = 0.0, $545 = 0.0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0, $55 = 0.0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0.0, $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0.0, $573 = 0.0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0;
 var $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0.0, $590 = 0.0, $591 = 0.0, $592 = 0, $593 = 0, $594 = 0, $595 = 0.0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0.0, $600 = 0.0, $601 = 0.0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0.0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0.0, $640 = 0.0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0.0, $649 = 0, $65 = 0.0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0, $662 = 0.0, $663 = 0.0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0;
 var $669 = 0.0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0.0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0.0, $688 = 0.0, $689 = 0.0, $69 = 0.0, $690 = 0.0, $691 = 0.0, $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $70 = 0.0, $700 = 0.0, $701 = 0.0, $702 = 0, $703 = 0, $704 = 0.0;
 var $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0.0, $71 = 0.0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0.0, $718 = 0.0, $719 = 0.0, $72 = 0.0, $720 = 0.0, $721 = 0.0, $722 = 0.0;
 var $723 = 0.0, $724 = 0.0, $725 = 0.0, $726 = 0.0, $727 = 0.0, $728 = 0.0, $729 = 0.0, $73 = 0.0, $730 = 0.0, $731 = 0.0, $732 = 0.0, $733 = 0.0, $734 = 0.0, $735 = 0.0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0.0, $740 = 0.0;
 var $741 = 0.0, $742 = 0, $743 = 0.0, $744 = 0.0, $745 = 0.0, $746 = 0.0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0, $752 = 0.0, $753 = 0.0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0.0;
 var $76 = 0, $760 = 0.0, $761 = 0.0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0.0, $769 = 0.0, $77 = 0, $770 = 0.0, $771 = 0.0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0.0;
 var $778 = 0.0, $779 = 0, $78 = 0.0, $780 = 0.0, $781 = 0, $782 = 0, $783 = 0.0, $784 = 0.0, $785 = 0.0, $786 = 0.0, $787 = 0.0, $788 = 0.0, $789 = 0, $79 = 0.0, $790 = 0, $791 = 0.0, $792 = 0, $793 = 0, $794 = 0.0, $795 = 0.0;
 var $796 = 0.0, $797 = 0.0, $798 = 0, $799 = 0, $80 = 0.0, $800 = 0.0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0.0, $815 = 0.0, $816 = 0.0, $817 = 0.0, $818 = 0.0, $819 = 0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0.0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0.0, $835 = 0, $836 = 0, $837 = 0.0, $838 = 0.0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0, $842 = 0, $843 = 0.0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0.0, $849 = 0.0, $85 = 0.0;
 var $850 = 0.0, $851 = 0, $852 = 0, $853 = 0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0, $858 = 0.0, $859 = 0.0, $86 = 0.0, $860 = 0.0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0.0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0.0, $873 = 0.0, $874 = 0.0, $875 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0, $879 = 0, $88 = 0.0, $880 = 0.0, $881 = 0.0, $882 = 0, $883 = 0.0, $884 = 0.0, $885 = 0.0, $886 = 0.0;
 var $887 = 0.0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0, $891 = 0, $892 = 0.0, $893 = 0.0, $894 = 0.0, $895 = 0, $896 = 0.0, $897 = 0.0, $898 = 0, $899 = 0, $90 = 0.0, $900 = 0, $901 = 0, $902 = 0.0, $903 = 0.0, $904 = 0.0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0.0, $91 = 0.0, $910 = 0.0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0.0, $916 = 0, $917 = 0.0, $918 = 0, $919 = 0, $92 = 0.0, $920 = 0, $921 = 0, $922 = 0.0;
 var $923 = 0.0, $924 = 0.0, $925 = 0.0, $926 = 0.0, $927 = 0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0.0, $935 = 0.0, $936 = 0.0, $937 = 0, $938 = 0.0, $939 = 0.0, $94 = 0, $940 = 0.0;
 var $941 = 0, $942 = 0.0, $943 = 0.0, $944 = 0, $945 = 0, $946 = 0, $947 = 0.0, $948 = 0.0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0.0, $958 = 0.0, $959 = 0.0;
 var $96 = 0, $960 = 0.0, $961 = 0.0, $962 = 0, $963 = 0, $964 = 0.0, $965 = 0.0, $966 = 0.0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0.0, $971 = 0.0, $972 = 0.0, $973 = 0, $974 = 0, $975 = 0.0, $976 = 0.0, $977 = 0.0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0.0, $981 = 0.0, $982 = 0.0, $983 = 0, $984 = 0, $985 = 0.0, $986 = 0.0, $987 = 0, $988 = 0.0, $989 = 0, $99 = 0, $990 = 0, $991 = 0.0, $992 = 0.0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10192|0);
 $28 = sp + 10040|0;
 $29 = sp + 9968|0;
 $30 = sp + 9936|0;
 $31 = sp + 9836|0;
 $39 = sp + 9800|0;
 $50 = sp + 5920|0;
 $51 = sp + 2080|0;
 $52 = sp + 1120|0;
 $53 = sp + 160|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $23 = 480;
 $24 = 240;
 $93 = $10;
 $94 = ((($93)) + 4|0);
 $25 = $94;
 $95 = $10;
 $96 = ((($95)) + 964|0);
 $26 = $96;
 $97 = $10;
 $98 = ((($97)) + 1924|0);
 $27 = $98;
 $35 = 97.409088134765625;
 $36 = 0.0;
 $45 = 0;
 $46 = 0.0;
 $99 = $10;
 $100 = ((($99)) + 6864|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 1)|0;
 HEAP32[$100>>2] = $102;
 $103 = $10;
 $104 = ((($103)) + 6868|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (1 + ($105))|0;
 $107 = (20)<($106|0);
 if ($107) {
  $113 = 20;
 } else {
  $108 = $10;
  $109 = ((($108)) + 6868|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (1 + ($110))|0;
  $113 = $111;
 }
 $112 = (+($113|0));
 $114 = 1.0 / $112;
 $40 = $114;
 $115 = $10;
 $116 = ((($115)) + 6868|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = (1 + ($117))|0;
 $119 = (50)<($118|0);
 if ($119) {
  $125 = 50;
 } else {
  $120 = $10;
  $121 = ((($120)) + 6868|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (1 + ($122))|0;
  $125 = $123;
 }
 $124 = (+($125|0));
 $126 = 1.0 / $124;
 $41 = $126;
 $127 = $10;
 $128 = ((($127)) + 6868|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (1 + ($129))|0;
 $131 = (1000)<($130|0);
 if ($131) {
  $137 = 1000;
 } else {
  $132 = $10;
  $133 = ((($132)) + 6868|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (1 + ($134))|0;
  $137 = $135;
 }
 $136 = (+($137|0));
 $138 = 1.0 / $136;
 $42 = $138;
 $139 = $10;
 $140 = ((($139)) + 6868|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)<(4);
 if ($142) {
  $143 = $10;
  $144 = ((($143)) + 6844|0);
  HEAPF32[$144>>2] = 0.5;
 }
 $145 = $11;
 $146 = ((($145)) + 64|0);
 $147 = ((($146)) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 $22 = $148;
 $149 = $10;
 $150 = ((($149)) + 6868|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)==(0);
 if ($152) {
  $153 = $10;
  $154 = ((($153)) + 5764|0);
  HEAP32[$154>>2] = 240;
 }
 $155 = $19;
 $156 = $12;
 $157 = $10;
 $158 = ((($157)) + 2884|0);
 $159 = $10;
 $160 = ((($159)) + 5764|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = (($158) + ($161<<2)|0);
 $163 = $13;
 $164 = $10;
 $165 = ((($164)) + 5764|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (720 - ($166))|0;
 $168 = ($163|0)<($167|0);
 if ($168) {
  $169 = $13;
  $178 = $169;
 } else {
  $170 = $10;
  $171 = ((($170)) + 5764|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = (720 - ($172))|0;
  $178 = $173;
 }
 $174 = $14;
 $175 = $15;
 $176 = $16;
 $177 = $17;
 FUNCTION_TABLE_viiiiiii[$155 & 31]($156,$162,$178,$174,$175,$176,$177);
 $179 = $10;
 $180 = ((($179)) + 5764|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $13;
 $183 = (($181) + ($182))|0;
 $184 = ($183|0)<(720);
 if ($184) {
  $185 = $13;
  $186 = $10;
  $187 = ((($186)) + 5764|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + ($185))|0;
  HEAP32[$187>>2] = $189;
  STACKTOP = sp;return;
 }
 $190 = $10;
 $191 = ((($190)) + 8516|0);
 $192 = $10;
 $193 = ((($192)) + 8504|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (($194) + 1)|0;
 HEAP32[$193>>2] = $195;
 $196 = (($191) + (($194*28)|0)|0);
 $49 = $196;
 $197 = $10;
 $198 = ((($197)) + 8504|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ($199|0)>=(200);
 if ($200) {
  $201 = $10;
  $202 = ((($201)) + 8504|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($203) - 200)|0;
  HEAP32[$202>>2] = $204;
 }
 $20 = 0;
 while(1) {
  $205 = $20;
  $206 = $24;
  $207 = ($205|0)<($206|0);
  if (!($207)) {
   break;
  }
  $208 = $20;
  $209 = (232 + ($208<<2)|0);
  $210 = +HEAPF32[$209>>2];
  $54 = $210;
  $211 = $54;
  $212 = $10;
  $213 = ((($212)) + 2884|0);
  $214 = $20;
  $215 = (($213) + ($214<<2)|0);
  $216 = +HEAPF32[$215>>2];
  $217 = $211 * $216;
  $218 = $20;
  $219 = (($50) + ($218<<3)|0);
  HEAPF32[$219>>2] = $217;
  $220 = $54;
  $221 = $10;
  $222 = ((($221)) + 2884|0);
  $223 = $24;
  $224 = $20;
  $225 = (($223) + ($224))|0;
  $226 = (($222) + ($225<<2)|0);
  $227 = +HEAPF32[$226>>2];
  $228 = $220 * $227;
  $229 = $20;
  $230 = (($50) + ($229<<3)|0);
  $231 = ((($230)) + 4|0);
  HEAPF32[$231>>2] = $228;
  $232 = $54;
  $233 = $10;
  $234 = ((($233)) + 2884|0);
  $235 = $23;
  $236 = $20;
  $237 = (($235) - ($236))|0;
  $238 = (($237) - 1)|0;
  $239 = (($234) + ($238<<2)|0);
  $240 = +HEAPF32[$239>>2];
  $241 = $232 * $240;
  $242 = $23;
  $243 = $20;
  $244 = (($242) - ($243))|0;
  $245 = (($244) - 1)|0;
  $246 = (($50) + ($245<<3)|0);
  HEAPF32[$246>>2] = $241;
  $247 = $54;
  $248 = $10;
  $249 = ((($248)) + 2884|0);
  $250 = $23;
  $251 = $24;
  $252 = (($250) + ($251))|0;
  $253 = $20;
  $254 = (($252) - ($253))|0;
  $255 = (($254) - 1)|0;
  $256 = (($249) + ($255<<2)|0);
  $257 = +HEAPF32[$256>>2];
  $258 = $247 * $257;
  $259 = $23;
  $260 = $20;
  $261 = (($259) - ($260))|0;
  $262 = (($261) - 1)|0;
  $263 = (($50) + ($262<<3)|0);
  $264 = ((($263)) + 4|0);
  HEAPF32[$264>>2] = $258;
  $265 = $20;
  $266 = (($265) + 1)|0;
  $20 = $266;
 }
 $267 = $10;
 $268 = ((($267)) + 2884|0);
 $269 = $10;
 $270 = ((($269)) + 2884|0);
 $271 = ((($270)) + 2880|0);
 $272 = ((($271)) + -960|0);
 $273 = $10;
 $274 = ((($273)) + 2884|0);
 $275 = $10;
 $276 = ((($275)) + 2884|0);
 $277 = ((($276)) + 2880|0);
 $278 = ((($277)) + -960|0);
 $279 = $274;
 $280 = $278;
 $281 = (($279) - ($280))|0;
 $282 = (($281|0) / 4)&-1;
 $283 = 0;
 $284 = (960 + ($283))|0;
 _memmove(($268|0),($272|0),($284|0))|0;
 $285 = $13;
 $286 = $10;
 $287 = ((($286)) + 5764|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = (720 - ($288))|0;
 $290 = (($285) - ($289))|0;
 $48 = $290;
 $291 = $19;
 $292 = $12;
 $293 = $10;
 $294 = ((($293)) + 2884|0);
 $295 = ((($294)) + 960|0);
 $296 = $48;
 $297 = $14;
 $298 = (($297) + 720)|0;
 $299 = $10;
 $300 = ((($299)) + 5764|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = (($298) - ($301))|0;
 $303 = $15;
 $304 = $16;
 $305 = $17;
 FUNCTION_TABLE_viiiiiii[$291 & 31]($292,$295,$296,$302,$303,$304,$305);
 $306 = $48;
 $307 = (240 + ($306))|0;
 $308 = $10;
 $309 = ((($308)) + 5764|0);
 HEAP32[$309>>2] = $307;
 $310 = $22;
 _opus_fft_c($310,$50,$51);
 $311 = +HEAPF32[$51>>2];
 $312 = +HEAPF32[$51>>2];
 $313 = $311 != $312;
 if ($313) {
  $314 = $49;
  HEAP32[$314>>2] = 0;
  STACKTOP = sp;return;
 }
 $20 = 1;
 while(1) {
  $315 = $20;
  $316 = $24;
  $317 = ($315|0)<($316|0);
  if (!($317)) {
   break;
  }
  $318 = $20;
  $319 = (($51) + ($318<<3)|0);
  $320 = +HEAPF32[$319>>2];
  $321 = $23;
  $322 = $20;
  $323 = (($321) - ($322))|0;
  $324 = (($51) + ($323<<3)|0);
  $325 = +HEAPF32[$324>>2];
  $326 = $320 + $325;
  $55 = $326;
  $327 = $20;
  $328 = (($51) + ($327<<3)|0);
  $329 = ((($328)) + 4|0);
  $330 = +HEAPF32[$329>>2];
  $331 = $23;
  $332 = $20;
  $333 = (($331) - ($332))|0;
  $334 = (($51) + ($333<<3)|0);
  $335 = ((($334)) + 4|0);
  $336 = +HEAPF32[$335>>2];
  $337 = $330 - $336;
  $57 = $337;
  $338 = $20;
  $339 = (($51) + ($338<<3)|0);
  $340 = ((($339)) + 4|0);
  $341 = +HEAPF32[$340>>2];
  $342 = $23;
  $343 = $20;
  $344 = (($342) - ($343))|0;
  $345 = (($51) + ($344<<3)|0);
  $346 = ((($345)) + 4|0);
  $347 = +HEAPF32[$346>>2];
  $348 = $341 + $347;
  $56 = $348;
  $349 = $23;
  $350 = $20;
  $351 = (($349) - ($350))|0;
  $352 = (($51) + ($351<<3)|0);
  $353 = +HEAPF32[$352>>2];
  $354 = $20;
  $355 = (($51) + ($354<<3)|0);
  $356 = +HEAPF32[$355>>2];
  $357 = $353 - $356;
  $58 = $357;
  $358 = $57;
  $359 = $55;
  $360 = (+_fast_atan2f($358,$359));
  $361 = 0.15915493667125702 * $360;
  $59 = $361;
  $362 = $59;
  $363 = $25;
  $364 = $20;
  $365 = (($363) + ($364<<2)|0);
  $366 = +HEAPF32[$365>>2];
  $367 = $362 - $366;
  $60 = $367;
  $368 = $60;
  $369 = $26;
  $370 = $20;
  $371 = (($369) + ($370<<2)|0);
  $372 = +HEAPF32[$371>>2];
  $373 = $368 - $372;
  $61 = $373;
  $374 = $58;
  $375 = $56;
  $376 = (+_fast_atan2f($374,$375));
  $377 = 0.15915493667125702 * $376;
  $62 = $377;
  $378 = $62;
  $379 = $59;
  $380 = $378 - $379;
  $63 = $380;
  $381 = $63;
  $382 = $60;
  $383 = $381 - $382;
  $64 = $383;
  $384 = $61;
  $385 = $61;
  $386 = $385;
  $387 = 0.5 + $386;
  $388 = (+Math_floor((+$387)));
  $389 = $388;
  $390 = $384 - $389;
  $65 = $390;
  $391 = $65;
  $392 = $391;
  $393 = (+Math_abs((+$392)));
  $394 = $393;
  $395 = $20;
  $396 = (($53) + ($395<<2)|0);
  HEAPF32[$396>>2] = $394;
  $397 = $65;
  $398 = $65;
  $399 = $398 * $397;
  $65 = $399;
  $400 = $65;
  $401 = $65;
  $402 = $401 * $400;
  $65 = $402;
  $403 = $64;
  $404 = $64;
  $405 = $404;
  $406 = 0.5 + $405;
  $407 = (+Math_floor((+$406)));
  $408 = $407;
  $409 = $403 - $408;
  $66 = $409;
  $410 = $66;
  $411 = $410;
  $412 = (+Math_abs((+$411)));
  $413 = $412;
  $414 = $20;
  $415 = (($53) + ($414<<2)|0);
  $416 = +HEAPF32[$415>>2];
  $417 = $416 + $413;
  HEAPF32[$415>>2] = $417;
  $418 = $66;
  $419 = $66;
  $420 = $419 * $418;
  $66 = $420;
  $421 = $66;
  $422 = $66;
  $423 = $422 * $421;
  $66 = $423;
  $424 = $27;
  $425 = $20;
  $426 = (($424) + ($425<<2)|0);
  $427 = +HEAPF32[$426>>2];
  $428 = $65;
  $429 = 2.0 * $428;
  $430 = $427 + $429;
  $431 = $66;
  $432 = $430 + $431;
  $433 = 0.25 * $432;
  $67 = $433;
  $434 = $67;
  $435 = 62341.81640625 * $434;
  $436 = 1.0 + $435;
  $437 = 1.0 / $436;
  $438 = $437 - 0.014999999664723873;
  $439 = $20;
  $440 = (($52) + ($439<<2)|0);
  HEAPF32[$440>>2] = $438;
  $441 = $62;
  $442 = $25;
  $443 = $20;
  $444 = (($442) + ($443<<2)|0);
  HEAPF32[$444>>2] = $441;
  $445 = $63;
  $446 = $26;
  $447 = $20;
  $448 = (($446) + ($447<<2)|0);
  HEAPF32[$448>>2] = $445;
  $449 = $66;
  $450 = $27;
  $451 = $20;
  $452 = (($450) + ($451<<2)|0);
  HEAPF32[$452>>2] = $449;
  $453 = $20;
  $454 = (($453) + 1)|0;
  $20 = $454;
 }
 $32 = 0.0;
 $33 = 0.0;
 $455 = $49;
 $456 = ((($455)) + 16|0);
 HEAPF32[$456>>2] = 0.0;
 $34 = 0.0;
 $37 = 0.0;
 $457 = $10;
 $458 = ((($457)) + 6868|0);
 $459 = HEAP32[$458>>2]|0;
 $460 = ($459|0)!=(0);
 L39: do {
  if (!($460)) {
   $21 = 0;
   while(1) {
    $461 = $21;
    $462 = ($461|0)<(18);
    if (!($462)) {
     break L39;
    }
    $463 = $10;
    $464 = ((($463)) + 6420|0);
    $465 = $21;
    $466 = (($464) + ($465<<2)|0);
    HEAPF32[$466>>2] = 1.0E+10;
    $467 = $10;
    $468 = ((($467)) + 6492|0);
    $469 = $21;
    $470 = (($468) + ($469<<2)|0);
    HEAPF32[$470>>2] = -1.0E+10;
    $471 = $21;
    $472 = (($471) + 1)|0;
    $21 = $472;
   }
  }
 } while(0);
 $38 = 0.0;
 $43 = 0.0;
 $21 = 0;
 while(1) {
  $473 = $21;
  $474 = ($473|0)<(18);
  if (!($474)) {
   break;
  }
  $68 = 0.0;
  $69 = 0.0;
  $70 = 0.0;
  $475 = $21;
  $476 = (1192 + ($475<<2)|0);
  $477 = HEAP32[$476>>2]|0;
  $20 = $477;
  while(1) {
   $478 = $20;
   $479 = $21;
   $480 = (($479) + 1)|0;
   $481 = (1192 + ($480<<2)|0);
   $482 = HEAP32[$481>>2]|0;
   $483 = ($478|0)<($482|0);
   if (!($483)) {
    break;
   }
   $484 = $20;
   $485 = (($51) + ($484<<3)|0);
   $486 = +HEAPF32[$485>>2];
   $487 = $20;
   $488 = (($51) + ($487<<3)|0);
   $489 = +HEAPF32[$488>>2];
   $490 = $486 * $489;
   $491 = $23;
   $492 = $20;
   $493 = (($491) - ($492))|0;
   $494 = (($51) + ($493<<3)|0);
   $495 = +HEAPF32[$494>>2];
   $496 = $23;
   $497 = $20;
   $498 = (($496) - ($497))|0;
   $499 = (($51) + ($498<<3)|0);
   $500 = +HEAPF32[$499>>2];
   $501 = $495 * $500;
   $502 = $490 + $501;
   $503 = $20;
   $504 = (($51) + ($503<<3)|0);
   $505 = ((($504)) + 4|0);
   $506 = +HEAPF32[$505>>2];
   $507 = $20;
   $508 = (($51) + ($507<<3)|0);
   $509 = ((($508)) + 4|0);
   $510 = +HEAPF32[$509>>2];
   $511 = $506 * $510;
   $512 = $502 + $511;
   $513 = $23;
   $514 = $20;
   $515 = (($513) - ($514))|0;
   $516 = (($51) + ($515<<3)|0);
   $517 = ((($516)) + 4|0);
   $518 = +HEAPF32[$517>>2];
   $519 = $23;
   $520 = $20;
   $521 = (($519) - ($520))|0;
   $522 = (($51) + ($521<<3)|0);
   $523 = ((($522)) + 4|0);
   $524 = +HEAPF32[$523>>2];
   $525 = $518 * $524;
   $526 = $512 + $525;
   $74 = $526;
   $527 = $74;
   $528 = $68;
   $529 = $528 + $527;
   $68 = $529;
   $530 = $74;
   $531 = $20;
   $532 = (($52) + ($531<<2)|0);
   $533 = +HEAPF32[$532>>2];
   $534 = $530 * $533;
   $535 = $69;
   $536 = $535 + $534;
   $69 = $536;
   $537 = $74;
   $538 = $537 * 2.0;
   $539 = $20;
   $540 = (($53) + ($539<<2)|0);
   $541 = +HEAPF32[$540>>2];
   $542 = 0.5 - $541;
   $543 = $538 * $542;
   $544 = $70;
   $545 = $544 + $543;
   $70 = $545;
   $546 = $20;
   $547 = (($546) + 1)|0;
   $20 = $547;
  }
  $548 = $68;
  $549 = $548 < 1.0E+9;
  if (!($549)) {
   label = 37;
   break;
  }
  $550 = $68;
  $551 = $68;
  $552 = $550 != $551;
  if ($552) {
   label = 37;
   break;
  }
  $554 = $68;
  $555 = $10;
  $556 = ((($555)) + 5844|0);
  $557 = $10;
  $558 = ((($557)) + 6856|0);
  $559 = HEAP32[$558>>2]|0;
  $560 = (($556) + (($559*72)|0)|0);
  $561 = $21;
  $562 = (($560) + ($561<<2)|0);
  HEAPF32[$562>>2] = $554;
  $563 = $70;
  $564 = $68;
  $565 = 1.0000000036274937E-15 + $564;
  $566 = $563 / $565;
  $567 = $34;
  $568 = $567 + $566;
  $34 = $568;
  $569 = $68;
  $570 = $569 + 1.000000013351432E-10;
  $571 = $570;
  $572 = (+Math_sqrt((+$571)));
  $573 = $572;
  $574 = $43;
  $575 = $574 + $573;
  $43 = $575;
  $576 = $68;
  $577 = $576 + 1.000000013351432E-10;
  $578 = $577;
  $579 = (+Math_log((+$578)));
  $580 = $579;
  $581 = $21;
  $582 = (($29) + ($581<<2)|0);
  HEAPF32[$582>>2] = $580;
  $583 = $21;
  $584 = (($29) + ($583<<2)|0);
  $585 = +HEAPF32[$584>>2];
  $586 = $10;
  $587 = ((($586)) + 6420|0);
  $588 = $21;
  $589 = (($587) + ($588<<2)|0);
  $590 = +HEAPF32[$589>>2];
  $591 = $590 + 0.0099999997764825821;
  $592 = $585 < $591;
  if ($592) {
   $593 = $21;
   $594 = (($29) + ($593<<2)|0);
   $595 = +HEAPF32[$594>>2];
   $606 = $595;
  } else {
   $596 = $10;
   $597 = ((($596)) + 6420|0);
   $598 = $21;
   $599 = (($597) + ($598<<2)|0);
   $600 = +HEAPF32[$599>>2];
   $601 = $600 + 0.0099999997764825821;
   $606 = $601;
  }
  $602 = $10;
  $603 = ((($602)) + 6420|0);
  $604 = $21;
  $605 = (($603) + ($604<<2)|0);
  HEAPF32[$605>>2] = $606;
  $607 = $21;
  $608 = (($29) + ($607<<2)|0);
  $609 = +HEAPF32[$608>>2];
  $610 = $10;
  $611 = ((($610)) + 6492|0);
  $612 = $21;
  $613 = (($611) + ($612<<2)|0);
  $614 = +HEAPF32[$613>>2];
  $615 = $614 - 0.10000000149011612;
  $616 = $609 > $615;
  if ($616) {
   $617 = $21;
   $618 = (($29) + ($617<<2)|0);
   $619 = +HEAPF32[$618>>2];
   $630 = $619;
  } else {
   $620 = $10;
   $621 = ((($620)) + 6492|0);
   $622 = $21;
   $623 = (($621) + ($622<<2)|0);
   $624 = +HEAPF32[$623>>2];
   $625 = $624 - 0.10000000149011612;
   $630 = $625;
  }
  $626 = $10;
  $627 = ((($626)) + 6492|0);
  $628 = $21;
  $629 = (($627) + ($628<<2)|0);
  HEAPF32[$629>>2] = $630;
  $631 = $10;
  $632 = ((($631)) + 6492|0);
  $633 = $21;
  $634 = (($632) + ($633<<2)|0);
  $635 = +HEAPF32[$634>>2];
  $636 = $10;
  $637 = ((($636)) + 6420|0);
  $638 = $21;
  $639 = (($637) + ($638<<2)|0);
  $640 = +HEAPF32[$639>>2];
  $641 = $640 + 1.0;
  $642 = $635 < $641;
  if ($642) {
   $643 = $10;
   $644 = ((($643)) + 6492|0);
   $645 = $21;
   $646 = (($644) + ($645<<2)|0);
   $647 = +HEAPF32[$646>>2];
   $648 = $647 + 0.5;
   HEAPF32[$646>>2] = $648;
   $649 = $10;
   $650 = ((($649)) + 6420|0);
   $651 = $21;
   $652 = (($650) + ($651<<2)|0);
   $653 = +HEAPF32[$652>>2];
   $654 = $653 - 0.5;
   HEAPF32[$652>>2] = $654;
  }
  $655 = $21;
  $656 = (($29) + ($655<<2)|0);
  $657 = +HEAPF32[$656>>2];
  $658 = $10;
  $659 = ((($658)) + 6420|0);
  $660 = $21;
  $661 = (($659) + ($660<<2)|0);
  $662 = +HEAPF32[$661>>2];
  $663 = $657 - $662;
  $664 = $10;
  $665 = ((($664)) + 6492|0);
  $666 = $21;
  $667 = (($665) + ($666<<2)|0);
  $668 = +HEAPF32[$667>>2];
  $669 = 1.0000000036274937E-15 + $668;
  $670 = $10;
  $671 = ((($670)) + 6420|0);
  $672 = $21;
  $673 = (($671) + ($672<<2)|0);
  $674 = +HEAPF32[$673>>2];
  $675 = $669 - $674;
  $676 = $663 / $675;
  $677 = $38;
  $678 = $677 + $676;
  $38 = $678;
  $72 = 0.0;
  $71 = 0.0;
  $20 = 0;
  while(1) {
   $679 = $20;
   $680 = ($679|0)<(8);
   if (!($680)) {
    break;
   }
   $681 = $10;
   $682 = ((($681)) + 5844|0);
   $683 = $20;
   $684 = (($682) + (($683*72)|0)|0);
   $685 = $21;
   $686 = (($684) + ($685<<2)|0);
   $687 = +HEAPF32[$686>>2];
   $688 = $687;
   $689 = (+Math_sqrt((+$688)));
   $690 = $689;
   $691 = $71;
   $692 = $691 + $690;
   $71 = $692;
   $693 = $10;
   $694 = ((($693)) + 5844|0);
   $695 = $20;
   $696 = (($694) + (($695*72)|0)|0);
   $697 = $21;
   $698 = (($696) + ($697<<2)|0);
   $699 = +HEAPF32[$698>>2];
   $700 = $72;
   $701 = $700 + $699;
   $72 = $701;
   $702 = $20;
   $703 = (($702) + 1)|0;
   $20 = $703;
  }
  $704 = $71;
  $705 = $72;
  $706 = 8.0 * $705;
  $707 = $706;
  $708 = 1.0000000000000001E-15 + $707;
  $709 = (+Math_sqrt((+$708)));
  $710 = $709;
  $711 = $704 / $710;
  $712 = 0.99000000953674316 < $711;
  if ($712) {
   $721 = 0.99000000953674316;
  } else {
   $713 = $71;
   $714 = $72;
   $715 = 8.0 * $714;
   $716 = $715;
   $717 = 1.0000000000000001E-15 + $716;
   $718 = (+Math_sqrt((+$717)));
   $719 = $718;
   $720 = $713 / $719;
   $721 = $720;
  }
  $73 = $721;
  $722 = $73;
  $723 = $73;
  $724 = $723 * $722;
  $73 = $724;
  $725 = $73;
  $726 = $73;
  $727 = $726 * $725;
  $73 = $727;
  $728 = $73;
  $729 = $37;
  $730 = $729 + $728;
  $37 = $730;
  $731 = $69;
  $732 = $68;
  $733 = 1.0000000036274937E-15 + $732;
  $734 = $731 / $733;
  $735 = $73;
  $736 = $10;
  $737 = ((($736)) + 5768|0);
  $738 = $21;
  $739 = (($737) + ($738<<2)|0);
  $740 = +HEAPF32[$739>>2];
  $741 = $735 * $740;
  $742 = $734 > $741;
  if ($742) {
   $743 = $69;
   $744 = $68;
   $745 = 1.0000000036274937E-15 + $744;
   $746 = $743 / $745;
   $756 = $746;
  } else {
   $747 = $73;
   $748 = $10;
   $749 = ((($748)) + 5768|0);
   $750 = $21;
   $751 = (($749) + ($750<<2)|0);
   $752 = +HEAPF32[$751>>2];
   $753 = $747 * $752;
   $756 = $753;
  }
  $754 = $21;
  $755 = (($28) + ($754<<2)|0);
  HEAPF32[$755>>2] = $756;
  $757 = $21;
  $758 = (($28) + ($757<<2)|0);
  $759 = +HEAPF32[$758>>2];
  $760 = $32;
  $761 = $760 + $759;
  $32 = $761;
  $762 = $21;
  $763 = ($762|0)>=(9);
  if ($763) {
   $764 = $21;
   $765 = (($764) - 18)|0;
   $766 = (($765) + 9)|0;
   $767 = (($28) + ($766<<2)|0);
   $768 = +HEAPF32[$767>>2];
   $769 = $32;
   $770 = $769 - $768;
   $32 = $770;
  }
  $771 = $33;
  $772 = $21;
  $773 = (($772) - 18)|0;
  $774 = (+($773|0));
  $775 = 0.029999999329447746 * $774;
  $776 = 1.0 + $775;
  $777 = $32;
  $778 = $776 * $777;
  $779 = $771 > $778;
  if ($779) {
   $780 = $33;
   $788 = $780;
  } else {
   $781 = $21;
   $782 = (($781) - 18)|0;
   $783 = (+($782|0));
   $784 = 0.029999999329447746 * $783;
   $785 = 1.0 + $784;
   $786 = $32;
   $787 = $785 * $786;
   $788 = $787;
  }
  $33 = $788;
  $789 = $21;
  $790 = (($28) + ($789<<2)|0);
  $791 = +HEAPF32[$790>>2];
  $792 = $21;
  $793 = (($792) - 8)|0;
  $794 = (+($793|0));
  $795 = $791 * $794;
  $796 = $36;
  $797 = $796 + $795;
  $36 = $797;
  $798 = $21;
  $799 = (($28) + ($798<<2)|0);
  $800 = +HEAPF32[$799>>2];
  $801 = $10;
  $802 = ((($801)) + 5768|0);
  $803 = $21;
  $804 = (($802) + ($803<<2)|0);
  HEAPF32[$804>>2] = $800;
  $805 = $21;
  $806 = (($805) + 1)|0;
  $21 = $806;
 }
 if ((label|0) == 37) {
  $553 = $49;
  HEAP32[$553>>2] = 0;
  STACKTOP = sp;return;
 }
 $44 = 0.0;
 $45 = 0;
 $46 = 0.0;
 $807 = $18;
 $808 = (($807) - 8)|0;
 $809 = (0)>($808|0);
 $810 = $18;
 $811 = (($810) - 8)|0;
 $812 = $809 ? 0 : $811;
 $813 = 1 << $812;
 $814 = (+($813|0));
 $815 = 5.6999997468665242E-4 / $814;
 $47 = $815;
 $816 = $47;
 $817 = $47;
 $818 = $817 * $816;
 $47 = $818;
 $21 = 0;
 while(1) {
  $819 = $21;
  $820 = ($819|0)<(21);
  if (!($820)) {
   break;
  }
  $75 = 0.0;
  $821 = $21;
  $822 = (1268 + ($821<<2)|0);
  $823 = HEAP32[$822>>2]|0;
  $76 = $823;
  $824 = $21;
  $825 = (($824) + 1)|0;
  $826 = (1268 + ($825<<2)|0);
  $827 = HEAP32[$826>>2]|0;
  $77 = $827;
  $828 = $76;
  $20 = $828;
  while(1) {
   $829 = $20;
   $830 = $77;
   $831 = ($829|0)<($830|0);
   if (!($831)) {
    break;
   }
   $832 = $20;
   $833 = (($51) + ($832<<3)|0);
   $834 = +HEAPF32[$833>>2];
   $835 = $20;
   $836 = (($51) + ($835<<3)|0);
   $837 = +HEAPF32[$836>>2];
   $838 = $834 * $837;
   $839 = $23;
   $840 = $20;
   $841 = (($839) - ($840))|0;
   $842 = (($51) + ($841<<3)|0);
   $843 = +HEAPF32[$842>>2];
   $844 = $23;
   $845 = $20;
   $846 = (($844) - ($845))|0;
   $847 = (($51) + ($846<<3)|0);
   $848 = +HEAPF32[$847>>2];
   $849 = $843 * $848;
   $850 = $838 + $849;
   $851 = $20;
   $852 = (($51) + ($851<<3)|0);
   $853 = ((($852)) + 4|0);
   $854 = +HEAPF32[$853>>2];
   $855 = $20;
   $856 = (($51) + ($855<<3)|0);
   $857 = ((($856)) + 4|0);
   $858 = +HEAPF32[$857>>2];
   $859 = $854 * $858;
   $860 = $850 + $859;
   $861 = $23;
   $862 = $20;
   $863 = (($861) - ($862))|0;
   $864 = (($51) + ($863<<3)|0);
   $865 = ((($864)) + 4|0);
   $866 = +HEAPF32[$865>>2];
   $867 = $23;
   $868 = $20;
   $869 = (($867) - ($868))|0;
   $870 = (($51) + ($869<<3)|0);
   $871 = ((($870)) + 4|0);
   $872 = +HEAPF32[$871>>2];
   $873 = $866 * $872;
   $874 = $860 + $873;
   $78 = $874;
   $875 = $78;
   $876 = $75;
   $877 = $876 + $875;
   $75 = $877;
   $878 = $20;
   $879 = (($878) + 1)|0;
   $20 = $879;
  }
  $880 = $46;
  $881 = $75;
  $882 = $880 > $881;
  $883 = $46;
  $884 = $75;
  $885 = $882 ? $883 : $884;
  $46 = $885;
  $886 = $42;
  $887 = 1.0 - $886;
  $888 = $10;
  $889 = ((($888)) + 6564|0);
  $890 = $21;
  $891 = (($889) + ($890<<2)|0);
  $892 = +HEAPF32[$891>>2];
  $893 = $887 * $892;
  $894 = $75;
  $895 = $893 > $894;
  if ($895) {
   $896 = $42;
   $897 = 1.0 - $896;
   $898 = $10;
   $899 = ((($898)) + 6564|0);
   $900 = $21;
   $901 = (($899) + ($900<<2)|0);
   $902 = +HEAPF32[$901>>2];
   $903 = $897 * $902;
   $909 = $903;
  } else {
   $904 = $75;
   $909 = $904;
  }
  $905 = $10;
  $906 = ((($905)) + 6564|0);
  $907 = $21;
  $908 = (($906) + ($907<<2)|0);
  HEAPF32[$908>>2] = $909;
  $910 = $75;
  $911 = $10;
  $912 = ((($911)) + 6564|0);
  $913 = $21;
  $914 = (($912) + ($913<<2)|0);
  $915 = +HEAPF32[$914>>2];
  $916 = $910 > $915;
  if ($916) {
   $917 = $75;
   $923 = $917;
  } else {
   $918 = $10;
   $919 = ((($918)) + 6564|0);
   $920 = $21;
   $921 = (($919) + ($920<<2)|0);
   $922 = +HEAPF32[$921>>2];
   $923 = $922;
  }
  $75 = $923;
  $924 = $44;
  $925 = 0.05000000074505806 * $924;
  $926 = $75;
  $927 = $925 > $926;
  $928 = $44;
  $929 = 0.05000000074505806 * $928;
  $930 = $75;
  $931 = $927 ? $929 : $930;
  $44 = $931;
  $932 = $75;
  $933 = $932;
  $934 = $44;
  $935 = $934;
  $936 = 0.10000000000000001 * $935;
  $937 = $933 > $936;
  if ($937) {
   $938 = $75;
   $939 = $938 * 1.0E+9;
   $940 = $46;
   $941 = $939 > $940;
   if ($941) {
    $942 = $75;
    $943 = $47;
    $944 = $77;
    $945 = $76;
    $946 = (($944) - ($945))|0;
    $947 = (+($946|0));
    $948 = $943 * $947;
    $949 = $942 > $948;
    if ($949) {
     $950 = $21;
     $45 = $950;
    }
   }
  }
  $951 = $21;
  $952 = (($951) + 1)|0;
  $21 = $952;
 }
 $953 = $10;
 $954 = ((($953)) + 6868|0);
 $955 = HEAP32[$954>>2]|0;
 $956 = ($955|0)<=(2);
 if ($956) {
  $45 = 20;
 }
 $957 = $43;
 $958 = $957;
 $959 = (+_log10($958));
 $960 = $959;
 $961 = 20.0 * $960;
 $43 = $961;
 $962 = $10;
 $963 = ((($962)) + 6848|0);
 $964 = +HEAPF32[$963>>2];
 $965 = $964 - 0.029999999329447746;
 $966 = $43;
 $967 = $965 > $966;
 if ($967) {
  $968 = $10;
  $969 = ((($968)) + 6848|0);
  $970 = +HEAPF32[$969>>2];
  $971 = $970 - 0.029999999329447746;
  $975 = $971;
 } else {
  $972 = $43;
  $975 = $972;
 }
 $973 = $10;
 $974 = ((($973)) + 6848|0);
 HEAPF32[$974>>2] = $975;
 $976 = $41;
 $977 = 1.0 - $976;
 $978 = $10;
 $979 = ((($978)) + 6852|0);
 $980 = +HEAPF32[$979>>2];
 $981 = $980 * $977;
 HEAPF32[$979>>2] = $981;
 $982 = $43;
 $983 = $10;
 $984 = ((($983)) + 6848|0);
 $985 = +HEAPF32[$984>>2];
 $986 = $985 - 30.0;
 $987 = $982 < $986;
 if ($987) {
  $988 = $41;
  $989 = $10;
  $990 = ((($989)) + 6852|0);
  $991 = +HEAPF32[$990>>2];
  $992 = $991 + $988;
  HEAPF32[$990>>2] = $992;
 }
 $20 = 0;
 while(1) {
  $993 = $20;
  $994 = ($993|0)<(8);
  if (!($994)) {
   break;
  }
  $79 = 0.0;
  $21 = 0;
  while(1) {
   $995 = $21;
   $996 = ($995|0)<(16);
   if (!($996)) {
    break;
   }
   $997 = $20;
   $998 = $997<<4;
   $999 = $21;
   $1000 = (($998) + ($999))|0;
   $1001 = (1356 + ($1000<<2)|0);
   $1002 = +HEAPF32[$1001>>2];
   $1003 = $21;
   $1004 = (($29) + ($1003<<2)|0);
   $1005 = +HEAPF32[$1004>>2];
   $1006 = $1002 * $1005;
   $1007 = $79;
   $1008 = $1007 + $1006;
   $79 = $1008;
   $1009 = $21;
   $1010 = (($1009) + 1)|0;
   $21 = $1010;
  }
  $1011 = $79;
  $1012 = $20;
  $1013 = (($30) + ($1012<<2)|0);
  HEAPF32[$1013>>2] = $1011;
  $1014 = $20;
  $1015 = (($1014) + 1)|0;
  $20 = $1015;
 }
 $1016 = $37;
 $1017 = $1016 / 18.0;
 $37 = $1017;
 $1018 = $38;
 $1019 = $1018 / 18.0;
 $38 = $1019;
 $1020 = $10;
 $1021 = ((($1020)) + 6868|0);
 $1022 = HEAP32[$1021>>2]|0;
 $1023 = ($1022|0)<(10);
 $$ = $1023 ? 0.5 : $1019;
 $38 = $$;
 $1024 = $34;
 $1025 = $1024 / 18.0;
 $34 = $1025;
 $1026 = $34;
 $1027 = $34;
 $1028 = 1.0 - $1027;
 $1029 = $38;
 $1030 = $1028 * $1029;
 $1031 = $1026 + $1030;
 $1032 = $49;
 $1033 = ((($1032)) + 16|0);
 HEAPF32[$1033>>2] = $1031;
 $1034 = $33;
 $1035 = $1034 / 9.0;
 $32 = $1035;
 $1036 = $32;
 $1037 = $10;
 $1038 = ((($1037)) + 5840|0);
 $1039 = +HEAPF32[$1038>>2];
 $1040 = $1039 * 0.80000001192092896;
 $1041 = $1036 > $1040;
 if ($1041) {
  $1042 = $32;
  $1047 = $1042;
 } else {
  $1043 = $10;
  $1044 = ((($1043)) + 5840|0);
  $1045 = +HEAPF32[$1044>>2];
  $1046 = $1045 * 0.80000001192092896;
  $1047 = $1046;
 }
 $32 = $1047;
 $1048 = $32;
 $1049 = $10;
 $1050 = ((($1049)) + 5840|0);
 HEAPF32[$1050>>2] = $1048;
 $1051 = $36;
 $1052 = $1051 / 64.0;
 $36 = $1052;
 $1053 = $36;
 $1054 = $49;
 $1055 = ((($1054)) + 8|0);
 HEAPF32[$1055>>2] = $1053;
 $1056 = $10;
 $1057 = ((($1056)) + 6856|0);
 $1058 = HEAP32[$1057>>2]|0;
 $1059 = (($1058) + 1)|0;
 $1060 = (($1059|0) % 8)&-1;
 $1061 = $10;
 $1062 = ((($1061)) + 6856|0);
 HEAP32[$1062>>2] = $1060;
 $1063 = $10;
 $1064 = ((($1063)) + 6868|0);
 $1065 = HEAP32[$1064>>2]|0;
 $1066 = (($1065) + 1)|0;
 HEAP32[$1064>>2] = $1066;
 $1067 = $32;
 $1068 = $49;
 $1069 = ((($1068)) + 4|0);
 HEAPF32[$1069>>2] = $1067;
 $20 = 0;
 while(1) {
  $1070 = $20;
  $1071 = ($1070|0)<(4);
  if (!($1071)) {
   break;
  }
  $1072 = $20;
  $1073 = (($30) + ($1072<<2)|0);
  $1074 = +HEAPF32[$1073>>2];
  $1075 = $10;
  $1076 = ((($1075)) + 6648|0);
  $1077 = $20;
  $1078 = (($1077) + 24)|0;
  $1079 = (($1076) + ($1078<<2)|0);
  $1080 = +HEAPF32[$1079>>2];
  $1081 = $1074 + $1080;
  $1082 = -0.12298999726772308 * $1081;
  $1083 = $10;
  $1084 = ((($1083)) + 6648|0);
  $1085 = $20;
  $1086 = (($1084) + ($1085<<2)|0);
  $1087 = +HEAPF32[$1086>>2];
  $1088 = $10;
  $1089 = ((($1088)) + 6648|0);
  $1090 = $20;
  $1091 = (($1090) + 16)|0;
  $1092 = (($1089) + ($1091<<2)|0);
  $1093 = +HEAPF32[$1092>>2];
  $1094 = $1087 + $1093;
  $1095 = 0.49195000529289246 * $1094;
  $1096 = $1082 + $1095;
  $1097 = $10;
  $1098 = ((($1097)) + 6648|0);
  $1099 = $20;
  $1100 = (($1099) + 8)|0;
  $1101 = (($1098) + ($1100<<2)|0);
  $1102 = +HEAPF32[$1101>>2];
  $1103 = 0.69692999124526978 * $1102;
  $1104 = $1096 + $1103;
  $1105 = $10;
  $1106 = ((($1105)) + 6776|0);
  $1107 = $20;
  $1108 = (($1106) + ($1107<<2)|0);
  $1109 = +HEAPF32[$1108>>2];
  $1110 = 1.4349000453948975 * $1109;
  $1111 = $1104 - $1110;
  $1112 = $20;
  $1113 = (($31) + ($1112<<2)|0);
  HEAPF32[$1113>>2] = $1111;
  $1114 = $20;
  $1115 = (($1114) + 1)|0;
  $20 = $1115;
 }
 $20 = 0;
 while(1) {
  $1116 = $20;
  $1117 = ($1116|0)<(4);
  if (!($1117)) {
   break;
  }
  $1118 = $40;
  $1119 = 1.0 - $1118;
  $1120 = $10;
  $1121 = ((($1120)) + 6776|0);
  $1122 = $20;
  $1123 = (($1121) + ($1122<<2)|0);
  $1124 = +HEAPF32[$1123>>2];
  $1125 = $1119 * $1124;
  $1126 = $40;
  $1127 = $20;
  $1128 = (($30) + ($1127<<2)|0);
  $1129 = +HEAPF32[$1128>>2];
  $1130 = $1126 * $1129;
  $1131 = $1125 + $1130;
  $1132 = $10;
  $1133 = ((($1132)) + 6776|0);
  $1134 = $20;
  $1135 = (($1133) + ($1134<<2)|0);
  HEAPF32[$1135>>2] = $1131;
  $1136 = $20;
  $1137 = (($1136) + 1)|0;
  $20 = $1137;
 }
 $20 = 0;
 while(1) {
  $1138 = $20;
  $1139 = ($1138|0)<(4);
  if (!($1139)) {
   break;
  }
  $1140 = $20;
  $1141 = (($30) + ($1140<<2)|0);
  $1142 = +HEAPF32[$1141>>2];
  $1143 = $10;
  $1144 = ((($1143)) + 6648|0);
  $1145 = $20;
  $1146 = (($1145) + 24)|0;
  $1147 = (($1144) + ($1146<<2)|0);
  $1148 = +HEAPF32[$1147>>2];
  $1149 = $1142 - $1148;
  $1150 = 0.63245999813079834 * $1149;
  $1151 = $10;
  $1152 = ((($1151)) + 6648|0);
  $1153 = $20;
  $1154 = (($1152) + ($1153<<2)|0);
  $1155 = +HEAPF32[$1154>>2];
  $1156 = $10;
  $1157 = ((($1156)) + 6648|0);
  $1158 = $20;
  $1159 = (($1158) + 16)|0;
  $1160 = (($1157) + ($1159<<2)|0);
  $1161 = +HEAPF32[$1160>>2];
  $1162 = $1155 - $1161;
  $1163 = 0.31622999906539917 * $1162;
  $1164 = $1150 + $1163;
  $1165 = $20;
  $1166 = (4 + ($1165))|0;
  $1167 = (($31) + ($1166<<2)|0);
  HEAPF32[$1167>>2] = $1164;
  $1168 = $20;
  $1169 = (($1168) + 1)|0;
  $20 = $1169;
 }
 $20 = 0;
 while(1) {
  $1170 = $20;
  $1171 = ($1170|0)<(3);
  if (!($1171)) {
   break;
  }
  $1172 = $20;
  $1173 = (($30) + ($1172<<2)|0);
  $1174 = +HEAPF32[$1173>>2];
  $1175 = $10;
  $1176 = ((($1175)) + 6648|0);
  $1177 = $20;
  $1178 = (($1177) + 24)|0;
  $1179 = (($1176) + ($1178<<2)|0);
  $1180 = +HEAPF32[$1179>>2];
  $1181 = $1174 + $1180;
  $1182 = 0.53451997041702271 * $1181;
  $1183 = $10;
  $1184 = ((($1183)) + 6648|0);
  $1185 = $20;
  $1186 = (($1184) + ($1185<<2)|0);
  $1187 = +HEAPF32[$1186>>2];
  $1188 = $10;
  $1189 = ((($1188)) + 6648|0);
  $1190 = $20;
  $1191 = (($1190) + 16)|0;
  $1192 = (($1189) + ($1191<<2)|0);
  $1193 = +HEAPF32[$1192>>2];
  $1194 = $1187 + $1193;
  $1195 = 0.26725998520851135 * $1194;
  $1196 = $1182 - $1195;
  $1197 = $10;
  $1198 = ((($1197)) + 6648|0);
  $1199 = $20;
  $1200 = (($1199) + 8)|0;
  $1201 = (($1198) + ($1200<<2)|0);
  $1202 = +HEAPF32[$1201>>2];
  $1203 = 0.53451997041702271 * $1202;
  $1204 = $1196 - $1203;
  $1205 = $20;
  $1206 = (8 + ($1205))|0;
  $1207 = (($31) + ($1206<<2)|0);
  HEAPF32[$1207>>2] = $1204;
  $1208 = $20;
  $1209 = (($1208) + 1)|0;
  $20 = $1209;
 }
 $1210 = $10;
 $1211 = ((($1210)) + 6868|0);
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = ($1212|0)>(5);
 L146: do {
  if ($1213) {
   $20 = 0;
   while(1) {
    $1214 = $20;
    $1215 = ($1214|0)<(9);
    if (!($1215)) {
     break L146;
    }
    $1216 = $40;
    $1217 = 1.0 - $1216;
    $1218 = $10;
    $1219 = ((($1218)) + 6808|0);
    $1220 = $20;
    $1221 = (($1219) + ($1220<<2)|0);
    $1222 = +HEAPF32[$1221>>2];
    $1223 = $1217 * $1222;
    $1224 = $40;
    $1225 = $20;
    $1226 = (($31) + ($1225<<2)|0);
    $1227 = +HEAPF32[$1226>>2];
    $1228 = $1224 * $1227;
    $1229 = $20;
    $1230 = (($31) + ($1229<<2)|0);
    $1231 = +HEAPF32[$1230>>2];
    $1232 = $1228 * $1231;
    $1233 = $1223 + $1232;
    $1234 = $10;
    $1235 = ((($1234)) + 6808|0);
    $1236 = $20;
    $1237 = (($1235) + ($1236<<2)|0);
    HEAPF32[$1237>>2] = $1233;
    $1238 = $20;
    $1239 = (($1238) + 1)|0;
    $20 = $1239;
   }
  }
 } while(0);
 $20 = 0;
 while(1) {
  $1240 = $20;
  $1241 = ($1240|0)<(8);
  if (!($1241)) {
   break;
  }
  $1242 = $10;
  $1243 = ((($1242)) + 6648|0);
  $1244 = $20;
  $1245 = (($1244) + 16)|0;
  $1246 = (($1243) + ($1245<<2)|0);
  $1247 = +HEAPF32[$1246>>2];
  $1248 = $10;
  $1249 = ((($1248)) + 6648|0);
  $1250 = $20;
  $1251 = (($1250) + 24)|0;
  $1252 = (($1249) + ($1251<<2)|0);
  HEAPF32[$1252>>2] = $1247;
  $1253 = $10;
  $1254 = ((($1253)) + 6648|0);
  $1255 = $20;
  $1256 = (($1255) + 8)|0;
  $1257 = (($1254) + ($1256<<2)|0);
  $1258 = +HEAPF32[$1257>>2];
  $1259 = $10;
  $1260 = ((($1259)) + 6648|0);
  $1261 = $20;
  $1262 = (($1261) + 16)|0;
  $1263 = (($1260) + ($1262<<2)|0);
  HEAPF32[$1263>>2] = $1258;
  $1264 = $10;
  $1265 = ((($1264)) + 6648|0);
  $1266 = $20;
  $1267 = (($1265) + ($1266<<2)|0);
  $1268 = +HEAPF32[$1267>>2];
  $1269 = $10;
  $1270 = ((($1269)) + 6648|0);
  $1271 = $20;
  $1272 = (($1271) + 8)|0;
  $1273 = (($1270) + ($1272<<2)|0);
  HEAPF32[$1273>>2] = $1268;
  $1274 = $20;
  $1275 = (($30) + ($1274<<2)|0);
  $1276 = +HEAPF32[$1275>>2];
  $1277 = $10;
  $1278 = ((($1277)) + 6648|0);
  $1279 = $20;
  $1280 = (($1278) + ($1279<<2)|0);
  HEAPF32[$1280>>2] = $1276;
  $1281 = $20;
  $1282 = (($1281) + 1)|0;
  $20 = $1282;
 }
 $20 = 0;
 while(1) {
  $1283 = $20;
  $1284 = ($1283|0)<(9);
  if (!($1284)) {
   break;
  }
  $1285 = $10;
  $1286 = ((($1285)) + 6808|0);
  $1287 = $20;
  $1288 = (($1286) + ($1287<<2)|0);
  $1289 = +HEAPF32[$1288>>2];
  $1290 = $1289;
  $1291 = (+Math_sqrt((+$1290)));
  $1292 = $1291;
  $1293 = $20;
  $1294 = (11 + ($1293))|0;
  $1295 = (($31) + ($1294<<2)|0);
  HEAPF32[$1295>>2] = $1292;
  $1296 = $20;
  $1297 = (($1296) + 1)|0;
  $20 = $1297;
 }
 $1298 = $49;
 $1299 = ((($1298)) + 4|0);
 $1300 = +HEAPF32[$1299>>2];
 $1301 = ((($31)) + 80|0);
 HEAPF32[$1301>>2] = $1300;
 $1302 = $49;
 $1303 = ((($1302)) + 16|0);
 $1304 = +HEAPF32[$1303>>2];
 $1305 = ((($31)) + 84|0);
 HEAPF32[$1305>>2] = $1304;
 $1306 = $37;
 $1307 = ((($31)) + 88|0);
 HEAPF32[$1307>>2] = $1306;
 $1308 = $49;
 $1309 = ((($1308)) + 8|0);
 $1310 = +HEAPF32[$1309>>2];
 $1311 = ((($31)) + 92|0);
 HEAPF32[$1311>>2] = $1310;
 $1312 = $10;
 $1313 = ((($1312)) + 6852|0);
 $1314 = +HEAPF32[$1313>>2];
 $1315 = ((($31)) + 96|0);
 HEAPF32[$1315>>2] = $1314;
 _mlp_process(2672,$31,$39);
 $1316 = +HEAPF32[$39>>2];
 $1317 = $1316 + 1.0;
 $1318 = 0.5 * $1317;
 HEAPF32[$39>>2] = $1318;
 $1319 = +HEAPF32[$39>>2];
 $1320 = 1.2100000381469727 * $1319;
 $1321 = +HEAPF32[$39>>2];
 $1322 = $1320 * $1321;
 $1323 = 0.0099999997764825821 + $1322;
 $1324 = +HEAPF32[$39>>2];
 $1325 = $1324;
 $1326 = (+Math_pow((+$1325),10.0));
 $1327 = $1326;
 $1328 = 0.23000000417232513 * $1327;
 $1329 = $1323 - $1328;
 HEAPF32[$39>>2] = $1329;
 $1330 = ((($39)) + 4|0);
 $1331 = +HEAPF32[$1330>>2];
 $1332 = 0.5 * $1331;
 $1333 = $1332 + 0.5;
 $1334 = ((($39)) + 4|0);
 HEAPF32[$1334>>2] = $1333;
 $1335 = ((($39)) + 4|0);
 $1336 = +HEAPF32[$1335>>2];
 $1337 = +HEAPF32[$39>>2];
 $1338 = $1336 * $1337;
 $1339 = ((($39)) + 4|0);
 $1340 = +HEAPF32[$1339>>2];
 $1341 = 1.0 - $1340;
 $1342 = $1341 * 0.5;
 $1343 = $1338 + $1342;
 HEAPF32[$39>>2] = $1343;
 $1344 = ((($39)) + 4|0);
 $1345 = +HEAPF32[$1344>>2];
 $1346 = 4.9999998736893758E-5 * $1345;
 $80 = $1346;
 $81 = 0.05000000074505806;
 $1347 = +HEAPF32[$39>>2];
 $1348 = 0.94999998807907104 < $1347;
 $1349 = +HEAPF32[$39>>2];
 $1350 = $1348 ? 0.94999998807907104 : $1349;
 $1351 = 0.05000000074505806 > $1350;
 if ($1351) {
  $1356 = 0.05000000074505806;
 } else {
  $1352 = +HEAPF32[$39>>2];
  $1353 = 0.94999998807907104 < $1352;
  $1354 = +HEAPF32[$39>>2];
  $1355 = $1353 ? 0.94999998807907104 : $1354;
  $1356 = $1355;
 }
 $89 = $1356;
 $1357 = $10;
 $1358 = ((($1357)) + 6844|0);
 $1359 = +HEAPF32[$1358>>2];
 $1360 = 0.94999998807907104 < $1359;
 if ($1360) {
  $1365 = 0.94999998807907104;
 } else {
  $1361 = $10;
  $1362 = ((($1361)) + 6844|0);
  $1363 = +HEAPF32[$1362>>2];
  $1365 = $1363;
 }
 $1364 = 0.05000000074505806 > $1365;
 if ($1364) {
  $1373 = 0.05000000074505806;
 } else {
  $1366 = $10;
  $1367 = ((($1366)) + 6844|0);
  $1368 = +HEAPF32[$1367>>2];
  $1369 = 0.94999998807907104 < $1368;
  if ($1369) {
   $1373 = 0.94999998807907104;
  } else {
   $1370 = $10;
   $1371 = ((($1370)) + 6844|0);
   $1372 = +HEAPF32[$1371>>2];
   $1373 = $1372;
  }
 }
 $90 = $1373;
 $1374 = $89;
 $1375 = $90;
 $1376 = $1374 - $1375;
 $1377 = $1376;
 $1378 = (+Math_abs((+$1377)));
 $1379 = $1378;
 $1380 = 0.05000000074505806 * $1379;
 $1381 = $89;
 $1382 = $90;
 $1383 = 1.0 - $1382;
 $1384 = $1381 * $1383;
 $1385 = $90;
 $1386 = $89;
 $1387 = 1.0 - $1386;
 $1388 = $1385 * $1387;
 $1389 = $1384 + $1388;
 $1390 = $1380 / $1389;
 $1391 = 0.0099999997764825821 + $1390;
 $81 = $1391;
 $1392 = $10;
 $1393 = ((($1392)) + 6844|0);
 $1394 = +HEAPF32[$1393>>2];
 $1395 = 1.0 - $1394;
 $1396 = $80;
 $1397 = 1.0 - $1396;
 $1398 = $1395 * $1397;
 $1399 = $10;
 $1400 = ((($1399)) + 6844|0);
 $1401 = +HEAPF32[$1400>>2];
 $1402 = $80;
 $1403 = $1401 * $1402;
 $1404 = $1398 + $1403;
 $82 = $1404;
 $1405 = $10;
 $1406 = ((($1405)) + 6844|0);
 $1407 = +HEAPF32[$1406>>2];
 $1408 = $80;
 $1409 = 1.0 - $1408;
 $1410 = $1407 * $1409;
 $1411 = $10;
 $1412 = ((($1411)) + 6844|0);
 $1413 = +HEAPF32[$1412>>2];
 $1414 = 1.0 - $1413;
 $1415 = $80;
 $1416 = $1414 * $1415;
 $1417 = $1410 + $1416;
 $83 = $1417;
 $1418 = +HEAPF32[$39>>2];
 $1419 = 1.0 - $1418;
 $1420 = $1419;
 $1421 = $81;
 $1422 = $1421;
 $1423 = (+Math_pow((+$1420),(+$1422)));
 $1424 = $1423;
 $1425 = $82;
 $1426 = $1425 * $1424;
 $82 = $1426;
 $1427 = +HEAPF32[$39>>2];
 $1428 = $1427;
 $1429 = $81;
 $1430 = $1429;
 $1431 = (+Math_pow((+$1428),(+$1430)));
 $1432 = $1431;
 $1433 = $83;
 $1434 = $1433 * $1432;
 $83 = $1434;
 $1435 = $83;
 $1436 = $82;
 $1437 = $83;
 $1438 = $1436 + $1437;
 $1439 = $1435 / $1438;
 $1440 = $10;
 $1441 = ((($1440)) + 6844|0);
 HEAPF32[$1441>>2] = $1439;
 $1442 = $10;
 $1443 = ((($1442)) + 6844|0);
 $1444 = +HEAPF32[$1443>>2];
 $1445 = $49;
 $1446 = ((($1445)) + 20|0);
 HEAPF32[$1446>>2] = $1444;
 $86 = 9.9999996826552254E-21;
 $1447 = +HEAPF32[$39>>2];
 $1448 = 1.0 - $1447;
 $1449 = $1448;
 $1450 = $81;
 $1451 = $1450;
 $1452 = (+Math_pow((+$1449),(+$1451)));
 $1453 = $1452;
 $87 = $1453;
 $1454 = +HEAPF32[$39>>2];
 $1455 = $1454;
 $1456 = $81;
 $1457 = $1456;
 $1458 = (+Math_pow((+$1455),(+$1457)));
 $1459 = $1458;
 $88 = $1459;
 $1460 = $10;
 $1461 = ((($1460)) + 6868|0);
 $1462 = HEAP32[$1461>>2]|0;
 $1463 = ($1462|0)==(1);
 if ($1463) {
  $1464 = $10;
  $1465 = ((($1464)) + 6888|0);
  HEAPF32[$1465>>2] = 0.5;
  $1466 = $10;
  $1467 = ((($1466)) + 7688|0);
  HEAPF32[$1467>>2] = 0.5;
 }
 $1468 = $10;
 $1469 = ((($1468)) + 6888|0);
 $1470 = +HEAPF32[$1469>>2];
 $1471 = $10;
 $1472 = ((($1471)) + 6888|0);
 $1473 = ((($1472)) + 4|0);
 $1474 = +HEAPF32[$1473>>2];
 $1475 = $1470 + $1474;
 $84 = $1475;
 $1476 = $10;
 $1477 = ((($1476)) + 7688|0);
 $1478 = +HEAPF32[$1477>>2];
 $1479 = $10;
 $1480 = ((($1479)) + 7688|0);
 $1481 = ((($1480)) + 4|0);
 $1482 = +HEAPF32[$1481>>2];
 $1483 = $1478 + $1482;
 $85 = $1483;
 $1484 = $84;
 $1485 = $80;
 $1486 = 1.0 - $1485;
 $1487 = $1484 * $1486;
 $1488 = $87;
 $1489 = $1487 * $1488;
 $1490 = $10;
 $1491 = ((($1490)) + 6888|0);
 HEAPF32[$1491>>2] = $1489;
 $1492 = $85;
 $1493 = $80;
 $1494 = 1.0 - $1493;
 $1495 = $1492 * $1494;
 $1496 = $88;
 $1497 = $1495 * $1496;
 $1498 = $10;
 $1499 = ((($1498)) + 7688|0);
 HEAPF32[$1499>>2] = $1497;
 $20 = 1;
 while(1) {
  $1500 = $20;
  $1501 = ($1500|0)<(199);
  if (!($1501)) {
   break;
  }
  $1502 = $10;
  $1503 = ((($1502)) + 6888|0);
  $1504 = $20;
  $1505 = (($1504) + 1)|0;
  $1506 = (($1503) + ($1505<<2)|0);
  $1507 = +HEAPF32[$1506>>2];
  $1508 = $87;
  $1509 = $1507 * $1508;
  $1510 = $10;
  $1511 = ((($1510)) + 6888|0);
  $1512 = $20;
  $1513 = (($1511) + ($1512<<2)|0);
  HEAPF32[$1513>>2] = $1509;
  $1514 = $10;
  $1515 = ((($1514)) + 7688|0);
  $1516 = $20;
  $1517 = (($1516) + 1)|0;
  $1518 = (($1515) + ($1517<<2)|0);
  $1519 = +HEAPF32[$1518>>2];
  $1520 = $88;
  $1521 = $1519 * $1520;
  $1522 = $10;
  $1523 = ((($1522)) + 7688|0);
  $1524 = $20;
  $1525 = (($1523) + ($1524<<2)|0);
  HEAPF32[$1525>>2] = $1521;
  $1526 = $20;
  $1527 = (($1526) + 1)|0;
  $20 = $1527;
 }
 $1528 = $85;
 $1529 = $80;
 $1530 = $1528 * $1529;
 $1531 = $87;
 $1532 = $1530 * $1531;
 $1533 = $10;
 $1534 = ((($1533)) + 6888|0);
 $1535 = ((($1534)) + 796|0);
 HEAPF32[$1535>>2] = $1532;
 $1536 = $84;
 $1537 = $80;
 $1538 = $1536 * $1537;
 $1539 = $88;
 $1540 = $1538 * $1539;
 $1541 = $10;
 $1542 = ((($1541)) + 7688|0);
 $1543 = ((($1542)) + 796|0);
 HEAPF32[$1543>>2] = $1540;
 $20 = 0;
 while(1) {
  $1544 = $20;
  $1545 = ($1544|0)<(200);
  if (!($1545)) {
   break;
  }
  $1546 = $10;
  $1547 = ((($1546)) + 6888|0);
  $1548 = $20;
  $1549 = (($1547) + ($1548<<2)|0);
  $1550 = +HEAPF32[$1549>>2];
  $1551 = $10;
  $1552 = ((($1551)) + 7688|0);
  $1553 = $20;
  $1554 = (($1552) + ($1553<<2)|0);
  $1555 = +HEAPF32[$1554>>2];
  $1556 = $1550 + $1555;
  $1557 = $86;
  $1558 = $1557 + $1556;
  $86 = $1558;
  $1559 = $20;
  $1560 = (($1559) + 1)|0;
  $20 = $1560;
 }
 $1561 = $86;
 $1562 = 1.0 / $1561;
 $86 = $1562;
 $20 = 0;
 while(1) {
  $1563 = $20;
  $1564 = ($1563|0)<(200);
  if (!($1564)) {
   break;
  }
  $1565 = $86;
  $1566 = $10;
  $1567 = ((($1566)) + 6888|0);
  $1568 = $20;
  $1569 = (($1567) + ($1568<<2)|0);
  $1570 = +HEAPF32[$1569>>2];
  $1571 = $1570 * $1565;
  HEAPF32[$1569>>2] = $1571;
  $1572 = $86;
  $1573 = $10;
  $1574 = ((($1573)) + 7688|0);
  $1575 = $20;
  $1576 = (($1574) + ($1575<<2)|0);
  $1577 = +HEAPF32[$1576>>2];
  $1578 = $1577 * $1572;
  HEAPF32[$1576>>2] = $1578;
  $1579 = $20;
  $1580 = (($1579) + 1)|0;
  $20 = $1580;
 }
 $1581 = $10;
 $1582 = ((($1581)) + 7688|0);
 $1583 = +HEAPF32[$1582>>2];
 $86 = $1583;
 $20 = 1;
 while(1) {
  $1584 = $20;
  $1585 = ($1584|0)<(200);
  if (!($1585)) {
   break;
  }
  $1586 = $10;
  $1587 = ((($1586)) + 6888|0);
  $1588 = $20;
  $1589 = (($1587) + ($1588<<2)|0);
  $1590 = +HEAPF32[$1589>>2];
  $1591 = $86;
  $1592 = $1591 + $1590;
  $86 = $1592;
  $1593 = $20;
  $1594 = (($1593) + 1)|0;
  $20 = $1594;
 }
 $1595 = ((($39)) + 4|0);
 $1596 = +HEAPF32[$1595>>2];
 $1597 = $1596;
 $1598 = $1597 > 0.75;
 $1599 = $10;
 do {
  if ($1598) {
   $1600 = ((($1599)) + 6844|0);
   $1601 = +HEAPF32[$1600>>2];
   $1602 = $1601;
   $1603 = $1602 > 0.90000000000000002;
   if ($1603) {
    $1604 = $10;
    $1605 = ((($1604)) + 8500|0);
    $1606 = HEAP32[$1605>>2]|0;
    $1607 = (($1606) + 1)|0;
    HEAP32[$1605>>2] = $1607;
    $1608 = (+($1607|0));
    $1609 = 1.0 / $1608;
    $91 = $1609;
    $1610 = $10;
    $1611 = ((($1610)) + 8500|0);
    $1612 = HEAP32[$1611>>2]|0;
    $1613 = ($1612|0)<(500);
    if ($1613) {
     $1614 = $10;
     $1615 = ((($1614)) + 8500|0);
     $1616 = HEAP32[$1615>>2]|0;
     $1619 = $1616;
    } else {
     $1619 = 500;
    }
    $1617 = $10;
    $1618 = ((($1617)) + 8500|0);
    HEAP32[$1618>>2] = $1619;
    $1620 = $91;
    $1621 = +HEAPF32[$39>>2];
    $1622 = $10;
    $1623 = ((($1622)) + 8492|0);
    $1624 = +HEAPF32[$1623>>2];
    $1625 = $1621 - $1624;
    $1626 = -0.20000000298023224 > $1625;
    if ($1626) {
     $1633 = -0.20000000298023224;
    } else {
     $1627 = +HEAPF32[$39>>2];
     $1628 = $10;
     $1629 = ((($1628)) + 8492|0);
     $1630 = +HEAPF32[$1629>>2];
     $1631 = $1627 - $1630;
     $1633 = $1631;
    }
    $1632 = $1620 * $1633;
    $1634 = $10;
    $1635 = ((($1634)) + 8492|0);
    $1636 = +HEAPF32[$1635>>2];
    $1637 = $1636 + $1632;
    HEAPF32[$1635>>2] = $1637;
   }
   $1638 = $10;
   $1639 = ((($1638)) + 6844|0);
   $1640 = +HEAPF32[$1639>>2];
   $1641 = $1640;
   $1642 = $1641 < 0.10000000000000001;
   if (!($1642)) {
    break;
   }
   $1643 = $10;
   $1644 = ((($1643)) + 8496|0);
   $1645 = HEAP32[$1644>>2]|0;
   $1646 = (($1645) + 1)|0;
   HEAP32[$1644>>2] = $1646;
   $1647 = (+($1646|0));
   $1648 = 1.0 / $1647;
   $92 = $1648;
   $1649 = $10;
   $1650 = ((($1649)) + 8496|0);
   $1651 = HEAP32[$1650>>2]|0;
   $1652 = ($1651|0)<(500);
   if ($1652) {
    $1653 = $10;
    $1654 = ((($1653)) + 8496|0);
    $1655 = HEAP32[$1654>>2]|0;
    $1658 = $1655;
   } else {
    $1658 = 500;
   }
   $1656 = $10;
   $1657 = ((($1656)) + 8496|0);
   HEAP32[$1657>>2] = $1658;
   $1659 = $92;
   $1660 = +HEAPF32[$39>>2];
   $1661 = $10;
   $1662 = ((($1661)) + 8488|0);
   $1663 = +HEAPF32[$1662>>2];
   $1664 = $1660 - $1663;
   $1665 = 0.20000000298023224 < $1664;
   if ($1665) {
    $1672 = 0.20000000298023224;
   } else {
    $1666 = +HEAPF32[$39>>2];
    $1667 = $10;
    $1668 = ((($1667)) + 8488|0);
    $1669 = +HEAPF32[$1668>>2];
    $1670 = $1666 - $1669;
    $1672 = $1670;
   }
   $1671 = $1659 * $1672;
   $1673 = $10;
   $1674 = ((($1673)) + 8488|0);
   $1675 = +HEAPF32[$1674>>2];
   $1676 = $1675 + $1671;
   HEAPF32[$1674>>2] = $1676;
  } else {
   $1677 = ((($1599)) + 8500|0);
   $1678 = HEAP32[$1677>>2]|0;
   $1679 = ($1678|0)==(0);
   if ($1679) {
    $1680 = $10;
    $1681 = ((($1680)) + 8492|0);
    HEAPF32[$1681>>2] = 0.89999997615814208;
   }
   $1682 = $10;
   $1683 = ((($1682)) + 8496|0);
   $1684 = HEAP32[$1683>>2]|0;
   $1685 = ($1684|0)==(0);
   if (!($1685)) {
    break;
   }
   $1686 = $10;
   $1687 = ((($1686)) + 8488|0);
   HEAPF32[$1687>>2] = 0.10000000149011612;
  }
 } while(0);
 $1688 = $10;
 $1689 = ((($1688)) + 6860|0);
 $1690 = HEAP32[$1689>>2]|0;
 $1691 = $10;
 $1692 = ((($1691)) + 6844|0);
 $1693 = +HEAPF32[$1692>>2];
 $1694 = $1693 > 0.5;
 $1695 = $1694&1;
 $1696 = ($1690|0)!=($1695|0);
 if ($1696) {
  $1697 = $10;
  $1698 = ((($1697)) + 6864|0);
  HEAP32[$1698>>2] = 0;
 }
 $1699 = $10;
 $1700 = ((($1699)) + 6844|0);
 $1701 = +HEAPF32[$1700>>2];
 $1702 = $1701 > 0.5;
 $1703 = $1702&1;
 $1704 = $10;
 $1705 = ((($1704)) + 6860|0);
 HEAP32[$1705>>2] = $1703;
 $1706 = $45;
 $1707 = $49;
 $1708 = ((($1707)) + 24|0);
 HEAP32[$1708>>2] = $1706;
 $1709 = $34;
 $1710 = $49;
 $1711 = ((($1710)) + 12|0);
 HEAPF32[$1711>>2] = $1709;
 $1712 = $49;
 HEAP32[$1712>>2] = 1;
 STACKTOP = sp;return;
}
function _fast_atan2f($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = $9;
 $11 = (+Math_abs((+$10)));
 $12 = $11;
 $13 = $3;
 $14 = $13;
 $15 = (+Math_abs((+$14)));
 $16 = $15;
 $17 = $12 + $16;
 $18 = $17 < 9.9999997171806853E-10;
 if ($18) {
  $19 = $4;
  $20 = $19 * 999999995904.0;
  $4 = $20;
  $21 = $3;
  $22 = $21 * 999999995904.0;
  $3 = $22;
 }
 $23 = $4;
 $24 = $4;
 $25 = $23 * $24;
 $5 = $25;
 $26 = $3;
 $27 = $3;
 $28 = $26 * $27;
 $6 = $28;
 $29 = $5;
 $30 = $6;
 $31 = $29 < $30;
 if ($31) {
  $32 = $6;
  $33 = $5;
  $34 = 0.67848402261734009 * $33;
  $35 = $32 + $34;
  $36 = $6;
  $37 = $5;
  $38 = 0.085955418646335601 * $37;
  $39 = $36 + $38;
  $40 = $35 * $39;
  $7 = $40;
  $41 = $7;
  $42 = $41 != 0.0;
  if ($42) {
   $43 = $4;
   $44 = - $43;
   $45 = $3;
   $46 = $44 * $45;
   $47 = $6;
   $48 = $5;
   $49 = 0.43157973885536194 * $48;
   $50 = $47 + $49;
   $51 = $46 * $50;
   $52 = $7;
   $53 = $51 / $52;
   $54 = $3;
   $55 = $54 < 0.0;
   $56 = $55 ? -1.5707963705062866 : 1.5707963705062866;
   $57 = $53 + $56;
   $2 = $57;
   $101 = $2;
   STACKTOP = sp;return (+$101);
  } else {
   $58 = $3;
   $59 = $58 < 0.0;
   $60 = $59 ? -1.5707963705062866 : 1.5707963705062866;
   $2 = $60;
   $101 = $2;
   STACKTOP = sp;return (+$101);
  }
 } else {
  $61 = $5;
  $62 = $6;
  $63 = 0.67848402261734009 * $62;
  $64 = $61 + $63;
  $65 = $5;
  $66 = $6;
  $67 = 0.085955418646335601 * $66;
  $68 = $65 + $67;
  $69 = $64 * $68;
  $8 = $69;
  $70 = $8;
  $71 = $70 != 0.0;
  if ($71) {
   $72 = $4;
   $73 = $3;
   $74 = $72 * $73;
   $75 = $5;
   $76 = $6;
   $77 = 0.43157973885536194 * $76;
   $78 = $75 + $77;
   $79 = $74 * $78;
   $80 = $8;
   $81 = $79 / $80;
   $82 = $3;
   $83 = $82 < 0.0;
   $84 = $83 ? -1.5707963705062866 : 1.5707963705062866;
   $85 = $81 + $84;
   $86 = $4;
   $87 = $3;
   $88 = $86 * $87;
   $89 = $88 < 0.0;
   $90 = $89 ? -1.5707963705062866 : 1.5707963705062866;
   $91 = $85 - $90;
   $2 = $91;
   $101 = $2;
   STACKTOP = sp;return (+$101);
  } else {
   $92 = $3;
   $93 = $92 < 0.0;
   $94 = $93 ? -1.5707963705062866 : 1.5707963705062866;
   $95 = $4;
   $96 = $3;
   $97 = $95 * $96;
   $98 = $97 < 0.0;
   $99 = $98 ? -1.5707963705062866 : 1.5707963705062866;
   $100 = $94 - $99;
   $2 = $100;
   $101 = $2;
   STACKTOP = sp;return (+$101);
  }
 }
 return +(0.0);
}
function _mlp_process($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $7 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $6 = 0;
 while(1) {
  $16 = $6;
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($16|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $8;
  $24 = ((($23)) + 4|0);
  $8 = $24;
  $25 = +HEAPF32[$23>>2];
  $10 = $25;
  $9 = 0;
  while(1) {
   $26 = $9;
   $27 = $3;
   $28 = ((($27)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($26|0)<($30|0);
   $32 = $10;
   if (!($31)) {
    break;
   }
   $33 = $4;
   $34 = $9;
   $35 = (($33) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $8;
   $38 = ((($37)) + 4|0);
   $8 = $38;
   $39 = +HEAPF32[$37>>2];
   $40 = $36 * $39;
   $41 = $32 + $40;
   $10 = $41;
   $42 = $9;
   $43 = (($42) + 1)|0;
   $9 = $43;
  }
  $44 = (+_tansig_approx($32));
  $45 = $6;
  $46 = (($7) + ($45<<2)|0);
  HEAPF32[$46>>2] = $44;
  $47 = $6;
  $48 = (($47) + 1)|0;
  $6 = $48;
 }
 $6 = 0;
 while(1) {
  $49 = $6;
  $50 = $3;
  $51 = ((($50)) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($49|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $8;
  $57 = ((($56)) + 4|0);
  $8 = $57;
  $58 = +HEAPF32[$56>>2];
  $12 = $58;
  $11 = 0;
  while(1) {
   $59 = $11;
   $60 = $3;
   $61 = ((($60)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($59|0)<($64|0);
   $66 = $12;
   if (!($65)) {
    break;
   }
   $67 = $11;
   $68 = (($7) + ($67<<2)|0);
   $69 = +HEAPF32[$68>>2];
   $70 = $8;
   $71 = ((($70)) + 4|0);
   $8 = $71;
   $72 = +HEAPF32[$70>>2];
   $73 = $69 * $72;
   $74 = $66 + $73;
   $12 = $74;
   $75 = $11;
   $76 = (($75) + 1)|0;
   $11 = $76;
  }
  $77 = (+_tansig_approx($66));
  $78 = $5;
  $79 = $6;
  $80 = (($78) + ($79<<2)|0);
  HEAPF32[$80>>2] = $77;
  $81 = $6;
  $82 = (($81) + 1)|0;
  $6 = $82;
 }
 STACKTOP = sp;return;
}
function _tansig_approx($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = 1.0;
 $7 = $2;
 $8 = $7 < 8.0;
 if (!($8)) {
  $1 = 1.0;
  $49 = $1;
  STACKTOP = sp;return (+$49);
 }
 $9 = $2;
 $10 = $9 > -8.0;
 if (!($10)) {
  $1 = -1.0;
  $49 = $1;
  STACKTOP = sp;return (+$49);
 }
 $11 = $2;
 $12 = $2;
 $13 = $11 != $12;
 if ($13) {
  $1 = 0.0;
  $49 = $1;
  STACKTOP = sp;return (+$49);
 }
 $14 = $2;
 $15 = $14 < 0.0;
 if ($15) {
  $16 = $2;
  $17 = - $16;
  $2 = $17;
  $6 = -1.0;
 }
 $18 = $2;
 $19 = 25.0 * $18;
 $20 = 0.5 + $19;
 $21 = $20;
 $22 = (+Math_floor((+$21)));
 $23 = (~~(($22)));
 $3 = $23;
 $24 = $3;
 $25 = (+($24|0));
 $26 = 0.039999999105930328 * $25;
 $27 = $2;
 $28 = $27 - $26;
 $2 = $28;
 $29 = $3;
 $30 = (1868 + ($29<<2)|0);
 $31 = +HEAPF32[$30>>2];
 $4 = $31;
 $32 = $4;
 $33 = $4;
 $34 = $32 * $33;
 $35 = 1.0 - $34;
 $5 = $35;
 $36 = $4;
 $37 = $2;
 $38 = $5;
 $39 = $37 * $38;
 $40 = $4;
 $41 = $2;
 $42 = $40 * $41;
 $43 = 1.0 - $42;
 $44 = $39 * $43;
 $45 = $36 + $44;
 $4 = $45;
 $46 = $6;
 $47 = $4;
 $48 = $46 * $47;
 $1 = $48;
 $49 = $1;
 STACKTOP = sp;return (+$49);
}
function _celt_encoder_get_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_opus_custom_mode_create(48000,960,0)|0);
 $2 = $3;
 $4 = $2;
 $5 = $1;
 $6 = (_opus_custom_encoder_get_size($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _opus_custom_encoder_get_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($5, $8)|0;
 $10 = (($9) - 1)|0;
 $11 = $10<<2;
 $12 = (204 + ($11))|0;
 $13 = $3;
 $14 = $13<<10;
 $15 = $14<<2;
 $16 = (($12) + ($15))|0;
 $17 = $3;
 $18 = ($17*3)|0;
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = Math_imul($18, $21)|0;
 $23 = $22<<2;
 $24 = (($16) + ($23))|0;
 $4 = $24;
 $25 = $4;
 STACKTOP = sp;return ($25|0);
}
function _celt_encoder_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = (_opus_custom_mode_create(48000,960,0)|0);
 $12 = $7;
 $13 = $8;
 $14 = (_opus_custom_encoder_init_arch($10,$11,$12,$13)|0);
 $9 = $14;
 $15 = $9;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $9;
  $4 = $17;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 } else {
  $18 = $6;
  $19 = (_resampling_factor($18)|0);
  $20 = $5;
  $21 = ((($20)) + 28|0);
  HEAP32[$21>>2] = $19;
  $4 = 0;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _opus_custom_encoder_init_arch($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $7;
 $10 = ($9|0)<(0);
 $11 = $7;
 $12 = ($11|0)>(2);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $4 = -1;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 $13 = $5;
 $14 = ($13|0)==(0|0);
 $15 = $6;
 $16 = ($15|0)==(0|0);
 $or$cond3 = $14 | $16;
 if ($or$cond3) {
  $4 = -7;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 } else {
  $17 = $5;
  $18 = $6;
  $19 = $7;
  $20 = (_opus_custom_encoder_get_size($18,$19)|0);
  $21 = $20;
  _memset(($17|0),0,($21|0))|0;
  $22 = $6;
  $23 = $5;
  HEAP32[$23>>2] = $22;
  $24 = $7;
  $25 = $5;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $5;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = $24;
  $29 = $5;
  $30 = ((($29)) + 28|0);
  HEAP32[$30>>2] = 1;
  $31 = $5;
  $32 = ((($31)) + 32|0);
  HEAP32[$32>>2] = 0;
  $33 = $5;
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $5;
  $38 = ((($37)) + 36|0);
  HEAP32[$38>>2] = $36;
  $39 = $5;
  $40 = ((($39)) + 48|0);
  HEAP32[$40>>2] = 1;
  $41 = $8;
  $42 = $5;
  $43 = ((($42)) + 72|0);
  HEAP32[$43>>2] = $41;
  $44 = $5;
  $45 = ((($44)) + 52|0);
  HEAP32[$45>>2] = 1;
  $46 = $5;
  $47 = ((($46)) + 16|0);
  HEAP32[$47>>2] = 1;
  $48 = $5;
  $49 = ((($48)) + 40|0);
  HEAP32[$49>>2] = -1;
  $50 = $5;
  $51 = ((($50)) + 44|0);
  HEAP32[$51>>2] = 0;
  $52 = $5;
  $53 = ((($52)) + 12|0);
  HEAP32[$53>>2] = 0;
  $54 = $5;
  $55 = ((($54)) + 24|0);
  HEAP32[$55>>2] = 5;
  $56 = $5;
  $57 = ((($56)) + 60|0);
  HEAP32[$57>>2] = 24;
  $58 = $5;
  (_opus_custom_encoder_ctl($58,4028,$vararg_buffer)|0);
  $4 = 0;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function _opus_custom_encoder_ctl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current13 = 0;
 var $arglist_current16 = 0, $arglist_current19 = 0, $arglist_current22 = 0, $arglist_current25 = 0, $arglist_current28 = 0, $arglist_current31 = 0, $arglist_current34 = 0, $arglist_current37 = 0, $arglist_current40 = 0, $arglist_current43 = 0, $arglist_current46 = 0, $arglist_current49 = 0, $arglist_current52 = 0, $arglist_current55 = 0, $arglist_current58 = 0, $arglist_current61 = 0, $arglist_next = 0, $arglist_next14 = 0, $arglist_next17 = 0, $arglist_next20 = 0;
 var $arglist_next23 = 0, $arglist_next26 = 0, $arglist_next29 = 0, $arglist_next32 = 0, $arglist_next35 = 0, $arglist_next38 = 0, $arglist_next41 = 0, $arglist_next44 = 0, $arglist_next47 = 0, $arglist_next50 = 0, $arglist_next53 = 0, $arglist_next56 = 0, $arglist_next59 = 0, $arglist_next62 = 0, $expanded = 0, $expanded100 = 0, $expanded102 = 0, $expanded103 = 0, $expanded104 = 0, $expanded106 = 0;
 var $expanded107 = 0, $expanded109 = 0, $expanded11 = 0, $expanded110 = 0, $expanded111 = 0, $expanded113 = 0, $expanded114 = 0, $expanded116 = 0, $expanded117 = 0, $expanded118 = 0, $expanded12 = 0, $expanded120 = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded13 = 0, $expanded15 = 0, $expanded16 = 0, $expanded18 = 0;
 var $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0, $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0;
 var $expanded44 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded5 = 0, $expanded50 = 0, $expanded51 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded57 = 0, $expanded58 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded64 = 0, $expanded65 = 0, $expanded67 = 0, $expanded68 = 0;
 var $expanded69 = 0, $expanded71 = 0, $expanded72 = 0, $expanded74 = 0, $expanded75 = 0, $expanded76 = 0, $expanded78 = 0, $expanded79 = 0, $expanded8 = 0, $expanded81 = 0, $expanded82 = 0, $expanded83 = 0, $expanded85 = 0, $expanded86 = 0, $expanded88 = 0, $expanded89 = 0, $expanded9 = 0, $expanded90 = 0, $expanded92 = 0, $expanded93 = 0;
 var $expanded95 = 0, $expanded96 = 0, $expanded97 = 0, $expanded99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp + 160|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = $varargs;
 $46 = $4;
 do {
  switch ($46|0) {
  case 4010:  {
   $arglist_current = HEAP32[$5>>2]|0;
   $47 = $arglist_current;
   $48 = ((0) + 4|0);
   $expanded2 = $48;
   $expanded = (($expanded2) - 1)|0;
   $49 = (($47) + ($expanded))|0;
   $50 = ((0) + 4|0);
   $expanded6 = $50;
   $expanded5 = (($expanded6) - 1)|0;
   $expanded4 = $expanded5 ^ -1;
   $51 = $49 & $expanded4;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $arglist_next = ((($52)) + 4|0);
   HEAP32[$5>>2] = $arglist_next;
   $7 = $53;
   $54 = $7;
   $6 = $54;
   $55 = $6;
   $56 = ($55|0)<(0);
   $57 = $6;
   $58 = ($57|0)>(10);
   $or$cond = $56 | $58;
   if ($or$cond) {
    label = 41;
   } else {
    $59 = $6;
    $60 = $3;
    $61 = ((($60)) + 24|0);
    HEAP32[$61>>2] = $59;
    label = 40;
   }
   break;
  }
  case 10010:  {
   $arglist_current13 = HEAP32[$5>>2]|0;
   $62 = $arglist_current13;
   $63 = ((0) + 4|0);
   $expanded9 = $63;
   $expanded8 = (($expanded9) - 1)|0;
   $64 = (($62) + ($expanded8))|0;
   $65 = ((0) + 4|0);
   $expanded13 = $65;
   $expanded12 = (($expanded13) - 1)|0;
   $expanded11 = $expanded12 ^ -1;
   $66 = $64 & $expanded11;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $arglist_next14 = ((($67)) + 4|0);
   HEAP32[$5>>2] = $arglist_next14;
   $9 = $68;
   $69 = $9;
   $8 = $69;
   $70 = $8;
   $71 = ($70|0)<(0);
   if ($71) {
    label = 41;
   } else {
    $72 = $8;
    $73 = $3;
    $74 = HEAP32[$73>>2]|0;
    $75 = ((($74)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($72|0)>=($76|0);
    if ($77) {
     label = 41;
    } else {
     $78 = $8;
     $79 = $3;
     $80 = ((($79)) + 32|0);
     HEAP32[$80>>2] = $78;
     label = 40;
    }
   }
   break;
  }
  case 10012:  {
   $arglist_current16 = HEAP32[$5>>2]|0;
   $81 = $arglist_current16;
   $82 = ((0) + 4|0);
   $expanded16 = $82;
   $expanded15 = (($expanded16) - 1)|0;
   $83 = (($81) + ($expanded15))|0;
   $84 = ((0) + 4|0);
   $expanded20 = $84;
   $expanded19 = (($expanded20) - 1)|0;
   $expanded18 = $expanded19 ^ -1;
   $85 = $83 & $expanded18;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $arglist_next17 = ((($86)) + 4|0);
   HEAP32[$5>>2] = $arglist_next17;
   $11 = $87;
   $88 = $11;
   $10 = $88;
   $89 = $10;
   $90 = ($89|0)<(1);
   if ($90) {
    label = 41;
   } else {
    $91 = $10;
    $92 = $3;
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($93)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($91|0)>($95|0);
    if ($96) {
     label = 41;
    } else {
     $97 = $10;
     $98 = $3;
     $99 = ((($98)) + 36|0);
     HEAP32[$99>>2] = $97;
     label = 40;
    }
   }
   break;
  }
  case 10002:  {
   $arglist_current19 = HEAP32[$5>>2]|0;
   $100 = $arglist_current19;
   $101 = ((0) + 4|0);
   $expanded23 = $101;
   $expanded22 = (($expanded23) - 1)|0;
   $102 = (($100) + ($expanded22))|0;
   $103 = ((0) + 4|0);
   $expanded27 = $103;
   $expanded26 = (($expanded27) - 1)|0;
   $expanded25 = $expanded26 ^ -1;
   $104 = $102 & $expanded25;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $arglist_next20 = ((($105)) + 4|0);
   HEAP32[$5>>2] = $arglist_next20;
   $13 = $106;
   $107 = $13;
   $12 = $107;
   $108 = $12;
   $109 = ($108|0)<(0);
   $110 = $12;
   $111 = ($110|0)>(2);
   $or$cond3 = $109 | $111;
   if ($or$cond3) {
    label = 41;
   } else {
    $112 = $12;
    $113 = ($112|0)<=(1);
    $114 = $113&1;
    $115 = $3;
    $116 = ((($115)) + 20|0);
    HEAP32[$116>>2] = $114;
    $117 = $12;
    $118 = ($117|0)==(0);
    $119 = $118&1;
    $120 = $3;
    $121 = ((($120)) + 12|0);
    HEAP32[$121>>2] = $119;
    label = 40;
   }
   break;
  }
  case 4014:  {
   $arglist_current22 = HEAP32[$5>>2]|0;
   $122 = $arglist_current22;
   $123 = ((0) + 4|0);
   $expanded30 = $123;
   $expanded29 = (($expanded30) - 1)|0;
   $124 = (($122) + ($expanded29))|0;
   $125 = ((0) + 4|0);
   $expanded34 = $125;
   $expanded33 = (($expanded34) - 1)|0;
   $expanded32 = $expanded33 ^ -1;
   $126 = $124 & $expanded32;
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $arglist_next23 = ((($127)) + 4|0);
   HEAP32[$5>>2] = $arglist_next23;
   $15 = $128;
   $129 = $15;
   $14 = $129;
   $130 = $14;
   $131 = ($130|0)<(0);
   $132 = $14;
   $133 = ($132|0)>(100);
   $or$cond5 = $131 | $133;
   if ($or$cond5) {
    label = 41;
   } else {
    $134 = $14;
    $135 = $3;
    $136 = ((($135)) + 56|0);
    HEAP32[$136>>2] = $134;
    label = 40;
   }
   break;
  }
  case 4020:  {
   $arglist_current25 = HEAP32[$5>>2]|0;
   $137 = $arglist_current25;
   $138 = ((0) + 4|0);
   $expanded37 = $138;
   $expanded36 = (($expanded37) - 1)|0;
   $139 = (($137) + ($expanded36))|0;
   $140 = ((0) + 4|0);
   $expanded41 = $140;
   $expanded40 = (($expanded41) - 1)|0;
   $expanded39 = $expanded40 ^ -1;
   $141 = $139 & $expanded39;
   $142 = $141;
   $143 = HEAP32[$142>>2]|0;
   $arglist_next26 = ((($142)) + 4|0);
   HEAP32[$5>>2] = $arglist_next26;
   $17 = $143;
   $144 = $17;
   $16 = $144;
   $145 = $16;
   $146 = $3;
   $147 = ((($146)) + 52|0);
   HEAP32[$147>>2] = $145;
   label = 40;
   break;
  }
  case 4006:  {
   $arglist_current28 = HEAP32[$5>>2]|0;
   $148 = $arglist_current28;
   $149 = ((0) + 4|0);
   $expanded44 = $149;
   $expanded43 = (($expanded44) - 1)|0;
   $150 = (($148) + ($expanded43))|0;
   $151 = ((0) + 4|0);
   $expanded48 = $151;
   $expanded47 = (($expanded48) - 1)|0;
   $expanded46 = $expanded47 ^ -1;
   $152 = $150 & $expanded46;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $arglist_next29 = ((($153)) + 4|0);
   HEAP32[$5>>2] = $arglist_next29;
   $19 = $154;
   $155 = $19;
   $18 = $155;
   $156 = $18;
   $157 = $3;
   $158 = ((($157)) + 44|0);
   HEAP32[$158>>2] = $156;
   label = 40;
   break;
  }
  case 4002:  {
   $arglist_current31 = HEAP32[$5>>2]|0;
   $159 = $arglist_current31;
   $160 = ((0) + 4|0);
   $expanded51 = $160;
   $expanded50 = (($expanded51) - 1)|0;
   $161 = (($159) + ($expanded50))|0;
   $162 = ((0) + 4|0);
   $expanded55 = $162;
   $expanded54 = (($expanded55) - 1)|0;
   $expanded53 = $expanded54 ^ -1;
   $163 = $161 & $expanded53;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $arglist_next32 = ((($164)) + 4|0);
   HEAP32[$5>>2] = $arglist_next32;
   $21 = $165;
   $166 = $21;
   $20 = $166;
   $167 = $20;
   $168 = ($167|0)<=(500);
   $169 = $20;
   $170 = ($169|0)!=(-1);
   $or$cond7 = $168 & $170;
   if ($or$cond7) {
    label = 41;
   } else {
    $171 = $20;
    $172 = $3;
    $173 = ((($172)) + 4|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = ($174*260000)|0;
    $176 = ($171|0)<($175|0);
    if ($176) {
     $177 = $20;
     $182 = $177;
    } else {
     $178 = $3;
     $179 = ((($178)) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180*260000)|0;
     $182 = $181;
    }
    $20 = $182;
    $183 = $20;
    $184 = $3;
    $185 = ((($184)) + 40|0);
    HEAP32[$185>>2] = $183;
    label = 40;
   }
   break;
  }
  case 10008:  {
   $arglist_current34 = HEAP32[$5>>2]|0;
   $186 = $arglist_current34;
   $187 = ((0) + 4|0);
   $expanded58 = $187;
   $expanded57 = (($expanded58) - 1)|0;
   $188 = (($186) + ($expanded57))|0;
   $189 = ((0) + 4|0);
   $expanded62 = $189;
   $expanded61 = (($expanded62) - 1)|0;
   $expanded60 = $expanded61 ^ -1;
   $190 = $188 & $expanded60;
   $191 = $190;
   $192 = HEAP32[$191>>2]|0;
   $arglist_next35 = ((($191)) + 4|0);
   HEAP32[$5>>2] = $arglist_next35;
   $23 = $192;
   $193 = $23;
   $22 = $193;
   $194 = $22;
   $195 = ($194|0)<(1);
   $196 = $22;
   $197 = ($196|0)>(2);
   $or$cond9 = $195 | $197;
   if ($or$cond9) {
    label = 41;
   } else {
    $198 = $22;
    $199 = $3;
    $200 = ((($199)) + 8|0);
    HEAP32[$200>>2] = $198;
    label = 40;
   }
   break;
  }
  case 4036:  {
   $arglist_current37 = HEAP32[$5>>2]|0;
   $201 = $arglist_current37;
   $202 = ((0) + 4|0);
   $expanded65 = $202;
   $expanded64 = (($expanded65) - 1)|0;
   $203 = (($201) + ($expanded64))|0;
   $204 = ((0) + 4|0);
   $expanded69 = $204;
   $expanded68 = (($expanded69) - 1)|0;
   $expanded67 = $expanded68 ^ -1;
   $205 = $203 & $expanded67;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $arglist_next38 = ((($206)) + 4|0);
   HEAP32[$5>>2] = $arglist_next38;
   $25 = $207;
   $208 = $25;
   $24 = $208;
   $209 = $24;
   $210 = ($209|0)<(8);
   $211 = $24;
   $212 = ($211|0)>(24);
   $or$cond11 = $210 | $212;
   if ($or$cond11) {
    label = 41;
   } else {
    $213 = $24;
    $214 = $3;
    $215 = ((($214)) + 60|0);
    HEAP32[$215>>2] = $213;
    label = 40;
   }
   break;
  }
  case 4037:  {
   $arglist_current40 = HEAP32[$5>>2]|0;
   $216 = $arglist_current40;
   $217 = ((0) + 4|0);
   $expanded72 = $217;
   $expanded71 = (($expanded72) - 1)|0;
   $218 = (($216) + ($expanded71))|0;
   $219 = ((0) + 4|0);
   $expanded76 = $219;
   $expanded75 = (($expanded76) - 1)|0;
   $expanded74 = $expanded75 ^ -1;
   $220 = $218 & $expanded74;
   $221 = $220;
   $222 = HEAP32[$221>>2]|0;
   $arglist_next41 = ((($221)) + 4|0);
   HEAP32[$5>>2] = $arglist_next41;
   $27 = $222;
   $223 = $27;
   $26 = $223;
   $224 = $3;
   $225 = ((($224)) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $26;
   HEAP32[$227>>2] = $226;
   label = 40;
   break;
  }
  case 4040:  {
   $arglist_current43 = HEAP32[$5>>2]|0;
   $228 = $arglist_current43;
   $229 = ((0) + 4|0);
   $expanded79 = $229;
   $expanded78 = (($expanded79) - 1)|0;
   $230 = (($228) + ($expanded78))|0;
   $231 = ((0) + 4|0);
   $expanded83 = $231;
   $expanded82 = (($expanded83) - 1)|0;
   $expanded81 = $expanded82 ^ -1;
   $232 = $230 & $expanded81;
   $233 = $232;
   $234 = HEAP32[$233>>2]|0;
   $arglist_next44 = ((($233)) + 4|0);
   HEAP32[$5>>2] = $arglist_next44;
   $29 = $234;
   $235 = $29;
   $28 = $235;
   $236 = $28;
   $237 = $3;
   $238 = ((($237)) + 64|0);
   HEAP32[$238>>2] = $236;
   label = 40;
   break;
  }
  case 4028:  {
   $239 = $3;
   $240 = ((($239)) + 200|0);
   $241 = $3;
   $242 = ((($241)) + 4|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = $3;
   $245 = HEAP32[$244>>2]|0;
   $246 = ((($245)) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 1024)|0;
   $249 = Math_imul($243, $248)|0;
   $250 = (($240) + ($249<<2)|0);
   $31 = $250;
   $251 = $31;
   $252 = $3;
   $253 = ((($252)) + 4|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $3;
   $256 = HEAP32[$255>>2]|0;
   $257 = ((($256)) + 8|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = Math_imul($254, $258)|0;
   $260 = (($251) + ($259<<2)|0);
   $32 = $260;
   $261 = $32;
   $262 = $3;
   $263 = ((($262)) + 4|0);
   $264 = HEAP32[$263>>2]|0;
   $265 = $3;
   $266 = HEAP32[$265>>2]|0;
   $267 = ((($266)) + 8|0);
   $268 = HEAP32[$267>>2]|0;
   $269 = Math_imul($264, $268)|0;
   $270 = (($261) + ($269<<2)|0);
   $33 = $270;
   $271 = $3;
   $272 = ((($271)) + 76|0);
   $273 = $3;
   $274 = HEAP32[$273>>2]|0;
   $275 = $3;
   $276 = ((($275)) + 4|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = (_opus_custom_encoder_get_size($274,$277)|0);
   $279 = $3;
   $280 = ((($279)) + 76|0);
   $281 = $3;
   $282 = $280;
   $283 = $281;
   $284 = (($282) - ($283))|0;
   $285 = (($278) - ($284))|0;
   $286 = $285;
   _memset(($272|0),0,($286|0))|0;
   $30 = 0;
   while(1) {
    $287 = $30;
    $288 = $3;
    $289 = ((($288)) + 4|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $3;
    $292 = HEAP32[$291>>2]|0;
    $293 = ((($292)) + 8|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = Math_imul($290, $294)|0;
    $296 = ($287|0)<($295|0);
    if (!($296)) {
     break;
    }
    $297 = $33;
    $298 = $30;
    $299 = (($297) + ($298<<2)|0);
    HEAPF32[$299>>2] = -28.0;
    $300 = $32;
    $301 = $30;
    $302 = (($300) + ($301<<2)|0);
    HEAPF32[$302>>2] = -28.0;
    $303 = $30;
    $304 = (($303) + 1)|0;
    $30 = $304;
   }
   $305 = $3;
   $306 = ((($305)) + 172|0);
   HEAP32[$306>>2] = 0;
   $307 = $3;
   $308 = ((($307)) + 84|0);
   HEAPF32[$308>>2] = 1.0;
   $309 = $3;
   $310 = ((($309)) + 80|0);
   HEAP32[$310>>2] = 2;
   $311 = $3;
   $312 = ((($311)) + 88|0);
   HEAP32[$312>>2] = 256;
   $313 = $3;
   $314 = ((($313)) + 96|0);
   HEAP32[$314>>2] = 0;
   $315 = $3;
   $316 = ((($315)) + 100|0);
   HEAP32[$316>>2] = 0;
   label = 40;
   break;
  }
  case 10016:  {
   $arglist_current46 = HEAP32[$5>>2]|0;
   $317 = $arglist_current46;
   $318 = ((0) + 4|0);
   $expanded86 = $318;
   $expanded85 = (($expanded86) - 1)|0;
   $319 = (($317) + ($expanded85))|0;
   $320 = ((0) + 4|0);
   $expanded90 = $320;
   $expanded89 = (($expanded90) - 1)|0;
   $expanded88 = $expanded89 ^ -1;
   $321 = $319 & $expanded88;
   $322 = $321;
   $323 = HEAP32[$322>>2]|0;
   $arglist_next47 = ((($322)) + 4|0);
   HEAP32[$5>>2] = $arglist_next47;
   $35 = $323;
   $324 = $35;
   $34 = $324;
   $325 = $34;
   $326 = $3;
   $327 = ((($326)) + 48|0);
   HEAP32[$327>>2] = $325;
   label = 40;
   break;
  }
  case 10022:  {
   $arglist_current49 = HEAP32[$5>>2]|0;
   $328 = $arglist_current49;
   $329 = ((0) + 4|0);
   $expanded93 = $329;
   $expanded92 = (($expanded93) - 1)|0;
   $330 = (($328) + ($expanded92))|0;
   $331 = ((0) + 4|0);
   $expanded97 = $331;
   $expanded96 = (($expanded97) - 1)|0;
   $expanded95 = $expanded96 ^ -1;
   $332 = $330 & $expanded95;
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $arglist_next50 = ((($333)) + 4|0);
   HEAP32[$5>>2] = $arglist_next50;
   $37 = $334;
   $335 = $37;
   $36 = $335;
   $336 = $36;
   $337 = ($336|0)!=(0|0);
   if ($337) {
    $338 = $3;
    $339 = ((($338)) + 120|0);
    $340 = $36;
    $341 = $3;
    $342 = ((($341)) + 120|0);
    $343 = $36;
    $344 = $342;
    $345 = $343;
    $346 = (($344) - ($345))|0;
    $347 = (($346|0) / 28)&-1;
    $348 = 0;
    $349 = (28 + ($348))|0;
    _memcpy(($339|0),($340|0),($349|0))|0;
    label = 40;
   } else {
    label = 40;
   }
   break;
  }
  case 10015:  {
   $arglist_current52 = HEAP32[$5>>2]|0;
   $350 = $arglist_current52;
   $351 = ((0) + 4|0);
   $expanded100 = $351;
   $expanded99 = (($expanded100) - 1)|0;
   $352 = (($350) + ($expanded99))|0;
   $353 = ((0) + 4|0);
   $expanded104 = $353;
   $expanded103 = (($expanded104) - 1)|0;
   $expanded102 = $expanded103 ^ -1;
   $354 = $352 & $expanded102;
   $355 = $354;
   $356 = HEAP32[$355>>2]|0;
   $arglist_next53 = ((($355)) + 4|0);
   HEAP32[$5>>2] = $arglist_next53;
   $39 = $356;
   $357 = $39;
   $38 = $357;
   $358 = $38;
   $359 = ($358|0)==(0|0);
   if ($359) {
    label = 41;
   } else {
    $360 = $3;
    $361 = HEAP32[$360>>2]|0;
    $362 = $38;
    HEAP32[$362>>2] = $361;
    label = 40;
   }
   break;
  }
  case 4031:  {
   $arglist_current55 = HEAP32[$5>>2]|0;
   $363 = $arglist_current55;
   $364 = ((0) + 4|0);
   $expanded107 = $364;
   $expanded106 = (($expanded107) - 1)|0;
   $365 = (($363) + ($expanded106))|0;
   $366 = ((0) + 4|0);
   $expanded111 = $366;
   $expanded110 = (($expanded111) - 1)|0;
   $expanded109 = $expanded110 ^ -1;
   $367 = $365 & $expanded109;
   $368 = $367;
   $369 = HEAP32[$368>>2]|0;
   $arglist_next56 = ((($368)) + 4|0);
   HEAP32[$5>>2] = $arglist_next56;
   $41 = $369;
   $370 = $41;
   $40 = $370;
   $371 = $40;
   $372 = ($371|0)==(0|0);
   if ($372) {
    label = 41;
   } else {
    $373 = $3;
    $374 = ((($373)) + 76|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = $40;
    HEAP32[$376>>2] = $375;
    label = 40;
   }
   break;
  }
  case 10024:  {
   $arglist_current58 = HEAP32[$5>>2]|0;
   $377 = $arglist_current58;
   $378 = ((0) + 4|0);
   $expanded114 = $378;
   $expanded113 = (($expanded114) - 1)|0;
   $379 = (($377) + ($expanded113))|0;
   $380 = ((0) + 4|0);
   $expanded118 = $380;
   $expanded117 = (($expanded118) - 1)|0;
   $expanded116 = $expanded117 ^ -1;
   $381 = $379 & $expanded116;
   $382 = $381;
   $383 = HEAP32[$382>>2]|0;
   $arglist_next59 = ((($382)) + 4|0);
   HEAP32[$5>>2] = $arglist_next59;
   $43 = $383;
   $384 = $43;
   $42 = $384;
   $385 = $42;
   $386 = $3;
   $387 = ((($386)) + 68|0);
   HEAP32[$387>>2] = $385;
   label = 40;
   break;
  }
  case 10026:  {
   $arglist_current61 = HEAP32[$5>>2]|0;
   $388 = $arglist_current61;
   $389 = ((0) + 4|0);
   $expanded121 = $389;
   $expanded120 = (($expanded121) - 1)|0;
   $390 = (($388) + ($expanded120))|0;
   $391 = ((0) + 4|0);
   $expanded125 = $391;
   $expanded124 = (($expanded125) - 1)|0;
   $expanded123 = $expanded124 ^ -1;
   $392 = $390 & $expanded123;
   $393 = $392;
   $394 = HEAP32[$393>>2]|0;
   $arglist_next62 = ((($393)) + 4|0);
   HEAP32[$5>>2] = $arglist_next62;
   $45 = $394;
   $395 = $45;
   $44 = $395;
   $396 = $44;
   $397 = $3;
   $398 = ((($397)) + 192|0);
   HEAP32[$398>>2] = $396;
   label = 40;
   break;
  }
  default: {
   $2 = -5;
   $399 = $2;
   STACKTOP = sp;return ($399|0);
  }
  }
 } while(0);
 if ((label|0) == 40) {
  $2 = 0;
  $399 = $2;
  STACKTOP = sp;return ($399|0);
 }
 else if ((label|0) == 41) {
  $2 = -1;
  $399 = $2;
  STACKTOP = sp;return ($399|0);
 }
 return (0)|0;
}
function _celt_preemphasis($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $22 = $13;
 $23 = +HEAPF32[$22>>2];
 $17 = $23;
 $24 = $14;
 $25 = +HEAPF32[$24>>2];
 $18 = $25;
 $26 = $13;
 $27 = ((($26)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = $28 == 0.0;
 $30 = $12;
 $31 = ($30|0)==(1);
 $or$cond = $29 & $31;
 $or$cond$not = $or$cond ^ 1;
 $32 = $15;
 $33 = ($32|0)!=(0);
 $or$cond3 = $or$cond$not | $33;
 if (!($or$cond3)) {
  $16 = 0;
  while(1) {
   $34 = $16;
   $35 = $10;
   $36 = ($34|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $8;
   $38 = $11;
   $39 = $16;
   $40 = Math_imul($38, $39)|0;
   $41 = (($37) + ($40<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $42 * 32768.0;
   $20 = $43;
   $44 = $20;
   $45 = $18;
   $46 = $44 - $45;
   $47 = $9;
   $48 = $16;
   $49 = (($47) + ($48<<2)|0);
   HEAPF32[$49>>2] = $46;
   $50 = $17;
   $51 = $20;
   $52 = $50 * $51;
   $18 = $52;
   $53 = $16;
   $54 = (($53) + 1)|0;
   $16 = $54;
  }
  $55 = $18;
  $56 = $14;
  HEAPF32[$56>>2] = $55;
  STACKTOP = sp;return;
 }
 $57 = $10;
 $58 = $12;
 $59 = (($57|0) / ($58|0))&-1;
 $19 = $59;
 $60 = $12;
 $61 = ($60|0)!=(1);
 if ($61) {
  $62 = $9;
  $63 = $10;
  $64 = $63<<2;
  _memset(($62|0),0,($64|0))|0;
 }
 $16 = 0;
 while(1) {
  $65 = $16;
  $66 = $19;
  $67 = ($65|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = $8;
  $69 = $11;
  $70 = $16;
  $71 = Math_imul($69, $70)|0;
  $72 = (($68) + ($71<<2)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $73 * 32768.0;
  $75 = $9;
  $76 = $16;
  $77 = $12;
  $78 = Math_imul($76, $77)|0;
  $79 = (($75) + ($78<<2)|0);
  HEAPF32[$79>>2] = $74;
  $80 = $16;
  $81 = (($80) + 1)|0;
  $16 = $81;
 }
 $82 = $15;
 $83 = ($82|0)!=(0);
 L16: do {
  if ($83) {
   $16 = 0;
   while(1) {
    $84 = $16;
    $85 = $19;
    $86 = ($84|0)<($85|0);
    if (!($86)) {
     break L16;
    }
    $87 = $9;
    $88 = $16;
    $89 = $12;
    $90 = Math_imul($88, $89)|0;
    $91 = (($87) + ($90<<2)|0);
    $92 = +HEAPF32[$91>>2];
    $93 = 65536.0 < $92;
    if ($93) {
     $101 = 65536.0;
    } else {
     $94 = $9;
     $95 = $16;
     $96 = $12;
     $97 = Math_imul($95, $96)|0;
     $98 = (($94) + ($97<<2)|0);
     $99 = +HEAPF32[$98>>2];
     $101 = $99;
    }
    $100 = -65536.0 > $101;
    if ($100) {
     $120 = -65536.0;
    } else {
     $102 = $9;
     $103 = $16;
     $104 = $12;
     $105 = Math_imul($103, $104)|0;
     $106 = (($102) + ($105<<2)|0);
     $107 = +HEAPF32[$106>>2];
     $108 = 65536.0 < $107;
     if ($108) {
      $120 = 65536.0;
     } else {
      $109 = $9;
      $110 = $16;
      $111 = $12;
      $112 = Math_imul($110, $111)|0;
      $113 = (($109) + ($112<<2)|0);
      $114 = +HEAPF32[$113>>2];
      $120 = $114;
     }
    }
    $115 = $9;
    $116 = $16;
    $117 = $12;
    $118 = Math_imul($116, $117)|0;
    $119 = (($115) + ($118<<2)|0);
    HEAPF32[$119>>2] = $120;
    $121 = $16;
    $122 = (($121) + 1)|0;
    $16 = $122;
   }
  }
 } while(0);
 $16 = 0;
 while(1) {
  $123 = $16;
  $124 = $10;
  $125 = ($123|0)<($124|0);
  if (!($125)) {
   break;
  }
  $126 = $9;
  $127 = $16;
  $128 = (($126) + ($127<<2)|0);
  $129 = +HEAPF32[$128>>2];
  $21 = $129;
  $130 = $21;
  $131 = $18;
  $132 = $130 - $131;
  $133 = $9;
  $134 = $16;
  $135 = (($133) + ($134<<2)|0);
  HEAPF32[$135>>2] = $132;
  $136 = $17;
  $137 = $21;
  $138 = $136 * $137;
  $18 = $138;
  $139 = $16;
  $140 = (($139) + 1)|0;
  $16 = $140;
 }
 $141 = $18;
 $142 = $14;
 HEAPF32[$142>>2] = $141;
 STACKTOP = sp;return;
}
function _celt_encode_with_ec($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul141 = 0, $$alloca_mul143 = 0, $$alloca_mul145 = 0, $$alloca_mul147 = 0, $$alloca_mul149 = 0, $$alloca_mul151 = 0, $$alloca_mul153 = 0, $$alloca_mul155 = 0, $$alloca_mul157 = 0, $$alloca_mul159 = 0, $$alloca_mul161 = 0, $$alloca_mul163 = 0, $$alloca_mul165 = 0, $$alloca_mul167 = 0, $$old = 0, $$old4 = 0, $$old6 = 0, $$old7 = 0, $$sink = 0;
 var $$sink17 = 0, $$sink30 = 0, $$sink32 = 0, $$sink36 = 0, $$sink40 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0.0, $1009 = 0.0, $101 = 0, $1010 = 0, $1011 = 0.0;
 var $1012 = 0.0, $1013 = 0.0, $1014 = 0.0, $1015 = 0.0, $1016 = 0.0, $1017 = 0, $1018 = 0.0, $1019 = 0.0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0.0, $1029 = 0.0, $103 = 0;
 var $1030 = 0.0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0.0, $1045 = 0.0, $1046 = 0, $1047 = 0, $1048 = 0.0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0.0, $1052 = 0.0, $1053 = 0.0, $1054 = 0.0, $1055 = 0.0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0.0, $1064 = 0.0, $1065 = 0.0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0.0, $1071 = 0.0, $1072 = 0, $1073 = 0, $1074 = 0.0, $1075 = 0.0, $1076 = 0.0, $1077 = 0, $1078 = 0.0, $1079 = 0.0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0.0, $1083 = 0.0, $1084 = 0.0;
 var $1085 = 0.0, $1086 = 0, $1087 = 0, $1088 = 0.0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0.0, $1094 = 0.0, $1095 = 0.0, $1096 = 0, $1097 = 0.0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0.0, $1103 = 0.0, $1104 = 0.0, $1105 = 0.0, $1106 = 0.0, $1107 = 0.0, $1108 = 0.0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0.0, $1115 = 0.0, $1116 = 0.0, $1117 = 0.0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0.0, $1121 = 0.0, $1122 = 0.0, $1123 = 0, $1124 = 0.0, $1125 = 0.0, $1126 = 0, $1127 = 0.0, $1128 = 0, $1129 = 0.0, $113 = 0, $1130 = 0.0, $1131 = 0.0, $1132 = 0.0, $1133 = 0.0, $1134 = 0, $1135 = 0, $1136 = 0.0, $1137 = 0.0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0.0, $1201 = 0.0, $1202 = 0, $1203 = 0, $1204 = 0.0, $1205 = 0.0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0.0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0;
 var $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0;
 var $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0;
 var $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0;
 var $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0;
 var $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0;
 var $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0.0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0;
 var $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0;
 var $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0;
 var $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0;
 var $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0;
 var $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0;
 var $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0.0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0;
 var $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0;
 var $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0;
 var $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0.0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0.0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0;
 var $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0;
 var $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0;
 var $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0.0, $1624 = 0;
 var $1625 = 0.0, $1626 = 0, $1627 = 0.0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0.0, $164 = 0, $1640 = 0.0, $1641 = 0, $1642 = 0;
 var $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0;
 var $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0;
 var $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0.0, $1695 = 0.0, $1696 = 0, $1697 = 0;
 var $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0.0, $1712 = 0, $1713 = 0, $1714 = 0;
 var $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0.0, $1725 = 0.0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0;
 var $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0;
 var $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0;
 var $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0;
 var $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0;
 var $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0;
 var $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0;
 var $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0;
 var $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0;
 var $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0;
 var $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0;
 var $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0;
 var $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0;
 var $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0.0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0;
 var $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0;
 var $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0;
 var $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0;
 var $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0.0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0.0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0.0, $2038 = 0, $2039 = 0;
 var $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0;
 var $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0;
 var $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0;
 var $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0;
 var $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0.0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0, $473 = 0, $474 = 0.0, $475 = 0;
 var $476 = 0.0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0.0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0.0, $603 = 0, $604 = 0, $605 = 0, $606 = 0.0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0.0, $624 = 0.0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0.0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0.0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0.0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0.0, $739 = 0.0, $74 = 0, $740 = 0, $741 = 0, $742 = 0.0, $743 = 0.0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0.0, $775 = 0.0, $776 = 0.0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0.0, $781 = 0.0, $782 = 0.0;
 var $783 = 0, $784 = 0, $785 = 0.0, $786 = 0, $787 = 0, $788 = 0.0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0.0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0.0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0.0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0.0, $840 = 0, $841 = 0.0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0.0, $850 = 0, $851 = 0, $852 = 0.0, $853 = 0, $854 = 0.0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0.0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0.0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0.0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0.0, $876 = 0.0, $877 = 0.0, $878 = 0, $879 = 0.0, $88 = 0.0, $880 = 0.0, $881 = 0.0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0.0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0.0, $895 = 0.0, $896 = 0.0, $897 = 0.0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0.0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0.0, $919 = 0.0, $92 = 0, $920 = 0.0, $921 = 0.0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0.0;
 var $927 = 0, $928 = 0.0, $929 = 0.0, $93 = 0, $930 = 0.0, $931 = 0.0, $932 = 0.0, $933 = 0.0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0.0, $944 = 0.0;
 var $945 = 0.0, $946 = 0.0, $947 = 0.0, $948 = 0, $949 = 0.0, $95 = 0, $950 = 0.0, $951 = 0, $952 = 0.0, $953 = 0, $954 = 0.0, $955 = 0.0, $956 = 0.0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0.0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0.0, $976 = 0.0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0.0;
 var $981 = 0.0, $982 = 0.0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0.0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0.0, $999 = 0;
 var $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond16 = 0, $or$cond20 = 0, $or$cond23 = 0, $or$cond26 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond35 = 0, $or$cond39 = 0, $or$cond5 = 0, $or$cond5$not = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $17 = sp + 352|0;
 $35 = sp + 280|0;
 $37 = sp + 272|0;
 $38 = sp + 268|0;
 $39 = sp + 264|0;
 $45 = sp + 240|0;
 $52 = sp + 212|0;
 $53 = sp + 208|0;
 $55 = sp + 200|0;
 $76 = sp + 116|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $22 = 0;
 $23 = 0;
 $106 = $7;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $24 = $108;
 $109 = $7;
 $110 = ((($109)) + 8|0);
 $111 = HEAP32[$110>>2]|0;
 $25 = $111;
 HEAP32[$37>>2] = 15;
 HEAPF32[$38>>2] = 0.0;
 HEAP32[$39>>2] = 0;
 $47 = 0;
 $50 = 0;
 $51 = 0;
 HEAP32[$52>>2] = 0;
 $54 = 0;
 $64 = 0;
 $65 = 0.0;
 $66 = 0.0;
 $67 = 0.0;
 $68 = 510000;
 $112 = $7;
 $113 = HEAP32[$112>>2]|0;
 $58 = $113;
 $114 = $58;
 $115 = ((($114)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $59 = $116;
 $117 = $58;
 $118 = ((($117)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $60 = $119;
 $120 = $58;
 $121 = ((($120)) + 32|0);
 $122 = HEAP32[$121>>2]|0;
 $61 = $122;
 $123 = $7;
 $124 = ((($123)) + 32|0);
 $125 = HEAP32[$124>>2]|0;
 $31 = $125;
 $126 = $7;
 $127 = ((($126)) + 36|0);
 $128 = HEAP32[$127>>2]|0;
 $32 = $128;
 HEAPF32[$53>>2] = 0.0;
 $129 = $11;
 $130 = ($129|0)<(2);
 $131 = $8;
 $132 = ($131|0)==(0|0);
 $or$cond = $130 | $132;
 if ($or$cond) {
  $6 = -1;
  $2119 = $6;
  STACKTOP = sp;return ($2119|0);
 }
 $133 = $7;
 $134 = ((($133)) + 28|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $9;
 $137 = Math_imul($136, $135)|0;
 $9 = $137;
 $26 = 0;
 while(1) {
  $138 = $26;
  $139 = $58;
  $140 = ((($139)) + 36|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($138|0)<=($141|0);
  if (!($142)) {
   break;
  }
  $143 = $58;
  $144 = ((($143)) + 44|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $26;
  $147 = $145 << $146;
  $148 = $9;
  $149 = ($147|0)==($148|0);
  if ($149) {
   break;
  }
  $150 = $26;
  $151 = (($150) + 1)|0;
  $26 = $151;
 }
 $152 = $26;
 $153 = $58;
 $154 = ((($153)) + 36|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($152|0)>($155|0);
 if ($156) {
  $6 = -1;
  $2119 = $6;
  STACKTOP = sp;return ($2119|0);
 }
 $157 = $26;
 $158 = 1 << $157;
 $27 = $158;
 $159 = $27;
 $160 = $58;
 $161 = ((($160)) + 44|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = Math_imul($159, $162)|0;
 $15 = $163;
 $164 = $7;
 $165 = ((($164)) + 200|0);
 $166 = $24;
 $167 = $60;
 $168 = Math_imul($166, $167)|0;
 $169 = (($165) + ($168<<2)|0);
 $18 = $169;
 $170 = $7;
 $171 = ((($170)) + 200|0);
 $172 = $24;
 $173 = $60;
 $174 = (($173) + 1024)|0;
 $175 = Math_imul($172, $174)|0;
 $176 = (($171) + ($175<<2)|0);
 $19 = $176;
 $177 = $19;
 $178 = $24;
 $179 = $59;
 $180 = Math_imul($178, $179)|0;
 $181 = (($177) + ($180<<2)|0);
 $20 = $181;
 $182 = $20;
 $183 = $24;
 $184 = $59;
 $185 = Math_imul($183, $184)|0;
 $186 = (($182) + ($185<<2)|0);
 $21 = $186;
 $187 = $12;
 $188 = ($187|0)==(0|0);
 if ($188) {
  $46 = 1;
  $29 = 0;
 } else {
  $189 = $12;
  $190 = (_ec_tell_50($189)|0);
  $46 = $190;
  $191 = $46;
  $192 = (($191) + 4)|0;
  $193 = $192 >> 3;
  $29 = $193;
 }
 $194 = $11;
 $195 = ($194|0)<(1275);
 $196 = $11;
 $197 = $195 ? $196 : 1275;
 $11 = $197;
 $198 = $11;
 $199 = $29;
 $200 = (($198) - ($199))|0;
 $30 = $200;
 $201 = $7;
 $202 = ((($201)) + 44|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)!=(0);
 if ($204) {
  $205 = $7;
  $206 = ((($205)) + 40|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($207|0)!=(-1);
  if ($208) {
   $209 = $58;
   $210 = HEAP32[$209>>2]|0;
   $211 = $210 >> 3;
   $69 = $211;
   $212 = $7;
   $213 = ((($212)) + 40|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $9;
   $216 = Math_imul($214, $215)|0;
   $217 = $69;
   $218 = $217 >> 1;
   $219 = (($216) + ($218))|0;
   $220 = $69;
   $221 = (($219|0) / ($220|0))&-1;
   $42 = $221;
   $222 = $42;
   $223 = $222 >> 6;
   $40 = $223;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $42 = 0;
  $224 = $7;
  $225 = ((($224)) + 40|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = $9;
  $228 = Math_imul($226, $227)|0;
  $70 = $228;
  $229 = $46;
  $230 = ($229|0)>(1);
  if ($230) {
   $231 = $46;
   $232 = $70;
   $233 = (($232) + ($231))|0;
   $70 = $233;
  }
  $234 = $7;
  $235 = ((($234)) + 40|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = ($236|0)!=(-1);
  if ($237) {
   $238 = $11;
   $239 = $70;
   $240 = $58;
   $241 = HEAP32[$240>>2]|0;
   $242 = $241<<2;
   $243 = (($239) + ($242))|0;
   $244 = $58;
   $245 = HEAP32[$244>>2]|0;
   $246 = $245<<3;
   $247 = (($243|0) / ($246|0))&-1;
   $248 = $7;
   $249 = ((($248)) + 48|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($250|0)!=(0);
   $252 = $251 ^ 1;
   $253 = $252 ^ 1;
   $254 = $253&1;
   $255 = (($247) - ($254))|0;
   $256 = ($238|0)<($255|0);
   if ($256) {
    $257 = $11;
    $276 = $257;
   } else {
    $258 = $70;
    $259 = $58;
    $260 = HEAP32[$259>>2]|0;
    $261 = $260<<2;
    $262 = (($258) + ($261))|0;
    $263 = $58;
    $264 = HEAP32[$263>>2]|0;
    $265 = $264<<3;
    $266 = (($262|0) / ($265|0))&-1;
    $267 = $7;
    $268 = ((($267)) + 48|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ($269|0)!=(0);
    $271 = $270 ^ 1;
    $272 = $271 ^ 1;
    $273 = $272&1;
    $274 = (($266) - ($273))|0;
    $276 = $274;
   }
   $275 = (2)>($276|0);
   do {
    if ($275) {
     $314 = 2;
    } else {
     $277 = $11;
     $278 = $70;
     $279 = $58;
     $280 = HEAP32[$279>>2]|0;
     $281 = $280<<2;
     $282 = (($278) + ($281))|0;
     $283 = $58;
     $284 = HEAP32[$283>>2]|0;
     $285 = $284<<3;
     $286 = (($282|0) / ($285|0))&-1;
     $287 = $7;
     $288 = ((($287)) + 48|0);
     $289 = HEAP32[$288>>2]|0;
     $290 = ($289|0)!=(0);
     $291 = $290 ^ 1;
     $292 = $291 ^ 1;
     $293 = $292&1;
     $294 = (($286) - ($293))|0;
     $295 = ($277|0)<($294|0);
     if ($295) {
      $296 = $11;
      $314 = $296;
      break;
     } else {
      $297 = $70;
      $298 = $58;
      $299 = HEAP32[$298>>2]|0;
      $300 = $299<<2;
      $301 = (($297) + ($300))|0;
      $302 = $58;
      $303 = HEAP32[$302>>2]|0;
      $304 = $303<<3;
      $305 = (($301|0) / ($304|0))&-1;
      $306 = $7;
      $307 = ((($306)) + 48|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ($308|0)!=(0);
      $310 = $309 ^ 1;
      $311 = $310 ^ 1;
      $312 = $311&1;
      $313 = (($305) - ($312))|0;
      $314 = $313;
      break;
     }
    }
   } while(0);
   $11 = $314;
  }
  $315 = $11;
  $40 = $315;
 }
 $316 = $7;
 $317 = ((($316)) + 40|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = ($318|0)!=(-1);
 if ($319) {
  $320 = $7;
  $321 = ((($320)) + 40|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = $25;
  $324 = ($323*40)|0;
  $325 = (($324) + 20)|0;
  $326 = $26;
  $327 = 400 >> $326;
  $328 = (($327) - 50)|0;
  $329 = Math_imul($325, $328)|0;
  $330 = (($322) - ($329))|0;
  $68 = $330;
 }
 $331 = $12;
 $332 = ($331|0)==(0|0);
 if ($332) {
  $333 = $10;
  $334 = $11;
  _ec_enc_init($17,$333,$334);
  $12 = $17;
 }
 $335 = $42;
 $336 = ($335|0)>(0);
 if ($336) {
  $337 = $7;
  $338 = ((($337)) + 52|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = ($339|0)!=(0);
  if ($340) {
   $341 = $42;
   $71 = $341;
   $342 = $46;
   $343 = ($342|0)==(1);
   $344 = $343 ? 2 : 0;
   $345 = $42;
   $346 = $71;
   $347 = (($345) + ($346))|0;
   $348 = $7;
   $349 = ((($348)) + 164|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = (($347) - ($350))|0;
   $352 = $351 >> 6;
   $353 = ($344|0)>($352|0);
   if ($353) {
    $354 = $46;
    $355 = ($354|0)==(1);
    $356 = $355 ? 2 : 0;
    $366 = $356;
   } else {
    $357 = $42;
    $358 = $71;
    $359 = (($357) + ($358))|0;
    $360 = $7;
    $361 = ((($360)) + 164|0);
    $362 = HEAP32[$361>>2]|0;
    $363 = (($359) - ($362))|0;
    $364 = $363 >> 6;
    $366 = $364;
   }
   $365 = $30;
   $367 = ($366|0)<($365|0);
   do {
    if ($367) {
     $368 = $46;
     $369 = ($368|0)==(1);
     $370 = $369 ? 2 : 0;
     $371 = $42;
     $372 = $71;
     $373 = (($371) + ($372))|0;
     $374 = $7;
     $375 = ((($374)) + 164|0);
     $376 = HEAP32[$375>>2]|0;
     $377 = (($373) - ($376))|0;
     $378 = $377 >> 6;
     $379 = ($370|0)>($378|0);
     if ($379) {
      $380 = $46;
      $381 = ($380|0)==(1);
      $382 = $381 ? 2 : 0;
      $392 = $382;
      break;
     } else {
      $383 = $42;
      $384 = $71;
      $385 = (($383) + ($384))|0;
      $386 = $7;
      $387 = ((($386)) + 164|0);
      $388 = HEAP32[$387>>2]|0;
      $389 = (($385) - ($388))|0;
      $390 = $389 >> 6;
      $392 = $390;
      break;
     }
    } else {
     $391 = $30;
     $392 = $391;
    }
   } while(0);
   $72 = $392;
   $393 = $72;
   $394 = $30;
   $395 = ($393|0)<($394|0);
   if ($395) {
    $396 = $29;
    $397 = $72;
    $398 = (($396) + ($397))|0;
    $11 = $398;
    $399 = $72;
    $30 = $399;
    $400 = $12;
    $401 = $11;
    _ec_enc_shrink($400,$401);
   }
  }
 }
 $402 = $11;
 $403 = $402<<3;
 $43 = $403;
 $404 = $32;
 $33 = $404;
 $405 = $33;
 $406 = $58;
 $407 = ((($406)) + 12|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = ($405|0)>($408|0);
 if ($409) {
  $410 = $58;
  $411 = ((($410)) + 12|0);
  $412 = HEAP32[$411>>2]|0;
  $33 = $412;
 }
 $413 = $24;
 $414 = $15;
 $415 = $60;
 $416 = (($414) + ($415))|0;
 $417 = Math_imul($413, $416)|0;
 $418 = (_llvm_stacksave()|0);
 $73 = $418;
 $$alloca_mul = $417<<2;
 $419 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $420 = $7;
 $421 = ((($420)) + 180|0);
 $422 = +HEAPF32[$421>>2];
 $423 = $8;
 $424 = $25;
 $425 = $15;
 $426 = $60;
 $427 = (($425) - ($426))|0;
 $428 = Math_imul($424, $427)|0;
 $429 = $7;
 $430 = ((($429)) + 28|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = (($428|0) / ($431|0))&-1;
 $433 = (+_celt_maxabs16($423,$432));
 $434 = $422 > $433;
 if ($434) {
  $435 = $7;
  $436 = ((($435)) + 180|0);
  $437 = +HEAPF32[$436>>2];
  $449 = $437;
 } else {
  $438 = $8;
  $439 = $25;
  $440 = $15;
  $441 = $60;
  $442 = (($440) - ($441))|0;
  $443 = Math_imul($439, $442)|0;
  $444 = $7;
  $445 = ((($444)) + 28|0);
  $446 = HEAP32[$445>>2]|0;
  $447 = (($443|0) / ($446|0))&-1;
  $448 = (+_celt_maxabs16($438,$447));
  $449 = $448;
 }
 $56 = $449;
 $450 = $8;
 $451 = $25;
 $452 = $15;
 $453 = $60;
 $454 = (($452) - ($453))|0;
 $455 = Math_imul($451, $454)|0;
 $456 = $7;
 $457 = ((($456)) + 28|0);
 $458 = HEAP32[$457>>2]|0;
 $459 = (($455|0) / ($458|0))&-1;
 $460 = (($450) + ($459<<2)|0);
 $461 = $25;
 $462 = $60;
 $463 = Math_imul($461, $462)|0;
 $464 = $7;
 $465 = ((($464)) + 28|0);
 $466 = HEAP32[$465>>2]|0;
 $467 = (($463|0) / ($466|0))&-1;
 $468 = (+_celt_maxabs16($460,$467));
 $469 = $7;
 $470 = ((($469)) + 180|0);
 HEAPF32[$470>>2] = $468;
 $471 = $56;
 $472 = $7;
 $473 = ((($472)) + 180|0);
 $474 = +HEAPF32[$473>>2];
 $475 = $471 > $474;
 if ($475) {
  $476 = $56;
  $480 = $476;
 } else {
  $477 = $7;
  $478 = ((($477)) + 180|0);
  $479 = +HEAPF32[$478>>2];
  $480 = $479;
 }
 $56 = $480;
 $481 = $56;
 $482 = $7;
 $483 = ((($482)) + 60|0);
 $484 = HEAP32[$483>>2]|0;
 $485 = 1 << $484;
 $486 = (+($485|0));
 $487 = 1.0 / $486;
 $488 = $481 <= $487;
 $489 = $488&1;
 $51 = $489;
 $490 = $46;
 $491 = ($490|0)==(1);
 if ($491) {
  $492 = $12;
  $493 = $51;
  _ec_enc_bit_logp($492,$493,15);
 } else {
  $51 = 0;
 }
 $494 = $51;
 $495 = ($494|0)!=(0);
 if ($495) {
  $496 = $42;
  $497 = ($496|0)>(0);
  if ($497) {
   $498 = $11;
   $499 = $29;
   $500 = (($499) + 2)|0;
   $501 = ($498|0)<($500|0);
   $502 = $11;
   $503 = $29;
   $504 = (($503) + 2)|0;
   $505 = $501 ? $502 : $504;
   $11 = $505;
   $40 = $505;
   $506 = $11;
   $507 = $506<<3;
   $43 = $507;
   $30 = 2;
   $508 = $12;
   $509 = $11;
   _ec_enc_shrink($508,$509);
  }
  $510 = $11;
  $511 = $510<<3;
  $46 = $511;
  $512 = $46;
  $513 = $12;
  $514 = (_ec_tell_50($513)|0);
  $515 = (($512) - ($514))|0;
  $516 = $12;
  $517 = ((($516)) + 20|0);
  $518 = HEAP32[$517>>2]|0;
  $519 = (($518) + ($515))|0;
  HEAP32[$517>>2] = $519;
 }
 $14 = 0;
 while(1) {
  $74 = 0;
  $520 = $7;
  $521 = ((($520)) + 16|0);
  $522 = HEAP32[$521>>2]|0;
  $523 = ($522|0)!=(0);
  $524 = $56;
  $525 = $524 > 65536.0;
  $526 = $523 ? $525 : 0;
  $527 = $526&1;
  $74 = $527;
  $528 = $8;
  $529 = $14;
  $530 = (($528) + ($529<<2)|0);
  $531 = $14;
  $532 = $15;
  $533 = $60;
  $534 = (($532) + ($533))|0;
  $535 = Math_imul($531, $534)|0;
  $536 = (($419) + ($535<<2)|0);
  $537 = $60;
  $538 = (($536) + ($537<<2)|0);
  $539 = $15;
  $540 = $24;
  $541 = $7;
  $542 = ((($541)) + 28|0);
  $543 = HEAP32[$542>>2]|0;
  $544 = $58;
  $545 = ((($544)) + 16|0);
  $546 = $7;
  $547 = ((($546)) + 148|0);
  $548 = $14;
  $549 = (($547) + ($548<<2)|0);
  $550 = $74;
  _celt_preemphasis($530,$538,$539,$540,$543,$545,$549,$550);
  $551 = $14;
  $552 = (($551) + 1)|0;
  $14 = $552;
  $553 = $24;
  $554 = ($552|0)<($553|0);
  if (!($554)) {
   break;
  }
 }
 $555 = $7;
 $556 = ((($555)) + 68|0);
 $557 = HEAP32[$556>>2]|0;
 $558 = ($557|0)!=(0);
 $559 = $30;
 $560 = ($559|0)>(3);
 $or$cond3 = $558 & $560;
 if ($or$cond3) {
  $$old = $31;
  $$old4 = ($$old|0)!=(0);
  $$old6 = $51;
  $$old7 = ($$old6|0)!=(0);
  $or$cond10 = $$old4 | $$old7;
  if ($or$cond10) {
   $590 = 0;
  } else {
   label = 63;
  }
 } else {
  $561 = $30;
  $562 = $25;
  $563 = ($562*12)|0;
  $564 = ($561|0)>($563|0);
  $565 = $31;
  $566 = ($565|0)==(0);
  $or$cond5 = $564 & $566;
  $or$cond5$not = $or$cond5 ^ 1;
  $567 = $51;
  $568 = ($567|0)!=(0);
  $or$cond8 = $or$cond5$not | $568;
  if ($or$cond8) {
   $590 = 0;
  } else {
   label = 63;
  }
 }
 if ((label|0) == 63) {
  $569 = $7;
  $570 = ((($569)) + 20|0);
  $571 = HEAP32[$570>>2]|0;
  $572 = ($571|0)!=(0);
  if ($572) {
   $590 = 0;
  } else {
   $573 = $7;
   $574 = ((($573)) + 24|0);
   $575 = HEAP32[$574>>2]|0;
   $576 = ($575|0)>=(5);
   if ($576) {
    $577 = $7;
    $578 = ((($577)) + 116|0);
    $579 = HEAP32[$578>>2]|0;
    $580 = ($579|0)!=(0);
    $581 = $26;
    $582 = ($581|0)!=(3);
    $or$cond13 = $580 & $582;
    if ($or$cond13) {
     $583 = $7;
     $584 = ((($583)) + 64|0);
     $585 = HEAP32[$584>>2]|0;
     $586 = ($585|0)==(5010);
     $588 = $586;
    } else {
     $588 = 0;
    }
    $587 = $588 ^ 1;
    $590 = $587;
   } else {
    $590 = 0;
   }
  }
 }
 $589 = $590&1;
 $75 = $589;
 $591 = $7;
 $592 = ((($591)) + 100|0);
 $593 = HEAP32[$592>>2]|0;
 $47 = $593;
 $594 = $7;
 $595 = $18;
 $596 = $24;
 $597 = $15;
 $598 = $47;
 $599 = $75;
 $600 = $30;
 $601 = (_run_prefilter($594,$419,$595,$596,$597,$598,$37,$38,$76,$599,$600)|0);
 $48 = $601;
 $602 = +HEAPF32[$38>>2];
 $603 = $602 > 0.40000000596046448;
 if ($603) {
  label = 70;
 } else {
  $604 = $7;
  $605 = ((($604)) + 108|0);
  $606 = +HEAPF32[$605>>2];
  $607 = $606 > 0.40000000596046448;
  if ($607) {
   label = 70;
  }
 }
 do {
  if ((label|0) == 70) {
   $608 = $7;
   $609 = ((($608)) + 120|0);
   $610 = HEAP32[$609>>2]|0;
   $611 = ($610|0)!=(0);
   if ($611) {
    $612 = $7;
    $613 = ((($612)) + 120|0);
    $614 = ((($613)) + 4|0);
    $615 = +HEAPF32[$614>>2];
    $616 = $615;
    $617 = $616 > 0.29999999999999999;
    if (!($617)) {
     break;
    }
   }
   $618 = HEAP32[$37>>2]|0;
   $619 = (+($618|0));
   $620 = $7;
   $621 = ((($620)) + 104|0);
   $622 = HEAP32[$621>>2]|0;
   $623 = (+($622|0));
   $624 = 1.26 * $623;
   $625 = $619 > $624;
   if (!($625)) {
    $626 = HEAP32[$37>>2]|0;
    $627 = (+($626|0));
    $628 = $7;
    $629 = ((($628)) + 104|0);
    $630 = HEAP32[$629>>2]|0;
    $631 = (+($630|0));
    $632 = 0.79000000000000004 * $631;
    $633 = $627 < $632;
    if (!($633)) {
     break;
    }
   }
   $54 = 1;
  }
 } while(0);
 $634 = $48;
 $635 = ($634|0)==(0);
 if ($635) {
  $636 = $31;
  $637 = ($636|0)==(0);
  if ($637) {
   $638 = $46;
   $639 = (($638) + 16)|0;
   $640 = $43;
   $641 = ($639|0)<=($640|0);
   if ($641) {
    $642 = $12;
    _ec_enc_bit_logp($642,0,1);
   }
  }
 } else {
  $643 = $12;
  _ec_enc_bit_logp($643,1,1);
  $644 = HEAP32[$37>>2]|0;
  $645 = (($644) + 1)|0;
  HEAP32[$37>>2] = $645;
  $646 = HEAP32[$37>>2]|0;
  $647 = (Math_clz32(($646|0))|0);
  $648 = (32 - ($647))|0;
  $649 = (($648) - 5)|0;
  $77 = $649;
  $650 = $12;
  $651 = $77;
  _ec_enc_uint($650,$651,6);
  $652 = $12;
  $653 = HEAP32[$37>>2]|0;
  $654 = $77;
  $655 = 16 << $654;
  $656 = (($653) - ($655))|0;
  $657 = $77;
  $658 = (4 + ($657))|0;
  _ec_enc_bits($652,$656,$658);
  $659 = HEAP32[$37>>2]|0;
  $660 = (($659) - 1)|0;
  HEAP32[$37>>2] = $660;
  $661 = $12;
  $662 = HEAP32[$76>>2]|0;
  _ec_enc_bits($661,$662,3);
  $663 = $12;
  $664 = $47;
  _ec_enc_icdf($663,$664,25820,2);
 }
 $23 = 0;
 $22 = 0;
 $665 = $7;
 $666 = ((($665)) + 24|0);
 $667 = HEAP32[$666>>2]|0;
 $668 = ($667|0)>=(1);
 if ($668) {
  $669 = $7;
  $670 = ((($669)) + 68|0);
  $671 = HEAP32[$670>>2]|0;
  $672 = ($671|0)!=(0);
  if (!($672)) {
   $673 = $15;
   $674 = $60;
   $675 = (($673) + ($674))|0;
   $676 = $24;
   $677 = (_transient_analysis($419,$675,$676,$53,$52)|0);
   $23 = $677;
  }
 }
 $678 = $26;
 $679 = ($678|0)>(0);
 if ($679) {
  $680 = $12;
  $681 = (_ec_tell_50($680)|0);
  $682 = (($681) + 3)|0;
  $683 = $43;
  $684 = ($682|0)<=($683|0);
  if ($684) {
   $685 = $23;
   $686 = ($685|0)!=(0);
   if ($686) {
    $687 = $27;
    $22 = $687;
   }
  } else {
   label = 87;
  }
 } else {
  label = 87;
 }
 if ((label|0) == 87) {
  $23 = 0;
  $64 = 1;
 }
 $688 = $24;
 $689 = $15;
 $690 = Math_imul($688, $689)|0;
 $$alloca_mul141 = $690<<2;
 $691 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul141)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul141)|0)+15)&-16)|0);;
 $692 = $59;
 $693 = $24;
 $694 = Math_imul($692, $693)|0;
 $$alloca_mul143 = $694<<2;
 $695 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul143)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul143)|0)+15)&-16)|0);;
 $696 = $59;
 $697 = $24;
 $698 = Math_imul($696, $697)|0;
 $$alloca_mul145 = $698<<2;
 $699 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul145)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul145)|0)+15)&-16)|0);;
 $700 = $22;
 $701 = ($700|0)!=(0);
 if ($701) {
  $702 = $7;
  $703 = ((($702)) + 24|0);
  $704 = HEAP32[$703>>2]|0;
  $705 = ($704|0)>=(8);
  $707 = $705;
 } else {
  $707 = 0;
 }
 $706 = $707&1;
 $62 = $706;
 $708 = $25;
 $709 = $59;
 $710 = Math_imul($708, $709)|0;
 $$alloca_mul147 = $710<<2;
 $711 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul147)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul147)|0)+15)&-16)|0);;
 $712 = $62;
 $713 = ($712|0)!=(0);
 L128: do {
  if ($713) {
   $714 = $58;
   $715 = $25;
   $716 = $24;
   $717 = $26;
   $718 = $7;
   $719 = ((($718)) + 28|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = $7;
   $722 = ((($721)) + 72|0);
   $723 = HEAP32[$722>>2]|0;
   _compute_mdcts($714,0,$419,$691,$715,$716,$717,$720,$723);
   $724 = $58;
   $725 = $33;
   $726 = $25;
   $727 = $26;
   _compute_band_energies($724,$691,$695,$725,$726,$727);
   $728 = $58;
   $729 = $33;
   $730 = $32;
   $731 = $25;
   _amp2Log2($728,$729,$730,$695,$711,$731);
   $13 = 0;
   while(1) {
    $732 = $13;
    $733 = $25;
    $734 = $59;
    $735 = Math_imul($733, $734)|0;
    $736 = ($732|0)<($735|0);
    if (!($736)) {
     break L128;
    }
    $737 = $26;
    $738 = (+($737|0));
    $739 = 0.5 * $738;
    $740 = $13;
    $741 = (($711) + ($740<<2)|0);
    $742 = +HEAPF32[$741>>2];
    $743 = $742 + $739;
    HEAPF32[$741>>2] = $743;
    $744 = $13;
    $745 = (($744) + 1)|0;
    $13 = $745;
   }
  }
 } while(0);
 $746 = $58;
 $747 = $22;
 $748 = $25;
 $749 = $24;
 $750 = $26;
 $751 = $7;
 $752 = ((($751)) + 28|0);
 $753 = HEAP32[$752>>2]|0;
 $754 = $7;
 $755 = ((($754)) + 72|0);
 $756 = HEAP32[$755>>2]|0;
 _compute_mdcts($746,$747,$419,$691,$748,$749,$750,$753,$756);
 $757 = $24;
 $758 = ($757|0)==(2);
 $759 = $25;
 $760 = ($759|0)==(1);
 $or$cond16 = $758 & $760;
 if ($or$cond16) {
  HEAP32[$52>>2] = 0;
 }
 $761 = $58;
 $762 = $33;
 $763 = $25;
 $764 = $26;
 _compute_band_energies($761,$691,$695,$762,$763,$764);
 $765 = $7;
 $766 = ((($765)) + 68|0);
 $767 = HEAP32[$766>>2]|0;
 $768 = ($767|0)!=(0);
 L137: do {
  if ($768) {
   $13 = 2;
   while(1) {
    $769 = $13;
    $770 = $32;
    $771 = ($769|0)<($770|0);
    if (!($771)) {
     break L137;
    }
    $772 = $13;
    $773 = (($695) + ($772<<2)|0);
    $774 = +HEAPF32[$773>>2];
    $775 = +HEAPF32[$695>>2];
    $776 = 9.9999997473787516E-5 * $775;
    $777 = $774 < $776;
    if ($777) {
     $778 = $13;
     $779 = (($695) + ($778<<2)|0);
     $780 = +HEAPF32[$779>>2];
     $785 = $780;
    } else {
     $781 = +HEAPF32[$695>>2];
     $782 = 9.9999997473787516E-5 * $781;
     $785 = $782;
    }
    $783 = $13;
    $784 = (($695) + ($783<<2)|0);
    HEAPF32[$784>>2] = $785;
    $786 = $13;
    $787 = (($695) + ($786<<2)|0);
    $788 = +HEAPF32[$787>>2];
    $789 = $788 > 1.0000000036274937E-15;
    if ($789) {
     $790 = $13;
     $791 = (($695) + ($790<<2)|0);
     $792 = +HEAPF32[$791>>2];
     $795 = $792;
    } else {
     $795 = 1.0000000036274937E-15;
    }
    $793 = $13;
    $794 = (($695) + ($793<<2)|0);
    HEAPF32[$794>>2] = $795;
    $796 = $13;
    $797 = (($796) + 1)|0;
    $13 = $797;
   }
  }
 } while(0);
 $798 = $58;
 $799 = $33;
 $800 = $32;
 $801 = $25;
 _amp2Log2($798,$799,$800,$695,$699,$801);
 $802 = $25;
 $803 = $59;
 $804 = Math_imul($802, $803)|0;
 $$alloca_mul149 = $804<<2;
 $805 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul149)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul149)|0)+15)&-16)|0);;
 $806 = $32;
 $807 = $806<<2;
 _memset(($805|0),0,($807|0))|0;
 $808 = $31;
 $809 = ($808|0)==(0);
 do {
  if ($809) {
   $810 = $7;
   $811 = ((($810)) + 192|0);
   $812 = HEAP32[$811>>2]|0;
   $813 = ($812|0)!=(0|0);
   if (!($813)) {
    break;
   }
   $814 = $7;
   $815 = ((($814)) + 68|0);
   $816 = HEAP32[$815>>2]|0;
   $817 = ($816|0)!=(0);
   if ($817) {
    break;
   }
   $81 = 0.0;
   $82 = 0.0;
   $83 = 0;
   $818 = $7;
   $819 = ((($818)) + 92|0);
   $820 = HEAP32[$819>>2]|0;
   $821 = (2)>($820|0);
   if ($821) {
    $825 = 2;
   } else {
    $822 = $7;
    $823 = ((($822)) + 92|0);
    $824 = HEAP32[$823>>2]|0;
    $825 = $824;
   }
   $78 = $825;
   $14 = 0;
   while(1) {
    $826 = $14;
    $827 = $25;
    $828 = ($826|0)<($827|0);
    if (!($828)) {
     break;
    }
    $13 = 0;
    while(1) {
     $829 = $13;
     $830 = $78;
     $831 = ($829|0)<($830|0);
     if (!($831)) {
      break;
     }
     $832 = $7;
     $833 = ((($832)) + 192|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = $59;
     $836 = $14;
     $837 = Math_imul($835, $836)|0;
     $838 = $13;
     $839 = (($837) + ($838))|0;
     $840 = (($834) + ($839<<2)|0);
     $841 = +HEAPF32[$840>>2];
     $842 = $841 < 0.25;
     if ($842) {
      $843 = $7;
      $844 = ((($843)) + 192|0);
      $845 = HEAP32[$844>>2]|0;
      $846 = $59;
      $847 = $14;
      $848 = Math_imul($846, $847)|0;
      $849 = $13;
      $850 = (($848) + ($849))|0;
      $851 = (($845) + ($850<<2)|0);
      $852 = +HEAPF32[$851>>2];
      $854 = $852;
     } else {
      $854 = 0.25;
     }
     $853 = $854 > -2.0;
     do {
      if ($853) {
       $855 = $7;
       $856 = ((($855)) + 192|0);
       $857 = HEAP32[$856>>2]|0;
       $858 = $59;
       $859 = $14;
       $860 = Math_imul($858, $859)|0;
       $861 = $13;
       $862 = (($860) + ($861))|0;
       $863 = (($857) + ($862<<2)|0);
       $864 = +HEAPF32[$863>>2];
       $865 = $864 < 0.25;
       if (!($865)) {
        $876 = 0.25;
        break;
       }
       $866 = $7;
       $867 = ((($866)) + 192|0);
       $868 = HEAP32[$867>>2]|0;
       $869 = $59;
       $870 = $14;
       $871 = Math_imul($869, $870)|0;
       $872 = $13;
       $873 = (($871) + ($872))|0;
       $874 = (($868) + ($873<<2)|0);
       $875 = +HEAPF32[$874>>2];
       $876 = $875;
      } else {
       $876 = -2.0;
      }
     } while(0);
     $84 = $876;
     $877 = $84;
     $878 = $877 > 0.0;
     if ($878) {
      $879 = $84;
      $880 = 0.5 * $879;
      $84 = $880;
     }
     $881 = $84;
     $882 = $61;
     $883 = $13;
     $884 = (($883) + 1)|0;
     $885 = (($882) + ($884<<1)|0);
     $886 = HEAP16[$885>>1]|0;
     $887 = $886 << 16 >> 16;
     $888 = $61;
     $889 = $13;
     $890 = (($888) + ($889<<1)|0);
     $891 = HEAP16[$890>>1]|0;
     $892 = $891 << 16 >> 16;
     $893 = (($887) - ($892))|0;
     $894 = (+($893|0));
     $895 = $881 * $894;
     $896 = $81;
     $897 = $896 + $895;
     $81 = $897;
     $898 = $61;
     $899 = $13;
     $900 = (($899) + 1)|0;
     $901 = (($898) + ($900<<1)|0);
     $902 = HEAP16[$901>>1]|0;
     $903 = $902 << 16 >> 16;
     $904 = $61;
     $905 = $13;
     $906 = (($904) + ($905<<1)|0);
     $907 = HEAP16[$906>>1]|0;
     $908 = $907 << 16 >> 16;
     $909 = (($903) - ($908))|0;
     $910 = $83;
     $911 = (($910) + ($909))|0;
     $83 = $911;
     $912 = $84;
     $913 = $13;
     $914 = $913<<1;
     $915 = (1 + ($914))|0;
     $916 = $78;
     $917 = (($915) - ($916))|0;
     $918 = (+($917|0));
     $919 = $912 * $918;
     $920 = $82;
     $921 = $920 + $919;
     $82 = $921;
     $922 = $13;
     $923 = (($922) + 1)|0;
     $13 = $923;
    }
    $924 = $14;
    $925 = (($924) + 1)|0;
    $14 = $925;
   }
   $926 = $81;
   $927 = $83;
   $928 = (+($927|0));
   $929 = $926 / $928;
   $81 = $929;
   $930 = $81;
   $931 = $930 + 0.20000000298023224;
   $81 = $931;
   $932 = $82;
   $933 = $932 * 6.0;
   $934 = $25;
   $935 = $78;
   $936 = (($935) - 1)|0;
   $937 = Math_imul($934, $936)|0;
   $938 = $78;
   $939 = (($938) + 1)|0;
   $940 = Math_imul($937, $939)|0;
   $941 = $78;
   $942 = Math_imul($940, $941)|0;
   $943 = (+($942|0));
   $944 = $933 / $943;
   $82 = $944;
   $945 = $82;
   $946 = 0.5 * $945;
   $82 = $946;
   $947 = $82;
   $948 = $947 < 0.030999999493360519;
   $949 = $82;
   $950 = $948 ? $949 : 0.030999999493360519;
   $951 = $950 > -0.030999999493360519;
   if ($951) {
    $952 = $82;
    $953 = $952 < 0.030999999493360519;
    $954 = $82;
    $955 = $953 ? $954 : 0.030999999493360519;
    $956 = $955;
   } else {
    $956 = -0.030999999493360519;
   }
   $82 = $956;
   $79 = 0;
   while(1) {
    $957 = $61;
    $958 = $79;
    $959 = (($958) + 1)|0;
    $960 = (($957) + ($959<<1)|0);
    $961 = HEAP16[$960>>1]|0;
    $962 = $961 << 16 >> 16;
    $963 = $61;
    $964 = $78;
    $965 = (($963) + ($964<<1)|0);
    $966 = HEAP16[$965>>1]|0;
    $967 = $966 << 16 >> 16;
    $968 = (($967|0) / 2)&-1;
    $969 = ($962|0)<($968|0);
    if (!($969)) {
     break;
    }
    $970 = $79;
    $971 = (($970) + 1)|0;
    $79 = $971;
   }
   $80 = 0;
   $13 = 0;
   while(1) {
    $972 = $13;
    $973 = $78;
    $974 = ($972|0)<($973|0);
    if (!($974)) {
     break;
    }
    $975 = $81;
    $976 = $82;
    $977 = $13;
    $978 = $79;
    $979 = (($977) - ($978))|0;
    $980 = (+($979|0));
    $981 = $976 * $980;
    $982 = $975 + $981;
    $85 = $982;
    $983 = $25;
    $984 = ($983|0)==(2);
    $985 = $7;
    $986 = ((($985)) + 192|0);
    $987 = HEAP32[$986>>2]|0;
    $988 = $13;
    $989 = (($987) + ($988<<2)|0);
    $990 = +HEAPF32[$989>>2];
    if ($984) {
     $991 = $7;
     $992 = ((($991)) + 192|0);
     $993 = HEAP32[$992>>2]|0;
     $994 = $59;
     $995 = $13;
     $996 = (($994) + ($995))|0;
     $997 = (($993) + ($996<<2)|0);
     $998 = +HEAPF32[$997>>2];
     $999 = $990 > $998;
     $1000 = $7;
     $1001 = ((($1000)) + 192|0);
     $1002 = HEAP32[$1001>>2]|0;
     if ($999) {
      $1003 = $13;
      $$sink17 = $1003;
     } else {
      $1004 = $59;
      $1005 = $13;
      $1006 = (($1004) + ($1005))|0;
      $$sink17 = $1006;
     }
     $1007 = (($1002) + ($$sink17<<2)|0);
     $1008 = +HEAPF32[$1007>>2];
     $86 = $1008;
    } else {
     $86 = $990;
    }
    $1009 = $86;
    $1010 = $1009 < 0.0;
    $1011 = $86;
    $1012 = $1010 ? $1011 : 0.0;
    $86 = $1012;
    $1013 = $85;
    $1014 = $86;
    $1015 = $1014 - $1013;
    $86 = $1015;
    $1016 = $86;
    $1017 = $1016 > 0.25;
    if ($1017) {
     $1018 = $86;
     $1019 = $1018 - 0.25;
     $1020 = $13;
     $1021 = (($805) + ($1020<<2)|0);
     HEAPF32[$1021>>2] = $1019;
     $1022 = $80;
     $1023 = (($1022) + 1)|0;
     $80 = $1023;
    }
    $1024 = $13;
    $1025 = (($1024) + 1)|0;
    $13 = $1025;
   }
   $1026 = $80;
   $1027 = ($1026|0)>=(3);
   L197: do {
    if ($1027) {
     $1028 = $81;
     $1029 = $1028 + 0.25;
     $81 = $1029;
     $1030 = $81;
     $1031 = $1030 > 0.0;
     if ($1031) {
      $81 = 0.0;
      $82 = 0.0;
      $1032 = $78;
      $1033 = $1032<<2;
      _memset(($805|0),0,($1033|0))|0;
      break;
     }
     $13 = 0;
     while(1) {
      $1034 = $13;
      $1035 = $78;
      $1036 = ($1034|0)<($1035|0);
      if (!($1036)) {
       break L197;
      }
      $1037 = $13;
      $1038 = (($805) + ($1037<<2)|0);
      $1039 = +HEAPF32[$1038>>2];
      $1040 = $1039 - 0.25;
      $1041 = 0.0 > $1040;
      if ($1041) {
       $1048 = 0.0;
      } else {
       $1042 = $13;
       $1043 = (($805) + ($1042<<2)|0);
       $1044 = +HEAPF32[$1043>>2];
       $1045 = $1044 - 0.25;
       $1048 = $1045;
      }
      $1046 = $13;
      $1047 = (($805) + ($1046<<2)|0);
      HEAPF32[$1047>>2] = $1048;
      $1049 = $13;
      $1050 = (($1049) + 1)|0;
      $13 = $1050;
     }
    }
   } while(0);
   $1051 = $81;
   $1052 = $1051 + 0.20000000298023224;
   $81 = $1052;
   $1053 = $82;
   $1054 = 64.0 * $1053;
   $67 = $1054;
   $1055 = $81;
   $65 = $1055;
  }
 } while(0);
 $1056 = $7;
 $1057 = ((($1056)) + 68|0);
 $1058 = HEAP32[$1057>>2]|0;
 $1059 = ($1058|0)!=(0);
 if (!($1059)) {
  $87 = -10.0;
  $88 = 0.0;
  $1060 = $22;
  $1061 = ($1060|0)!=(0);
  if ($1061) {
   $1062 = $26;
   $1063 = (+($1062|0));
   $1064 = 0.5 * $1063;
   $1065 = $1064;
  } else {
   $1065 = 0.0;
  }
  $89 = $1065;
  $1066 = $31;
  $13 = $1066;
  while(1) {
   $1067 = $13;
   $1068 = $32;
   $1069 = ($1067|0)<($1068|0);
   if (!($1069)) {
    break;
   }
   $1070 = $87;
   $1071 = $1070 - 1.0;
   $1072 = $13;
   $1073 = (($699) + ($1072<<2)|0);
   $1074 = +HEAPF32[$1073>>2];
   $1075 = $89;
   $1076 = $1074 - $1075;
   $1077 = $1071 > $1076;
   if ($1077) {
    $1078 = $87;
    $1079 = $1078 - 1.0;
    $1085 = $1079;
   } else {
    $1080 = $13;
    $1081 = (($699) + ($1080<<2)|0);
    $1082 = +HEAPF32[$1081>>2];
    $1083 = $89;
    $1084 = $1082 - $1083;
    $1085 = $1084;
   }
   $87 = $1085;
   $1086 = $25;
   $1087 = ($1086|0)==(2);
   if ($1087) {
    $1088 = $87;
    $1089 = $13;
    $1090 = $59;
    $1091 = (($1089) + ($1090))|0;
    $1092 = (($699) + ($1091<<2)|0);
    $1093 = +HEAPF32[$1092>>2];
    $1094 = $89;
    $1095 = $1093 - $1094;
    $1096 = $1088 > $1095;
    if ($1096) {
     $1097 = $87;
     $1105 = $1097;
    } else {
     $1098 = $13;
     $1099 = $59;
     $1100 = (($1098) + ($1099))|0;
     $1101 = (($699) + ($1100<<2)|0);
     $1102 = +HEAPF32[$1101>>2];
     $1103 = $89;
     $1104 = $1102 - $1103;
     $1105 = $1104;
    }
    $87 = $1105;
   }
   $1106 = $87;
   $1107 = $88;
   $1108 = $1107 + $1106;
   $88 = $1108;
   $1109 = $13;
   $1110 = (($1109) + 1)|0;
   $13 = $1110;
  }
  $1111 = $32;
  $1112 = $31;
  $1113 = (($1111) - ($1112))|0;
  $1114 = (+($1113|0));
  $1115 = $88;
  $1116 = $1115 / $1114;
  $88 = $1116;
  $1117 = $88;
  $1118 = $7;
  $1119 = ((($1118)) + 196|0);
  $1120 = +HEAPF32[$1119>>2];
  $1121 = $1117 - $1120;
  $66 = $1121;
  $1122 = $66;
  $1123 = -1.5 > $1122;
  $1124 = $66;
  $1125 = $1123 ? -1.5 : $1124;
  $1126 = 3.0 < $1125;
  if ($1126) {
   $1131 = 3.0;
  } else {
   $1127 = $66;
   $1128 = -1.5 > $1127;
   $1129 = $66;
   $1130 = $1128 ? -1.5 : $1129;
   $1131 = $1130;
  }
  $66 = $1131;
  $1132 = $66;
  $1133 = 0.019999999552965164 * $1132;
  $1134 = $7;
  $1135 = ((($1134)) + 196|0);
  $1136 = +HEAPF32[$1135>>2];
  $1137 = $1136 + $1133;
  HEAPF32[$1135>>2] = $1137;
 }
 $1138 = $62;
 $1139 = ($1138|0)!=(0);
 if (!($1139)) {
  $1140 = $25;
  $1141 = $59;
  $1142 = Math_imul($1140, $1141)|0;
  $1143 = $1142<<2;
  $1144 = $711;
  $1145 = $699;
  $1146 = (($1144) - ($1145))|0;
  $1147 = (($1146|0) / 4)&-1;
  $1148 = 0;
  $1149 = (($1143) + ($1148))|0;
  _memcpy(($711|0),($699|0),($1149|0))|0;
 }
 $1150 = $26;
 $1151 = ($1150|0)>(0);
 do {
  if ($1151) {
   $1152 = $12;
   $1153 = (_ec_tell_50($1152)|0);
   $1154 = (($1153) + 3)|0;
   $1155 = $43;
   $1156 = ($1154|0)>($1155|0);
   $1157 = $23;
   $1158 = ($1157|0)!=(0);
   $or$cond20 = $1156 | $1158;
   if ($or$cond20) {
    break;
   }
   $1159 = $7;
   $1160 = ((($1159)) + 24|0);
   $1161 = HEAP32[$1160>>2]|0;
   $1162 = ($1161|0)>=(5);
   if (!($1162)) {
    break;
   }
   $1163 = $7;
   $1164 = ((($1163)) + 68|0);
   $1165 = HEAP32[$1164>>2]|0;
   $1166 = ($1165|0)!=(0);
   if ($1166) {
    break;
   }
   $1167 = $19;
   $1168 = $59;
   $1169 = $31;
   $1170 = $32;
   $1171 = $25;
   $1172 = (_patch_transient_decision($699,$1167,$1168,$1169,$1170,$1171)|0);
   $1173 = ($1172|0)!=(0);
   if (!($1173)) {
    break;
   }
   $23 = 1;
   $1174 = $27;
   $22 = $1174;
   $1175 = $58;
   $1176 = $22;
   $1177 = $25;
   $1178 = $24;
   $1179 = $26;
   $1180 = $7;
   $1181 = ((($1180)) + 28|0);
   $1182 = HEAP32[$1181>>2]|0;
   $1183 = $7;
   $1184 = ((($1183)) + 72|0);
   $1185 = HEAP32[$1184>>2]|0;
   _compute_mdcts($1175,$1176,$419,$691,$1177,$1178,$1179,$1182,$1185);
   $1186 = $58;
   $1187 = $33;
   $1188 = $25;
   $1189 = $26;
   _compute_band_energies($1186,$691,$695,$1187,$1188,$1189);
   $1190 = $58;
   $1191 = $33;
   $1192 = $32;
   $1193 = $25;
   _amp2Log2($1190,$1191,$1192,$695,$699,$1193);
   $13 = 0;
   while(1) {
    $1194 = $13;
    $1195 = $25;
    $1196 = $59;
    $1197 = Math_imul($1195, $1196)|0;
    $1198 = ($1194|0)<($1197|0);
    if (!($1198)) {
     break;
    }
    $1199 = $26;
    $1200 = (+($1199|0));
    $1201 = 0.5 * $1200;
    $1202 = $13;
    $1203 = (($711) + ($1202<<2)|0);
    $1204 = +HEAPF32[$1203>>2];
    $1205 = $1204 + $1201;
    HEAPF32[$1203>>2] = $1205;
    $1206 = $13;
    $1207 = (($1206) + 1)|0;
    $13 = $1207;
   }
   HEAPF32[$53>>2] = 0.20000000298023224;
  }
 } while(0);
 $1208 = $26;
 $1209 = ($1208|0)>(0);
 do {
  if ($1209) {
   $1210 = $12;
   $1211 = (_ec_tell_50($1210)|0);
   $1212 = (($1211) + 3)|0;
   $1213 = $43;
   $1214 = ($1212|0)<=($1213|0);
   if (!($1214)) {
    break;
   }
   $1215 = $12;
   $1216 = $23;
   _ec_enc_bit_logp($1215,$1216,3);
  }
 } while(0);
 $1217 = $25;
 $1218 = $15;
 $1219 = Math_imul($1217, $1218)|0;
 $$alloca_mul151 = $1219<<2;
 $1220 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul151)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul151)|0)+15)&-16)|0);;
 $1221 = $58;
 $1222 = $33;
 $1223 = $25;
 $1224 = $27;
 _normalise_bands($1221,$691,$1220,$695,$1222,$1223,$1224);
 $1225 = $59;
 $$alloca_mul153 = $1225<<2;
 $1226 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul153)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul153)|0)+15)&-16)|0);;
 $1227 = $40;
 $1228 = $25;
 $1229 = ($1228*15)|0;
 $1230 = ($1227|0)>=($1229|0);
 $1231 = $31;
 $1232 = ($1231|0)==(0);
 $or$cond23 = $1230 & $1232;
 L252: do {
  if ($or$cond23) {
   $1233 = $7;
   $1234 = ((($1233)) + 24|0);
   $1235 = HEAP32[$1234>>2]|0;
   $1236 = ($1235|0)>=(2);
   if (!($1236)) {
    label = 192;
    break;
   }
   $1237 = $7;
   $1238 = ((($1237)) + 68|0);
   $1239 = HEAP32[$1238>>2]|0;
   $1240 = ($1239|0)!=(0);
   if ($1240) {
    label = 192;
    break;
   }
   $1241 = $40;
   $1242 = ($1241|0)<(40);
   do {
    if ($1242) {
     $90 = 12;
    } else {
     $1243 = $40;
     $1244 = ($1243|0)<(60);
     if ($1244) {
      $90 = 6;
      break;
     }
     $1245 = $40;
     $1246 = ($1245|0)<(100);
     if ($1246) {
      $90 = 4;
      break;
     } else {
      $90 = 3;
      break;
     }
    }
   } while(0);
   $1247 = $90;
   $1248 = $1247<<1;
   $90 = $1248;
   $1249 = $58;
   $1250 = $33;
   $1251 = $23;
   $1252 = $90;
   $1253 = $15;
   $1254 = $26;
   $1255 = +HEAPF32[$53>>2];
   $1256 = HEAP32[$52>>2]|0;
   $1257 = (_tf_analysis($1249,$1250,$1251,$1226,$1252,$1220,$1253,$1254,$35,$1255,$1256)|0);
   $28 = $1257;
   $1258 = $33;
   $13 = $1258;
   while(1) {
    $1259 = $13;
    $1260 = $32;
    $1261 = ($1259|0)<($1260|0);
    if (!($1261)) {
     break L252;
    }
    $1262 = $33;
    $1263 = (($1262) - 1)|0;
    $1264 = (($1226) + ($1263<<2)|0);
    $1265 = HEAP32[$1264>>2]|0;
    $1266 = $13;
    $1267 = (($1226) + ($1266<<2)|0);
    HEAP32[$1267>>2] = $1265;
    $1268 = $13;
    $1269 = (($1268) + 1)|0;
    $13 = $1269;
   }
  } else {
   label = 192;
  }
 } while(0);
 if ((label|0) == 192) {
  HEAP32[$35>>2] = 0;
  $13 = 0;
  while(1) {
   $1270 = $13;
   $1271 = $32;
   $1272 = ($1270|0)<($1271|0);
   if (!($1272)) {
    break;
   }
   $1273 = $23;
   $1274 = $13;
   $1275 = (($1226) + ($1274<<2)|0);
   HEAP32[$1275>>2] = $1273;
   $1276 = $13;
   $1277 = (($1276) + 1)|0;
   $13 = $1277;
  }
  $28 = 0;
 }
 $1278 = $25;
 $1279 = $59;
 $1280 = Math_imul($1278, $1279)|0;
 $$alloca_mul155 = $1280<<2;
 $1281 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul155)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul155)|0)+15)&-16)|0);;
 $1282 = $58;
 $1283 = $31;
 $1284 = $32;
 $1285 = $33;
 $1286 = $19;
 $1287 = $43;
 $1288 = $12;
 $1289 = $25;
 $1290 = $26;
 $1291 = $30;
 $1292 = $7;
 $1293 = ((($1292)) + 12|0);
 $1294 = HEAP32[$1293>>2]|0;
 $1295 = $7;
 $1296 = ((($1295)) + 84|0);
 $1297 = $7;
 $1298 = ((($1297)) + 24|0);
 $1299 = HEAP32[$1298>>2]|0;
 $1300 = ($1299|0)>=(4);
 $1301 = $1300&1;
 $1302 = $7;
 $1303 = ((($1302)) + 56|0);
 $1304 = HEAP32[$1303>>2]|0;
 $1305 = $7;
 $1306 = ((($1305)) + 68|0);
 $1307 = HEAP32[$1306>>2]|0;
 _quant_coarse_energy($1282,$1283,$1284,$1285,$699,$1286,$1287,$1281,$1288,$1289,$1290,$1291,$1294,$1296,$1301,$1304,$1307);
 $1308 = $31;
 $1309 = $32;
 $1310 = $23;
 $1311 = $26;
 $1312 = $28;
 $1313 = $12;
 _tf_encode($1308,$1309,$1310,$1226,$1311,$1312,$1313);
 $1314 = $12;
 $1315 = (_ec_tell_50($1314)|0);
 $1316 = (($1315) + 4)|0;
 $1317 = $43;
 $1318 = ($1316|0)<=($1317|0);
 if ($1318) {
  $1319 = $7;
  $1320 = ((($1319)) + 68|0);
  $1321 = HEAP32[$1320>>2]|0;
  $1322 = ($1321|0)!=(0);
  L278: do {
   if ($1322) {
    $1323 = $7;
    $1324 = ((($1323)) + 100|0);
    HEAP32[$1324>>2] = 0;
    $1325 = $7;
    $1326 = ((($1325)) + 80|0);
    HEAP32[$1326>>2] = 2;
   } else {
    $1327 = $22;
    $1328 = ($1327|0)!=(0);
    do {
     if (!($1328)) {
      $1329 = $7;
      $1330 = ((($1329)) + 24|0);
      $1331 = HEAP32[$1330>>2]|0;
      $1332 = ($1331|0)<(3);
      if ($1332) {
       break;
      }
      $1333 = $30;
      $1334 = $25;
      $1335 = ($1334*10)|0;
      $1336 = ($1333|0)<($1335|0);
      $1337 = $31;
      $1338 = ($1337|0)!=(0);
      $or$cond26 = $1336 | $1338;
      if ($or$cond26) {
       break;
      }
      $1345 = $58;
      $1346 = $7;
      $1347 = ((($1346)) + 88|0);
      $1348 = $7;
      $1349 = ((($1348)) + 80|0);
      $1350 = HEAP32[$1349>>2]|0;
      $1351 = $7;
      $1352 = ((($1351)) + 96|0);
      $1353 = $7;
      $1354 = ((($1353)) + 100|0);
      $1355 = $48;
      $1356 = ($1355|0)!=(0);
      if ($1356) {
       $1357 = $22;
       $1358 = ($1357|0)!=(0);
       $1359 = $1358 ^ 1;
       $1361 = $1359;
      } else {
       $1361 = 0;
      }
      $1360 = $1361&1;
      $1362 = $33;
      $1363 = $25;
      $1364 = $27;
      $1365 = (_spreading_decision($1345,$1220,$1347,$1350,$1352,$1354,$1360,$1362,$1363,$1364)|0);
      $1366 = $7;
      $1367 = ((($1366)) + 80|0);
      HEAP32[$1367>>2] = $1365;
      break L278;
     }
    } while(0);
    $1339 = $7;
    $1340 = ((($1339)) + 24|0);
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = ($1341|0)==(0);
    $1343 = $7;
    $1344 = ((($1343)) + 80|0);
    $$sink = $1342 ? 0 : 2;
    HEAP32[$1344>>2] = $$sink;
   }
  } while(0);
  $1368 = $12;
  $1369 = $7;
  $1370 = ((($1369)) + 80|0);
  $1371 = HEAP32[$1370>>2]|0;
  _ec_enc_icdf($1368,$1371,25823,5);
 }
 $1372 = $59;
 $$alloca_mul157 = $1372<<2;
 $1373 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul157)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul157)|0)+15)&-16)|0);;
 $1374 = $59;
 $1375 = $31;
 $1376 = $32;
 $1377 = $25;
 $1378 = $7;
 $1379 = ((($1378)) + 60|0);
 $1380 = HEAP32[$1379>>2]|0;
 $1381 = $58;
 $1382 = ((($1381)) + 56|0);
 $1383 = HEAP32[$1382>>2]|0;
 $1384 = $23;
 $1385 = $7;
 $1386 = ((($1385)) + 44|0);
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = $7;
 $1389 = ((($1388)) + 52|0);
 $1390 = HEAP32[$1389>>2]|0;
 $1391 = $61;
 $1392 = $26;
 $1393 = $40;
 $1394 = $7;
 $1395 = ((($1394)) + 68|0);
 $1396 = HEAP32[$1395>>2]|0;
 $1397 = (+_dynalloc_analysis($699,$711,$1374,$1375,$1376,$1377,$1373,$1380,$1383,$1384,$1387,$1390,$1391,$1392,$1393,$55,$1396,$805));
 $57 = $1397;
 $1398 = $7;
 $1399 = ((($1398)) + 68|0);
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = ($1400|0)!=(0);
 if ($1401) {
  $1402 = $40;
  $1403 = (($1402|0) / 3)&-1;
  $1404 = (8)<($1403|0);
  if ($1404) {
   $1407 = 8;
  } else {
   $1405 = $40;
   $1406 = (($1405|0) / 3)&-1;
   $1407 = $1406;
  }
  HEAP32[$1373>>2] = $1407;
 }
 $1408 = $59;
 $$alloca_mul159 = $1408<<2;
 $1409 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul159)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul159)|0)+15)&-16)|0);;
 $1410 = $58;
 $1411 = $26;
 $1412 = $25;
 _init_caps($1410,$1409,$1411,$1412);
 $41 = 6;
 $1413 = $43;
 $1414 = $1413 << 3;
 $43 = $1414;
 $44 = 0;
 $1415 = $12;
 $1416 = (_ec_tell_frac($1415)|0);
 $46 = $1416;
 $1417 = $31;
 $13 = $1417;
 while(1) {
  $1418 = $13;
  $1419 = $32;
  $1420 = ($1418|0)<($1419|0);
  $1421 = $25;
  if (!($1420)) {
   break;
  }
  $1422 = $61;
  $1423 = $13;
  $1424 = (($1423) + 1)|0;
  $1425 = (($1422) + ($1424<<1)|0);
  $1426 = HEAP16[$1425>>1]|0;
  $1427 = $1426 << 16 >> 16;
  $1428 = $61;
  $1429 = $13;
  $1430 = (($1428) + ($1429<<1)|0);
  $1431 = HEAP16[$1430>>1]|0;
  $1432 = $1431 << 16 >> 16;
  $1433 = (($1427) - ($1432))|0;
  $1434 = Math_imul($1421, $1433)|0;
  $1435 = $26;
  $1436 = $1434 << $1435;
  $91 = $1436;
  $1437 = $91;
  $1438 = $1437 << 3;
  $1439 = $91;
  $1440 = (48)>($1439|0);
  $1441 = $91;
  $1442 = $1440 ? 48 : $1441;
  $1443 = ($1438|0)<($1442|0);
  $1444 = $91;
  if ($1443) {
   $1445 = $1444 << 3;
   $1449 = $1445;
  } else {
   $1446 = (48)>($1444|0);
   $1447 = $91;
   $1448 = $1446 ? 48 : $1447;
   $1449 = $1448;
  }
  $92 = $1449;
  $1450 = $41;
  $93 = $1450;
  $94 = 0;
  $95 = 0;
  while(1) {
   $1451 = $46;
   $1452 = $93;
   $1453 = $1452 << 3;
   $1454 = (($1451) + ($1453))|0;
   $1455 = $43;
   $1456 = $44;
   $1457 = (($1455) - ($1456))|0;
   $1458 = ($1454|0)<($1457|0);
   if (!($1458)) {
    break;
   }
   $1459 = $94;
   $1460 = $13;
   $1461 = (($1409) + ($1460<<2)|0);
   $1462 = HEAP32[$1461>>2]|0;
   $1463 = ($1459|0)<($1462|0);
   if (!($1463)) {
    break;
   }
   $1464 = $95;
   $1465 = $13;
   $1466 = (($1373) + ($1465<<2)|0);
   $1467 = HEAP32[$1466>>2]|0;
   $1468 = ($1464|0)<($1467|0);
   $1469 = $1468&1;
   $96 = $1469;
   $1470 = $12;
   $1471 = $96;
   $1472 = $93;
   _ec_enc_bit_logp($1470,$1471,$1472);
   $1473 = $12;
   $1474 = (_ec_tell_frac($1473)|0);
   $46 = $1474;
   $1475 = $96;
   $1476 = ($1475|0)!=(0);
   if (!($1476)) {
    break;
   }
   $1477 = $92;
   $1478 = $94;
   $1479 = (($1478) + ($1477))|0;
   $94 = $1479;
   $1480 = $92;
   $1481 = $44;
   $1482 = (($1481) + ($1480))|0;
   $44 = $1482;
   $93 = 1;
   $1483 = $95;
   $1484 = (($1483) + 1)|0;
   $95 = $1484;
  }
  $1485 = $95;
  $1486 = ($1485|0)!=(0);
  if ($1486) {
   $1487 = $41;
   $1488 = (($1487) - 1)|0;
   $1489 = (2)>($1488|0);
   $1490 = $41;
   $1491 = (($1490) - 1)|0;
   $1492 = $1489 ? 2 : $1491;
   $41 = $1492;
  }
  $1493 = $94;
  $1494 = $13;
  $1495 = (($1373) + ($1494<<2)|0);
  HEAP32[$1495>>2] = $1493;
  $1496 = $13;
  $1497 = (($1496) + 1)|0;
  $13 = $1497;
 }
 $1498 = ($1421|0)==(2);
 if ($1498) {
  $1499 = $26;
  $1500 = ($1499|0)!=(0);
  if ($1500) {
   $1501 = $58;
   $1502 = $26;
   $1503 = $15;
   $1504 = (_stereo_analysis($1501,$1220,$1502,$1503)|0);
   HEAP32[$39>>2] = $1504;
  }
  $1505 = $68;
  $1506 = (($1505|0) / 1000)&-1;
  $1507 = (+($1506|0));
  $1508 = $7;
  $1509 = ((($1508)) + 188|0);
  $1510 = HEAP32[$1509>>2]|0;
  $1511 = (_hysteresis_decision($1507,4384,4468,21,$1510)|0);
  $1512 = $7;
  $1513 = ((($1512)) + 188|0);
  HEAP32[$1513>>2] = $1511;
  $1514 = $32;
  $1515 = $31;
  $1516 = $7;
  $1517 = ((($1516)) + 188|0);
  $1518 = HEAP32[$1517>>2]|0;
  $1519 = ($1515|0)>($1518|0);
  if ($1519) {
   $1520 = $31;
   $1525 = $1520;
  } else {
   $1521 = $7;
   $1522 = ((($1521)) + 188|0);
   $1523 = HEAP32[$1522>>2]|0;
   $1525 = $1523;
  }
  $1524 = ($1514|0)<($1525|0);
  do {
   if ($1524) {
    $1526 = $32;
    $1538 = $1526;
   } else {
    $1527 = $31;
    $1528 = $7;
    $1529 = ((($1528)) + 188|0);
    $1530 = HEAP32[$1529>>2]|0;
    $1531 = ($1527|0)>($1530|0);
    if ($1531) {
     $1532 = $31;
     $1538 = $1532;
     break;
    } else {
     $1533 = $7;
     $1534 = ((($1533)) + 188|0);
     $1535 = HEAP32[$1534>>2]|0;
     $1538 = $1535;
     break;
    }
   }
  } while(0);
  $1536 = $7;
  $1537 = ((($1536)) + 188|0);
  HEAP32[$1537>>2] = $1538;
 }
 $36 = 5;
 $1539 = $46;
 $1540 = (($1539) + 48)|0;
 $1541 = $43;
 $1542 = $44;
 $1543 = (($1541) - ($1542))|0;
 $1544 = ($1540|0)<=($1543|0);
 if ($1544) {
  $1545 = $7;
  $1546 = ((($1545)) + 68|0);
  $1547 = HEAP32[$1546>>2]|0;
  $1548 = ($1547|0)!=(0);
  if ($1548) {
   $36 = 5;
  } else {
   $1549 = $58;
   $1550 = $32;
   $1551 = $26;
   $1552 = $25;
   $1553 = $15;
   $1554 = $7;
   $1555 = ((($1554)) + 120|0);
   $1556 = $7;
   $1557 = ((($1556)) + 184|0);
   $1558 = +HEAPF32[$53>>2];
   $1559 = $7;
   $1560 = ((($1559)) + 188|0);
   $1561 = HEAP32[$1560>>2]|0;
   $1562 = $67;
   $1563 = $7;
   $1564 = ((($1563)) + 72|0);
   $1565 = HEAP32[$1564>>2]|0;
   $1566 = (_alloc_trim_analysis($1549,$1220,$699,$1550,$1551,$1552,$1553,$1555,$1557,$1558,$1561,$1562,$1565)|0);
   $36 = $1566;
  }
  $1567 = $12;
  $1568 = $36;
  _ec_enc_icdf($1567,$1568,25827,7);
  $1569 = $12;
  $1570 = (_ec_tell_frac($1569)|0);
  $46 = $1570;
 }
 $1571 = $42;
 $1572 = ($1571|0)>(0);
 if ($1572) {
  $1573 = $58;
  $1574 = ((($1573)) + 36|0);
  $1575 = HEAP32[$1574>>2]|0;
  $1576 = $26;
  $1577 = (($1575) - ($1576))|0;
  $102 = $1577;
  $1578 = $11;
  $1579 = $26;
  $1580 = (3 - ($1579))|0;
  $1581 = 1275 >> $1580;
  $1582 = ($1578|0)<($1581|0);
  if ($1582) {
   $1583 = $11;
   $1587 = $1583;
  } else {
   $1584 = $26;
   $1585 = (3 - ($1584))|0;
   $1586 = 1275 >> $1585;
   $1587 = $1586;
  }
  $11 = $1587;
  $1588 = $42;
  $1589 = $25;
  $1590 = ($1589*40)|0;
  $1591 = (($1590) + 20)|0;
  $1592 = $1591 << 3;
  $1593 = (($1588) - ($1592))|0;
  $100 = $1593;
  $1594 = $7;
  $1595 = ((($1594)) + 52|0);
  $1596 = HEAP32[$1595>>2]|0;
  $1597 = ($1596|0)!=(0);
  if ($1597) {
   $1598 = $7;
   $1599 = ((($1598)) + 172|0);
   $1600 = HEAP32[$1599>>2]|0;
   $1601 = $102;
   $1602 = $1600 >> $1601;
   $1603 = $100;
   $1604 = (($1603) + ($1602))|0;
   $100 = $1604;
  }
  $1605 = $58;
  $1606 = $7;
  $1607 = ((($1606)) + 120|0);
  $1608 = $100;
  $1609 = $26;
  $1610 = $68;
  $1611 = $7;
  $1612 = ((($1611)) + 92|0);
  $1613 = HEAP32[$1612>>2]|0;
  $1614 = $25;
  $1615 = $7;
  $1616 = ((($1615)) + 188|0);
  $1617 = HEAP32[$1616>>2]|0;
  $1618 = $7;
  $1619 = ((($1618)) + 52|0);
  $1620 = HEAP32[$1619>>2]|0;
  $1621 = $7;
  $1622 = ((($1621)) + 184|0);
  $1623 = +HEAPF32[$1622>>2];
  $1624 = HEAP32[$55>>2]|0;
  $1625 = +HEAPF32[$53>>2];
  $1626 = $54;
  $1627 = $57;
  $1628 = $7;
  $1629 = ((($1628)) + 64|0);
  $1630 = HEAP32[$1629>>2]|0;
  $1631 = $7;
  $1632 = ((($1631)) + 68|0);
  $1633 = HEAP32[$1632>>2]|0;
  $1634 = $7;
  $1635 = ((($1634)) + 192|0);
  $1636 = HEAP32[$1635>>2]|0;
  $1637 = ($1636|0)!=(0|0);
  $1638 = $1637&1;
  $1639 = $65;
  $1640 = $66;
  $1641 = (_compute_vbr($1605,$1607,$1608,$1609,$1610,$1613,$1614,$1617,$1620,$1623,$1624,$1625,$1626,$1627,$1630,$1633,$1638,$1639,$1640)|0);
  $99 = $1641;
  $1642 = $99;
  $1643 = $46;
  $1644 = (($1642) + ($1643))|0;
  $99 = $1644;
  $1645 = $46;
  $1646 = $44;
  $1647 = (($1645) + ($1646))|0;
  $1648 = (($1647) + 64)|0;
  $1649 = (($1648) - 1)|0;
  $1650 = $1649 >> 6;
  $1651 = (($1650) + 2)|0;
  $1652 = $29;
  $1653 = (($1651) - ($1652))|0;
  $101 = $1653;
  $1654 = $99;
  $1655 = (($1654) + 32)|0;
  $1656 = $1655 >> 6;
  $30 = $1656;
  $1657 = $101;
  $1658 = $30;
  $1659 = ($1657|0)>($1658|0);
  $1660 = $101;
  $1661 = $30;
  $1662 = $1659 ? $1660 : $1661;
  $30 = $1662;
  $1663 = $11;
  $1664 = $30;
  $1665 = $29;
  $1666 = (($1664) + ($1665))|0;
  $1667 = ($1663|0)<($1666|0);
  if ($1667) {
   $1668 = $11;
   $1674 = $1668;
  } else {
   $1669 = $30;
   $1670 = $29;
   $1671 = (($1669) + ($1670))|0;
   $1674 = $1671;
  }
  $1672 = $29;
  $1673 = (($1674) - ($1672))|0;
  $30 = $1673;
  $1675 = $99;
  $1676 = $42;
  $1677 = (($1675) - ($1676))|0;
  $98 = $1677;
  $1678 = $30;
  $1679 = $1678 << 6;
  $99 = $1679;
  $1680 = $51;
  $1681 = ($1680|0)!=(0);
  if ($1681) {
   $30 = 2;
   $99 = 128;
   $98 = 0;
  }
  $1682 = $7;
  $1683 = ((($1682)) + 176|0);
  $1684 = HEAP32[$1683>>2]|0;
  $1685 = ($1684|0)<(970);
  if ($1685) {
   $1686 = $7;
   $1687 = ((($1686)) + 176|0);
   $1688 = HEAP32[$1687>>2]|0;
   $1689 = (($1688) + 1)|0;
   HEAP32[$1687>>2] = $1689;
   $1690 = $7;
   $1691 = ((($1690)) + 176|0);
   $1692 = HEAP32[$1691>>2]|0;
   $1693 = (($1692) + 20)|0;
   $1694 = (+($1693|0));
   $1695 = 1.0 / $1694;
   $97 = $1695;
  } else {
   $97 = 0.0010000000474974513;
  }
  $1696 = $7;
  $1697 = ((($1696)) + 52|0);
  $1698 = HEAP32[$1697>>2]|0;
  $1699 = ($1698|0)!=(0);
  if ($1699) {
   $1700 = $99;
   $1701 = $42;
   $1702 = (($1700) - ($1701))|0;
   $1703 = $7;
   $1704 = ((($1703)) + 164|0);
   $1705 = HEAP32[$1704>>2]|0;
   $1706 = (($1705) + ($1702))|0;
   HEAP32[$1704>>2] = $1706;
  }
  $1707 = $7;
  $1708 = ((($1707)) + 52|0);
  $1709 = HEAP32[$1708>>2]|0;
  $1710 = ($1709|0)!=(0);
  if ($1710) {
   $1711 = $97;
   $1712 = $98;
   $1713 = $102;
   $1714 = 1 << $1713;
   $1715 = Math_imul($1712, $1714)|0;
   $1716 = $7;
   $1717 = ((($1716)) + 172|0);
   $1718 = HEAP32[$1717>>2]|0;
   $1719 = (($1715) - ($1718))|0;
   $1720 = $7;
   $1721 = ((($1720)) + 168|0);
   $1722 = HEAP32[$1721>>2]|0;
   $1723 = (($1719) - ($1722))|0;
   $1724 = (+($1723|0));
   $1725 = $1711 * $1724;
   $1726 = (~~(($1725)));
   $1727 = $7;
   $1728 = ((($1727)) + 168|0);
   $1729 = HEAP32[$1728>>2]|0;
   $1730 = (($1729) + ($1726))|0;
   HEAP32[$1728>>2] = $1730;
   $1731 = $7;
   $1732 = ((($1731)) + 168|0);
   $1733 = HEAP32[$1732>>2]|0;
   $1734 = (0 - ($1733))|0;
   $1735 = $7;
   $1736 = ((($1735)) + 172|0);
   HEAP32[$1736>>2] = $1734;
  }
  $1737 = $7;
  $1738 = ((($1737)) + 52|0);
  $1739 = HEAP32[$1738>>2]|0;
  $1740 = ($1739|0)!=(0);
  do {
   if ($1740) {
    $1741 = $7;
    $1742 = ((($1741)) + 164|0);
    $1743 = HEAP32[$1742>>2]|0;
    $1744 = ($1743|0)<(0);
    if (!($1744)) {
     break;
    }
    $1745 = $7;
    $1746 = ((($1745)) + 164|0);
    $1747 = HEAP32[$1746>>2]|0;
    $1748 = (0 - ($1747))|0;
    $1749 = (($1748|0) / 64)&-1;
    $103 = $1749;
    $1750 = $51;
    $1751 = ($1750|0)!=(0);
    $1752 = $103;
    $1753 = $1751 ? 0 : $1752;
    $1754 = $30;
    $1755 = (($1754) + ($1753))|0;
    $30 = $1755;
    $1756 = $7;
    $1757 = ((($1756)) + 164|0);
    HEAP32[$1757>>2] = 0;
   }
  } while(0);
  $1758 = $11;
  $1759 = $30;
  $1760 = $29;
  $1761 = (($1759) + ($1760))|0;
  $1762 = ($1758|0)<($1761|0);
  if ($1762) {
   $1763 = $11;
   $1767 = $1763;
  } else {
   $1764 = $30;
   $1765 = $29;
   $1766 = (($1764) + ($1765))|0;
   $1767 = $1766;
  }
  $11 = $1767;
  $1768 = $12;
  $1769 = $11;
  _ec_enc_shrink($1768,$1769);
 }
 $1770 = $59;
 $$alloca_mul161 = $1770<<2;
 $1771 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul161)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul161)|0)+15)&-16)|0);;
 $1772 = $59;
 $$alloca_mul163 = $1772<<2;
 $1773 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul163)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul163)|0)+15)&-16)|0);;
 $1774 = $59;
 $$alloca_mul165 = $1774<<2;
 $1775 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul165)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul165)|0)+15)&-16)|0);;
 $1776 = $11;
 $1777 = $1776<<3;
 $1778 = $1777 << 3;
 $1779 = $12;
 $1780 = (_ec_tell_frac($1779)|0);
 $1781 = (($1778) - ($1780))|0;
 $1782 = (($1781) - 1)|0;
 $16 = $1782;
 $1783 = $23;
 $1784 = ($1783|0)!=(0);
 $1785 = $26;
 $1786 = ($1785|0)>=(2);
 $or$cond29 = $1784 & $1786;
 if ($or$cond29) {
  $1787 = $16;
  $1788 = $26;
  $1789 = (($1788) + 2)|0;
  $1790 = $1789 << 3;
  $1791 = ($1787|0)>=($1790|0);
  $1792 = $1791;
 } else {
  $1792 = 0;
 }
 $1793 = $1792 ? 8 : 0;
 $49 = $1793;
 $1794 = $49;
 $1795 = $16;
 $1796 = (($1795) - ($1794))|0;
 $16 = $1796;
 $1797 = $32;
 $1798 = (($1797) - 1)|0;
 $63 = $1798;
 $1799 = $7;
 $1800 = ((($1799)) + 120|0);
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = ($1801|0)!=(0);
 if ($1802) {
  $1803 = $68;
  $1804 = $25;
  $1805 = ($1804*32000)|0;
  $1806 = ($1803|0)<($1805|0);
  do {
   if ($1806) {
    $104 = 13;
   } else {
    $1807 = $68;
    $1808 = $25;
    $1809 = ($1808*48000)|0;
    $1810 = ($1807|0)<($1809|0);
    if ($1810) {
     $104 = 16;
     break;
    }
    $1811 = $68;
    $1812 = $25;
    $1813 = ($1812*60000)|0;
    $1814 = ($1811|0)<($1813|0);
    if ($1814) {
     $104 = 18;
     break;
    }
    $1815 = $68;
    $1816 = $25;
    $1817 = ($1816*80000)|0;
    $1818 = ($1815|0)<($1817|0);
    if ($1818) {
     $104 = 19;
     break;
    } else {
     $104 = 20;
     break;
    }
   }
  } while(0);
  $1819 = $7;
  $1820 = ((($1819)) + 120|0);
  $1821 = ((($1820)) + 24|0);
  $1822 = HEAP32[$1821>>2]|0;
  $1823 = $104;
  $1824 = ($1822|0)>($1823|0);
  if ($1824) {
   $1825 = $7;
   $1826 = ((($1825)) + 120|0);
   $1827 = ((($1826)) + 24|0);
   $1828 = HEAP32[$1827>>2]|0;
   $1830 = $1828;
  } else {
   $1829 = $104;
   $1830 = $1829;
  }
  $63 = $1830;
 }
 $1831 = $7;
 $1832 = ((($1831)) + 68|0);
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = ($1833|0)!=(0);
 if ($1834) {
  $63 = 1;
 }
 $1835 = $58;
 $1836 = $31;
 $1837 = $32;
 $1838 = $36;
 $1839 = $7;
 $1840 = ((($1839)) + 188|0);
 $1841 = $16;
 $1842 = $25;
 $1843 = $26;
 $1844 = $12;
 $1845 = $7;
 $1846 = ((($1845)) + 92|0);
 $1847 = HEAP32[$1846>>2]|0;
 $1848 = $63;
 $1849 = (_compute_allocation($1835,$1836,$1837,$1373,$1409,$1838,$1840,$39,$1841,$45,$1773,$1771,$1775,$1842,$1843,$1844,1,$1847,$1848)|0);
 $34 = $1849;
 $1850 = $7;
 $1851 = ((($1850)) + 92|0);
 $1852 = HEAP32[$1851>>2]|0;
 $1853 = ($1852|0)!=(0);
 if ($1853) {
  $1854 = $7;
  $1855 = ((($1854)) + 92|0);
  $1856 = HEAP32[$1855>>2]|0;
  $1857 = (($1856) + 1)|0;
  $1858 = $7;
  $1859 = ((($1858)) + 92|0);
  $1860 = HEAP32[$1859>>2]|0;
  $1861 = (($1860) - 1)|0;
  $1862 = $34;
  $1863 = ($1861|0)>($1862|0);
  if ($1863) {
   $1864 = $7;
   $1865 = ((($1864)) + 92|0);
   $1866 = HEAP32[$1865>>2]|0;
   $1867 = (($1866) - 1)|0;
   $1870 = $1867;
  } else {
   $1868 = $34;
   $1870 = $1868;
  }
  $1869 = ($1857|0)<($1870|0);
  $1871 = $7;
  $1872 = ((($1871)) + 92|0);
  $1873 = HEAP32[$1872>>2]|0;
  do {
   if ($1869) {
    $1874 = (($1873) + 1)|0;
    $2120 = $1874;
   } else {
    $1875 = (($1873) - 1)|0;
    $1876 = $34;
    $1877 = ($1875|0)>($1876|0);
    if ($1877) {
     $1878 = $7;
     $1879 = ((($1878)) + 92|0);
     $1880 = HEAP32[$1879>>2]|0;
     $1881 = (($1880) - 1)|0;
     $2120 = $1881;
     break;
    } else {
     $1882 = $34;
     $2120 = $1882;
     break;
    }
   }
  } while(0);
  $1883 = $7;
  $$sink30 = $2120;$$sink32 = $1883;
 } else {
  $1884 = $34;
  $1885 = $7;
  $$sink30 = $1884;$$sink32 = $1885;
 }
 $1886 = ((($$sink32)) + 92|0);
 HEAP32[$1886>>2] = $$sink30;
 $1887 = $58;
 $1888 = $31;
 $1889 = $32;
 $1890 = $19;
 $1891 = $12;
 $1892 = $25;
 _quant_fine_energy($1887,$1888,$1889,$1890,$1281,$1771,$1891,$1892);
 $1893 = $25;
 $1894 = $59;
 $1895 = Math_imul($1893, $1894)|0;
 $$alloca_mul167 = $1895;
 $1896 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul167)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul167)|0)+15)&-16)|0);;
 $1897 = $58;
 $1898 = $31;
 $1899 = $32;
 $1900 = $25;
 $1901 = ($1900|0)==(2);
 $1902 = $15;
 $1903 = (($1220) + ($1902<<2)|0);
 $1904 = $1901 ? $1903 : 0;
 $1905 = $22;
 $1906 = $7;
 $1907 = ((($1906)) + 80|0);
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = HEAP32[$39>>2]|0;
 $1910 = $7;
 $1911 = ((($1910)) + 188|0);
 $1912 = HEAP32[$1911>>2]|0;
 $1913 = $11;
 $1914 = $1913<<6;
 $1915 = $49;
 $1916 = (($1914) - ($1915))|0;
 $1917 = HEAP32[$45>>2]|0;
 $1918 = $12;
 $1919 = $26;
 $1920 = $34;
 $1921 = $7;
 $1922 = ((($1921)) + 76|0);
 $1923 = $7;
 $1924 = ((($1923)) + 72|0);
 $1925 = HEAP32[$1924>>2]|0;
 _quant_all_bands(1,$1897,$1898,$1899,$1220,$1904,$1896,$695,$1773,$1905,$1908,$1909,$1912,$1226,$1916,$1917,$1918,$1919,$1920,$1922,$1925);
 $1926 = $49;
 $1927 = ($1926|0)>(0);
 if ($1927) {
  $1928 = $7;
  $1929 = ((($1928)) + 116|0);
  $1930 = HEAP32[$1929>>2]|0;
  $1931 = ($1930|0)<(2);
  $1932 = $1931&1;
  $50 = $1932;
  $1933 = $12;
  $1934 = $50;
  _ec_enc_bits($1933,$1934,1);
 }
 $1935 = $58;
 $1936 = $31;
 $1937 = $32;
 $1938 = $19;
 $1939 = $11;
 $1940 = $1939<<3;
 $1941 = $12;
 $1942 = (_ec_tell_50($1941)|0);
 $1943 = (($1940) - ($1942))|0;
 $1944 = $12;
 $1945 = $25;
 _quant_energy_finalise($1935,$1936,$1937,$1938,$1281,$1771,$1775,$1943,$1944,$1945);
 $1946 = $51;
 $1947 = ($1946|0)!=(0);
 L417: do {
  if ($1947) {
   $13 = 0;
   while(1) {
    $1948 = $13;
    $1949 = $25;
    $1950 = $59;
    $1951 = Math_imul($1949, $1950)|0;
    $1952 = ($1948|0)<($1951|0);
    if (!($1952)) {
     break L417;
    }
    $1953 = $19;
    $1954 = $13;
    $1955 = (($1953) + ($1954<<2)|0);
    HEAPF32[$1955>>2] = -28.0;
    $1956 = $13;
    $1957 = (($1956) + 1)|0;
    $13 = $1957;
   }
  }
 } while(0);
 $1958 = HEAP32[$37>>2]|0;
 $1959 = $7;
 $1960 = ((($1959)) + 104|0);
 HEAP32[$1960>>2] = $1958;
 $1961 = +HEAPF32[$38>>2];
 $1962 = $7;
 $1963 = ((($1962)) + 108|0);
 HEAPF32[$1963>>2] = $1961;
 $1964 = $47;
 $1965 = $7;
 $1966 = ((($1965)) + 112|0);
 HEAP32[$1966>>2] = $1964;
 $1967 = $24;
 $1968 = ($1967|0)==(2);
 $1969 = $25;
 $1970 = ($1969|0)==(1);
 $or$cond35 = $1968 & $1970;
 if ($or$cond35) {
  $1971 = $19;
  $1972 = $59;
  $1973 = (($1971) + ($1972<<2)|0);
  $1974 = $19;
  $1975 = $59;
  $1976 = $1975<<2;
  $1977 = $19;
  $1978 = $59;
  $1979 = (($1977) + ($1978<<2)|0);
  $1980 = $19;
  $1981 = $1979;
  $1982 = $1980;
  $1983 = (($1981) - ($1982))|0;
  $1984 = (($1983|0) / 4)&-1;
  $1985 = 0;
  $1986 = (($1976) + ($1985))|0;
  _memcpy(($1973|0),($1974|0),($1986|0))|0;
 }
 $1987 = $23;
 $1988 = ($1987|0)!=(0);
 L426: do {
  if ($1988) {
   $13 = 0;
   while(1) {
    $2017 = $13;
    $2018 = $24;
    $2019 = $59;
    $2020 = Math_imul($2018, $2019)|0;
    $2021 = ($2017|0)<($2020|0);
    if (!($2021)) {
     break L426;
    }
    $2022 = $20;
    $2023 = $13;
    $2024 = (($2022) + ($2023<<2)|0);
    $2025 = +HEAPF32[$2024>>2];
    $2026 = $19;
    $2027 = $13;
    $2028 = (($2026) + ($2027<<2)|0);
    $2029 = +HEAPF32[$2028>>2];
    $2030 = $2025 < $2029;
    if ($2030) {
     $2031 = $20;
     $2032 = $13;
     $2033 = (($2031) + ($2032<<2)|0);
     $$sink36 = $2033;
    } else {
     $2034 = $19;
     $2035 = $13;
     $2036 = (($2034) + ($2035<<2)|0);
     $$sink36 = $2036;
    }
    $2037 = +HEAPF32[$$sink36>>2];
    $2038 = $20;
    $2039 = $13;
    $2040 = (($2038) + ($2039<<2)|0);
    HEAPF32[$2040>>2] = $2037;
    $2041 = $13;
    $2042 = (($2041) + 1)|0;
    $13 = $2042;
   }
  } else {
   $1989 = $21;
   $1990 = $20;
   $1991 = $24;
   $1992 = $59;
   $1993 = Math_imul($1991, $1992)|0;
   $1994 = $1993<<2;
   $1995 = $21;
   $1996 = $20;
   $1997 = $1995;
   $1998 = $1996;
   $1999 = (($1997) - ($1998))|0;
   $2000 = (($1999|0) / 4)&-1;
   $2001 = 0;
   $2002 = (($1994) + ($2001))|0;
   _memcpy(($1989|0),($1990|0),($2002|0))|0;
   $2003 = $20;
   $2004 = $19;
   $2005 = $24;
   $2006 = $59;
   $2007 = Math_imul($2005, $2006)|0;
   $2008 = $2007<<2;
   $2009 = $20;
   $2010 = $19;
   $2011 = $2009;
   $2012 = $2010;
   $2013 = (($2011) - ($2012))|0;
   $2014 = (($2013|0) / 4)&-1;
   $2015 = 0;
   $2016 = (($2008) + ($2015))|0;
   _memcpy(($2003|0),($2004|0),($2016|0))|0;
  }
 } while(0);
 $14 = 0;
 while(1) {
  $13 = 0;
  while(1) {
   $2043 = $13;
   $2044 = $31;
   $2045 = ($2043|0)<($2044|0);
   if (!($2045)) {
    break;
   }
   $2046 = $19;
   $2047 = $14;
   $2048 = $59;
   $2049 = Math_imul($2047, $2048)|0;
   $2050 = $13;
   $2051 = (($2049) + ($2050))|0;
   $2052 = (($2046) + ($2051<<2)|0);
   HEAPF32[$2052>>2] = 0.0;
   $2053 = $21;
   $2054 = $14;
   $2055 = $59;
   $2056 = Math_imul($2054, $2055)|0;
   $2057 = $13;
   $2058 = (($2056) + ($2057))|0;
   $2059 = (($2053) + ($2058<<2)|0);
   HEAPF32[$2059>>2] = -28.0;
   $2060 = $20;
   $2061 = $14;
   $2062 = $59;
   $2063 = Math_imul($2061, $2062)|0;
   $2064 = $13;
   $2065 = (($2063) + ($2064))|0;
   $2066 = (($2060) + ($2065<<2)|0);
   HEAPF32[$2066>>2] = -28.0;
   $2067 = $13;
   $2068 = (($2067) + 1)|0;
   $13 = $2068;
  }
  $2069 = $32;
  $13 = $2069;
  while(1) {
   $2070 = $13;
   $2071 = $59;
   $2072 = ($2070|0)<($2071|0);
   if (!($2072)) {
    break;
   }
   $2073 = $19;
   $2074 = $14;
   $2075 = $59;
   $2076 = Math_imul($2074, $2075)|0;
   $2077 = $13;
   $2078 = (($2076) + ($2077))|0;
   $2079 = (($2073) + ($2078<<2)|0);
   HEAPF32[$2079>>2] = 0.0;
   $2080 = $21;
   $2081 = $14;
   $2082 = $59;
   $2083 = Math_imul($2081, $2082)|0;
   $2084 = $13;
   $2085 = (($2083) + ($2084))|0;
   $2086 = (($2080) + ($2085<<2)|0);
   HEAPF32[$2086>>2] = -28.0;
   $2087 = $20;
   $2088 = $14;
   $2089 = $59;
   $2090 = Math_imul($2088, $2089)|0;
   $2091 = $13;
   $2092 = (($2090) + ($2091))|0;
   $2093 = (($2087) + ($2092<<2)|0);
   HEAPF32[$2093>>2] = -28.0;
   $2094 = $13;
   $2095 = (($2094) + 1)|0;
   $13 = $2095;
  }
  $2096 = $14;
  $2097 = (($2096) + 1)|0;
  $14 = $2097;
  $2098 = $24;
  $2099 = ($2097|0)<($2098|0);
  if (!($2099)) {
   break;
  }
 }
 $2100 = $23;
 $2101 = ($2100|0)!=(0);
 $2102 = $64;
 $2103 = ($2102|0)!=(0);
 $or$cond39 = $2101 | $2103;
 $2104 = $7;
 $2105 = ((($2104)) + 116|0);
 if ($or$cond39) {
  $2106 = HEAP32[$2105>>2]|0;
  $2107 = (($2106) + 1)|0;
  $$sink40 = $2107;
 } else {
  $$sink40 = 0;
 }
 HEAP32[$2105>>2] = $$sink40;
 $2108 = $12;
 $2109 = ((($2108)) + 28|0);
 $2110 = HEAP32[$2109>>2]|0;
 $2111 = $7;
 $2112 = ((($2111)) + 76|0);
 HEAP32[$2112>>2] = $2110;
 $2113 = $12;
 _ec_enc_done($2113);
 $2114 = $12;
 $2115 = (_ec_get_error($2114)|0);
 $2116 = ($2115|0)!=(0);
 if ($2116) {
  $6 = -3;
  $105 = 1;
 } else {
  $2117 = $11;
  $6 = $2117;
  $105 = 1;
 }
 $2118 = $73;
 _llvm_stackrestore(($2118|0));
 $2119 = $6;
 STACKTOP = sp;return ($2119|0);
}
function _ec_tell_50($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _celt_maxabs16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 0.0;
 $6 = 0.0;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  $10 = $5;
  if (!($9)) {
   break;
  }
  $11 = $2;
  $12 = $4;
  $13 = (($11) + ($12<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $10 > $14;
  if ($15) {
   $16 = $5;
   $21 = $16;
  } else {
   $17 = $2;
   $18 = $4;
   $19 = (($17) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20;
  }
  $5 = $21;
  $22 = $6;
  $23 = $2;
  $24 = $4;
  $25 = (($23) + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $22 < $26;
  if ($27) {
   $28 = $6;
   $33 = $28;
  } else {
   $29 = $2;
   $30 = $4;
   $31 = (($29) + ($30<<2)|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $32;
  }
  $6 = $33;
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
 }
 $36 = $6;
 $37 = - $36;
 $38 = $10 > $37;
 $39 = $5;
 $40 = $6;
 $41 = - $40;
 $42 = $38 ? $39 : $41;
 STACKTOP = sp;return (+$42);
}
function _run_prefilter($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$alloca_mul = 0, $$alloca_mul24 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $23 = sp + 40|0;
 $25 = sp + 32|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $34 = $11;
 $35 = HEAP32[$34>>2]|0;
 $24 = $35;
 $36 = $24;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $38;
 $39 = $14;
 $40 = $15;
 $41 = (($40) + 1024)|0;
 $42 = Math_imul($39, $41)|0;
 $43 = (_llvm_stacksave()|0);
 $31 = $43;
 $$alloca_mul = $42<<2;
 $44 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 HEAP32[$23>>2] = $44;
 $45 = $15;
 $46 = (($45) + 1024)|0;
 $47 = (($44) + ($46<<2)|0);
 $48 = ((($23)) + 4|0);
 HEAP32[$48>>2] = $47;
 $22 = 0;
 while(1) {
  $49 = $22;
  $50 = (($23) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $13;
  $53 = $22;
  $54 = $53<<10;
  $55 = (($52) + ($54<<2)|0);
  $56 = $22;
  $57 = (($23) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $13;
  $60 = $22;
  $61 = $60<<10;
  $62 = (($59) + ($61<<2)|0);
  $63 = $58;
  $64 = $62;
  $65 = (($63) - ($64))|0;
  $66 = (($65|0) / 4)&-1;
  $67 = 0;
  $68 = (4096 + ($67))|0;
  _memcpy(($51|0),($55|0),($68|0))|0;
  $69 = $22;
  $70 = (($23) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 4096|0);
  $73 = $12;
  $74 = $22;
  $75 = $15;
  $76 = $30;
  $77 = (($75) + ($76))|0;
  $78 = Math_imul($74, $77)|0;
  $79 = (($73) + ($78<<2)|0);
  $80 = $30;
  $81 = (($79) + ($80<<2)|0);
  $82 = $15;
  $83 = $82<<2;
  $84 = $22;
  $85 = (($23) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($86)) + 4096|0);
  $88 = $12;
  $89 = $22;
  $90 = $15;
  $91 = $30;
  $92 = (($90) + ($91))|0;
  $93 = Math_imul($89, $92)|0;
  $94 = (($88) + ($93<<2)|0);
  $95 = $30;
  $96 = (($94) + ($95<<2)|0);
  $97 = $87;
  $98 = $96;
  $99 = (($97) - ($98))|0;
  $100 = (($99|0) / 4)&-1;
  $101 = 0;
  $102 = (($83) + ($101))|0;
  _memcpy(($72|0),($81|0),($102|0))|0;
  $103 = $22;
  $104 = (($103) + 1)|0;
  $22 = $104;
  $105 = $14;
  $106 = ($104|0)<($105|0);
  if (!($106)) {
   break;
  }
 }
 $107 = $20;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $15;
  $110 = (1024 + ($109))|0;
  $111 = $110 >> 1;
  $112 = (_llvm_stacksave()|0);
  $32 = $112;
  $$alloca_mul24 = $111<<2;
  $113 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul24)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul24)|0)+15)&-16)|0);;
  $114 = $15;
  $115 = (1024 + ($114))|0;
  $116 = $14;
  $117 = $11;
  $118 = ((($117)) + 72|0);
  $119 = HEAP32[$118>>2]|0;
  _pitch_downsample($23,$113,$115,$116,$119);
  $120 = ((($113)) + 2048|0);
  $121 = $15;
  $122 = $11;
  $123 = ((($122)) + 72|0);
  $124 = HEAP32[$123>>2]|0;
  _pitch_search($120,$113,$121,979,$25,$124);
  $125 = HEAP32[$25>>2]|0;
  $126 = (1024 - ($125))|0;
  HEAP32[$25>>2] = $126;
  $127 = $15;
  $128 = $11;
  $129 = ((($128)) + 104|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $11;
  $132 = ((($131)) + 108|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $11;
  $135 = ((($134)) + 72|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (+_remove_doubling($113,1024,15,$127,$25,$130,$133,$136));
  $26 = $137;
  $138 = HEAP32[$25>>2]|0;
  $139 = ($138|0)>(1022);
  if ($139) {
   HEAP32[$25>>2] = 1022;
  }
  $140 = $26;
  $141 = 0.69999998807907104 * $140;
  $26 = $141;
  $142 = $11;
  $143 = ((($142)) + 56|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)>(2);
  if ($145) {
   $146 = $26;
   $147 = 0.5 * $146;
   $26 = $147;
  }
  $148 = $11;
  $149 = ((($148)) + 56|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($150|0)>(4);
  if ($151) {
   $152 = $26;
   $153 = 0.5 * $152;
   $26 = $153;
  }
  $154 = $11;
  $155 = ((($154)) + 56|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($156|0)>(8);
  if ($157) {
   $26 = 0.0;
  }
  $158 = $32;
  _llvm_stackrestore(($158|0));
 } else {
  $26 = 0.0;
  HEAP32[$25>>2] = 15;
 }
 $27 = 0.20000000298023224;
 $159 = HEAP32[$25>>2]|0;
 $160 = $11;
 $161 = ((($160)) + 104|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($159) - ($162))|0;
 $164 = (Math_abs(($163|0))|0);
 $165 = ($164*10)|0;
 $166 = HEAP32[$25>>2]|0;
 $167 = ($165|0)>($166|0);
 if ($167) {
  $168 = $27;
  $169 = $168 + 0.20000000298023224;
  $27 = $169;
 }
 $170 = $21;
 $171 = ($170|0)<(25);
 if ($171) {
  $172 = $27;
  $173 = $172 + 0.10000000149011612;
  $27 = $173;
 }
 $174 = $21;
 $175 = ($174|0)<(35);
 if ($175) {
  $176 = $27;
  $177 = $176 + 0.10000000149011612;
  $27 = $177;
 }
 $178 = $11;
 $179 = ((($178)) + 108|0);
 $180 = +HEAPF32[$179>>2];
 $181 = $180 > 0.40000000596046448;
 if ($181) {
  $182 = $27;
  $183 = $182 - 0.10000000149011612;
  $27 = $183;
 }
 $184 = $11;
 $185 = ((($184)) + 108|0);
 $186 = +HEAPF32[$185>>2];
 $187 = $186 > 0.55000001192092896;
 if ($187) {
  $188 = $27;
  $189 = $188 - 0.10000000149011612;
  $27 = $189;
 }
 $190 = $27;
 $191 = $190 > 0.20000000298023224;
 $192 = $27;
 $193 = $191 ? $192 : 0.20000000298023224;
 $27 = $193;
 $194 = $26;
 $195 = $27;
 $196 = $194 < $195;
 if ($196) {
  $26 = 0.0;
  $28 = 0;
  $29 = 0;
 } else {
  $197 = $26;
  $198 = $11;
  $199 = ((($198)) + 108|0);
  $200 = +HEAPF32[$199>>2];
  $201 = $197 - $200;
  $202 = $201;
  $203 = (+Math_abs((+$202)));
  $204 = $203;
  $205 = $204 < 0.10000000149011612;
  if ($205) {
   $206 = $11;
   $207 = ((($206)) + 108|0);
   $208 = +HEAPF32[$207>>2];
   $26 = $208;
  }
  $209 = $26;
  $210 = $209 * 32.0;
  $211 = $210 / 3.0;
  $212 = 0.5 + $211;
  $213 = $212;
  $214 = (+Math_floor((+$213)));
  $215 = (~~(($214)));
  $216 = (($215) - 1)|0;
  $29 = $216;
  $217 = $29;
  $218 = (7)<($217|0);
  $219 = $29;
  $220 = $218 ? 7 : $219;
  $221 = (0)>($220|0);
  if ($221) {
   $226 = 0;
  } else {
   $222 = $29;
   $223 = (7)<($222|0);
   $224 = $29;
   $225 = $223 ? 7 : $224;
   $226 = $225;
  }
  $29 = $226;
  $227 = $29;
  $228 = (($227) + 1)|0;
  $229 = (+($228|0));
  $230 = 0.09375 * $229;
  $26 = $230;
  $28 = 1;
 }
 $22 = 0;
 while(1) {
  $231 = $24;
  $232 = ((($231)) + 44|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $30;
  $235 = (($233) - ($234))|0;
  $33 = $235;
  $236 = $11;
  $237 = ((($236)) + 104|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238|0)>(15);
  if ($239) {
   $240 = $11;
   $241 = ((($240)) + 104|0);
   $242 = HEAP32[$241>>2]|0;
   $245 = $242;
  } else {
   $245 = 15;
  }
  $243 = $11;
  $244 = ((($243)) + 104|0);
  HEAP32[$244>>2] = $245;
  $246 = $12;
  $247 = $22;
  $248 = $15;
  $249 = $30;
  $250 = (($248) + ($249))|0;
  $251 = Math_imul($247, $250)|0;
  $252 = (($246) + ($251<<2)|0);
  $253 = $11;
  $254 = ((($253)) + 200|0);
  $255 = $22;
  $256 = $30;
  $257 = Math_imul($255, $256)|0;
  $258 = (($254) + ($257<<2)|0);
  $259 = $30;
  $260 = $259<<2;
  $261 = $12;
  $262 = $22;
  $263 = $15;
  $264 = $30;
  $265 = (($263) + ($264))|0;
  $266 = Math_imul($262, $265)|0;
  $267 = (($261) + ($266<<2)|0);
  $268 = $11;
  $269 = ((($268)) + 200|0);
  $270 = $22;
  $271 = $30;
  $272 = Math_imul($270, $271)|0;
  $273 = (($269) + ($272<<2)|0);
  $274 = $267;
  $275 = $273;
  $276 = (($274) - ($275))|0;
  $277 = (($276|0) / 4)&-1;
  $278 = 0;
  $279 = (($260) + ($278))|0;
  _memcpy(($252|0),($258|0),($279|0))|0;
  $280 = $33;
  $281 = ($280|0)!=(0);
  if ($281) {
   $282 = $12;
   $283 = $22;
   $284 = $15;
   $285 = $30;
   $286 = (($284) + ($285))|0;
   $287 = Math_imul($283, $286)|0;
   $288 = (($282) + ($287<<2)|0);
   $289 = $30;
   $290 = (($288) + ($289<<2)|0);
   $291 = $22;
   $292 = (($23) + ($291<<2)|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 4096|0);
   $295 = $11;
   $296 = ((($295)) + 104|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $11;
   $299 = ((($298)) + 104|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $33;
   $302 = $11;
   $303 = ((($302)) + 108|0);
   $304 = +HEAPF32[$303>>2];
   $305 = - $304;
   $306 = $11;
   $307 = ((($306)) + 108|0);
   $308 = +HEAPF32[$307>>2];
   $309 = - $308;
   $310 = $11;
   $311 = ((($310)) + 112|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = $11;
   $314 = ((($313)) + 112|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = $11;
   $317 = ((($316)) + 72|0);
   $318 = HEAP32[$317>>2]|0;
   _comb_filter($290,$294,$297,$300,$301,$305,$309,$312,$315,0,0,$318);
  }
  $319 = $12;
  $320 = $22;
  $321 = $15;
  $322 = $30;
  $323 = (($321) + ($322))|0;
  $324 = Math_imul($320, $323)|0;
  $325 = (($319) + ($324<<2)|0);
  $326 = $30;
  $327 = (($325) + ($326<<2)|0);
  $328 = $33;
  $329 = (($327) + ($328<<2)|0);
  $330 = $22;
  $331 = (($23) + ($330<<2)|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = ((($332)) + 4096|0);
  $334 = $33;
  $335 = (($333) + ($334<<2)|0);
  $336 = $11;
  $337 = ((($336)) + 104|0);
  $338 = HEAP32[$337>>2]|0;
  $339 = HEAP32[$25>>2]|0;
  $340 = $15;
  $341 = $33;
  $342 = (($340) - ($341))|0;
  $343 = $11;
  $344 = ((($343)) + 108|0);
  $345 = +HEAPF32[$344>>2];
  $346 = - $345;
  $347 = $26;
  $348 = - $347;
  $349 = $11;
  $350 = ((($349)) + 112|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $16;
  $353 = $24;
  $354 = ((($353)) + 60|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = $30;
  $357 = $11;
  $358 = ((($357)) + 72|0);
  $359 = HEAP32[$358>>2]|0;
  _comb_filter($329,$335,$338,$339,$342,$346,$348,$351,$352,$355,$356,$359);
  $360 = $11;
  $361 = ((($360)) + 200|0);
  $362 = $22;
  $363 = $30;
  $364 = Math_imul($362, $363)|0;
  $365 = (($361) + ($364<<2)|0);
  $366 = $12;
  $367 = $22;
  $368 = $15;
  $369 = $30;
  $370 = (($368) + ($369))|0;
  $371 = Math_imul($367, $370)|0;
  $372 = (($366) + ($371<<2)|0);
  $373 = $15;
  $374 = (($372) + ($373<<2)|0);
  $375 = $30;
  $376 = $375<<2;
  $377 = $11;
  $378 = ((($377)) + 200|0);
  $379 = $22;
  $380 = $30;
  $381 = Math_imul($379, $380)|0;
  $382 = (($378) + ($381<<2)|0);
  $383 = $12;
  $384 = $22;
  $385 = $15;
  $386 = $30;
  $387 = (($385) + ($386))|0;
  $388 = Math_imul($384, $387)|0;
  $389 = (($383) + ($388<<2)|0);
  $390 = $15;
  $391 = (($389) + ($390<<2)|0);
  $392 = $382;
  $393 = $391;
  $394 = (($392) - ($393))|0;
  $395 = (($394|0) / 4)&-1;
  $396 = 0;
  $397 = (($376) + ($396))|0;
  _memcpy(($365|0),($374|0),($397|0))|0;
  $398 = $15;
  $399 = ($398|0)>(1024);
  $400 = $13;
  $401 = $22;
  $402 = $401<<10;
  $403 = (($400) + ($402<<2)|0);
  if ($399) {
   $404 = $22;
   $405 = (($23) + ($404<<2)|0);
   $406 = HEAP32[$405>>2]|0;
   $407 = $15;
   $408 = (($406) + ($407<<2)|0);
   $409 = $13;
   $410 = $22;
   $411 = $410<<10;
   $412 = (($409) + ($411<<2)|0);
   $413 = $22;
   $414 = (($23) + ($413<<2)|0);
   $415 = HEAP32[$414>>2]|0;
   $416 = $15;
   $417 = (($415) + ($416<<2)|0);
   $418 = $412;
   $419 = $417;
   $420 = (($418) - ($419))|0;
   $421 = (($420|0) / 4)&-1;
   $422 = 0;
   $423 = (4096 + ($422))|0;
   _memmove(($403|0),($408|0),($423|0))|0;
  } else {
   $424 = $13;
   $425 = $22;
   $426 = $425<<10;
   $427 = (($424) + ($426<<2)|0);
   $428 = $15;
   $429 = (($427) + ($428<<2)|0);
   $430 = $15;
   $431 = (1024 - ($430))|0;
   $432 = $431<<2;
   $433 = $13;
   $434 = $22;
   $435 = $434<<10;
   $436 = (($433) + ($435<<2)|0);
   $437 = $13;
   $438 = $22;
   $439 = $438<<10;
   $440 = (($437) + ($439<<2)|0);
   $441 = $15;
   $442 = (($440) + ($441<<2)|0);
   $443 = $436;
   $444 = $442;
   $445 = (($443) - ($444))|0;
   $446 = (($445|0) / 4)&-1;
   $447 = 0;
   $448 = (($432) + ($447))|0;
   _memmove(($403|0),($429|0),($448|0))|0;
   $449 = $13;
   $450 = $22;
   $451 = $450<<10;
   $452 = (($449) + ($451<<2)|0);
   $453 = ((($452)) + 4096|0);
   $454 = $15;
   $455 = (0 - ($454))|0;
   $456 = (($453) + ($455<<2)|0);
   $457 = $22;
   $458 = (($23) + ($457<<2)|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = ((($459)) + 4096|0);
   $461 = $15;
   $462 = $461<<2;
   $463 = $13;
   $464 = $22;
   $465 = $464<<10;
   $466 = (($463) + ($465<<2)|0);
   $467 = ((($466)) + 4096|0);
   $468 = $15;
   $469 = (0 - ($468))|0;
   $470 = (($467) + ($469<<2)|0);
   $471 = $22;
   $472 = (($23) + ($471<<2)|0);
   $473 = HEAP32[$472>>2]|0;
   $474 = ((($473)) + 4096|0);
   $475 = $470;
   $476 = $474;
   $477 = (($475) - ($476))|0;
   $478 = (($477|0) / 4)&-1;
   $479 = 0;
   $480 = (($462) + ($479))|0;
   _memmove(($456|0),($460|0),($480|0))|0;
  }
  $481 = $22;
  $482 = (($481) + 1)|0;
  $22 = $482;
  $483 = $14;
  $484 = ($482|0)<($483|0);
  if (!($484)) {
   break;
  }
 }
 $485 = $26;
 $486 = $18;
 HEAPF32[$486>>2] = $485;
 $487 = HEAP32[$25>>2]|0;
 $488 = $17;
 HEAP32[$488>>2] = $487;
 $489 = $29;
 $490 = $19;
 HEAP32[$490>>2] = $489;
 $491 = $28;
 $492 = $31;
 _llvm_stackrestore(($492|0));
 STACKTOP = sp;return ($491|0);
}
function _transient_analysis($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0;
 var $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0;
 var $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0;
 var $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0;
 var $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = 0;
 $14 = 0;
 $27 = $6;
 $28 = (_llvm_stacksave()|0);
 $18 = $28;
 $$alloca_mul = $27<<2;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $30 = $6;
 $31 = (($30|0) / 2)&-1;
 $17 = $31;
 $15 = 0;
 while(1) {
  $32 = $15;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $20 = 0;
  $11 = 0.0;
  $12 = 0.0;
  $10 = 0;
  while(1) {
   $35 = $10;
   $36 = $6;
   $37 = ($35|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = $5;
   $39 = $10;
   $40 = $15;
   $41 = $6;
   $42 = Math_imul($40, $41)|0;
   $43 = (($39) + ($42))|0;
   $44 = (($38) + ($43<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $23 = $45;
   $46 = $11;
   $47 = $23;
   $48 = $46 + $47;
   $24 = $48;
   $49 = $12;
   $50 = $24;
   $51 = $49 + $50;
   $52 = $23;
   $53 = 2.0 * $52;
   $54 = $51 - $53;
   $11 = $54;
   $55 = $23;
   $56 = $24;
   $57 = 0.5 * $56;
   $58 = $55 - $57;
   $12 = $58;
   $59 = $24;
   $60 = $10;
   $61 = (($29) + ($60<<2)|0);
   HEAPF32[$61>>2] = $59;
   $62 = $10;
   $63 = (($62) + 1)|0;
   $10 = $63;
  }
  dest=$29; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $19 = 0.0;
  $11 = 0.0;
  $10 = 0;
  while(1) {
   $64 = $10;
   $65 = $17;
   $66 = ($64|0)<($65|0);
   if (!($66)) {
    break;
   }
   $67 = $10;
   $68 = $67<<1;
   $69 = (($29) + ($68<<2)|0);
   $70 = +HEAPF32[$69>>2];
   $71 = $10;
   $72 = $71<<1;
   $73 = (($29) + ($72<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $70 * $74;
   $76 = $10;
   $77 = $76<<1;
   $78 = (($77) + 1)|0;
   $79 = (($29) + ($78<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $10;
   $82 = $81<<1;
   $83 = (($82) + 1)|0;
   $84 = (($29) + ($83<<2)|0);
   $85 = +HEAPF32[$84>>2];
   $86 = $80 * $85;
   $87 = $75 + $86;
   $25 = $87;
   $88 = $25;
   $89 = $19;
   $90 = $89 + $88;
   $19 = $90;
   $91 = $11;
   $92 = $25;
   $93 = $11;
   $94 = $92 - $93;
   $95 = 0.0625 * $94;
   $96 = $91 + $95;
   $97 = $10;
   $98 = (($29) + ($97<<2)|0);
   HEAPF32[$98>>2] = $96;
   $99 = $10;
   $100 = (($29) + ($99<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $11 = $101;
   $102 = $10;
   $103 = (($102) + 1)|0;
   $10 = $103;
  }
  $11 = 0.0;
  $22 = 0.0;
  $104 = $17;
  $105 = (($104) - 1)|0;
  $10 = $105;
  while(1) {
   $106 = $10;
   $107 = ($106|0)>=(0);
   if (!($107)) {
    break;
   }
   $108 = $11;
   $109 = $10;
   $110 = (($29) + ($109<<2)|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $11;
   $113 = $111 - $112;
   $114 = 0.125 * $113;
   $115 = $108 + $114;
   $116 = $10;
   $117 = (($29) + ($116<<2)|0);
   HEAPF32[$117>>2] = $115;
   $118 = $10;
   $119 = (($29) + ($118<<2)|0);
   $120 = +HEAPF32[$119>>2];
   $11 = $120;
   $121 = $22;
   $122 = $11;
   $123 = $121 > $122;
   $124 = $22;
   $125 = $11;
   $126 = $123 ? $124 : $125;
   $22 = $126;
   $127 = $10;
   $128 = (($127) + -1)|0;
   $10 = $128;
  }
  $129 = $19;
  $130 = $22;
  $131 = $129 * $130;
  $132 = $131;
  $133 = $132 * 0.5;
  $134 = $17;
  $135 = (+($134|0));
  $136 = $133 * $135;
  $137 = (+Math_sqrt((+$136)));
  $138 = $137;
  $19 = $138;
  $139 = $17;
  $140 = (+($139|0));
  $141 = $19;
  $142 = 1.0000000036274937E-15 + $141;
  $143 = $140 / $142;
  $21 = $143;
  $20 = 0;
  $10 = 12;
  while(1) {
   $144 = $10;
   $145 = $17;
   $146 = (($145) - 5)|0;
   $147 = ($144|0)<($146|0);
   if (!($147)) {
    break;
   }
   $148 = $21;
   $149 = 64.0 * $148;
   $150 = $10;
   $151 = (($29) + ($150<<2)|0);
   $152 = +HEAPF32[$151>>2];
   $153 = $152 + 1.0000000036274937E-15;
   $154 = $149 * $153;
   $155 = $154;
   $156 = (+Math_floor((+$155)));
   $157 = 127.0 < $156;
   if ($157) {
    $168 = 127.0;
   } else {
    $158 = $21;
    $159 = 64.0 * $158;
    $160 = $10;
    $161 = (($29) + ($160<<2)|0);
    $162 = +HEAPF32[$161>>2];
    $163 = $162 + 1.0000000036274937E-15;
    $164 = $159 * $163;
    $165 = $164;
    $166 = (+Math_floor((+$165)));
    $168 = $166;
   }
   $167 = 0.0 > $168;
   if ($167) {
    $189 = 0.0;
   } else {
    $169 = $21;
    $170 = 64.0 * $169;
    $171 = $10;
    $172 = (($29) + ($171<<2)|0);
    $173 = +HEAPF32[$172>>2];
    $174 = $173 + 1.0000000036274937E-15;
    $175 = $170 * $174;
    $176 = $175;
    $177 = (+Math_floor((+$176)));
    $178 = 127.0 < $177;
    if ($178) {
     $189 = 127.0;
    } else {
     $179 = $21;
     $180 = 64.0 * $179;
     $181 = $10;
     $182 = (($29) + ($181<<2)|0);
     $183 = +HEAPF32[$182>>2];
     $184 = $183 + 1.0000000036274937E-15;
     $185 = $180 * $184;
     $186 = $185;
     $187 = (+Math_floor((+$186)));
     $189 = $187;
    }
   }
   $188 = (~~(($189)));
   $26 = $188;
   $190 = $26;
   $191 = (25838 + ($190)|0);
   $192 = HEAP8[$191>>0]|0;
   $193 = $192&255;
   $194 = $20;
   $195 = (($194) + ($193))|0;
   $20 = $195;
   $196 = $10;
   $197 = (($196) + 4)|0;
   $10 = $197;
  }
  $198 = $20;
  $199 = $198<<6;
  $200 = $199<<2;
  $201 = $17;
  $202 = (($201) - 17)|0;
  $203 = ($202*6)|0;
  $204 = (($200|0) / ($203|0))&-1;
  $20 = $204;
  $205 = $20;
  $206 = $14;
  $207 = ($205|0)>($206|0);
  if ($207) {
   $208 = $15;
   $209 = $9;
   HEAP32[$209>>2] = $208;
   $210 = $20;
   $14 = $210;
  }
  $211 = $15;
  $212 = (($211) + 1)|0;
  $15 = $212;
 }
 $213 = $14;
 $214 = ($213|0)>(200);
 $215 = $214&1;
 $13 = $215;
 $216 = $14;
 $217 = ($216*27)|0;
 $218 = (+($217|0));
 $219 = (+Math_sqrt((+$218)));
 $220 = $219;
 $221 = $220 - 42.0;
 $222 = 0.0 > $221;
 if ($222) {
  $229 = 0.0;
 } else {
  $223 = $14;
  $224 = ($223*27)|0;
  $225 = (+($224|0));
  $226 = (+Math_sqrt((+$225)));
  $227 = $226;
  $228 = $227 - 42.0;
  $229 = $228;
 }
 $16 = $229;
 $230 = $16;
 $231 = 163.0 < $230;
 $232 = $16;
 $233 = $231 ? 163.0 : $232;
 $234 = 0.0068999999202787876 * $233;
 $235 = $234;
 $236 = $235 - 0.13900000000000001;
 $237 = 0.0 > $236;
 if ($237) {
  $245 = 0.0;
  $246 = (+Math_sqrt((+$245)));
  $247 = $246;
  $248 = $8;
  HEAPF32[$248>>2] = $247;
  $249 = $13;
  $250 = $18;
  _llvm_stackrestore(($250|0));
  STACKTOP = sp;return ($249|0);
 }
 $238 = $16;
 $239 = 163.0 < $238;
 $240 = $16;
 $241 = $239 ? 163.0 : $240;
 $242 = 0.0068999999202787876 * $241;
 $243 = $242;
 $244 = $243 - 0.13900000000000001;
 $245 = $244;
 $246 = (+Math_sqrt((+$245)));
 $247 = $246;
 $248 = $8;
 HEAPF32[$248>>2] = $247;
 $249 = $13;
 $250 = $18;
 _llvm_stackrestore(($250|0));
 STACKTOP = sp;return ($249|0);
}
function _compute_mdcts($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $26 = $9;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $18 = $28;
 $29 = $10;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $10;
  $20 = $31;
  $32 = $9;
  $33 = ((($32)) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $19 = $34;
  $35 = $9;
  $36 = ((($35)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $21 = $37;
 } else {
  $20 = 1;
  $38 = $9;
  $39 = ((($38)) + 44|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $15;
  $42 = $40 << $41;
  $19 = $42;
  $43 = $9;
  $44 = ((($43)) + 36|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $15;
  $47 = (($45) - ($46))|0;
  $21 = $47;
 }
 $24 = 0;
 while(1) {
  $23 = 0;
  while(1) {
   $48 = $23;
   $49 = $20;
   $50 = ($48|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = $9;
   $52 = ((($51)) + 64|0);
   $53 = $11;
   $54 = $24;
   $55 = $20;
   $56 = $19;
   $57 = Math_imul($55, $56)|0;
   $58 = $18;
   $59 = (($57) + ($58))|0;
   $60 = Math_imul($54, $59)|0;
   $61 = (($53) + ($60<<2)|0);
   $62 = $23;
   $63 = $19;
   $64 = Math_imul($62, $63)|0;
   $65 = (($61) + ($64<<2)|0);
   $66 = $12;
   $67 = $23;
   $68 = $24;
   $69 = $19;
   $70 = Math_imul($68, $69)|0;
   $71 = $20;
   $72 = Math_imul($70, $71)|0;
   $73 = (($67) + ($72))|0;
   $74 = (($66) + ($73<<2)|0);
   $75 = $9;
   $76 = ((($75)) + 60|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $18;
   $79 = $21;
   $80 = $20;
   $81 = $17;
   _clt_mdct_forward_c($52,$65,$74,$77,$78,$79,$80,$81);
   $82 = $23;
   $83 = (($82) + 1)|0;
   $23 = $83;
  }
  $84 = $24;
  $85 = (($84) + 1)|0;
  $24 = $85;
  $86 = $14;
  $87 = ($85|0)<($86|0);
  if (!($87)) {
   break;
  }
 }
 $88 = $14;
 $89 = ($88|0)==(2);
 $90 = $13;
 $91 = ($90|0)==(1);
 $or$cond = $89 & $91;
 L12: do {
  if ($or$cond) {
   $22 = 0;
   while(1) {
    $92 = $22;
    $93 = $20;
    $94 = $19;
    $95 = Math_imul($93, $94)|0;
    $96 = ($92|0)<($95|0);
    if (!($96)) {
     break L12;
    }
    $97 = $12;
    $98 = $22;
    $99 = (($97) + ($98<<2)|0);
    $100 = +HEAPF32[$99>>2];
    $101 = 0.5 * $100;
    $102 = $12;
    $103 = $20;
    $104 = $19;
    $105 = Math_imul($103, $104)|0;
    $106 = $22;
    $107 = (($105) + ($106))|0;
    $108 = (($102) + ($107<<2)|0);
    $109 = +HEAPF32[$108>>2];
    $110 = 0.5 * $109;
    $111 = $101 + $110;
    $112 = $12;
    $113 = $22;
    $114 = (($112) + ($113<<2)|0);
    HEAPF32[$114>>2] = $111;
    $115 = $22;
    $116 = (($115) + 1)|0;
    $22 = $116;
   }
  }
 } while(0);
 $117 = $16;
 $118 = ($117|0)!=(1);
 if (!($118)) {
  STACKTOP = sp;return;
 }
 $24 = 0;
 while(1) {
  $119 = $20;
  $120 = $19;
  $121 = Math_imul($119, $120)|0;
  $122 = $16;
  $123 = (($121|0) / ($122|0))&-1;
  $25 = $123;
  $22 = 0;
  while(1) {
   $124 = $22;
   $125 = $25;
   $126 = ($124|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = $16;
   $128 = (+($127|0));
   $129 = $12;
   $130 = $24;
   $131 = $20;
   $132 = Math_imul($130, $131)|0;
   $133 = $19;
   $134 = Math_imul($132, $133)|0;
   $135 = $22;
   $136 = (($134) + ($135))|0;
   $137 = (($129) + ($136<<2)|0);
   $138 = +HEAPF32[$137>>2];
   $139 = $138 * $128;
   HEAPF32[$137>>2] = $139;
   $140 = $22;
   $141 = (($140) + 1)|0;
   $22 = $141;
  }
  $142 = $12;
  $143 = $24;
  $144 = $20;
  $145 = Math_imul($143, $144)|0;
  $146 = $19;
  $147 = Math_imul($145, $146)|0;
  $148 = $25;
  $149 = (($147) + ($148))|0;
  $150 = (($142) + ($149<<2)|0);
  $151 = $20;
  $152 = $19;
  $153 = Math_imul($151, $152)|0;
  $154 = $25;
  $155 = (($153) - ($154))|0;
  $156 = $155<<2;
  _memset(($150|0),0,($156|0))|0;
  $157 = $24;
  $158 = (($157) + 1)|0;
  $24 = $158;
  $159 = $13;
  $160 = ($158|0)<($159|0);
  if (!($160)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _patch_transient_decision($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0;
 var $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $15 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = 0.0;
 $18 = $11;
 $19 = ($18|0)==(1);
 $20 = $7;
 $21 = $9;
 $22 = (($20) + ($21<<2)|0);
 $23 = +HEAPF32[$22>>2];
 L1: do {
  if ($19) {
   $24 = $9;
   $25 = (($15) + ($24<<2)|0);
   HEAPF32[$25>>2] = $23;
   $26 = $9;
   $27 = (($26) + 1)|0;
   $12 = $27;
   while(1) {
    $28 = $12;
    $29 = $10;
    $30 = ($28|0)<($29|0);
    if (!($30)) {
     break L1;
    }
    $31 = $12;
    $32 = (($31) - 1)|0;
    $33 = (($15) + ($32<<2)|0);
    $34 = +HEAPF32[$33>>2];
    $35 = $34 - 1.0;
    $36 = $7;
    $37 = $12;
    $38 = (($36) + ($37<<2)|0);
    $39 = +HEAPF32[$38>>2];
    $40 = $35 > $39;
    if ($40) {
     $41 = $12;
     $42 = (($41) - 1)|0;
     $43 = (($15) + ($42<<2)|0);
     $44 = +HEAPF32[$43>>2];
     $45 = $44 - 1.0;
     $52 = $45;
    } else {
     $46 = $7;
     $47 = $12;
     $48 = (($46) + ($47<<2)|0);
     $49 = +HEAPF32[$48>>2];
     $52 = $49;
    }
    $50 = $12;
    $51 = (($15) + ($50<<2)|0);
    HEAPF32[$51>>2] = $52;
    $53 = $12;
    $54 = (($53) + 1)|0;
    $12 = $54;
   }
  } else {
   $55 = $7;
   $56 = $9;
   $57 = $8;
   $58 = (($56) + ($57))|0;
   $59 = (($55) + ($58<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $23 > $60;
   $62 = $7;
   $63 = $9;
   $64 = $8;
   $65 = (($63) + ($64))|0;
   $$sink1 = $61 ? $63 : $65;
   $66 = (($62) + ($$sink1<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $9;
   $69 = (($15) + ($68<<2)|0);
   HEAPF32[$69>>2] = $67;
   $70 = $9;
   $71 = (($70) + 1)|0;
   $12 = $71;
   while(1) {
    $72 = $12;
    $73 = $10;
    $74 = ($72|0)<($73|0);
    if (!($74)) {
     break L1;
    }
    $75 = $12;
    $76 = (($75) - 1)|0;
    $77 = (($15) + ($76<<2)|0);
    $78 = +HEAPF32[$77>>2];
    $79 = $78 - 1.0;
    $80 = $7;
    $81 = $12;
    $82 = (($80) + ($81<<2)|0);
    $83 = +HEAPF32[$82>>2];
    $84 = $7;
    $85 = $12;
    $86 = $8;
    $87 = (($85) + ($86))|0;
    $88 = (($84) + ($87<<2)|0);
    $89 = +HEAPF32[$88>>2];
    $90 = $83 > $89;
    $91 = $7;
    $92 = $12;
    $93 = $8;
    $94 = (($92) + ($93))|0;
    $$sink2 = $90 ? $92 : $94;
    $95 = (($91) + ($$sink2<<2)|0);
    $96 = +HEAPF32[$95>>2];
    $97 = $79 > $96;
    if ($97) {
     $98 = $12;
     $99 = (($98) - 1)|0;
     $100 = (($15) + ($99<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 - 1.0;
     $122 = $102;
    } else {
     $103 = $7;
     $104 = $12;
     $105 = (($103) + ($104<<2)|0);
     $106 = +HEAPF32[$105>>2];
     $107 = $7;
     $108 = $12;
     $109 = $8;
     $110 = (($108) + ($109))|0;
     $111 = (($107) + ($110<<2)|0);
     $112 = +HEAPF32[$111>>2];
     $113 = $106 > $112;
     $114 = $7;
     $115 = $12;
     $116 = $8;
     $117 = (($115) + ($116))|0;
     $$sink3 = $113 ? $115 : $117;
     $118 = (($114) + ($$sink3<<2)|0);
     $119 = +HEAPF32[$118>>2];
     $122 = $119;
    }
    $120 = $12;
    $121 = (($15) + ($120<<2)|0);
    HEAPF32[$121>>2] = $122;
    $123 = $12;
    $124 = (($123) + 1)|0;
    $12 = $124;
   }
  }
 } while(0);
 $125 = $10;
 $126 = (($125) - 2)|0;
 $12 = $126;
 while(1) {
  $127 = $12;
  $128 = $9;
  $129 = ($127|0)>=($128|0);
  if (!($129)) {
   break;
  }
  $130 = $12;
  $131 = (($15) + ($130<<2)|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $12;
  $134 = (($133) + 1)|0;
  $135 = (($15) + ($134<<2)|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $136 - 1.0;
  $138 = $132 > $137;
  $139 = $12;
  if ($138) {
   $140 = (($15) + ($139<<2)|0);
   $141 = +HEAPF32[$140>>2];
   $148 = $141;
  } else {
   $142 = (($139) + 1)|0;
   $143 = (($15) + ($142<<2)|0);
   $144 = +HEAPF32[$143>>2];
   $145 = $144 - 1.0;
   $148 = $145;
  }
  $146 = $12;
  $147 = (($15) + ($146<<2)|0);
  HEAPF32[$147>>2] = $148;
  $149 = $12;
  $150 = (($149) + -1)|0;
  $12 = $150;
 }
 $13 = 0;
 while(1) {
  $151 = $9;
  $152 = (2)>($151|0);
  $153 = $9;
  $154 = $152 ? 2 : $153;
  $12 = $154;
  while(1) {
   $155 = $12;
   $156 = $10;
   $157 = (($156) - 1)|0;
   $158 = ($155|0)<($157|0);
   if (!($158)) {
    break;
   }
   $159 = $6;
   $160 = $12;
   $161 = $13;
   $162 = $8;
   $163 = Math_imul($161, $162)|0;
   $164 = (($160) + ($163))|0;
   $165 = (($159) + ($164<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = 0.0 > $166;
   if ($167) {
    $176 = 0.0;
   } else {
    $168 = $6;
    $169 = $12;
    $170 = $13;
    $171 = $8;
    $172 = Math_imul($170, $171)|0;
    $173 = (($169) + ($172))|0;
    $174 = (($168) + ($173<<2)|0);
    $175 = +HEAPF32[$174>>2];
    $176 = $175;
   }
   $16 = $176;
   $177 = $12;
   $178 = (($15) + ($177<<2)|0);
   $179 = +HEAPF32[$178>>2];
   $180 = 0.0 > $179;
   if ($180) {
    $184 = 0.0;
   } else {
    $181 = $12;
    $182 = (($15) + ($181<<2)|0);
    $183 = +HEAPF32[$182>>2];
    $184 = $183;
   }
   $17 = $184;
   $185 = $14;
   $186 = $16;
   $187 = $17;
   $188 = $186 - $187;
   $189 = 0.0 > $188;
   if ($189) {
    $194 = 0.0;
   } else {
    $190 = $16;
    $191 = $17;
    $192 = $190 - $191;
    $194 = $192;
   }
   $193 = $185 + $194;
   $14 = $193;
   $195 = $12;
   $196 = (($195) + 1)|0;
   $12 = $196;
  }
  $197 = $13;
  $198 = (($197) + 1)|0;
  $13 = $198;
  $199 = $11;
  $200 = ($198|0)<($199|0);
  if (!($200)) {
   break;
  }
 }
 $201 = $14;
 $202 = $11;
 $203 = $10;
 $204 = (($203) - 1)|0;
 $205 = $9;
 $206 = (2)>($205|0);
 $207 = $9;
 $208 = $206 ? 2 : $207;
 $209 = (($204) - ($208))|0;
 $210 = Math_imul($202, $209)|0;
 $211 = (+($210|0));
 $212 = $201 / $211;
 $14 = $212;
 $213 = $14;
 $214 = $213 > 1.0;
 $215 = $214&1;
 STACKTOP = sp;return ($215|0);
}
function _tf_analysis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 $10 = $10|0;
 var $$alloca_mul = 0, $$alloca_mul46 = 0, $$alloca_mul48 = 0, $$alloca_mul50 = 0, $$alloca_mul52 = 0, $$sink = 0, $$sink11 = 0, $$sink12 = 0, $$sink13 = 0, $$sink3 = 0, $$sink6 = 0, $$sink8 = 0, $$sink9 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0;
 var $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0;
 var $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $26 = sp + 64|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $27 = 0;
 $43 = $20;
 $44 = 0.5 - $43;
 $45 = -0.25 > $44;
 $46 = $20;
 $47 = 0.5 - $46;
 $48 = $45 ? -0.25 : $47;
 $49 = 0.039999999105930328 * $48;
 $28 = $49;
 $50 = $12;
 $51 = (_llvm_stacksave()|0);
 $29 = $51;
 $$alloca_mul = $50<<2;
 $52 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $53 = $11;
 $54 = ((($53)) + 32|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $12;
 $57 = (($55) + ($56<<1)|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = $58 << 16 >> 16;
 $60 = $11;
 $61 = ((($60)) + 32|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $12;
 $64 = (($63) - 1)|0;
 $65 = (($62) + ($64<<1)|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 $68 = (($59) - ($67))|0;
 $69 = $18;
 $70 = $68 << $69;
 $$alloca_mul46 = $70<<2;
 $71 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul46)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul46)|0)+15)&-16)|0);;
 $72 = $11;
 $73 = ((($72)) + 32|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $12;
 $76 = (($74) + ($75<<1)|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = $77 << 16 >> 16;
 $79 = $11;
 $80 = ((($79)) + 32|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $12;
 $83 = (($82) - 1)|0;
 $84 = (($81) + ($83<<1)|0);
 $85 = HEAP16[$84>>1]|0;
 $86 = $85 << 16 >> 16;
 $87 = (($78) - ($86))|0;
 $88 = $18;
 $89 = $87 << $88;
 $$alloca_mul48 = $89<<2;
 $90 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul48)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul48)|0)+15)&-16)|0);;
 $91 = $12;
 $$alloca_mul50 = $91<<2;
 $92 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul50)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul50)|0)+15)&-16)|0);;
 $93 = $12;
 $$alloca_mul52 = $93<<2;
 $94 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul52)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul52)|0)+15)&-16)|0);;
 $95 = $19;
 HEAP32[$95>>2] = 0;
 $22 = 0;
 while(1) {
  $96 = $22;
  $97 = $12;
  $98 = ($96|0)<($97|0);
  if (!($98)) {
   break;
  }
  $35 = 0;
  $99 = $11;
  $100 = ((($99)) + 32|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $22;
  $103 = (($102) + 1)|0;
  $104 = (($101) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105 << 16 >> 16;
  $107 = $11;
  $108 = ((($107)) + 32|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $22;
  $111 = (($109) + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112 << 16 >> 16;
  $114 = (($106) - ($113))|0;
  $115 = $18;
  $116 = $114 << $115;
  $31 = $116;
  $117 = $11;
  $118 = ((($117)) + 32|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $22;
  $121 = (($120) + 1)|0;
  $122 = (($119) + ($121<<1)|0);
  $123 = HEAP16[$122>>1]|0;
  $124 = $123 << 16 >> 16;
  $125 = $11;
  $126 = ((($125)) + 32|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $22;
  $129 = (($127) + ($128<<1)|0);
  $130 = HEAP16[$129>>1]|0;
  $131 = $130 << 16 >> 16;
  $132 = (($124) - ($131))|0;
  $133 = ($132|0)==(1);
  $134 = $133&1;
  $32 = $134;
  $135 = $16;
  $136 = $21;
  $137 = $17;
  $138 = Math_imul($136, $137)|0;
  $139 = $11;
  $140 = ((($139)) + 32|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $22;
  $143 = (($141) + ($142<<1)|0);
  $144 = HEAP16[$143>>1]|0;
  $145 = $144 << 16 >> 16;
  $146 = $18;
  $147 = $145 << $146;
  $148 = (($138) + ($147))|0;
  $149 = (($135) + ($148<<2)|0);
  $150 = $31;
  $151 = $150<<2;
  $152 = $16;
  $153 = $21;
  $154 = $17;
  $155 = Math_imul($153, $154)|0;
  $156 = $11;
  $157 = ((($156)) + 32|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $22;
  $160 = (($158) + ($159<<1)|0);
  $161 = HEAP16[$160>>1]|0;
  $162 = $161 << 16 >> 16;
  $163 = $18;
  $164 = $162 << $163;
  $165 = (($155) + ($164))|0;
  $166 = (($152) + ($165<<2)|0);
  $167 = $71;
  $168 = $166;
  $169 = (($167) - ($168))|0;
  $170 = (($169|0) / 4)&-1;
  $171 = 0;
  $172 = (($151) + ($171))|0;
  _memcpy(($71|0),($149|0),($172|0))|0;
  $173 = $31;
  $174 = $13;
  $175 = ($174|0)!=(0);
  $176 = $18;
  $177 = $175 ? $176 : 0;
  $178 = $28;
  $179 = (+_l1_metric($71,$173,$177,$178));
  $33 = $179;
  $180 = $33;
  $34 = $180;
  $181 = $13;
  $182 = ($181|0)==(0);
  $183 = $32;
  $184 = ($183|0)!=(0);
  $or$cond = $182 | $184;
  if (!($or$cond)) {
   $185 = $31;
   $186 = $185<<2;
   $187 = $90;
   $188 = $71;
   $189 = (($187) - ($188))|0;
   $190 = (($189|0) / 4)&-1;
   $191 = 0;
   $192 = (($186) + ($191))|0;
   _memcpy(($90|0),($71|0),($192|0))|0;
   $193 = $31;
   $194 = $18;
   $195 = $193 >> $194;
   $196 = $18;
   $197 = 1 << $196;
   _haar1($90,$195,$197);
   $198 = $31;
   $199 = $18;
   $200 = (($199) + 1)|0;
   $201 = $28;
   $202 = (+_l1_metric($90,$198,$200,$201));
   $33 = $202;
   $203 = $33;
   $204 = $34;
   $205 = $203 < $204;
   if ($205) {
    $206 = $33;
    $34 = $206;
    $35 = -1;
   }
  }
  $30 = 0;
  while(1) {
   $207 = $30;
   $208 = $18;
   $209 = $13;
   $210 = ($209|0)!=(0);
   $211 = $32;
   $212 = ($211|0)!=(0);
   $213 = $210 ? 1 : $212;
   $214 = $213 ^ 1;
   $215 = $214&1;
   $216 = (($208) + ($215))|0;
   $217 = ($207|0)<($216|0);
   $218 = $13;
   $219 = ($218|0)!=(0);
   if (!($217)) {
    break;
   }
   if ($219) {
    $220 = $18;
    $221 = $30;
    $222 = (($220) - ($221))|0;
    $223 = (($222) - 1)|0;
    $36 = $223;
   } else {
    $224 = $30;
    $225 = (($224) + 1)|0;
    $36 = $225;
   }
   $226 = $31;
   $227 = $30;
   $228 = $226 >> $227;
   $229 = $30;
   $230 = 1 << $229;
   _haar1($71,$228,$230);
   $231 = $31;
   $232 = $36;
   $233 = $28;
   $234 = (+_l1_metric($71,$231,$232,$233));
   $33 = $234;
   $235 = $33;
   $236 = $34;
   $237 = $235 < $236;
   if ($237) {
    $238 = $33;
    $34 = $238;
    $239 = $30;
    $240 = (($239) + 1)|0;
    $35 = $240;
   }
   $241 = $30;
   $242 = (($241) + 1)|0;
   $30 = $242;
  }
  $243 = $35;
  $244 = Math_imul(-2, $243)|0;
  $245 = $22;
  $246 = $243<<1;
  $247 = $22;
  $$sink3 = $219 ? $247 : $245;
  $$sink = $219 ? $246 : $244;
  $248 = (($52) + ($$sink3<<2)|0);
  HEAP32[$248>>2] = $$sink;
  $249 = $13;
  $250 = ($249|0)!=(0);
  $251 = $18;
  $252 = $250 ? $251 : 0;
  $253 = $22;
  $254 = (($52) + ($253<<2)|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = (($255|0) / 2)&-1;
  $257 = (($252) - ($256))|0;
  $258 = $19;
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + ($257))|0;
  HEAP32[$258>>2] = $260;
  $261 = $32;
  $262 = ($261|0)!=(0);
  do {
   if ($262) {
    $263 = $22;
    $264 = (($52) + ($263<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ($265|0)==(0);
    if (!($266)) {
     $267 = $22;
     $268 = (($52) + ($267<<2)|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = $18;
     $271 = Math_imul(-2, $270)|0;
     $272 = ($269|0)==($271|0);
     if (!($272)) {
      break;
     }
    }
    $273 = $22;
    $274 = (($52) + ($273<<2)|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (($275) - 1)|0;
    HEAP32[$274>>2] = $276;
   }
  } while(0);
  $277 = $22;
  $278 = (($277) + 1)|0;
  $22 = $278;
 }
 $27 = 0;
 $25 = 0;
 while(1) {
  $279 = $25;
  $280 = ($279|0)<(2);
  if (!($280)) {
   break;
  }
  $23 = 0;
  $281 = $13;
  $282 = ($281|0)!=(0);
  $283 = $15;
  $284 = $282 ? 0 : $283;
  $24 = $284;
  $22 = 1;
  while(1) {
   $285 = $22;
   $286 = $12;
   $287 = ($285|0)<($286|0);
   $288 = $23;
   $289 = $24;
   if (!($287)) {
    break;
   }
   $290 = $15;
   $291 = (($289) + ($290))|0;
   $292 = ($288|0)<($291|0);
   if ($292) {
    $293 = $23;
    $297 = $293;
   } else {
    $294 = $24;
    $295 = $15;
    $296 = (($294) + ($295))|0;
    $297 = $296;
   }
   $37 = $297;
   $298 = $23;
   $299 = $15;
   $300 = (($298) + ($299))|0;
   $301 = $24;
   $302 = ($300|0)<($301|0);
   if ($302) {
    $303 = $23;
    $304 = $15;
    $305 = (($303) + ($304))|0;
    $307 = $305;
   } else {
    $306 = $24;
    $307 = $306;
   }
   $38 = $307;
   $308 = $37;
   $309 = $22;
   $310 = (($52) + ($309<<2)|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $18;
   $313 = (28967 + ($312<<3)|0);
   $314 = $13;
   $315 = $314<<2;
   $316 = $25;
   $317 = $316<<1;
   $318 = (($315) + ($317))|0;
   $319 = (($318) + 0)|0;
   $320 = (($313) + ($319)|0);
   $321 = HEAP8[$320>>0]|0;
   $322 = $321 << 24 >> 24;
   $323 = $322<<1;
   $324 = (($311) - ($323))|0;
   $325 = (Math_abs(($324|0))|0);
   $326 = (($308) + ($325))|0;
   $23 = $326;
   $327 = $38;
   $328 = $22;
   $329 = (($52) + ($328<<2)|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $18;
   $332 = (28967 + ($331<<3)|0);
   $333 = $13;
   $334 = $333<<2;
   $335 = $25;
   $336 = $335<<1;
   $337 = (($334) + ($336))|0;
   $338 = (($337) + 1)|0;
   $339 = (($332) + ($338)|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340 << 24 >> 24;
   $342 = $341<<1;
   $343 = (($330) - ($342))|0;
   $344 = (Math_abs(($343|0))|0);
   $345 = (($327) + ($344))|0;
   $24 = $345;
   $346 = $22;
   $347 = (($346) + 1)|0;
   $22 = $347;
  }
  $348 = ($288|0)<($289|0);
  $349 = $23;
  $350 = $24;
  $351 = $348 ? $349 : $350;
  $23 = $351;
  $352 = $23;
  $353 = $25;
  $354 = (($26) + ($353<<2)|0);
  HEAP32[$354>>2] = $352;
  $355 = $25;
  $356 = (($355) + 1)|0;
  $25 = $356;
 }
 $357 = ((($26)) + 4|0);
 $358 = HEAP32[$357>>2]|0;
 $359 = HEAP32[$26>>2]|0;
 $360 = ($358|0)<($359|0);
 $361 = $13;
 $362 = ($361|0)!=(0);
 $or$cond5 = $360 & $362;
 if ($or$cond5) {
  $27 = 1;
 }
 $23 = 0;
 $363 = $13;
 $364 = ($363|0)!=(0);
 $365 = $15;
 $366 = $364 ? 0 : $365;
 $24 = $366;
 $22 = 1;
 while(1) {
  $367 = $22;
  $368 = $12;
  $369 = ($367|0)<($368|0);
  $370 = $23;
  if (!($369)) {
   break;
  }
  $41 = $370;
  $371 = $24;
  $372 = $15;
  $373 = (($371) + ($372))|0;
  $42 = $373;
  $374 = $41;
  $375 = $42;
  $376 = ($374|0)<($375|0);
  if ($376) {
   $377 = $41;
   $39 = $377;
   $378 = $22;
   $$sink6 = 0;$$sink8 = $378;
  } else {
   $379 = $42;
   $39 = $379;
   $380 = $22;
   $$sink6 = 1;$$sink8 = $380;
  }
  $381 = (($92) + ($$sink8<<2)|0);
  HEAP32[$381>>2] = $$sink6;
  $382 = $23;
  $383 = $15;
  $384 = (($382) + ($383))|0;
  $41 = $384;
  $385 = $24;
  $42 = $385;
  $386 = $41;
  $387 = $42;
  $388 = ($386|0)<($387|0);
  if ($388) {
   $389 = $41;
   $40 = $389;
   $390 = $22;
   $$sink11 = $390;$$sink9 = 0;
  } else {
   $391 = $42;
   $40 = $391;
   $392 = $22;
   $$sink11 = $392;$$sink9 = 1;
  }
  $393 = (($94) + ($$sink11<<2)|0);
  HEAP32[$393>>2] = $$sink9;
  $394 = $39;
  $395 = $22;
  $396 = (($52) + ($395<<2)|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = $18;
  $399 = (28967 + ($398<<3)|0);
  $400 = $13;
  $401 = $400<<2;
  $402 = $27;
  $403 = $402<<1;
  $404 = (($401) + ($403))|0;
  $405 = (($404) + 0)|0;
  $406 = (($399) + ($405)|0);
  $407 = HEAP8[$406>>0]|0;
  $408 = $407 << 24 >> 24;
  $409 = $408<<1;
  $410 = (($397) - ($409))|0;
  $411 = (Math_abs(($410|0))|0);
  $412 = (($394) + ($411))|0;
  $23 = $412;
  $413 = $40;
  $414 = $22;
  $415 = (($52) + ($414<<2)|0);
  $416 = HEAP32[$415>>2]|0;
  $417 = $18;
  $418 = (28967 + ($417<<3)|0);
  $419 = $13;
  $420 = $419<<2;
  $421 = $27;
  $422 = $421<<1;
  $423 = (($420) + ($422))|0;
  $424 = (($423) + 1)|0;
  $425 = (($418) + ($424)|0);
  $426 = HEAP8[$425>>0]|0;
  $427 = $426 << 24 >> 24;
  $428 = $427<<1;
  $429 = (($416) - ($428))|0;
  $430 = (Math_abs(($429|0))|0);
  $431 = (($413) + ($430))|0;
  $24 = $431;
  $432 = $22;
  $433 = (($432) + 1)|0;
  $22 = $433;
 }
 $434 = $24;
 $435 = ($370|0)<($434|0);
 $436 = $435 ? 0 : 1;
 $437 = $14;
 $438 = $12;
 $439 = (($438) - 1)|0;
 $440 = (($437) + ($439<<2)|0);
 HEAP32[$440>>2] = $436;
 $441 = $12;
 $442 = (($441) - 2)|0;
 $22 = $442;
 while(1) {
  $443 = $22;
  $444 = ($443|0)>=(0);
  if (!($444)) {
   break;
  }
  $445 = $14;
  $446 = $22;
  $447 = (($446) + 1)|0;
  $448 = (($445) + ($447<<2)|0);
  $449 = HEAP32[$448>>2]|0;
  $450 = ($449|0)==(1);
  $451 = $22;
  $452 = (($451) + 1)|0;
  if ($450) {
   $453 = (($94) + ($452<<2)|0);
   $454 = HEAP32[$453>>2]|0;
   $455 = $14;
   $456 = $22;
   $457 = (($455) + ($456<<2)|0);
   $$sink12 = $454;$$sink13 = $457;
  } else {
   $458 = (($92) + ($452<<2)|0);
   $459 = HEAP32[$458>>2]|0;
   $460 = $14;
   $461 = $22;
   $462 = (($460) + ($461<<2)|0);
   $$sink12 = $459;$$sink13 = $462;
  }
  HEAP32[$$sink13>>2] = $$sink12;
  $463 = $22;
  $464 = (($463) + -1)|0;
  $22 = $464;
 }
 $465 = $27;
 $466 = $29;
 _llvm_stackrestore(($466|0));
 STACKTOP = sp;return ($465|0);
}
function _tf_encode($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $21 = $13;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23<<3;
 $19 = $24;
 $25 = $13;
 $26 = (_ec_tell_50($25)|0);
 $20 = $26;
 $27 = $9;
 $28 = ($27|0)!=(0);
 $29 = $28 ? 2 : 4;
 $18 = $29;
 $30 = $11;
 $31 = ($30|0)>(0);
 if ($31) {
  $32 = $20;
  $33 = $18;
  $34 = (($32) + ($33))|0;
  $35 = (($34) + 1)|0;
  $36 = $19;
  $37 = ($35>>>0)<=($36>>>0);
  $39 = $37;
 } else {
  $39 = 0;
 }
 $38 = $39&1;
 $16 = $38;
 $40 = $16;
 $41 = $19;
 $42 = (($41) - ($40))|0;
 $19 = $42;
 $17 = 0;
 $14 = 0;
 $43 = $7;
 $15 = $43;
 while(1) {
  $44 = $15;
  $45 = $8;
  $46 = ($44|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = $20;
  $48 = $18;
  $49 = (($47) + ($48))|0;
  $50 = $19;
  $51 = ($49>>>0)<=($50>>>0);
  if ($51) {
   $52 = $13;
   $53 = $10;
   $54 = $15;
   $55 = (($53) + ($54<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $14;
   $58 = $56 ^ $57;
   $59 = $18;
   _ec_enc_bit_logp($52,$58,$59);
   $60 = $13;
   $61 = (_ec_tell_50($60)|0);
   $20 = $61;
   $62 = $10;
   $63 = $15;
   $64 = (($62) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $14 = $65;
   $66 = $14;
   $67 = $17;
   $68 = $67 | $66;
   $17 = $68;
  } else {
   $69 = $14;
   $70 = $10;
   $71 = $15;
   $72 = (($70) + ($71<<2)|0);
   HEAP32[$72>>2] = $69;
  }
  $73 = $9;
  $74 = ($73|0)!=(0);
  $75 = $74 ? 4 : 5;
  $18 = $75;
  $76 = $15;
  $77 = (($76) + 1)|0;
  $15 = $77;
 }
 $78 = $16;
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = $11;
  $81 = (28967 + ($80<<3)|0);
  $82 = $9;
  $83 = $82<<2;
  $84 = (($83) + 0)|0;
  $85 = $17;
  $86 = (($84) + ($85))|0;
  $87 = (($81) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88 << 24 >> 24;
  $90 = $11;
  $91 = (28967 + ($90<<3)|0);
  $92 = $9;
  $93 = $92<<2;
  $94 = (($93) + 2)|0;
  $95 = $17;
  $96 = (($94) + ($95))|0;
  $97 = (($91) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98 << 24 >> 24;
  $100 = ($89|0)!=($99|0);
  if ($100) {
   $101 = $13;
   $102 = $12;
   _ec_enc_bit_logp($101,$102,1);
  } else {
   label = 12;
  }
 } else {
  label = 12;
 }
 if ((label|0) == 12) {
  $12 = 0;
 }
 $103 = $7;
 $15 = $103;
 while(1) {
  $104 = $15;
  $105 = $8;
  $106 = ($104|0)<($105|0);
  if (!($106)) {
   break;
  }
  $107 = $11;
  $108 = (28967 + ($107<<3)|0);
  $109 = $9;
  $110 = $109<<2;
  $111 = $12;
  $112 = $111<<1;
  $113 = (($110) + ($112))|0;
  $114 = $10;
  $115 = $15;
  $116 = (($114) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($113) + ($117))|0;
  $119 = (($108) + ($118)|0);
  $120 = HEAP8[$119>>0]|0;
  $121 = $120 << 24 >> 24;
  $122 = $10;
  $123 = $15;
  $124 = (($122) + ($123<<2)|0);
  HEAP32[$124>>2] = $121;
  $125 = $15;
  $126 = (($125) + 1)|0;
  $15 = $126;
 }
 STACKTOP = sp;return;
}
function _dynalloc_analysis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 var $$alloca_mul = 0, $$alloca_mul42 = 0, $$sink = 0, $$sink4 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0;
 var $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0.0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0.0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0.0;
 var $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0.0, $390 = 0.0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0.0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0.0;
 var $430 = 0, $431 = 0, $432 = 0.0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0.0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0.0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0, $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0.0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0.0, $598 = 0.0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0.0, $604 = 0.0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0.0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0.0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0.0, $648 = 0.0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0.0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0.0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $70 = 0.0, $700 = 0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond6 = 0, $or$cond6$not = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $18 = $0;
 $19 = $1;
 $20 = $2;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 $29 = $11;
 $30 = $12;
 $31 = $13;
 $32 = $14;
 $33 = $15;
 $34 = $16;
 $35 = $17;
 $38 = 0;
 $49 = $23;
 $50 = $20;
 $51 = Math_imul($49, $50)|0;
 $52 = (_llvm_stacksave()|0);
 $40 = $52;
 $$alloca_mul = $51<<2;
 $53 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $54 = $23;
 $55 = $20;
 $56 = Math_imul($54, $55)|0;
 $$alloca_mul42 = $56<<2;
 $57 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul42)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul42)|0)+15)&-16)|0);;
 $58 = $24;
 $59 = $20;
 $60 = $59<<2;
 _memset(($58|0),0,($60|0))|0;
 $39 = -31.899999618530273;
 $36 = 0;
 while(1) {
  $61 = $36;
  $62 = $22;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $26;
  $65 = $36;
  $66 = (($64) + ($65<<1)|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = (+($67<<16>>16));
  $69 = 0.0625 * $68;
  $70 = $69 + 0.5;
  $71 = $25;
  $72 = (9 - ($71))|0;
  $73 = (+($72|0));
  $74 = $70 + $73;
  $75 = $36;
  $76 = (16504 + ($75<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $74 - $77;
  $79 = $36;
  $80 = (($79) + 5)|0;
  $81 = $36;
  $82 = (($81) + 5)|0;
  $83 = Math_imul($80, $82)|0;
  $84 = (+($83|0));
  $85 = 0.0062000001780688763 * $84;
  $86 = $78 + $85;
  $87 = $36;
  $88 = (($57) + ($87<<2)|0);
  HEAPF32[$88>>2] = $86;
  $89 = $36;
  $90 = (($89) + 1)|0;
  $36 = $90;
 }
 $37 = 0;
 while(1) {
  $36 = 0;
  while(1) {
   $91 = $36;
   $92 = $22;
   $93 = ($91|0)<($92|0);
   if (!($93)) {
    break;
   }
   $94 = $39;
   $95 = $18;
   $96 = $37;
   $97 = $20;
   $98 = Math_imul($96, $97)|0;
   $99 = $36;
   $100 = (($98) + ($99))|0;
   $101 = (($95) + ($100<<2)|0);
   $102 = +HEAPF32[$101>>2];
   $103 = $36;
   $104 = (($57) + ($103<<2)|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $102 - $105;
   $107 = $94 > $106;
   if ($107) {
    $108 = $39;
    $121 = $108;
   } else {
    $109 = $18;
    $110 = $37;
    $111 = $20;
    $112 = Math_imul($110, $111)|0;
    $113 = $36;
    $114 = (($112) + ($113))|0;
    $115 = (($109) + ($114<<2)|0);
    $116 = +HEAPF32[$115>>2];
    $117 = $36;
    $118 = (($57) + ($117<<2)|0);
    $119 = +HEAPF32[$118>>2];
    $120 = $116 - $119;
    $121 = $120;
   }
   $39 = $121;
   $122 = $36;
   $123 = (($122) + 1)|0;
   $36 = $123;
  }
  $124 = $37;
  $125 = (($124) + 1)|0;
  $37 = $125;
  $126 = $23;
  $127 = ($125|0)<($126|0);
  if (!($127)) {
   break;
  }
 }
 $128 = $32;
 $129 = ($128|0)>(50);
 $130 = $31;
 $131 = ($130|0)>=(1);
 $or$cond = $129 & $131;
 $or$cond$not = $or$cond ^ 1;
 $132 = $34;
 $133 = ($132|0)!=(0);
 $or$cond3 = $or$cond$not | $133;
 if ($or$cond3) {
  $697 = $38;
  $698 = $33;
  HEAP32[$698>>2] = $697;
  $699 = $39;
  $700 = $40;
  _llvm_stackrestore(($700|0));
  STACKTOP = sp;return (+$699);
 }
 $41 = 0;
 $37 = 0;
 while(1) {
  $134 = $37;
  $135 = $20;
  $136 = Math_imul($134, $135)|0;
  $137 = (($53) + ($136<<2)|0);
  $44 = $137;
  $138 = $19;
  $139 = $37;
  $140 = $20;
  $141 = Math_imul($139, $140)|0;
  $142 = (($138) + ($141<<2)|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $44;
  HEAPF32[$144>>2] = $143;
  $36 = 1;
  while(1) {
   $145 = $36;
   $146 = $22;
   $147 = ($145|0)<($146|0);
   if (!($147)) {
    break;
   }
   $148 = $19;
   $149 = $37;
   $150 = $20;
   $151 = Math_imul($149, $150)|0;
   $152 = $36;
   $153 = (($151) + ($152))|0;
   $154 = (($148) + ($153<<2)|0);
   $155 = +HEAPF32[$154>>2];
   $156 = $19;
   $157 = $37;
   $158 = $20;
   $159 = Math_imul($157, $158)|0;
   $160 = $36;
   $161 = (($159) + ($160))|0;
   $162 = (($161) - 1)|0;
   $163 = (($156) + ($162<<2)|0);
   $164 = +HEAPF32[$163>>2];
   $165 = $164 + 0.5;
   $166 = $155 > $165;
   if ($166) {
    $167 = $36;
    $41 = $167;
   }
   $168 = $44;
   $169 = $36;
   $170 = (($169) - 1)|0;
   $171 = (($168) + ($170<<2)|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172 + 1.5;
   $174 = $19;
   $175 = $37;
   $176 = $20;
   $177 = Math_imul($175, $176)|0;
   $178 = $36;
   $179 = (($177) + ($178))|0;
   $180 = (($174) + ($179<<2)|0);
   $181 = +HEAPF32[$180>>2];
   $182 = $173 < $181;
   if ($182) {
    $183 = $44;
    $184 = $36;
    $185 = (($184) - 1)|0;
    $186 = (($183) + ($185<<2)|0);
    $187 = +HEAPF32[$186>>2];
    $188 = $187 + 1.5;
    $200 = $188;
   } else {
    $189 = $19;
    $190 = $37;
    $191 = $20;
    $192 = Math_imul($190, $191)|0;
    $193 = $36;
    $194 = (($192) + ($193))|0;
    $195 = (($189) + ($194<<2)|0);
    $196 = +HEAPF32[$195>>2];
    $200 = $196;
   }
   $197 = $44;
   $198 = $36;
   $199 = (($197) + ($198<<2)|0);
   HEAPF32[$199>>2] = $200;
   $201 = $36;
   $202 = (($201) + 1)|0;
   $36 = $202;
  }
  $203 = $41;
  $204 = (($203) - 1)|0;
  $36 = $204;
  while(1) {
   $205 = $36;
   $206 = ($205|0)>=(0);
   if (!($206)) {
    break;
   }
   $207 = $44;
   $208 = $36;
   $209 = (($207) + ($208<<2)|0);
   $210 = +HEAPF32[$209>>2];
   $211 = $44;
   $212 = $36;
   $213 = (($212) + 1)|0;
   $214 = (($211) + ($213<<2)|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $215 + 2.0;
   $217 = $19;
   $218 = $37;
   $219 = $20;
   $220 = Math_imul($218, $219)|0;
   $221 = $36;
   $222 = (($220) + ($221))|0;
   $223 = (($217) + ($222<<2)|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $216 < $224;
   if ($225) {
    $226 = $44;
    $227 = $36;
    $228 = (($227) + 1)|0;
    $229 = (($226) + ($228<<2)|0);
    $230 = +HEAPF32[$229>>2];
    $231 = $230 + 2.0;
    $241 = $231;
   } else {
    $232 = $19;
    $233 = $37;
    $234 = $20;
    $235 = Math_imul($233, $234)|0;
    $236 = $36;
    $237 = (($235) + ($236))|0;
    $238 = (($232) + ($237<<2)|0);
    $239 = +HEAPF32[$238>>2];
    $241 = $239;
   }
   $240 = $210 < $241;
   $242 = $44;
   $243 = $36;
   do {
    if ($240) {
     $244 = (($242) + ($243<<2)|0);
     $245 = +HEAPF32[$244>>2];
     $276 = $245;
    } else {
     $246 = (($243) + 1)|0;
     $247 = (($242) + ($246<<2)|0);
     $248 = +HEAPF32[$247>>2];
     $249 = $248 + 2.0;
     $250 = $19;
     $251 = $37;
     $252 = $20;
     $253 = Math_imul($251, $252)|0;
     $254 = $36;
     $255 = (($253) + ($254))|0;
     $256 = (($250) + ($255<<2)|0);
     $257 = +HEAPF32[$256>>2];
     $258 = $249 < $257;
     if ($258) {
      $259 = $44;
      $260 = $36;
      $261 = (($260) + 1)|0;
      $262 = (($259) + ($261<<2)|0);
      $263 = +HEAPF32[$262>>2];
      $264 = $263 + 2.0;
      $276 = $264;
      break;
     } else {
      $265 = $19;
      $266 = $37;
      $267 = $20;
      $268 = Math_imul($266, $267)|0;
      $269 = $36;
      $270 = (($268) + ($269))|0;
      $271 = (($265) + ($270<<2)|0);
      $272 = +HEAPF32[$271>>2];
      $276 = $272;
      break;
     }
    }
   } while(0);
   $273 = $44;
   $274 = $36;
   $275 = (($273) + ($274<<2)|0);
   HEAPF32[$275>>2] = $276;
   $277 = $36;
   $278 = (($277) + -1)|0;
   $36 = $278;
  }
  $42 = 1.0;
  $36 = 2;
  while(1) {
   $279 = $36;
   $280 = $22;
   $281 = (($280) - 2)|0;
   $282 = ($279|0)<($281|0);
   if (!($282)) {
    break;
   }
   $283 = $44;
   $284 = $36;
   $285 = (($283) + ($284<<2)|0);
   $286 = +HEAPF32[$285>>2];
   $287 = $19;
   $288 = $37;
   $289 = $20;
   $290 = Math_imul($288, $289)|0;
   $291 = $36;
   $292 = (($290) + ($291))|0;
   $293 = (($292) - 2)|0;
   $294 = (($287) + ($293<<2)|0);
   $295 = (+_median_of_5($294));
   $296 = $42;
   $297 = $295 - $296;
   $298 = $286 > $297;
   if ($298) {
    $299 = $44;
    $300 = $36;
    $301 = (($299) + ($300<<2)|0);
    $302 = +HEAPF32[$301>>2];
    $317 = $302;
   } else {
    $303 = $19;
    $304 = $37;
    $305 = $20;
    $306 = Math_imul($304, $305)|0;
    $307 = $36;
    $308 = (($306) + ($307))|0;
    $309 = (($308) - 2)|0;
    $310 = (($303) + ($309<<2)|0);
    $311 = (+_median_of_5($310));
    $312 = $42;
    $313 = $311 - $312;
    $317 = $313;
   }
   $314 = $44;
   $315 = $36;
   $316 = (($314) + ($315<<2)|0);
   HEAPF32[$316>>2] = $317;
   $318 = $36;
   $319 = (($318) + 1)|0;
   $36 = $319;
  }
  $320 = $19;
  $321 = $37;
  $322 = $20;
  $323 = Math_imul($321, $322)|0;
  $324 = (($320) + ($323<<2)|0);
  $325 = (+_median_of_3($324));
  $326 = $42;
  $327 = $325 - $326;
  $43 = $327;
  $328 = $44;
  $329 = +HEAPF32[$328>>2];
  $330 = $43;
  $331 = $329 > $330;
  if ($331) {
   $332 = $44;
   $333 = +HEAPF32[$332>>2];
   $336 = $333;
  } else {
   $334 = $43;
   $336 = $334;
  }
  $335 = $44;
  HEAPF32[$335>>2] = $336;
  $337 = $44;
  $338 = ((($337)) + 4|0);
  $339 = +HEAPF32[$338>>2];
  $340 = $43;
  $341 = $339 > $340;
  if ($341) {
   $342 = $44;
   $343 = ((($342)) + 4|0);
   $344 = +HEAPF32[$343>>2];
   $348 = $344;
  } else {
   $345 = $43;
   $348 = $345;
  }
  $346 = $44;
  $347 = ((($346)) + 4|0);
  HEAPF32[$347>>2] = $348;
  $349 = $19;
  $350 = $37;
  $351 = $20;
  $352 = Math_imul($350, $351)|0;
  $353 = $22;
  $354 = (($352) + ($353))|0;
  $355 = (($354) - 3)|0;
  $356 = (($349) + ($355<<2)|0);
  $357 = (+_median_of_3($356));
  $358 = $42;
  $359 = $357 - $358;
  $43 = $359;
  $360 = $44;
  $361 = $22;
  $362 = (($361) - 2)|0;
  $363 = (($360) + ($362<<2)|0);
  $364 = +HEAPF32[$363>>2];
  $365 = $43;
  $366 = $364 > $365;
  if ($366) {
   $367 = $44;
   $368 = $22;
   $369 = (($368) - 2)|0;
   $370 = (($367) + ($369<<2)|0);
   $371 = +HEAPF32[$370>>2];
   $377 = $371;
  } else {
   $372 = $43;
   $377 = $372;
  }
  $373 = $44;
  $374 = $22;
  $375 = (($374) - 2)|0;
  $376 = (($373) + ($375<<2)|0);
  HEAPF32[$376>>2] = $377;
  $378 = $44;
  $379 = $22;
  $380 = (($379) - 1)|0;
  $381 = (($378) + ($380<<2)|0);
  $382 = +HEAPF32[$381>>2];
  $383 = $43;
  $384 = $382 > $383;
  if ($384) {
   $385 = $44;
   $386 = $22;
   $387 = (($386) - 1)|0;
   $388 = (($385) + ($387<<2)|0);
   $389 = +HEAPF32[$388>>2];
   $395 = $389;
  } else {
   $390 = $43;
   $395 = $390;
  }
  $391 = $44;
  $392 = $22;
  $393 = (($392) - 1)|0;
  $394 = (($391) + ($393<<2)|0);
  HEAPF32[$394>>2] = $395;
  $36 = 0;
  while(1) {
   $396 = $36;
   $397 = $22;
   $398 = ($396|0)<($397|0);
   if (!($398)) {
    break;
   }
   $399 = $44;
   $400 = $36;
   $401 = (($399) + ($400<<2)|0);
   $402 = +HEAPF32[$401>>2];
   $403 = $36;
   $404 = (($57) + ($403<<2)|0);
   $405 = +HEAPF32[$404>>2];
   $406 = $402 > $405;
   if ($406) {
    $407 = $44;
    $408 = $36;
    $409 = (($407) + ($408<<2)|0);
    $$sink = $409;
   } else {
    $410 = $36;
    $411 = (($57) + ($410<<2)|0);
    $$sink = $411;
   }
   $412 = +HEAPF32[$$sink>>2];
   $413 = $44;
   $414 = $36;
   $415 = (($413) + ($414<<2)|0);
   HEAPF32[$415>>2] = $412;
   $416 = $36;
   $417 = (($416) + 1)|0;
   $36 = $417;
  }
  $418 = $37;
  $419 = (($418) + 1)|0;
  $37 = $419;
  $420 = $23;
  $421 = ($419|0)<($420|0);
  if (!($421)) {
   break;
  }
 }
 $422 = $23;
 $423 = ($422|0)==(2);
 $424 = $21;
 $36 = $424;
 L80: do {
  if ($423) {
   while(1) {
    $425 = $36;
    $426 = $22;
    $427 = ($425|0)<($426|0);
    if (!($427)) {
     break L80;
    }
    $428 = $20;
    $429 = $36;
    $430 = (($428) + ($429))|0;
    $431 = (($53) + ($430<<2)|0);
    $432 = +HEAPF32[$431>>2];
    $433 = $36;
    $434 = (($53) + ($433<<2)|0);
    $435 = +HEAPF32[$434>>2];
    $436 = $435 - 4.0;
    $437 = $432 > $436;
    if ($437) {
     $438 = $20;
     $439 = $36;
     $440 = (($438) + ($439))|0;
     $441 = (($53) + ($440<<2)|0);
     $442 = +HEAPF32[$441>>2];
     $451 = $442;
    } else {
     $443 = $36;
     $444 = (($53) + ($443<<2)|0);
     $445 = +HEAPF32[$444>>2];
     $446 = $445 - 4.0;
     $451 = $446;
    }
    $447 = $20;
    $448 = $36;
    $449 = (($447) + ($448))|0;
    $450 = (($53) + ($449<<2)|0);
    HEAPF32[$450>>2] = $451;
    $452 = $36;
    $453 = (($53) + ($452<<2)|0);
    $454 = +HEAPF32[$453>>2];
    $455 = $20;
    $456 = $36;
    $457 = (($455) + ($456))|0;
    $458 = (($53) + ($457<<2)|0);
    $459 = +HEAPF32[$458>>2];
    $460 = $459 - 4.0;
    $461 = $454 > $460;
    if ($461) {
     $462 = $36;
     $463 = (($53) + ($462<<2)|0);
     $464 = +HEAPF32[$463>>2];
     $473 = $464;
    } else {
     $465 = $20;
     $466 = $36;
     $467 = (($465) + ($466))|0;
     $468 = (($53) + ($467<<2)|0);
     $469 = +HEAPF32[$468>>2];
     $470 = $469 - 4.0;
     $473 = $470;
    }
    $471 = $36;
    $472 = (($53) + ($471<<2)|0);
    HEAPF32[$472>>2] = $473;
    $474 = $18;
    $475 = $36;
    $476 = (($474) + ($475<<2)|0);
    $477 = +HEAPF32[$476>>2];
    $478 = $36;
    $479 = (($53) + ($478<<2)|0);
    $480 = +HEAPF32[$479>>2];
    $481 = $477 - $480;
    $482 = 0.0 > $481;
    if ($482) {
     $518 = 0.0;
    } else {
     $483 = $18;
     $484 = $36;
     $485 = (($483) + ($484<<2)|0);
     $486 = +HEAPF32[$485>>2];
     $487 = $36;
     $488 = (($53) + ($487<<2)|0);
     $489 = +HEAPF32[$488>>2];
     $490 = $486 - $489;
     $518 = $490;
    }
    $491 = $18;
    $492 = $20;
    $493 = $36;
    $494 = (($492) + ($493))|0;
    $495 = (($491) + ($494<<2)|0);
    $496 = +HEAPF32[$495>>2];
    $497 = $20;
    $498 = $36;
    $499 = (($497) + ($498))|0;
    $500 = (($53) + ($499<<2)|0);
    $501 = +HEAPF32[$500>>2];
    $502 = $496 - $501;
    $503 = 0.0 > $502;
    if ($503) {
     $517 = 0.0;
    } else {
     $504 = $18;
     $505 = $20;
     $506 = $36;
     $507 = (($505) + ($506))|0;
     $508 = (($504) + ($507<<2)|0);
     $509 = +HEAPF32[$508>>2];
     $510 = $20;
     $511 = $36;
     $512 = (($510) + ($511))|0;
     $513 = (($53) + ($512<<2)|0);
     $514 = +HEAPF32[$513>>2];
     $515 = $509 - $514;
     $517 = $515;
    }
    $516 = $518 + $517;
    $519 = 0.5 * $516;
    $520 = $36;
    $521 = (($53) + ($520<<2)|0);
    HEAPF32[$521>>2] = $519;
    $522 = $36;
    $523 = (($522) + 1)|0;
    $36 = $523;
   }
  } else {
   while(1) {
    $524 = $36;
    $525 = $22;
    $526 = ($524|0)<($525|0);
    if (!($526)) {
     break L80;
    }
    $527 = $18;
    $528 = $36;
    $529 = (($527) + ($528<<2)|0);
    $530 = +HEAPF32[$529>>2];
    $531 = $36;
    $532 = (($53) + ($531<<2)|0);
    $533 = +HEAPF32[$532>>2];
    $534 = $530 - $533;
    $535 = 0.0 > $534;
    if ($535) {
     $546 = 0.0;
    } else {
     $536 = $18;
     $537 = $36;
     $538 = (($536) + ($537<<2)|0);
     $539 = +HEAPF32[$538>>2];
     $540 = $36;
     $541 = (($53) + ($540<<2)|0);
     $542 = +HEAPF32[$541>>2];
     $543 = $539 - $542;
     $546 = $543;
    }
    $544 = $36;
    $545 = (($53) + ($544<<2)|0);
    HEAPF32[$545>>2] = $546;
    $547 = $36;
    $548 = (($547) + 1)|0;
    $36 = $548;
   }
  }
 } while(0);
 $549 = $21;
 $36 = $549;
 while(1) {
  $550 = $36;
  $551 = $22;
  $552 = ($550|0)<($551|0);
  if (!($552)) {
   break;
  }
  $553 = $36;
  $554 = (($53) + ($553<<2)|0);
  $555 = +HEAPF32[$554>>2];
  $556 = $35;
  $557 = $36;
  $558 = (($556) + ($557<<2)|0);
  $559 = +HEAPF32[$558>>2];
  $560 = $555 > $559;
  if ($560) {
   $561 = $36;
   $562 = (($53) + ($561<<2)|0);
   $$sink4 = $562;
  } else {
   $563 = $35;
   $564 = $36;
   $565 = (($563) + ($564<<2)|0);
   $$sink4 = $565;
  }
  $566 = +HEAPF32[$$sink4>>2];
  $567 = $36;
  $568 = (($53) + ($567<<2)|0);
  HEAPF32[$568>>2] = $566;
  $569 = $36;
  $570 = (($569) + 1)|0;
  $36 = $570;
 }
 $571 = $28;
 $572 = ($571|0)==(0);
 $573 = $29;
 $574 = ($573|0)!=(0);
 $or$cond6 = $572 | $574;
 $or$cond6$not = $or$cond6 ^ 1;
 $575 = $27;
 $576 = ($575|0)!=(0);
 $or$cond8 = $or$cond6$not | $576;
 L113: do {
  if (!($or$cond8)) {
   $577 = $21;
   $36 = $577;
   while(1) {
    $578 = $36;
    $579 = $22;
    $580 = ($578|0)<($579|0);
    if (!($580)) {
     break L113;
    }
    $581 = $36;
    $582 = (($53) + ($581<<2)|0);
    $583 = +HEAPF32[$582>>2];
    $584 = 0.5 * $583;
    $585 = $36;
    $586 = (($53) + ($585<<2)|0);
    HEAPF32[$586>>2] = $584;
    $587 = $36;
    $588 = (($587) + 1)|0;
    $36 = $588;
   }
  }
 } while(0);
 $589 = $21;
 $36 = $589;
 while(1) {
  $590 = $36;
  $591 = $22;
  $592 = ($590|0)<($591|0);
  if (!($592)) {
   label = 103;
   break;
  }
  $593 = $36;
  $594 = ($593|0)<(8);
  if ($594) {
   $595 = $36;
   $596 = (($53) + ($595<<2)|0);
   $597 = +HEAPF32[$596>>2];
   $598 = $597 * 2.0;
   HEAPF32[$596>>2] = $598;
  }
  $599 = $36;
  $600 = ($599|0)>=(12);
  if ($600) {
   $601 = $36;
   $602 = (($53) + ($601<<2)|0);
   $603 = +HEAPF32[$602>>2];
   $604 = 0.5 * $603;
   $605 = $36;
   $606 = (($53) + ($605<<2)|0);
   HEAPF32[$606>>2] = $604;
  }
  $607 = $36;
  $608 = (($53) + ($607<<2)|0);
  $609 = +HEAPF32[$608>>2];
  $610 = $609 < 4.0;
  if ($610) {
   $611 = $36;
   $612 = (($53) + ($611<<2)|0);
   $613 = +HEAPF32[$612>>2];
   $616 = $613;
  } else {
   $616 = 4.0;
  }
  $614 = $36;
  $615 = (($53) + ($614<<2)|0);
  HEAPF32[$615>>2] = $616;
  $617 = $23;
  $618 = $30;
  $619 = $36;
  $620 = (($619) + 1)|0;
  $621 = (($618) + ($620<<1)|0);
  $622 = HEAP16[$621>>1]|0;
  $623 = $622 << 16 >> 16;
  $624 = $30;
  $625 = $36;
  $626 = (($624) + ($625<<1)|0);
  $627 = HEAP16[$626>>1]|0;
  $628 = $627 << 16 >> 16;
  $629 = (($623) - ($628))|0;
  $630 = Math_imul($617, $629)|0;
  $631 = $31;
  $632 = $630 << $631;
  $45 = $632;
  $633 = $45;
  $634 = ($633|0)<(6);
  do {
   if ($634) {
    $635 = $36;
    $636 = (($53) + ($635<<2)|0);
    $637 = +HEAPF32[$636>>2];
    $638 = (~~(($637)));
    $46 = $638;
    $639 = $46;
    $640 = $45;
    $641 = Math_imul($639, $640)|0;
    $642 = $641 << 3;
    $47 = $642;
   } else {
    $643 = $45;
    $644 = ($643|0)>(48);
    $645 = $36;
    $646 = (($53) + ($645<<2)|0);
    $647 = +HEAPF32[$646>>2];
    if ($644) {
     $648 = $647 * 8.0;
     $649 = (~~(($648)));
     $46 = $649;
     $650 = $46;
     $651 = $45;
     $652 = Math_imul($650, $651)|0;
     $653 = $652 << 3;
     $654 = (($653|0) / 8)&-1;
     $47 = $654;
     break;
    } else {
     $655 = $45;
     $656 = (+($655|0));
     $657 = $647 * $656;
     $658 = $657 / 6.0;
     $659 = (~~(($658)));
     $46 = $659;
     $660 = $46;
     $661 = ($660*6)|0;
     $662 = $661 << 3;
     $47 = $662;
     break;
    }
   }
  } while(0);
  $663 = $28;
  $664 = ($663|0)!=(0);
  if ($664) {
   $665 = $29;
   $666 = ($665|0)==(0);
   $667 = $27;
   $668 = ($667|0)!=(0);
   $or$cond10 = $666 | $668;
   if (!($or$cond10)) {
    label = 100;
   }
  } else {
   label = 100;
  }
  if ((label|0) == 100) {
   label = 0;
   $669 = $38;
   $670 = $47;
   $671 = (($669) + ($670))|0;
   $672 = $671 >> 3;
   $673 = $672 >> 3;
   $674 = $32;
   $675 = (($674|0) / 4)&-1;
   $676 = ($673|0)>($675|0);
   if ($676) {
    break;
   }
  }
  $688 = $46;
  $689 = $24;
  $690 = $36;
  $691 = (($689) + ($690<<2)|0);
  HEAP32[$691>>2] = $688;
  $692 = $47;
  $693 = $38;
  $694 = (($693) + ($692))|0;
  $38 = $694;
  $695 = $36;
  $696 = (($695) + 1)|0;
  $36 = $696;
 }
 if ((label|0) == 103) {
  $697 = $38;
  $698 = $33;
  HEAP32[$698>>2] = $697;
  $699 = $39;
  $700 = $40;
  _llvm_stackrestore(($700|0));
  STACKTOP = sp;return (+$699);
 }
 $677 = $32;
 $678 = (($677|0) / 4)&-1;
 $679 = $678 << 3;
 $680 = $679 << 3;
 $48 = $680;
 $681 = $48;
 $682 = $38;
 $683 = (($681) - ($682))|0;
 $684 = $24;
 $685 = $36;
 $686 = (($684) + ($685<<2)|0);
 HEAP32[$686>>2] = $683;
 $687 = $48;
 $38 = $687;
 $697 = $38;
 $698 = $33;
 HEAP32[$698>>2] = $697;
 $699 = $39;
 $700 = $40;
 _llvm_stackrestore(($700|0));
 STACKTOP = sp;return (+$699);
}
function _stereo_analysis($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $12 = 0, $13 = 0.0;
 var $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0;
 var $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = 1.0000000036274937E-15;
 $11 = 1.0000000036274937E-15;
 $8 = 0;
 while(1) {
  $17 = $8;
  $18 = ($17|0)<(13);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = (($21) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $6;
  $27 = $25 << $26;
  $12 = $27;
  while(1) {
   $28 = $12;
   $29 = $4;
   $30 = ((($29)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $8;
   $33 = (($32) + 1)|0;
   $34 = (($31) + ($33<<1)|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = $6;
   $38 = $36 << $37;
   $39 = ($28|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = $5;
   $41 = $12;
   $42 = (($40) + ($41<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $13 = $43;
   $44 = $5;
   $45 = $7;
   $46 = $12;
   $47 = (($45) + ($46))|0;
   $48 = (($44) + ($47<<2)|0);
   $49 = +HEAPF32[$48>>2];
   $14 = $49;
   $50 = $13;
   $51 = $14;
   $52 = $50 + $51;
   $15 = $52;
   $53 = $13;
   $54 = $14;
   $55 = $53 - $54;
   $16 = $55;
   $56 = $10;
   $57 = $13;
   $58 = $57;
   $59 = (+Math_abs((+$58)));
   $60 = $59;
   $61 = $14;
   $62 = $61;
   $63 = (+Math_abs((+$62)));
   $64 = $63;
   $65 = $60 + $64;
   $66 = $56 + $65;
   $10 = $66;
   $67 = $11;
   $68 = $15;
   $69 = $68;
   $70 = (+Math_abs((+$69)));
   $71 = $70;
   $72 = $16;
   $73 = $72;
   $74 = (+Math_abs((+$73)));
   $75 = $74;
   $76 = $71 + $75;
   $77 = $67 + $76;
   $11 = $77;
   $78 = $12;
   $79 = (($78) + 1)|0;
   $12 = $79;
  }
  $80 = $8;
  $81 = (($80) + 1)|0;
  $8 = $81;
 }
 $82 = $11;
 $83 = 0.70710700750350952 * $82;
 $11 = $83;
 $9 = 13;
 $84 = $6;
 $85 = ($84|0)<=(1);
 if ($85) {
  $86 = $9;
  $87 = (($86) - 8)|0;
  $9 = $87;
 }
 $88 = $4;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($90)) + 26|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = $92 << 16 >> 16;
 $94 = $6;
 $95 = (($94) + 1)|0;
 $96 = $93 << $95;
 $97 = $9;
 $98 = (($96) + ($97))|0;
 $99 = (+($98|0));
 $100 = $11;
 $101 = $99 * $100;
 $102 = $4;
 $103 = ((($102)) + 32|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($104)) + 26|0);
 $106 = HEAP16[$105>>1]|0;
 $107 = $106 << 16 >> 16;
 $108 = $6;
 $109 = (($108) + 1)|0;
 $110 = $107 << $109;
 $111 = (+($110|0));
 $112 = $10;
 $113 = $111 * $112;
 $114 = $101 > $113;
 $115 = $114&1;
 STACKTOP = sp;return ($115|0);
}
function _alloc_trim_analysis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 var $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0;
 var $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0;
 var $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0;
 var $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0;
 var $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0.0;
 var $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0;
 var $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0, $30 = 0.0, $300 = 0.0, $301 = 0;
 var $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0;
 var $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $27 = 0.0;
 $30 = 5.0;
 $37 = $18;
 $38 = ($37|0)==(2);
 if ($38) {
  $33 = 0.0;
  $26 = 0;
  while(1) {
   $39 = $26;
   $40 = ($39|0)<(8);
   if (!($40)) {
    break;
   }
   $41 = $14;
   $42 = $13;
   $43 = ((($42)) + 32|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $26;
   $46 = (($44) + ($45<<1)|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = $17;
   $50 = $48 << $49;
   $51 = (($41) + ($50<<2)|0);
   $52 = $14;
   $53 = $19;
   $54 = $13;
   $55 = ((($54)) + 32|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $26;
   $58 = (($56) + ($57<<1)|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = $59 << 16 >> 16;
   $61 = $17;
   $62 = $60 << $61;
   $63 = (($53) + ($62))|0;
   $64 = (($52) + ($63<<2)|0);
   $65 = $13;
   $66 = ((($65)) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $26;
   $69 = (($68) + 1)|0;
   $70 = (($67) + ($69<<1)|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71 << 16 >> 16;
   $73 = $13;
   $74 = ((($73)) + 32|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $26;
   $77 = (($75) + ($76<<1)|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = $78 << 16 >> 16;
   $80 = (($72) - ($79))|0;
   $81 = $17;
   $82 = $80 << $81;
   $83 = (+_celt_inner_prod_c_51($51,$64,$82));
   $35 = $83;
   $84 = $33;
   $85 = $35;
   $86 = $84 + $85;
   $33 = $86;
   $87 = $26;
   $88 = (($87) + 1)|0;
   $26 = $88;
  }
  $89 = $33;
  $90 = 0.125 * $89;
  $33 = $90;
  $91 = $33;
  $92 = $91;
  $93 = (+Math_abs((+$92)));
  $94 = $93;
  $95 = 1.0 < $94;
  if ($95) {
   $100 = 1.0;
  } else {
   $96 = $33;
   $97 = $96;
   $98 = (+Math_abs((+$97)));
   $99 = $98;
   $100 = $99;
  }
  $33 = $100;
  $101 = $33;
  $34 = $101;
  $26 = 8;
  while(1) {
   $102 = $26;
   $103 = $23;
   $104 = ($102|0)<($103|0);
   if (!($104)) {
    break;
   }
   $105 = $14;
   $106 = $13;
   $107 = ((($106)) + 32|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $26;
   $110 = (($108) + ($109<<1)|0);
   $111 = HEAP16[$110>>1]|0;
   $112 = $111 << 16 >> 16;
   $113 = $17;
   $114 = $112 << $113;
   $115 = (($105) + ($114<<2)|0);
   $116 = $14;
   $117 = $19;
   $118 = $13;
   $119 = ((($118)) + 32|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $26;
   $122 = (($120) + ($121<<1)|0);
   $123 = HEAP16[$122>>1]|0;
   $124 = $123 << 16 >> 16;
   $125 = $17;
   $126 = $124 << $125;
   $127 = (($117) + ($126))|0;
   $128 = (($116) + ($127<<2)|0);
   $129 = $13;
   $130 = ((($129)) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $26;
   $133 = (($132) + 1)|0;
   $134 = (($131) + ($133<<1)|0);
   $135 = HEAP16[$134>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = $13;
   $138 = ((($137)) + 32|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $26;
   $141 = (($139) + ($140<<1)|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = $142 << 16 >> 16;
   $144 = (($136) - ($143))|0;
   $145 = $17;
   $146 = $144 << $145;
   $147 = (+_celt_inner_prod_c_51($115,$128,$146));
   $36 = $147;
   $148 = $34;
   $149 = $36;
   $150 = $149;
   $151 = (+Math_abs((+$150)));
   $152 = $151;
   $153 = $148 < $152;
   if ($153) {
    $154 = $34;
    $159 = $154;
   } else {
    $155 = $36;
    $156 = $155;
    $157 = (+Math_abs((+$156)));
    $158 = $157;
    $159 = $158;
   }
   $34 = $159;
   $160 = $26;
   $161 = (($160) + 1)|0;
   $26 = $161;
  }
  $162 = $34;
  $163 = $162;
  $164 = (+Math_abs((+$163)));
  $165 = $164;
  $166 = 1.0 < $165;
  if ($166) {
   $171 = 1.0;
  } else {
   $167 = $34;
   $168 = $167;
   $169 = (+Math_abs((+$168)));
   $170 = $169;
   $171 = $170;
  }
  $34 = $171;
  $172 = $33;
  $173 = $33;
  $174 = $172 * $173;
  $175 = 1.0010000467300415 - $174;
  $176 = $175;
  $177 = (+Math_log((+$176)));
  $178 = 1.4426950408889634 * $177;
  $179 = $178;
  $31 = $179;
  $180 = $31;
  $181 = 0.5 * $180;
  $182 = $34;
  $183 = $34;
  $184 = $182 * $183;
  $185 = 1.0010000467300415 - $184;
  $186 = $185;
  $187 = (+Math_log((+$186)));
  $188 = 1.4426950408889634 * $187;
  $189 = $188;
  $190 = $181 > $189;
  if ($190) {
   $191 = $31;
   $192 = 0.5 * $191;
   $201 = $192;
  } else {
   $193 = $34;
   $194 = $34;
   $195 = $193 * $194;
   $196 = 1.0010000467300415 - $195;
   $197 = $196;
   $198 = (+Math_log((+$197)));
   $199 = 1.4426950408889634 * $198;
   $200 = $199;
   $201 = $200;
  }
  $32 = $201;
  $202 = $31;
  $203 = 0.75 * $202;
  $204 = -4.0 > $203;
  $205 = $31;
  $206 = 0.75 * $205;
  $207 = $204 ? -4.0 : $206;
  $208 = $30;
  $209 = $208 + $207;
  $30 = $209;
  $210 = $21;
  $211 = +HEAPF32[$210>>2];
  $212 = $211 + 0.25;
  $213 = $32;
  $214 = 0.5 * $213;
  $215 = - $214;
  $216 = $212 < $215;
  if ($216) {
   $217 = $21;
   $218 = +HEAPF32[$217>>2];
   $219 = $218 + 0.25;
   $224 = $219;
  } else {
   $220 = $32;
   $221 = 0.5 * $220;
   $222 = - $221;
   $224 = $222;
  }
  $223 = $21;
  HEAPF32[$223>>2] = $224;
 }
 $28 = 0;
 while(1) {
  $26 = 0;
  while(1) {
   $225 = $26;
   $226 = $16;
   $227 = (($226) - 1)|0;
   $228 = ($225|0)<($227|0);
   if (!($228)) {
    break;
   }
   $229 = $15;
   $230 = $26;
   $231 = $28;
   $232 = $13;
   $233 = ((($232)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = Math_imul($231, $234)|0;
   $236 = (($230) + ($235))|0;
   $237 = (($229) + ($236<<2)|0);
   $238 = +HEAPF32[$237>>2];
   $239 = $26;
   $240 = $239<<1;
   $241 = (2 + ($240))|0;
   $242 = $16;
   $243 = (($241) - ($242))|0;
   $244 = (+($243|0));
   $245 = $238 * $244;
   $246 = $27;
   $247 = $246 + $245;
   $27 = $247;
   $248 = $26;
   $249 = (($248) + 1)|0;
   $26 = $249;
  }
  $250 = $28;
  $251 = (($250) + 1)|0;
  $28 = $251;
  $252 = $18;
  $253 = ($251|0)<($252|0);
  if (!($253)) {
   break;
  }
 }
 $254 = $18;
 $255 = $16;
 $256 = (($255) - 1)|0;
 $257 = Math_imul($254, $256)|0;
 $258 = (+($257|0));
 $259 = $27;
 $260 = $259 / $258;
 $27 = $260;
 $261 = $27;
 $262 = $261 + 1.0;
 $263 = $262 / 6.0;
 $264 = 2.0 < $263;
 if ($264) {
  $269 = 2.0;
 } else {
  $265 = $27;
  $266 = $265 + 1.0;
  $267 = $266 / 6.0;
  $269 = $267;
 }
 $268 = -2.0 > $269;
 if ($268) {
  $279 = -2.0;
 } else {
  $270 = $27;
  $271 = $270 + 1.0;
  $272 = $271 / 6.0;
  $273 = 2.0 < $272;
  if ($273) {
   $279 = 2.0;
  } else {
   $274 = $27;
   $275 = $274 + 1.0;
   $276 = $275 / 6.0;
   $279 = $276;
  }
 }
 $277 = $30;
 $278 = $277 - $279;
 $30 = $278;
 $280 = $24;
 $281 = $30;
 $282 = $281 - $280;
 $30 = $282;
 $283 = $22;
 $284 = 2.0 * $283;
 $285 = $30;
 $286 = $285 - $284;
 $30 = $286;
 $287 = $20;
 $288 = HEAP32[$287>>2]|0;
 $289 = ($288|0)!=(0);
 if ($289) {
  $290 = $20;
  $291 = ((($290)) + 8|0);
  $292 = +HEAPF32[$291>>2];
  $293 = $292 + 0.05000000074505806;
  $294 = 2.0 * $293;
  $295 = 2.0 < $294;
  if ($295) {
   $302 = 2.0;
  } else {
   $296 = $20;
   $297 = ((($296)) + 8|0);
   $298 = +HEAPF32[$297>>2];
   $299 = $298 + 0.05000000074505806;
   $300 = 2.0 * $299;
   $302 = $300;
  }
  $301 = -2.0 > $302;
  if ($301) {
   $316 = -2.0;
  } else {
   $303 = $20;
   $304 = ((($303)) + 8|0);
   $305 = +HEAPF32[$304>>2];
   $306 = $305 + 0.05000000074505806;
   $307 = 2.0 * $306;
   $308 = 2.0 < $307;
   if ($308) {
    $316 = 2.0;
   } else {
    $309 = $20;
    $310 = ((($309)) + 8|0);
    $311 = +HEAPF32[$310>>2];
    $312 = $311 + 0.05000000074505806;
    $313 = 2.0 * $312;
    $316 = $313;
   }
  }
  $314 = $30;
  $315 = $314 - $316;
  $30 = $315;
 }
 $317 = $30;
 $318 = 0.5 + $317;
 $319 = $318;
 $320 = (+Math_floor((+$319)));
 $321 = (~~(($320)));
 $29 = $321;
 $322 = $29;
 $323 = (10)<($322|0);
 $324 = $29;
 $325 = $323 ? 10 : $324;
 $326 = (0)>($325|0);
 if ($326) {
  $331 = 0;
  $29 = $331;
  $332 = $29;
  STACKTOP = sp;return ($332|0);
 }
 $327 = $29;
 $328 = (10)<($327|0);
 $329 = $29;
 $330 = $328 ? 10 : $329;
 $331 = $330;
 $29 = $331;
 $332 = $29;
 STACKTOP = sp;return ($332|0);
}
function _compute_vbr($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = +$9;
 $10 = $10|0;
 $11 = +$11;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = +$17;
 $18 = +$18;
 var $$sink = 0.0, $$sink2 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0;
 var $138 = 0.0, $139 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0;
 var $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $22 = $3;
 $23 = $4;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $14;
 $34 = $15;
 $35 = $16;
 $36 = $17;
 $37 = $18;
 $55 = $19;
 $56 = ((($55)) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $42 = $57;
 $58 = $19;
 $59 = ((($58)) + 32|0);
 $60 = HEAP32[$59>>2]|0;
 $43 = $60;
 $61 = $24;
 $62 = ($61|0)!=(0);
 $63 = $24;
 $64 = $42;
 $65 = $62 ? $63 : $64;
 $40 = $65;
 $66 = $43;
 $67 = $40;
 $68 = (($66) + ($67<<1)|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69 << 16 >> 16;
 $71 = $22;
 $72 = $70 << $71;
 $39 = $72;
 $73 = $25;
 $74 = ($73|0)==(2);
 if ($74) {
  $75 = $43;
  $76 = $26;
  $77 = $40;
  $78 = ($76|0)<($77|0);
  $79 = $26;
  $80 = $40;
  $81 = $78 ? $79 : $80;
  $82 = (($75) + ($81<<1)|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = $22;
  $86 = $84 << $85;
  $87 = $39;
  $88 = (($87) + ($86))|0;
  $39 = $88;
 }
 $89 = $21;
 $38 = $89;
 $90 = $20;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $20;
  $94 = ((($93)) + 16|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $95;
  $97 = $96 < 0.40000000000000002;
  if ($97) {
   $98 = $39;
   $99 = $98 << 3;
   $100 = (+($99|0));
   $101 = $20;
   $102 = ((($101)) + 16|0);
   $103 = +HEAPF32[$102>>2];
   $104 = 0.40000000596046448 - $103;
   $105 = $100 * $104;
   $106 = (~~(($105)));
   $107 = $38;
   $108 = (($107) - ($106))|0;
   $38 = $108;
  }
 }
 $109 = $25;
 $110 = ($109|0)==(2);
 if ($110) {
  $111 = $26;
  $112 = $40;
  $113 = ($111|0)<($112|0);
  $114 = $26;
  $115 = $40;
  $116 = $113 ? $114 : $115;
  $44 = $116;
  $117 = $43;
  $118 = $44;
  $119 = (($117) + ($118<<1)|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = $22;
  $123 = $121 << $122;
  $124 = $44;
  $125 = (($123) - ($124))|0;
  $45 = $125;
  $126 = $45;
  $127 = (+($126|0));
  $128 = 0.80000001192092896 * $127;
  $129 = $39;
  $130 = (+($129|0));
  $131 = $128 / $130;
  $46 = $131;
  $132 = $28;
  $133 = $132 < 1.0;
  $134 = $28;
  $135 = $133 ? $134 : 1.0;
  $28 = $135;
  $136 = $46;
  $137 = $38;
  $138 = (+($137|0));
  $139 = $136 * $138;
  $140 = $28;
  $141 = $140 - 0.10000000149011612;
  $142 = $45;
  $143 = $142 << 3;
  $144 = (+($143|0));
  $145 = $141 * $144;
  $146 = $139 < $145;
  if ($146) {
   $147 = $46;
   $148 = $38;
   $$sink = $147;$$sink2 = $148;
  } else {
   $149 = $28;
   $150 = $149 - 0.10000000149011612;
   $151 = $45;
   $152 = $151 << 3;
   $$sink = $150;$$sink2 = $152;
  }
  $153 = (+($$sink2|0));
  $154 = $$sink * $153;
  $155 = (~~(($154)));
  $156 = $38;
  $157 = (($156) - ($155))|0;
  $38 = $157;
 }
 $158 = $29;
 $159 = $22;
 $160 = 16 << $159;
 $161 = (($158) - ($160))|0;
 $162 = $38;
 $163 = (($162) + ($161))|0;
 $38 = $163;
 $164 = $33;
 $165 = ($164|0)==(5010);
 $166 = $165 ? 0.019999999552965164 : 0.039999999105930328;
 $41 = $166;
 $167 = $30;
 $168 = $41;
 $169 = $167 - $168;
 $170 = $38;
 $171 = (+($170|0));
 $172 = $169 * $171;
 $173 = (~~(($172)));
 $174 = $38;
 $175 = (($174) + ($173))|0;
 $38 = $175;
 $176 = $20;
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)==(0);
 $179 = $34;
 $180 = ($179|0)!=(0);
 $or$cond = $178 | $180;
 if (!($or$cond)) {
  $181 = $20;
  $182 = ((($181)) + 4|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $183 - 0.15000000596046448;
  $185 = 0.0 > $184;
  if ($185) {
   $191 = 0.0;
  } else {
   $186 = $20;
   $187 = ((($186)) + 4|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $188 - 0.15000000596046448;
   $191 = $189;
  }
  $190 = $191 - 0.090000003576278687;
  $48 = $190;
  $192 = $38;
  $193 = $39;
  $194 = $193 << 3;
  $195 = (+($194|0));
  $196 = $195 * 1.2000000476837158;
  $197 = $48;
  $198 = $196 * $197;
  $199 = (~~(($198)));
  $200 = (($192) + ($199))|0;
  $47 = $200;
  $201 = $31;
  $202 = ($201|0)!=(0);
  if ($202) {
   $203 = $39;
   $204 = $203 << 3;
   $205 = (+($204|0));
   $206 = $205 * 0.80000001192092896;
   $207 = (~~(($206)));
   $208 = $47;
   $209 = (($208) + ($207))|0;
   $47 = $209;
  }
  $210 = $47;
  $38 = $210;
 }
 $211 = $35;
 $212 = ($211|0)==(0);
 $213 = $34;
 $214 = ($213|0)!=(0);
 $or$cond5 = $212 | $214;
 if (!($or$cond5)) {
  $215 = $38;
  $216 = $36;
  $217 = $39;
  $218 = $217 << 3;
  $219 = (+($218|0));
  $220 = $216 * $219;
  $221 = (~~(($220)));
  $222 = (($215) + ($221))|0;
  $49 = $222;
  $223 = $38;
  $224 = (($223|0) / 4)&-1;
  $225 = $49;
  $226 = ($224|0)>($225|0);
  if ($226) {
   $227 = $38;
   $228 = (($227|0) / 4)&-1;
   $230 = $228;
  } else {
   $229 = $49;
   $230 = $229;
  }
  $38 = $230;
 }
 $231 = $43;
 $232 = $42;
 $233 = (($232) - 2)|0;
 $234 = (($231) + ($233<<1)|0);
 $235 = HEAP16[$234>>1]|0;
 $236 = $235 << 16 >> 16;
 $237 = $22;
 $238 = $236 << $237;
 $51 = $238;
 $239 = $25;
 $240 = $51;
 $241 = Math_imul($239, $240)|0;
 $242 = $241 << 3;
 $243 = (+($242|0));
 $244 = $32;
 $245 = $243 * $244;
 $246 = (~~(($245)));
 $50 = $246;
 $247 = $50;
 $248 = $38;
 $249 = $248 >> 2;
 $250 = ($247|0)>($249|0);
 $251 = $50;
 $252 = $38;
 $253 = $252 >> 2;
 $254 = $250 ? $251 : $253;
 $50 = $254;
 $255 = $38;
 $256 = $50;
 $257 = ($255|0)<($256|0);
 $258 = $38;
 $259 = $50;
 $260 = $257 ? $258 : $259;
 $38 = $260;
 $261 = $35;
 $262 = ($261|0)==(0);
 $263 = $34;
 $264 = ($263|0)!=(0);
 $or$cond7 = $262 | $264;
 if ($or$cond7) {
  $265 = $27;
  $266 = ($265|0)!=(0);
  $267 = $23;
  $268 = ($267|0)<(64000);
  $or$cond9 = $266 | $268;
  if ($or$cond9) {
   $269 = $23;
   $270 = (($269) - 32000)|0;
   $271 = (+($270|0));
   $272 = 3.0517578125E-5 * $271;
   $273 = 0.0 > $272;
   if ($273) {
    $278 = 0.0;
   } else {
    $274 = $23;
    $275 = (($274) - 32000)|0;
    $276 = (+($275|0));
    $277 = 3.0517578125E-5 * $276;
    $278 = $277;
   }
   $52 = $278;
   $279 = $27;
   $280 = ($279|0)!=(0);
   if ($280) {
    $281 = $52;
    $282 = $281 < 0.67000001668930054;
    $283 = $52;
    $284 = $282 ? $283 : 0.67000001668930054;
    $52 = $284;
   }
   $285 = $21;
   $286 = $52;
   $287 = $38;
   $288 = $21;
   $289 = (($287) - ($288))|0;
   $290 = (+($289|0));
   $291 = $286 * $290;
   $292 = (~~(($291)));
   $293 = (($285) + ($292))|0;
   $38 = $293;
  }
 }
 $294 = $35;
 $295 = ($294|0)==(0);
 $296 = $30;
 $297 = $296 < 0.20000000298023224;
 $or$cond11 = $295 & $297;
 if (!($or$cond11)) {
  $324 = $21;
  $325 = $324<<1;
  $326 = $38;
  $327 = ($325|0)<($326|0);
  $328 = $21;
  $329 = $328<<1;
  $330 = $38;
  $331 = $327 ? $329 : $330;
  $38 = $331;
  $332 = $38;
  STACKTOP = sp;return ($332|0);
 }
 $298 = $23;
 $299 = (96000 - ($298))|0;
 $300 = (32000)<($299|0);
 $301 = $23;
 $302 = (96000 - ($301))|0;
 $303 = $300 ? 32000 : $302;
 $304 = (0)>($303|0);
 if ($304) {
  $312 = 0;
 } else {
  $305 = $23;
  $306 = (96000 - ($305))|0;
  $307 = (32000)<($306|0);
  $308 = $23;
  $309 = (96000 - ($308))|0;
  $310 = $307 ? 32000 : $309;
  $312 = $310;
 }
 $311 = (+($312|0));
 $313 = 3.0999999580672011E-6 * $311;
 $53 = $313;
 $314 = $37;
 $315 = $53;
 $316 = $314 * $315;
 $54 = $316;
 $317 = $54;
 $318 = $38;
 $319 = (+($318|0));
 $320 = $317 * $319;
 $321 = (~~(($320)));
 $322 = $38;
 $323 = (($322) + ($321))|0;
 $38 = $323;
 $324 = $21;
 $325 = $324<<1;
 $326 = $38;
 $327 = ($325|0)<($326|0);
 $328 = $21;
 $329 = $328<<1;
 $330 = $38;
 $331 = $327 ? $329 : $330;
 $38 = $331;
 $332 = $38;
 STACKTOP = sp;return ($332|0);
}
function _ec_get_error($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _celt_inner_prod_c_51($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $7;
  if (!($10)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 * $19;
  $21 = $11 + $20;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 STACKTOP = sp;return (+$11);
}
function _median_of_5($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $10 = $2;
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $5 = $12;
 $13 = $2;
 $14 = +HEAPF32[$13>>2];
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 > $17;
 $19 = $2;
 if ($18) {
  $20 = ((($19)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $3 = $21;
  $22 = $2;
  $23 = +HEAPF32[$22>>2];
  $4 = $23;
 } else {
  $24 = +HEAPF32[$19>>2];
  $3 = $24;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = +HEAPF32[$26>>2];
  $4 = $27;
 }
 $28 = $2;
 $29 = ((($28)) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $2;
 $32 = ((($31)) + 16|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $30 > $33;
 $35 = $2;
 if ($34) {
  $36 = ((($35)) + 16|0);
  $37 = +HEAPF32[$36>>2];
  $6 = $37;
  $38 = $2;
  $39 = ((($38)) + 12|0);
  $40 = +HEAPF32[$39>>2];
  $7 = $40;
 } else {
  $41 = ((($35)) + 12|0);
  $42 = +HEAPF32[$41>>2];
  $6 = $42;
  $43 = $2;
  $44 = ((($43)) + 16|0);
  $45 = +HEAPF32[$44>>2];
  $7 = $45;
 }
 $46 = $3;
 $47 = $6;
 $48 = $46 > $47;
 if ($48) {
  $49 = $3;
  $8 = $49;
  $50 = $6;
  $3 = $50;
  $51 = $8;
  $6 = $51;
  $52 = $4;
  $9 = $52;
  $53 = $7;
  $4 = $53;
  $54 = $9;
  $7 = $54;
 }
 $55 = $5;
 $56 = $4;
 $57 = $55 > $56;
 if ($57) {
  $58 = $4;
  $59 = $6;
  $60 = $58 < $59;
  if ($60) {
   $61 = $5;
   $62 = $6;
   $63 = $61 < $62;
   $64 = $5;
   $65 = $6;
   $66 = $63 ? $64 : $65;
   $1 = $66;
   $88 = $1;
   STACKTOP = sp;return (+$88);
  } else {
   $67 = $7;
   $68 = $4;
   $69 = $67 < $68;
   $70 = $7;
   $71 = $4;
   $72 = $69 ? $70 : $71;
   $1 = $72;
   $88 = $1;
   STACKTOP = sp;return (+$88);
  }
 } else {
  $73 = $5;
  $74 = $6;
  $75 = $73 < $74;
  if ($75) {
   $76 = $4;
   $77 = $6;
   $78 = $76 < $77;
   $79 = $4;
   $80 = $6;
   $81 = $78 ? $79 : $80;
   $1 = $81;
   $88 = $1;
   STACKTOP = sp;return (+$88);
  } else {
   $82 = $5;
   $83 = $7;
   $84 = $82 < $83;
   $85 = $5;
   $86 = $7;
   $87 = $84 ? $85 : $86;
   $1 = $87;
   $88 = $1;
   STACKTOP = sp;return (+$88);
  }
 }
 return +(0.0);
}
function _median_of_3($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = +HEAPF32[$6>>2];
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $7 > $10;
 $12 = $2;
 if ($11) {
  $13 = ((($12)) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $3 = $14;
  $15 = $2;
  $16 = +HEAPF32[$15>>2];
  $4 = $16;
 } else {
  $17 = +HEAPF32[$12>>2];
  $3 = $17;
  $18 = $2;
  $19 = ((($18)) + 4|0);
  $20 = +HEAPF32[$19>>2];
  $4 = $20;
 }
 $21 = $2;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF32[$22>>2];
 $5 = $23;
 $24 = $4;
 $25 = $5;
 $26 = $24 < $25;
 if ($26) {
  $27 = $4;
  $1 = $27;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 }
 $28 = $3;
 $29 = $5;
 $30 = $28 < $29;
 if ($30) {
  $31 = $5;
  $1 = $31;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 } else {
  $32 = $3;
  $1 = $32;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 }
 return +(0.0);
}
function _l1_metric($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0.0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $5;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $8;
  $15 = (($13) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $16;
  $18 = (+Math_abs((+$17)));
  $19 = $18;
  $20 = $9;
  $21 = $20 + $19;
  $9 = $21;
  $22 = $8;
  $23 = (($22) + 1)|0;
  $8 = $23;
 }
 $24 = $9;
 $25 = $6;
 $26 = (+($25|0));
 $27 = $7;
 $28 = $26 * $27;
 $29 = $9;
 $30 = $28 * $29;
 $31 = $24 + $30;
 $9 = $31;
 $32 = $9;
 STACKTOP = sp;return (+$32);
}
function _celt_decoder_get_size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = (_opus_custom_mode_create(48000,960,0)|0);
 $2 = $3;
 $4 = $2;
 $5 = $1;
 $6 = (_opus_custom_decoder_get_size($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _opus_custom_decoder_get_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (2048 + ($8))|0;
 $10 = Math_imul($5, $9)|0;
 $11 = (($10) - 1)|0;
 $12 = $11<<2;
 $13 = (88 + ($12))|0;
 $14 = $3;
 $15 = ($14*24)|0;
 $16 = $15<<2;
 $17 = (($13) + ($16))|0;
 $18 = $2;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20<<3;
 $22 = $21<<2;
 $23 = (($17) + ($22))|0;
 $4 = $23;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _celt_decoder_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_opus_custom_mode_create(48000,960,0)|0);
 $10 = $6;
 $11 = (_opus_custom_decoder_init($8,$9,$10)|0);
 $7 = $11;
 $12 = $7;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $7;
  $3 = $14;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $5;
 $16 = (_resampling_factor($15)|0);
 $17 = $4;
 $18 = ((($17)) + 16|0);
 HEAP32[$18>>2] = $16;
 $19 = $4;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  $3 = -1;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 } else {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _opus_custom_decoder_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ($7|0)<(0);
 $9 = $6;
 $10 = ($9|0)>(2);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $3 = -1;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $3 = -7;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 } else {
  $13 = $4;
  $14 = $5;
  $15 = $6;
  $16 = (_opus_custom_decoder_get_size($14,$15)|0);
  $17 = $16;
  _memset(($13|0),0,($17|0))|0;
  $18 = $5;
  $19 = $4;
  HEAP32[$19>>2] = $18;
  $20 = $5;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $25 = $6;
  $26 = $4;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = $4;
  $29 = ((($28)) + 12|0);
  HEAP32[$29>>2] = $25;
  $30 = $4;
  $31 = ((($30)) + 16|0);
  HEAP32[$31>>2] = 1;
  $32 = $4;
  $33 = ((($32)) + 20|0);
  HEAP32[$33>>2] = 0;
  $34 = $4;
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $4;
  $39 = ((($38)) + 24|0);
  HEAP32[$39>>2] = $37;
  $40 = $4;
  $41 = ((($40)) + 28|0);
  HEAP32[$41>>2] = 1;
  $42 = (_opus_select_arch_56()|0);
  $43 = $4;
  $44 = ((($43)) + 32|0);
  HEAP32[$44>>2] = $42;
  $45 = $4;
  $46 = ((($45)) + 48|0);
  HEAP32[$46>>2] = 0;
  $47 = $4;
  (_opus_custom_decoder_ctl($47,4028,$vararg_buffer)|0);
  $3 = 0;
  $48 = $3;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _opus_select_arch_56() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _opus_custom_decoder_ctl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current12 = 0, $arglist_current15 = 0, $arglist_current18 = 0, $arglist_current21 = 0, $arglist_current24 = 0, $arglist_current3 = 0, $arglist_current6 = 0, $arglist_current9 = 0, $arglist_next = 0;
 var $arglist_next10 = 0, $arglist_next13 = 0, $arglist_next16 = 0, $arglist_next19 = 0, $arglist_next22 = 0, $arglist_next25 = 0, $arglist_next4 = 0, $arglist_next7 = 0, $expanded = 0, $expanded11 = 0, $expanded12 = 0, $expanded13 = 0, $expanded15 = 0, $expanded16 = 0, $expanded18 = 0, $expanded19 = 0, $expanded2 = 0, $expanded20 = 0, $expanded22 = 0, $expanded23 = 0;
 var $expanded25 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded32 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded39 = 0, $expanded4 = 0, $expanded40 = 0, $expanded41 = 0, $expanded43 = 0, $expanded44 = 0, $expanded46 = 0, $expanded47 = 0, $expanded48 = 0, $expanded5 = 0;
 var $expanded50 = 0, $expanded51 = 0, $expanded53 = 0, $expanded54 = 0, $expanded55 = 0, $expanded57 = 0, $expanded58 = 0, $expanded6 = 0, $expanded60 = 0, $expanded61 = 0, $expanded62 = 0, $expanded8 = 0, $expanded9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp + 96|0;
 $3 = $0;
 $4 = $1;
 HEAP32[$5>>2] = $varargs;
 $29 = $4;
 L1: do {
  switch ($29|0) {
  case 10010:  {
   $arglist_current = HEAP32[$5>>2]|0;
   $30 = $arglist_current;
   $31 = ((0) + 4|0);
   $expanded2 = $31;
   $expanded = (($expanded2) - 1)|0;
   $32 = (($30) + ($expanded))|0;
   $33 = ((0) + 4|0);
   $expanded6 = $33;
   $expanded5 = (($expanded6) - 1)|0;
   $expanded4 = $expanded5 ^ -1;
   $34 = $32 & $expanded4;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $arglist_next = ((($35)) + 4|0);
   HEAP32[$5>>2] = $arglist_next;
   $7 = $36;
   $37 = $7;
   $6 = $37;
   $38 = $6;
   $39 = ($38|0)<(0);
   if ($39) {
    label = 25;
   } else {
    $40 = $6;
    $41 = $3;
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($42)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($40|0)>=($44|0);
    if ($45) {
     label = 25;
    } else {
     $46 = $6;
     $47 = $3;
     $48 = ((($47)) + 20|0);
     HEAP32[$48>>2] = $46;
     label = 24;
    }
   }
   break;
  }
  case 10012:  {
   $arglist_current3 = HEAP32[$5>>2]|0;
   $49 = $arglist_current3;
   $50 = ((0) + 4|0);
   $expanded9 = $50;
   $expanded8 = (($expanded9) - 1)|0;
   $51 = (($49) + ($expanded8))|0;
   $52 = ((0) + 4|0);
   $expanded13 = $52;
   $expanded12 = (($expanded13) - 1)|0;
   $expanded11 = $expanded12 ^ -1;
   $53 = $51 & $expanded11;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $arglist_next4 = ((($54)) + 4|0);
   HEAP32[$5>>2] = $arglist_next4;
   $9 = $55;
   $56 = $9;
   $8 = $56;
   $57 = $8;
   $58 = ($57|0)<(1);
   if ($58) {
    label = 25;
   } else {
    $59 = $8;
    $60 = $3;
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($61)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($59|0)>($63|0);
    if ($64) {
     label = 25;
    } else {
     $65 = $8;
     $66 = $3;
     $67 = ((($66)) + 24|0);
     HEAP32[$67>>2] = $65;
     label = 24;
    }
   }
   break;
  }
  case 10008:  {
   $arglist_current6 = HEAP32[$5>>2]|0;
   $68 = $arglist_current6;
   $69 = ((0) + 4|0);
   $expanded16 = $69;
   $expanded15 = (($expanded16) - 1)|0;
   $70 = (($68) + ($expanded15))|0;
   $71 = ((0) + 4|0);
   $expanded20 = $71;
   $expanded19 = (($expanded20) - 1)|0;
   $expanded18 = $expanded19 ^ -1;
   $72 = $70 & $expanded18;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   $arglist_next7 = ((($73)) + 4|0);
   HEAP32[$5>>2] = $arglist_next7;
   $11 = $74;
   $75 = $11;
   $10 = $75;
   $76 = $10;
   $77 = ($76|0)<(1);
   $78 = $10;
   $79 = ($78|0)>(2);
   $or$cond = $77 | $79;
   if ($or$cond) {
    label = 25;
   } else {
    $80 = $10;
    $81 = $3;
    $82 = ((($81)) + 12|0);
    HEAP32[$82>>2] = $80;
    label = 24;
   }
   break;
  }
  case 10007:  {
   $arglist_current9 = HEAP32[$5>>2]|0;
   $83 = $arglist_current9;
   $84 = ((0) + 4|0);
   $expanded23 = $84;
   $expanded22 = (($expanded23) - 1)|0;
   $85 = (($83) + ($expanded22))|0;
   $86 = ((0) + 4|0);
   $expanded27 = $86;
   $expanded26 = (($expanded27) - 1)|0;
   $expanded25 = $expanded26 ^ -1;
   $87 = $85 & $expanded25;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $arglist_next10 = ((($88)) + 4|0);
   HEAP32[$5>>2] = $arglist_next10;
   $13 = $89;
   $90 = $13;
   $12 = $90;
   $91 = $12;
   $92 = ($91|0)==(0|0);
   if ($92) {
    label = 25;
   } else {
    $93 = $3;
    $94 = ((($93)) + 40|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $12;
    HEAP32[$96>>2] = $95;
    $97 = $3;
    $98 = ((($97)) + 40|0);
    HEAP32[$98>>2] = 0;
    label = 24;
   }
   break;
  }
  case 4027:  {
   $arglist_current12 = HEAP32[$5>>2]|0;
   $99 = $arglist_current12;
   $100 = ((0) + 4|0);
   $expanded30 = $100;
   $expanded29 = (($expanded30) - 1)|0;
   $101 = (($99) + ($expanded29))|0;
   $102 = ((0) + 4|0);
   $expanded34 = $102;
   $expanded33 = (($expanded34) - 1)|0;
   $expanded32 = $expanded33 ^ -1;
   $103 = $101 & $expanded32;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   $arglist_next13 = ((($104)) + 4|0);
   HEAP32[$5>>2] = $arglist_next13;
   $15 = $105;
   $106 = $15;
   $14 = $106;
   $107 = $14;
   $108 = ($107|0)==(0|0);
   if ($108) {
    label = 25;
   } else {
    $109 = $3;
    $110 = ((($109)) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = $3;
    $113 = ((($112)) + 16|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($111|0) / ($114|0))&-1;
    $116 = $14;
    HEAP32[$116>>2] = $115;
    label = 24;
   }
   break;
  }
  case 4028:  {
   $117 = $3;
   $118 = ((($117)) + 84|0);
   $119 = $3;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (2048 + ($121))|0;
   $123 = $3;
   $124 = ((($123)) + 8|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = Math_imul($122, $125)|0;
   $127 = (($118) + ($126<<2)|0);
   $17 = $127;
   $128 = $17;
   $129 = $3;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131*24)|0;
   $133 = (($128) + ($132<<2)|0);
   $18 = $133;
   $134 = $18;
   $135 = $3;
   $136 = HEAP32[$135>>2]|0;
   $137 = ((($136)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138<<1;
   $140 = (($134) + ($139<<2)|0);
   $19 = $140;
   $141 = $19;
   $142 = $3;
   $143 = HEAP32[$142>>2]|0;
   $144 = ((($143)) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $145<<1;
   $147 = (($141) + ($146<<2)|0);
   $20 = $147;
   $148 = $3;
   $149 = ((($148)) + 36|0);
   $150 = $3;
   $151 = HEAP32[$150>>2]|0;
   $152 = $3;
   $153 = ((($152)) + 8|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (_opus_custom_decoder_get_size($151,$154)|0);
   $156 = $3;
   $157 = ((($156)) + 36|0);
   $158 = $3;
   $159 = $157;
   $160 = $158;
   $161 = (($159) - ($160))|0;
   $162 = (($155) - ($161))|0;
   $163 = $162;
   _memset(($149|0),0,($163|0))|0;
   $16 = 0;
   while(1) {
    $164 = $16;
    $165 = $3;
    $166 = HEAP32[$165>>2]|0;
    $167 = ((($166)) + 8|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $168<<1;
    $170 = ($164|0)<($169|0);
    if (!($170)) {
     label = 24;
     break L1;
    }
    $171 = $20;
    $172 = $16;
    $173 = (($171) + ($172<<2)|0);
    HEAPF32[$173>>2] = -28.0;
    $174 = $19;
    $175 = $16;
    $176 = (($174) + ($175<<2)|0);
    HEAPF32[$176>>2] = -28.0;
    $177 = $16;
    $178 = (($177) + 1)|0;
    $16 = $178;
   }
   break;
  }
  case 4033:  {
   $arglist_current15 = HEAP32[$5>>2]|0;
   $179 = $arglist_current15;
   $180 = ((0) + 4|0);
   $expanded37 = $180;
   $expanded36 = (($expanded37) - 1)|0;
   $181 = (($179) + ($expanded36))|0;
   $182 = ((0) + 4|0);
   $expanded41 = $182;
   $expanded40 = (($expanded41) - 1)|0;
   $expanded39 = $expanded40 ^ -1;
   $183 = $181 & $expanded39;
   $184 = $183;
   $185 = HEAP32[$184>>2]|0;
   $arglist_next16 = ((($184)) + 4|0);
   HEAP32[$5>>2] = $arglist_next16;
   $22 = $185;
   $186 = $22;
   $21 = $186;
   $187 = $21;
   $188 = ($187|0)==(0|0);
   if ($188) {
    label = 25;
   } else {
    $189 = $3;
    $190 = ((($189)) + 52|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $21;
    HEAP32[$192>>2] = $191;
    label = 24;
   }
   break;
  }
  case 10015:  {
   $arglist_current18 = HEAP32[$5>>2]|0;
   $193 = $arglist_current18;
   $194 = ((0) + 4|0);
   $expanded44 = $194;
   $expanded43 = (($expanded44) - 1)|0;
   $195 = (($193) + ($expanded43))|0;
   $196 = ((0) + 4|0);
   $expanded48 = $196;
   $expanded47 = (($expanded48) - 1)|0;
   $expanded46 = $expanded47 ^ -1;
   $197 = $195 & $expanded46;
   $198 = $197;
   $199 = HEAP32[$198>>2]|0;
   $arglist_next19 = ((($198)) + 4|0);
   HEAP32[$5>>2] = $arglist_next19;
   $24 = $199;
   $200 = $24;
   $23 = $200;
   $201 = $23;
   $202 = ($201|0)==(0|0);
   if ($202) {
    label = 25;
   } else {
    $203 = $3;
    $204 = HEAP32[$203>>2]|0;
    $205 = $23;
    HEAP32[$205>>2] = $204;
    label = 24;
   }
   break;
  }
  case 10016:  {
   $arglist_current21 = HEAP32[$5>>2]|0;
   $206 = $arglist_current21;
   $207 = ((0) + 4|0);
   $expanded51 = $207;
   $expanded50 = (($expanded51) - 1)|0;
   $208 = (($206) + ($expanded50))|0;
   $209 = ((0) + 4|0);
   $expanded55 = $209;
   $expanded54 = (($expanded55) - 1)|0;
   $expanded53 = $expanded54 ^ -1;
   $210 = $208 & $expanded53;
   $211 = $210;
   $212 = HEAP32[$211>>2]|0;
   $arglist_next22 = ((($211)) + 4|0);
   HEAP32[$5>>2] = $arglist_next22;
   $26 = $212;
   $213 = $26;
   $25 = $213;
   $214 = $25;
   $215 = $3;
   $216 = ((($215)) + 28|0);
   HEAP32[$216>>2] = $214;
   label = 24;
   break;
  }
  case 4031:  {
   $arglist_current24 = HEAP32[$5>>2]|0;
   $217 = $arglist_current24;
   $218 = ((0) + 4|0);
   $expanded58 = $218;
   $expanded57 = (($expanded58) - 1)|0;
   $219 = (($217) + ($expanded57))|0;
   $220 = ((0) + 4|0);
   $expanded62 = $220;
   $expanded61 = (($expanded62) - 1)|0;
   $expanded60 = $expanded61 ^ -1;
   $221 = $219 & $expanded60;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $arglist_next25 = ((($222)) + 4|0);
   HEAP32[$5>>2] = $arglist_next25;
   $28 = $223;
   $224 = $28;
   $27 = $224;
   $225 = $27;
   $226 = ($225|0)==(0|0);
   if ($226) {
    label = 25;
   } else {
    $227 = $3;
    $228 = ((($227)) + 36|0);
    $229 = HEAP32[$228>>2]|0;
    $230 = $27;
    HEAP32[$230>>2] = $229;
    label = 24;
   }
   break;
  }
  default: {
   $2 = -5;
   $231 = $2;
   STACKTOP = sp;return ($231|0);
  }
  }
 } while(0);
 if ((label|0) == 24) {
  $2 = 0;
  $231 = $2;
  STACKTOP = sp;return ($231|0);
 }
 else if ((label|0) == 25) {
  $2 = -1;
  $231 = $2;
  STACKTOP = sp;return ($231|0);
 }
 return (0)|0;
}
function _celt_decode_with_ec($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $$alloca_mul68 = 0, $$alloca_mul70 = 0, $$alloca_mul72 = 0, $$alloca_mul74 = 0, $$alloca_mul76 = 0, $$alloca_mul78 = 0, $$alloca_mul80 = 0, $$sink = 0, $$sink6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0.0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0.0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0.0, $673 = 0.0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0.0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0.0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0.0, $782 = 0.0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0.0, $791 = 0.0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0.0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0.0, $802 = 0.0, $803 = 0.0, $804 = 0, $805 = 0, $806 = 0, $807 = 0.0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0.0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0.0, $822 = 0, $823 = 0, $824 = 0, $825 = 0.0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0.0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $20 = sp + 192|0;
 $21 = sp + 184|0;
 $22 = sp + 176|0;
 $41 = sp + 96|0;
 $42 = sp + 92|0;
 $44 = sp + 84|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $66 = $8;
 $67 = ((($66)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $31 = $68;
 HEAP32[$41>>2] = 0;
 HEAP32[$42>>2] = 0;
 $49 = 0;
 $69 = $8;
 $70 = ((($69)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $51 = $71;
 $72 = $8;
 $73 = HEAP32[$72>>2]|0;
 $52 = $73;
 $74 = $52;
 $75 = ((($74)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $53 = $76;
 $77 = $52;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $54 = $79;
 $80 = $52;
 $81 = ((($80)) + 32|0);
 $82 = HEAP32[$81>>2]|0;
 $55 = $82;
 $83 = $8;
 $84 = ((($83)) + 20|0);
 $85 = HEAP32[$84>>2]|0;
 $34 = $85;
 $86 = $8;
 $87 = ((($86)) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 $35 = $88;
 $89 = $8;
 $90 = ((($89)) + 16|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $12;
 $93 = Math_imul($92, $91)|0;
 $12 = $93;
 $94 = $8;
 $95 = ((($94)) + 84|0);
 $96 = $54;
 $97 = (2048 + ($96))|0;
 $98 = $31;
 $99 = Math_imul($97, $98)|0;
 $100 = (($95) + ($99<<2)|0);
 $23 = $100;
 $101 = $23;
 $102 = $31;
 $103 = ($102*24)|0;
 $104 = (($101) + ($103<<2)|0);
 $24 = $104;
 $105 = $24;
 $106 = $53;
 $107 = $106<<1;
 $108 = (($105) + ($107<<2)|0);
 $25 = $108;
 $109 = $25;
 $110 = $53;
 $111 = $110<<1;
 $112 = (($109) + ($111<<2)|0);
 $26 = $112;
 $113 = $26;
 $114 = $53;
 $115 = $114<<1;
 $116 = (($113) + ($115<<2)|0);
 $27 = $116;
 $32 = 0;
 while(1) {
  $117 = $32;
  $118 = $52;
  $119 = ((($118)) + 36|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($117|0)<=($120|0);
  if (!($121)) {
   break;
  }
  $122 = $52;
  $123 = ((($122)) + 44|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = $32;
  $126 = $124 << $125;
  $127 = $12;
  $128 = ($126|0)==($127|0);
  if ($128) {
   break;
  }
  $129 = $32;
  $130 = (($129) + 1)|0;
  $32 = $130;
 }
 $131 = $32;
 $132 = $52;
 $133 = ((($132)) + 36|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($131|0)>($134|0);
 if ($135) {
  $7 = -1;
  $929 = $7;
  STACKTOP = sp;return ($929|0);
 }
 $136 = $32;
 $137 = 1 << $136;
 $33 = $137;
 $138 = $10;
 $139 = ($138|0)<(0);
 $140 = $10;
 $141 = ($140|0)>(1275);
 $or$cond = $139 | $141;
 $142 = $11;
 $143 = ($142|0)==(0|0);
 $or$cond3 = $or$cond | $143;
 if ($or$cond3) {
  $7 = -1;
  $929 = $7;
  STACKTOP = sp;return ($929|0);
 }
 $144 = $33;
 $145 = $52;
 $146 = ((($145)) + 44|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = Math_imul($144, $147)|0;
 $17 = $148;
 $15 = 0;
 while(1) {
  $149 = $8;
  $150 = ((($149)) + 84|0);
  $151 = $15;
  $152 = $54;
  $153 = (2048 + ($152))|0;
  $154 = Math_imul($151, $153)|0;
  $155 = (($150) + ($154<<2)|0);
  $156 = $15;
  $157 = (($21) + ($156<<2)|0);
  HEAP32[$157>>2] = $155;
  $158 = $15;
  $159 = (($21) + ($158<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ((($160)) + 8192|0);
  $162 = $17;
  $163 = (0 - ($162))|0;
  $164 = (($161) + ($163<<2)|0);
  $165 = $15;
  $166 = (($22) + ($165<<2)|0);
  HEAP32[$166>>2] = $164;
  $167 = $15;
  $168 = (($167) + 1)|0;
  $15 = $168;
  $169 = $31;
  $170 = ($168|0)<($169|0);
  if (!($170)) {
   break;
  }
 }
 $171 = $35;
 $36 = $171;
 $172 = $36;
 $173 = $52;
 $174 = ((($173)) + 12|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($172|0)>($175|0);
 if ($176) {
  $177 = $52;
  $178 = ((($177)) + 12|0);
  $179 = HEAP32[$178>>2]|0;
  $36 = $179;
 }
 $180 = $9;
 $181 = ($180|0)==(0|0);
 $182 = $10;
 $183 = ($182|0)<=(1);
 $or$cond5 = $181 | $183;
 if ($or$cond5) {
  $184 = $8;
  $185 = $17;
  $186 = $32;
  _celt_decode_lost($184,$185,$186);
  $187 = $11;
  $188 = $17;
  $189 = $31;
  $190 = $8;
  $191 = ((($190)) + 16|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $52;
  $194 = ((($193)) + 16|0);
  $195 = $8;
  $196 = ((($195)) + 76|0);
  $197 = $14;
  _deemphasis($22,$187,$188,$189,$192,$194,$196,$197);
  $198 = $12;
  $199 = $8;
  $200 = ((($199)) + 16|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($198|0) / ($201|0))&-1;
  $7 = $202;
  $929 = $7;
  STACKTOP = sp;return ($929|0);
 }
 $203 = $13;
 $204 = ($203|0)==(0|0);
 if ($204) {
  $205 = $9;
  $206 = $10;
  _ec_dec_init($20,$205,$206);
  $13 = $20;
 }
 $207 = $51;
 $208 = ($207|0)==(1);
 L27: do {
  if ($208) {
   $16 = 0;
   while(1) {
    $209 = $16;
    $210 = $53;
    $211 = ($209|0)<($210|0);
    if (!($211)) {
     break L27;
    }
    $212 = $24;
    $213 = $16;
    $214 = (($212) + ($213<<2)|0);
    $215 = +HEAPF32[$214>>2];
    $216 = $24;
    $217 = $53;
    $218 = $16;
    $219 = (($217) + ($218))|0;
    $220 = (($216) + ($219<<2)|0);
    $221 = +HEAPF32[$220>>2];
    $222 = $215 > $221;
    $223 = $24;
    if ($222) {
     $224 = $16;
     $$sink6 = $224;
    } else {
     $225 = $53;
     $226 = $16;
     $227 = (($225) + ($226))|0;
     $$sink6 = $227;
    }
    $228 = (($223) + ($$sink6<<2)|0);
    $229 = +HEAPF32[$228>>2];
    $230 = $24;
    $231 = $16;
    $232 = (($230) + ($231<<2)|0);
    HEAPF32[$232>>2] = $229;
    $233 = $16;
    $234 = (($233) + 1)|0;
    $16 = $234;
   }
  }
 } while(0);
 $235 = $10;
 $236 = $235<<3;
 $43 = $236;
 $237 = $13;
 $238 = (_ec_tell_61($237)|0);
 $45 = $238;
 $239 = $45;
 $240 = $43;
 $241 = ($239|0)>=($240|0);
 do {
  if ($241) {
   $50 = 1;
  } else {
   $242 = $45;
   $243 = ($242|0)==(1);
   if ($243) {
    $244 = $13;
    $245 = (_ec_dec_bit_logp($244,15)|0);
    $50 = $245;
    break;
   } else {
    $50 = 0;
    break;
   }
  }
 } while(0);
 $246 = $50;
 $247 = ($246|0)!=(0);
 if ($247) {
  $248 = $10;
  $249 = $248<<3;
  $45 = $249;
  $250 = $45;
  $251 = $13;
  $252 = (_ec_tell_61($251)|0);
  $253 = (($250) - ($252))|0;
  $254 = $13;
  $255 = ((($254)) + 20|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($256) + ($253))|0;
  HEAP32[$255>>2] = $257;
 }
 $40 = 0.0;
 $39 = 0;
 $47 = 0;
 $258 = $34;
 $259 = ($258|0)==(0);
 if ($259) {
  $260 = $45;
  $261 = (($260) + 16)|0;
  $262 = $43;
  $263 = ($261|0)<=($262|0);
  if ($263) {
   $264 = $13;
   $265 = (_ec_dec_bit_logp($264,1)|0);
   $266 = ($265|0)!=(0);
   if ($266) {
    $267 = $13;
    $268 = (_ec_dec_uint($267,6)|0);
    $57 = $268;
    $269 = $57;
    $270 = 16 << $269;
    $271 = $13;
    $272 = $57;
    $273 = (4 + ($272))|0;
    $274 = (_ec_dec_bits($271,$273)|0);
    $275 = (($270) + ($274))|0;
    $276 = (($275) - 1)|0;
    $39 = $276;
    $277 = $13;
    $278 = (_ec_dec_bits($277,3)|0);
    $56 = $278;
    $279 = $13;
    $280 = (_ec_tell_61($279)|0);
    $281 = (($280) + 2)|0;
    $282 = $43;
    $283 = ($281|0)<=($282|0);
    if ($283) {
     $284 = $13;
     $285 = (_ec_dec_icdf($284,25966,2)|0);
     $47 = $285;
    }
    $286 = $56;
    $287 = (($286) + 1)|0;
    $288 = (+($287|0));
    $289 = 0.09375 * $288;
    $40 = $289;
   }
   $290 = $13;
   $291 = (_ec_tell_61($290)|0);
   $45 = $291;
  }
 }
 $292 = $32;
 $293 = ($292|0)>(0);
 if ($293) {
  $294 = $45;
  $295 = (($294) + 3)|0;
  $296 = $43;
  $297 = ($295|0)<=($296|0);
  if ($297) {
   $298 = $13;
   $299 = (_ec_dec_bit_logp($298,3)|0);
   $29 = $299;
   $300 = $13;
   $301 = (_ec_tell_61($300)|0);
   $45 = $301;
  } else {
   label = 41;
  }
 } else {
  label = 41;
 }
 if ((label|0) == 41) {
  $29 = 0;
 }
 $302 = $29;
 $303 = ($302|0)!=(0);
 if ($303) {
  $304 = $33;
  $28 = $304;
 } else {
  $28 = 0;
 }
 $305 = $45;
 $306 = (($305) + 3)|0;
 $307 = $43;
 $308 = ($306|0)<=($307|0);
 if ($308) {
  $309 = $13;
  $310 = (_ec_dec_bit_logp($309,3)|0);
  $311 = $310;
 } else {
  $311 = 0;
 }
 $30 = $311;
 $312 = $52;
 $313 = $34;
 $314 = $35;
 $315 = $24;
 $316 = $30;
 $317 = $13;
 $318 = $51;
 $319 = $32;
 _unquant_coarse_energy($312,$313,$314,$315,$316,$317,$318,$319);
 $320 = $53;
 $321 = (_llvm_stacksave()|0);
 $58 = $321;
 $$alloca_mul = $320<<2;
 $322 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $323 = $34;
 $324 = $35;
 $325 = $29;
 $326 = $32;
 $327 = $13;
 _tf_decode($323,$324,$325,$322,$326,$327);
 $328 = $13;
 $329 = (_ec_tell_61($328)|0);
 $45 = $329;
 $18 = 2;
 $330 = $45;
 $331 = (($330) + 4)|0;
 $332 = $43;
 $333 = ($331|0)<=($332|0);
 if ($333) {
  $334 = $13;
  $335 = (_ec_dec_icdf($334,25969,5)|0);
  $18 = $335;
 }
 $336 = $53;
 $$alloca_mul68 = $336<<2;
 $337 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul68)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul68)|0)+15)&-16)|0);;
 $338 = $52;
 $339 = $32;
 $340 = $51;
 _init_caps($338,$337,$339,$340);
 $341 = $53;
 $$alloca_mul70 = $341<<2;
 $342 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul70)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul70)|0)+15)&-16)|0);;
 $46 = 6;
 $343 = $43;
 $344 = $343 << 3;
 $43 = $344;
 $345 = $13;
 $346 = (_ec_tell_frac($345)|0);
 $45 = $346;
 $347 = $34;
 $16 = $347;
 while(1) {
  $348 = $16;
  $349 = $35;
  $350 = ($348|0)<($349|0);
  if (!($350)) {
   break;
  }
  $351 = $51;
  $352 = $55;
  $353 = $16;
  $354 = (($353) + 1)|0;
  $355 = (($352) + ($354<<1)|0);
  $356 = HEAP16[$355>>1]|0;
  $357 = $356 << 16 >> 16;
  $358 = $55;
  $359 = $16;
  $360 = (($358) + ($359<<1)|0);
  $361 = HEAP16[$360>>1]|0;
  $362 = $361 << 16 >> 16;
  $363 = (($357) - ($362))|0;
  $364 = Math_imul($351, $363)|0;
  $365 = $32;
  $366 = $364 << $365;
  $59 = $366;
  $367 = $59;
  $368 = $367 << 3;
  $369 = $59;
  $370 = (48)>($369|0);
  $371 = $59;
  $372 = $370 ? 48 : $371;
  $373 = ($368|0)<($372|0);
  $374 = $59;
  if ($373) {
   $375 = $374 << 3;
   $379 = $375;
  } else {
   $376 = (48)>($374|0);
   $377 = $59;
   $378 = $376 ? 48 : $377;
   $379 = $378;
  }
  $60 = $379;
  $380 = $46;
  $61 = $380;
  $62 = 0;
  while(1) {
   $381 = $45;
   $382 = $61;
   $383 = $382 << 3;
   $384 = (($381) + ($383))|0;
   $385 = $43;
   $386 = ($384|0)<($385|0);
   if (!($386)) {
    break;
   }
   $387 = $62;
   $388 = $16;
   $389 = (($337) + ($388<<2)|0);
   $390 = HEAP32[$389>>2]|0;
   $391 = ($387|0)<($390|0);
   if (!($391)) {
    break;
   }
   $392 = $13;
   $393 = $61;
   $394 = (_ec_dec_bit_logp($392,$393)|0);
   $63 = $394;
   $395 = $13;
   $396 = (_ec_tell_frac($395)|0);
   $45 = $396;
   $397 = $63;
   $398 = ($397|0)!=(0);
   if (!($398)) {
    break;
   }
   $399 = $60;
   $400 = $62;
   $401 = (($400) + ($399))|0;
   $62 = $401;
   $402 = $60;
   $403 = $43;
   $404 = (($403) - ($402))|0;
   $43 = $404;
   $61 = 1;
  }
  $405 = $62;
  $406 = $16;
  $407 = (($342) + ($406<<2)|0);
  HEAP32[$407>>2] = $405;
  $408 = $62;
  $409 = ($408|0)>(0);
  if ($409) {
   $410 = $46;
   $411 = (($410) - 1)|0;
   $412 = (2)>($411|0);
   $413 = $46;
   $414 = (($413) - 1)|0;
   $415 = $412 ? 2 : $414;
   $46 = $415;
  }
  $416 = $16;
  $417 = (($416) + 1)|0;
  $16 = $417;
 }
 $418 = $53;
 $$alloca_mul72 = $418<<2;
 $419 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul72)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul72)|0)+15)&-16)|0);;
 $420 = $45;
 $421 = (($420) + 48)|0;
 $422 = $43;
 $423 = ($421|0)<=($422|0);
 if ($423) {
  $424 = $13;
  $425 = (_ec_dec_icdf($424,25973,7)|0);
  $426 = $425;
 } else {
  $426 = 5;
 }
 $38 = $426;
 $427 = $10;
 $428 = $427<<3;
 $429 = $428 << 3;
 $430 = $13;
 $431 = (_ec_tell_frac($430)|0);
 $432 = (($429) - ($431))|0;
 $433 = (($432) - 1)|0;
 $19 = $433;
 $434 = $29;
 $435 = ($434|0)!=(0);
 $436 = $32;
 $437 = ($436|0)>=(2);
 $or$cond8 = $435 & $437;
 if ($or$cond8) {
  $438 = $19;
  $439 = $32;
  $440 = (($439) + 2)|0;
  $441 = $440 << 3;
  $442 = ($438|0)>=($441|0);
  $443 = $442;
 } else {
  $443 = 0;
 }
 $444 = $443 ? 8 : 0;
 $48 = $444;
 $445 = $48;
 $446 = $19;
 $447 = (($446) - ($445))|0;
 $19 = $447;
 $448 = $53;
 $$alloca_mul74 = $448<<2;
 $449 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul74)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul74)|0)+15)&-16)|0);;
 $450 = $53;
 $$alloca_mul76 = $450<<2;
 $451 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul76)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul76)|0)+15)&-16)|0);;
 $452 = $52;
 $453 = $34;
 $454 = $35;
 $455 = $38;
 $456 = $19;
 $457 = $51;
 $458 = $32;
 $459 = $13;
 $460 = (_compute_allocation($452,$453,$454,$342,$337,$455,$41,$42,$456,$44,$449,$419,$451,$457,$458,$459,0,0,0)|0);
 $37 = $460;
 $461 = $52;
 $462 = $34;
 $463 = $35;
 $464 = $24;
 $465 = $13;
 $466 = $51;
 _unquant_fine_energy($461,$462,$463,$464,$419,$465,$466);
 $15 = 0;
 while(1) {
  $467 = $15;
  $468 = (($21) + ($467<<2)|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = $15;
  $471 = (($21) + ($470<<2)|0);
  $472 = HEAP32[$471>>2]|0;
  $473 = $17;
  $474 = (($472) + ($473<<2)|0);
  $475 = $17;
  $476 = (2048 - ($475))|0;
  $477 = $54;
  $478 = (($477|0) / 2)&-1;
  $479 = (($476) + ($478))|0;
  $480 = $479<<2;
  $481 = $15;
  $482 = (($21) + ($481<<2)|0);
  $483 = HEAP32[$482>>2]|0;
  $484 = $15;
  $485 = (($21) + ($484<<2)|0);
  $486 = HEAP32[$485>>2]|0;
  $487 = $17;
  $488 = (($486) + ($487<<2)|0);
  $489 = $483;
  $490 = $488;
  $491 = (($489) - ($490))|0;
  $492 = (($491|0) / 4)&-1;
  $493 = 0;
  $494 = (($480) + ($493))|0;
  _memmove(($469|0),($474|0),($494|0))|0;
  $495 = $15;
  $496 = (($495) + 1)|0;
  $15 = $496;
  $497 = $31;
  $498 = ($496|0)<($497|0);
  if (!($498)) {
   break;
  }
 }
 $499 = $51;
 $500 = $53;
 $501 = Math_imul($499, $500)|0;
 $$alloca_mul78 = $501;
 $502 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul78)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul78)|0)+15)&-16)|0);;
 $503 = $51;
 $504 = $17;
 $505 = Math_imul($503, $504)|0;
 $$alloca_mul80 = $505<<2;
 $506 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul80)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul80)|0)+15)&-16)|0);;
 $507 = $52;
 $508 = $34;
 $509 = $35;
 $510 = $51;
 $511 = ($510|0)==(2);
 $512 = $17;
 $513 = (($506) + ($512<<2)|0);
 $514 = $511 ? $513 : 0;
 $515 = $28;
 $516 = $18;
 $517 = HEAP32[$42>>2]|0;
 $518 = HEAP32[$41>>2]|0;
 $519 = $10;
 $520 = $519<<6;
 $521 = $48;
 $522 = (($520) - ($521))|0;
 $523 = HEAP32[$44>>2]|0;
 $524 = $13;
 $525 = $32;
 $526 = $37;
 $527 = $8;
 $528 = ((($527)) + 36|0);
 $529 = $8;
 $530 = ((($529)) + 32|0);
 $531 = HEAP32[$530>>2]|0;
 _quant_all_bands(0,$507,$508,$509,$506,$514,$502,0,$449,$515,$516,$517,$518,$322,$522,$523,$524,$525,$526,$528,$531);
 $532 = $48;
 $533 = ($532|0)>(0);
 if ($533) {
  $534 = $13;
  $535 = (_ec_dec_bits($534,1)|0);
  $49 = $535;
 }
 $536 = $52;
 $537 = $34;
 $538 = $35;
 $539 = $24;
 $540 = $10;
 $541 = $540<<3;
 $542 = $13;
 $543 = (_ec_tell_61($542)|0);
 $544 = (($541) - ($543))|0;
 $545 = $13;
 $546 = $51;
 _unquant_energy_finalise($536,$537,$538,$539,$419,$451,$544,$545,$546);
 $547 = $49;
 $548 = ($547|0)!=(0);
 if ($548) {
  $549 = $52;
  $550 = $32;
  $551 = $51;
  $552 = $17;
  $553 = $34;
  $554 = $35;
  $555 = $24;
  $556 = $25;
  $557 = $26;
  $558 = $8;
  $559 = ((($558)) + 36|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = $8;
  $562 = ((($561)) + 32|0);
  $563 = HEAP32[$562>>2]|0;
  _anti_collapse($549,$506,$502,$550,$551,$552,$553,$554,$555,$556,$557,$449,$560,$563);
 }
 $564 = $50;
 $565 = ($564|0)!=(0);
 L105: do {
  if ($565) {
   $16 = 0;
   while(1) {
    $566 = $16;
    $567 = $51;
    $568 = $53;
    $569 = Math_imul($567, $568)|0;
    $570 = ($566|0)<($569|0);
    if (!($570)) {
     break L105;
    }
    $571 = $24;
    $572 = $16;
    $573 = (($571) + ($572<<2)|0);
    HEAPF32[$573>>2] = -28.0;
    $574 = $16;
    $575 = (($574) + 1)|0;
    $16 = $575;
   }
  }
 } while(0);
 $576 = $52;
 $577 = $24;
 $578 = $34;
 $579 = $36;
 $580 = $51;
 $581 = $31;
 $582 = $29;
 $583 = $32;
 $584 = $8;
 $585 = ((($584)) + 16|0);
 $586 = HEAP32[$585>>2]|0;
 $587 = $50;
 $588 = $8;
 $589 = ((($588)) + 32|0);
 $590 = HEAP32[$589>>2]|0;
 _celt_synthesis($576,$506,$22,$577,$578,$579,$580,$581,$582,$583,$586,$587,$590);
 $15 = 0;
 while(1) {
  $591 = $8;
  $592 = ((($591)) + 52|0);
  $593 = HEAP32[$592>>2]|0;
  $594 = ($593|0)>(15);
  if ($594) {
   $595 = $8;
   $596 = ((($595)) + 52|0);
   $597 = HEAP32[$596>>2]|0;
   $600 = $597;
  } else {
   $600 = 15;
  }
  $598 = $8;
  $599 = ((($598)) + 52|0);
  HEAP32[$599>>2] = $600;
  $601 = $8;
  $602 = ((($601)) + 56|0);
  $603 = HEAP32[$602>>2]|0;
  $604 = ($603|0)>(15);
  if ($604) {
   $605 = $8;
   $606 = ((($605)) + 56|0);
   $607 = HEAP32[$606>>2]|0;
   $610 = $607;
  } else {
   $610 = 15;
  }
  $608 = $8;
  $609 = ((($608)) + 56|0);
  HEAP32[$609>>2] = $610;
  $611 = $15;
  $612 = (($22) + ($611<<2)|0);
  $613 = HEAP32[$612>>2]|0;
  $614 = $15;
  $615 = (($22) + ($614<<2)|0);
  $616 = HEAP32[$615>>2]|0;
  $617 = $8;
  $618 = ((($617)) + 56|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = $8;
  $621 = ((($620)) + 52|0);
  $622 = HEAP32[$621>>2]|0;
  $623 = $52;
  $624 = ((($623)) + 44|0);
  $625 = HEAP32[$624>>2]|0;
  $626 = $8;
  $627 = ((($626)) + 64|0);
  $628 = +HEAPF32[$627>>2];
  $629 = $8;
  $630 = ((($629)) + 60|0);
  $631 = +HEAPF32[$630>>2];
  $632 = $8;
  $633 = ((($632)) + 72|0);
  $634 = HEAP32[$633>>2]|0;
  $635 = $8;
  $636 = ((($635)) + 68|0);
  $637 = HEAP32[$636>>2]|0;
  $638 = $52;
  $639 = ((($638)) + 60|0);
  $640 = HEAP32[$639>>2]|0;
  $641 = $54;
  $642 = $8;
  $643 = ((($642)) + 32|0);
  $644 = HEAP32[$643>>2]|0;
  _comb_filter($613,$616,$619,$622,$625,$628,$631,$634,$637,$640,$641,$644);
  $645 = $32;
  $646 = ($645|0)!=(0);
  if ($646) {
   $647 = $15;
   $648 = (($22) + ($647<<2)|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = $52;
   $651 = ((($650)) + 44|0);
   $652 = HEAP32[$651>>2]|0;
   $653 = (($649) + ($652<<2)|0);
   $654 = $15;
   $655 = (($22) + ($654<<2)|0);
   $656 = HEAP32[$655>>2]|0;
   $657 = $52;
   $658 = ((($657)) + 44|0);
   $659 = HEAP32[$658>>2]|0;
   $660 = (($656) + ($659<<2)|0);
   $661 = $8;
   $662 = ((($661)) + 52|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = $39;
   $665 = $17;
   $666 = $52;
   $667 = ((($666)) + 44|0);
   $668 = HEAP32[$667>>2]|0;
   $669 = (($665) - ($668))|0;
   $670 = $8;
   $671 = ((($670)) + 60|0);
   $672 = +HEAPF32[$671>>2];
   $673 = $40;
   $674 = $8;
   $675 = ((($674)) + 68|0);
   $676 = HEAP32[$675>>2]|0;
   $677 = $47;
   $678 = $52;
   $679 = ((($678)) + 60|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = $54;
   $682 = $8;
   $683 = ((($682)) + 32|0);
   $684 = HEAP32[$683>>2]|0;
   _comb_filter($653,$660,$663,$664,$669,$672,$673,$676,$677,$680,$681,$684);
  }
  $685 = $15;
  $686 = (($685) + 1)|0;
  $15 = $686;
  $687 = $31;
  $688 = ($686|0)<($687|0);
  if (!($688)) {
   break;
  }
 }
 $689 = $8;
 $690 = ((($689)) + 52|0);
 $691 = HEAP32[$690>>2]|0;
 $692 = $8;
 $693 = ((($692)) + 56|0);
 HEAP32[$693>>2] = $691;
 $694 = $8;
 $695 = ((($694)) + 60|0);
 $696 = +HEAPF32[$695>>2];
 $697 = $8;
 $698 = ((($697)) + 64|0);
 HEAPF32[$698>>2] = $696;
 $699 = $8;
 $700 = ((($699)) + 68|0);
 $701 = HEAP32[$700>>2]|0;
 $702 = $8;
 $703 = ((($702)) + 72|0);
 HEAP32[$703>>2] = $701;
 $704 = $39;
 $705 = $8;
 $706 = ((($705)) + 52|0);
 HEAP32[$706>>2] = $704;
 $707 = $40;
 $708 = $8;
 $709 = ((($708)) + 60|0);
 HEAPF32[$709>>2] = $707;
 $710 = $47;
 $711 = $8;
 $712 = ((($711)) + 68|0);
 HEAP32[$712>>2] = $710;
 $713 = $32;
 $714 = ($713|0)!=(0);
 if ($714) {
  $715 = $8;
  $716 = ((($715)) + 52|0);
  $717 = HEAP32[$716>>2]|0;
  $718 = $8;
  $719 = ((($718)) + 56|0);
  HEAP32[$719>>2] = $717;
  $720 = $8;
  $721 = ((($720)) + 60|0);
  $722 = +HEAPF32[$721>>2];
  $723 = $8;
  $724 = ((($723)) + 64|0);
  HEAPF32[$724>>2] = $722;
  $725 = $8;
  $726 = ((($725)) + 68|0);
  $727 = HEAP32[$726>>2]|0;
  $728 = $8;
  $729 = ((($728)) + 72|0);
  HEAP32[$729>>2] = $727;
 }
 $730 = $51;
 $731 = ($730|0)==(1);
 if ($731) {
  $732 = $24;
  $733 = $53;
  $734 = (($732) + ($733<<2)|0);
  $735 = $24;
  $736 = $53;
  $737 = $736<<2;
  $738 = $24;
  $739 = $53;
  $740 = (($738) + ($739<<2)|0);
  $741 = $24;
  $742 = $740;
  $743 = $741;
  $744 = (($742) - ($743))|0;
  $745 = (($744|0) / 4)&-1;
  $746 = 0;
  $747 = (($737) + ($746))|0;
  _memcpy(($734|0),($735|0),($747|0))|0;
 }
 $748 = $29;
 $749 = ($748|0)!=(0);
 L129: do {
  if ($749) {
   $16 = 0;
   while(1) {
    $814 = $16;
    $815 = $53;
    $816 = $815<<1;
    $817 = ($814|0)<($816|0);
    if (!($817)) {
     break L129;
    }
    $818 = $25;
    $819 = $16;
    $820 = (($818) + ($819<<2)|0);
    $821 = +HEAPF32[$820>>2];
    $822 = $24;
    $823 = $16;
    $824 = (($822) + ($823<<2)|0);
    $825 = +HEAPF32[$824>>2];
    $826 = $821 < $825;
    if ($826) {
     $827 = $25;
     $828 = $16;
     $829 = (($827) + ($828<<2)|0);
     $$sink = $829;
    } else {
     $830 = $24;
     $831 = $16;
     $832 = (($830) + ($831<<2)|0);
     $$sink = $832;
    }
    $833 = +HEAPF32[$$sink>>2];
    $834 = $25;
    $835 = $16;
    $836 = (($834) + ($835<<2)|0);
    HEAPF32[$836>>2] = $833;
    $837 = $16;
    $838 = (($837) + 1)|0;
    $16 = $838;
   }
  } else {
   $750 = $26;
   $751 = $25;
   $752 = $53;
   $753 = $752<<1;
   $754 = $753<<2;
   $755 = $26;
   $756 = $25;
   $757 = $755;
   $758 = $756;
   $759 = (($757) - ($758))|0;
   $760 = (($759|0) / 4)&-1;
   $761 = 0;
   $762 = (($754) + ($761))|0;
   _memcpy(($750|0),($751|0),($762|0))|0;
   $763 = $25;
   $764 = $24;
   $765 = $53;
   $766 = $765<<1;
   $767 = $766<<2;
   $768 = $25;
   $769 = $24;
   $770 = $768;
   $771 = $769;
   $772 = (($770) - ($771))|0;
   $773 = (($772|0) / 4)&-1;
   $774 = 0;
   $775 = (($767) + ($774))|0;
   _memcpy(($763|0),($764|0),($775|0))|0;
   $776 = $8;
   $777 = ((($776)) + 48|0);
   $778 = HEAP32[$777>>2]|0;
   $779 = ($778|0)<(10);
   if ($779) {
    $780 = $33;
    $781 = (+($780|0));
    $782 = $781 * 0.0010000000474974513;
    $64 = $782;
   } else {
    $64 = 1.0;
   }
   $16 = 0;
   while(1) {
    $783 = $16;
    $784 = $53;
    $785 = $784<<1;
    $786 = ($783|0)<($785|0);
    if (!($786)) {
     break L129;
    }
    $787 = $27;
    $788 = $16;
    $789 = (($787) + ($788<<2)|0);
    $790 = +HEAPF32[$789>>2];
    $791 = $64;
    $792 = $790 + $791;
    $793 = $24;
    $794 = $16;
    $795 = (($793) + ($794<<2)|0);
    $796 = +HEAPF32[$795>>2];
    $797 = $792 < $796;
    if ($797) {
     $798 = $27;
     $799 = $16;
     $800 = (($798) + ($799<<2)|0);
     $801 = +HEAPF32[$800>>2];
     $802 = $64;
     $803 = $801 + $802;
     $811 = $803;
    } else {
     $804 = $24;
     $805 = $16;
     $806 = (($804) + ($805<<2)|0);
     $807 = +HEAPF32[$806>>2];
     $811 = $807;
    }
    $808 = $27;
    $809 = $16;
    $810 = (($808) + ($809<<2)|0);
    HEAPF32[$810>>2] = $811;
    $812 = $16;
    $813 = (($812) + 1)|0;
    $16 = $813;
   }
  }
 } while(0);
 $15 = 0;
 while(1) {
  $16 = 0;
  while(1) {
   $839 = $16;
   $840 = $34;
   $841 = ($839|0)<($840|0);
   if (!($841)) {
    break;
   }
   $842 = $24;
   $843 = $15;
   $844 = $53;
   $845 = Math_imul($843, $844)|0;
   $846 = $16;
   $847 = (($845) + ($846))|0;
   $848 = (($842) + ($847<<2)|0);
   HEAPF32[$848>>2] = 0.0;
   $849 = $26;
   $850 = $15;
   $851 = $53;
   $852 = Math_imul($850, $851)|0;
   $853 = $16;
   $854 = (($852) + ($853))|0;
   $855 = (($849) + ($854<<2)|0);
   HEAPF32[$855>>2] = -28.0;
   $856 = $25;
   $857 = $15;
   $858 = $53;
   $859 = Math_imul($857, $858)|0;
   $860 = $16;
   $861 = (($859) + ($860))|0;
   $862 = (($856) + ($861<<2)|0);
   HEAPF32[$862>>2] = -28.0;
   $863 = $16;
   $864 = (($863) + 1)|0;
   $16 = $864;
  }
  $865 = $35;
  $16 = $865;
  while(1) {
   $866 = $16;
   $867 = $53;
   $868 = ($866|0)<($867|0);
   if (!($868)) {
    break;
   }
   $869 = $24;
   $870 = $15;
   $871 = $53;
   $872 = Math_imul($870, $871)|0;
   $873 = $16;
   $874 = (($872) + ($873))|0;
   $875 = (($869) + ($874<<2)|0);
   HEAPF32[$875>>2] = 0.0;
   $876 = $26;
   $877 = $15;
   $878 = $53;
   $879 = Math_imul($877, $878)|0;
   $880 = $16;
   $881 = (($879) + ($880))|0;
   $882 = (($876) + ($881<<2)|0);
   HEAPF32[$882>>2] = -28.0;
   $883 = $25;
   $884 = $15;
   $885 = $53;
   $886 = Math_imul($884, $885)|0;
   $887 = $16;
   $888 = (($886) + ($887))|0;
   $889 = (($883) + ($888<<2)|0);
   HEAPF32[$889>>2] = -28.0;
   $890 = $16;
   $891 = (($890) + 1)|0;
   $16 = $891;
  }
  $892 = $15;
  $893 = (($892) + 1)|0;
  $15 = $893;
  $894 = ($893|0)<(2);
  if (!($894)) {
   break;
  }
 }
 $895 = $13;
 $896 = ((($895)) + 28|0);
 $897 = HEAP32[$896>>2]|0;
 $898 = $8;
 $899 = ((($898)) + 36|0);
 HEAP32[$899>>2] = $897;
 $900 = $11;
 $901 = $17;
 $902 = $31;
 $903 = $8;
 $904 = ((($903)) + 16|0);
 $905 = HEAP32[$904>>2]|0;
 $906 = $52;
 $907 = ((($906)) + 16|0);
 $908 = $8;
 $909 = ((($908)) + 76|0);
 $910 = $14;
 _deemphasis($22,$900,$901,$902,$905,$907,$909,$910);
 $911 = $8;
 $912 = ((($911)) + 48|0);
 HEAP32[$912>>2] = 0;
 $913 = $13;
 $914 = (_ec_tell_61($913)|0);
 $915 = $10;
 $916 = $915<<3;
 $917 = ($914|0)>($916|0);
 if ($917) {
  $7 = -3;
  $65 = 1;
 } else {
  $918 = $13;
  $919 = (_ec_get_error_65($918)|0);
  $920 = ($919|0)!=(0);
  if ($920) {
   $921 = $8;
   $922 = ((($921)) + 40|0);
   HEAP32[$922>>2] = 1;
  }
  $923 = $12;
  $924 = $8;
  $925 = ((($924)) + 16|0);
  $926 = HEAP32[$925>>2]|0;
  $927 = (($923|0) / ($926|0))&-1;
  $7 = $927;
  $65 = 1;
 }
 $928 = $58;
 _llvm_stackrestore(($928|0));
 $929 = $7;
 STACKTOP = sp;return ($929|0);
}
function _celt_decode_lost($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$alloca_mul = 0, $$alloca_mul54 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0.0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0.0, $370 = 0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0.0, $378 = 0.0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0.0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0.0, $459 = 0.0;
 var $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0.0, $490 = 0.0, $491 = 0.0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0.0, $529 = 0.0, $53 = 0.0, $530 = 0.0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0, $580 = 0.0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0.0, $585 = 0.0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0.0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0;
 var $603 = 0.0, $604 = 0.0, $605 = 0.0, $606 = 0.0, $607 = 0.0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0.0, $616 = 0.0, $617 = 0.0, $618 = 0.0, $619 = 0.0, $62 = 0, $620 = 0.0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0.0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0.0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0, $707 = 0, $708 = 0.0, $709 = 0.0, $71 = 0, $710 = 0.0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4608|0);
 $9 = sp + 4568|0;
 $10 = sp + 4560|0;
 $35 = sp + 368|0;
 $44 = sp + 232|0;
 $45 = sp + 136|0;
 $51 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $56 = $3;
 $57 = ((($56)) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $8 = $58;
 $59 = $3;
 $60 = HEAP32[$59>>2]|0;
 $16 = $60;
 $61 = $16;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $17 = $63;
 $64 = $16;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $18 = $66;
 $67 = $16;
 $68 = ((($67)) + 32|0);
 $69 = HEAP32[$68>>2]|0;
 $22 = $69;
 $6 = 0;
 while(1) {
  $70 = $3;
  $71 = ((($70)) + 84|0);
  $72 = $6;
  $73 = $18;
  $74 = (2048 + ($73))|0;
  $75 = Math_imul($72, $74)|0;
  $76 = (($71) + ($75<<2)|0);
  $77 = $6;
  $78 = (($9) + ($77<<2)|0);
  HEAP32[$78>>2] = $76;
  $79 = $6;
  $80 = (($9) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 8192|0);
  $83 = $4;
  $84 = (0 - ($83))|0;
  $85 = (($82) + ($84<<2)|0);
  $86 = $6;
  $87 = (($10) + ($86<<2)|0);
  HEAP32[$87>>2] = $85;
  $88 = $6;
  $89 = (($88) + 1)|0;
  $6 = $89;
  $90 = $8;
  $91 = ($89|0)<($90|0);
  if (!($91)) {
   break;
  }
 }
 $92 = $3;
 $93 = ((($92)) + 84|0);
 $94 = $18;
 $95 = (2048 + ($94))|0;
 $96 = $8;
 $97 = Math_imul($95, $96)|0;
 $98 = (($93) + ($97<<2)|0);
 $11 = $98;
 $99 = $11;
 $100 = $8;
 $101 = ($100*24)|0;
 $102 = (($99) + ($101<<2)|0);
 $12 = $102;
 $103 = $12;
 $104 = $17;
 $105 = $104<<1;
 $106 = (($103) + ($105<<2)|0);
 $13 = $106;
 $107 = $13;
 $108 = $17;
 $109 = $108<<1;
 $110 = (($107) + ($109<<2)|0);
 $14 = $110;
 $111 = $14;
 $112 = $17;
 $113 = $112<<1;
 $114 = (($111) + ($113<<2)|0);
 $15 = $114;
 $115 = $3;
 $116 = ((($115)) + 48|0);
 $117 = HEAP32[$116>>2]|0;
 $20 = $117;
 $118 = $3;
 $119 = ((($118)) + 20|0);
 $120 = HEAP32[$119>>2]|0;
 $19 = $120;
 $121 = $20;
 $122 = ($121|0)>=(5);
 $123 = $19;
 $124 = ($123|0)!=(0);
 $125 = $122 ? 1 : $124;
 $126 = $125&1;
 $21 = $126;
 $127 = $21;
 $128 = ($127|0)!=(0);
 if ($128) {
  $129 = $3;
  $130 = ((($129)) + 24|0);
  $131 = HEAP32[$130>>2]|0;
  $24 = $131;
  $132 = $19;
  $133 = $24;
  $134 = $16;
  $135 = ((($134)) + 12|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($133|0)<($136|0);
  if ($137) {
   $138 = $24;
   $143 = $138;
  } else {
   $139 = $16;
   $140 = ((($139)) + 12|0);
   $141 = HEAP32[$140>>2]|0;
   $143 = $141;
  }
  $142 = ($132|0)>($143|0);
  do {
   if ($142) {
    $144 = $19;
    $154 = $144;
   } else {
    $145 = $24;
    $146 = $16;
    $147 = ((($146)) + 12|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($145|0)<($148|0);
    if ($149) {
     $150 = $24;
     $154 = $150;
     break;
    } else {
     $151 = $16;
     $152 = ((($151)) + 12|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $153;
     break;
    }
   }
  } while(0);
  $25 = $154;
  $155 = $8;
  $156 = $4;
  $157 = Math_imul($155, $156)|0;
  $158 = (_llvm_stacksave()|0);
  $27 = $158;
  $$alloca_mul = $157<<2;
  $159 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $160 = $20;
  $161 = ($160|0)==(0);
  $162 = $161 ? 1.5 : 0.5;
  $26 = $162;
  $6 = 0;
  while(1) {
   $163 = $19;
   $7 = $163;
   while(1) {
    $164 = $7;
    $165 = $24;
    $166 = ($164|0)<($165|0);
    if (!($166)) {
     break;
    }
    $167 = $15;
    $168 = $6;
    $169 = $17;
    $170 = Math_imul($168, $169)|0;
    $171 = $7;
    $172 = (($170) + ($171))|0;
    $173 = (($167) + ($172<<2)|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $12;
    $176 = $6;
    $177 = $17;
    $178 = Math_imul($176, $177)|0;
    $179 = $7;
    $180 = (($178) + ($179))|0;
    $181 = (($175) + ($180<<2)|0);
    $182 = +HEAPF32[$181>>2];
    $183 = $26;
    $184 = $182 - $183;
    $185 = $174 > $184;
    if ($185) {
     $186 = $15;
     $187 = $6;
     $188 = $17;
     $189 = Math_imul($187, $188)|0;
     $190 = $7;
     $191 = (($189) + ($190))|0;
     $192 = (($186) + ($191<<2)|0);
     $193 = +HEAPF32[$192>>2];
     $211 = $193;
    } else {
     $194 = $12;
     $195 = $6;
     $196 = $17;
     $197 = Math_imul($195, $196)|0;
     $198 = $7;
     $199 = (($197) + ($198))|0;
     $200 = (($194) + ($199<<2)|0);
     $201 = +HEAPF32[$200>>2];
     $202 = $26;
     $203 = $201 - $202;
     $211 = $203;
    }
    $204 = $12;
    $205 = $6;
    $206 = $17;
    $207 = Math_imul($205, $206)|0;
    $208 = $7;
    $209 = (($207) + ($208))|0;
    $210 = (($204) + ($209<<2)|0);
    HEAPF32[$210>>2] = $211;
    $212 = $7;
    $213 = (($212) + 1)|0;
    $7 = $213;
   }
   $214 = $6;
   $215 = (($214) + 1)|0;
   $6 = $215;
   $216 = $8;
   $217 = ($215|0)<($216|0);
   if (!($217)) {
    break;
   }
  }
  $218 = $3;
  $219 = ((($218)) + 36|0);
  $220 = HEAP32[$219>>2]|0;
  $23 = $220;
  $6 = 0;
  while(1) {
   $221 = $6;
   $222 = $8;
   $223 = ($221|0)<($222|0);
   if (!($223)) {
    break;
   }
   $224 = $19;
   $7 = $224;
   while(1) {
    $225 = $7;
    $226 = $25;
    $227 = ($225|0)<($226|0);
    if (!($227)) {
     break;
    }
    $228 = $4;
    $229 = $6;
    $230 = Math_imul($228, $229)|0;
    $231 = $22;
    $232 = $7;
    $233 = (($231) + ($232<<1)|0);
    $234 = HEAP16[$233>>1]|0;
    $235 = $234 << 16 >> 16;
    $236 = $5;
    $237 = $235 << $236;
    $238 = (($230) + ($237))|0;
    $29 = $238;
    $239 = $22;
    $240 = $7;
    $241 = (($240) + 1)|0;
    $242 = (($239) + ($241<<1)|0);
    $243 = HEAP16[$242>>1]|0;
    $244 = $243 << 16 >> 16;
    $245 = $22;
    $246 = $7;
    $247 = (($245) + ($246<<1)|0);
    $248 = HEAP16[$247>>1]|0;
    $249 = $248 << 16 >> 16;
    $250 = (($244) - ($249))|0;
    $251 = $5;
    $252 = $250 << $251;
    $30 = $252;
    $28 = 0;
    while(1) {
     $253 = $28;
     $254 = $30;
     $255 = ($253|0)<($254|0);
     if (!($255)) {
      break;
     }
     $256 = $23;
     $257 = (_celt_lcg_rand($256)|0);
     $23 = $257;
     $258 = $23;
     $259 = $258 >> 20;
     $260 = (+($259|0));
     $261 = $29;
     $262 = $28;
     $263 = (($261) + ($262))|0;
     $264 = (($159) + ($263<<2)|0);
     HEAPF32[$264>>2] = $260;
     $265 = $28;
     $266 = (($265) + 1)|0;
     $28 = $266;
    }
    $267 = $29;
    $268 = (($159) + ($267<<2)|0);
    $269 = $30;
    $270 = $3;
    $271 = ((($270)) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    _renormalise_vector($268,$269,1.0,$272);
    $273 = $7;
    $274 = (($273) + 1)|0;
    $7 = $274;
   }
   $275 = $6;
   $276 = (($275) + 1)|0;
   $6 = $276;
  }
  $277 = $23;
  $278 = $3;
  $279 = ((($278)) + 36|0);
  HEAP32[$279>>2] = $277;
  $6 = 0;
  while(1) {
   $280 = $6;
   $281 = (($9) + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = $6;
   $284 = (($9) + ($283<<2)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $4;
   $287 = (($285) + ($286<<2)|0);
   $288 = $4;
   $289 = (2048 - ($288))|0;
   $290 = $18;
   $291 = $290 >> 1;
   $292 = (($289) + ($291))|0;
   $293 = $292<<2;
   $294 = $6;
   $295 = (($9) + ($294<<2)|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $6;
   $298 = (($9) + ($297<<2)|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $4;
   $301 = (($299) + ($300<<2)|0);
   $302 = $296;
   $303 = $301;
   $304 = (($302) - ($303))|0;
   $305 = (($304|0) / 4)&-1;
   $306 = 0;
   $307 = (($293) + ($306))|0;
   _memmove(($282|0),($287|0),($307|0))|0;
   $308 = $6;
   $309 = (($308) + 1)|0;
   $6 = $309;
   $310 = $8;
   $311 = ($309|0)<($310|0);
   if (!($311)) {
    break;
   }
  }
  $312 = $16;
  $313 = $12;
  $314 = $19;
  $315 = $25;
  $316 = $8;
  $317 = $8;
  $318 = $5;
  $319 = $3;
  $320 = ((($319)) + 16|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = $3;
  $323 = ((($322)) + 32|0);
  $324 = HEAP32[$323>>2]|0;
  _celt_synthesis($312,$159,$10,$313,$314,$315,$316,$317,0,$318,$321,0,$324);
  $325 = $27;
  _llvm_stackrestore(($325|0));
  $722 = $20;
  $723 = (($722) + 1)|0;
  $724 = $3;
  $725 = ((($724)) + 48|0);
  HEAP32[$725>>2] = $723;
  STACKTOP = sp;return;
 }
 $32 = 1.0;
 $326 = $20;
 $327 = ($326|0)==(0);
 if ($327) {
  $328 = $8;
  $329 = $3;
  $330 = ((($329)) + 32|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = (_celt_plc_pitch_search($9,$328,$331)|0);
  $33 = $332;
  $333 = $3;
  $334 = ((($333)) + 44|0);
  HEAP32[$334>>2] = $332;
 } else {
  $335 = $3;
  $336 = ((($335)) + 44|0);
  $337 = HEAP32[$336>>2]|0;
  $33 = $337;
  $32 = 0.80000001192092896;
 }
 $338 = $18;
 $339 = (_llvm_stacksave()|0);
 $34 = $339;
 $$alloca_mul54 = $338<<2;
 $340 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul54)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul54)|0)+15)&-16)|0);;
 $341 = $16;
 $342 = ((($341)) + 60|0);
 $343 = HEAP32[$342>>2]|0;
 $31 = $343;
 $6 = 0;
 while(1) {
  $38 = 0.0;
  $344 = $6;
  $345 = (($9) + ($344<<2)|0);
  $346 = HEAP32[$345>>2]|0;
  $39 = $346;
  $7 = 0;
  while(1) {
   $347 = $7;
   $348 = ($347|0)<(1024);
   if (!($348)) {
    break;
   }
   $349 = $39;
   $350 = $7;
   $351 = (1024 + ($350))|0;
   $352 = (($349) + ($351<<2)|0);
   $353 = +HEAPF32[$352>>2];
   $354 = $7;
   $355 = (($35) + ($354<<2)|0);
   HEAPF32[$355>>2] = $353;
   $356 = $7;
   $357 = (($356) + 1)|0;
   $7 = $357;
  }
  $358 = $20;
  $359 = ($358|0)==(0);
  if ($359) {
   $360 = $31;
   $361 = $18;
   $362 = $3;
   $363 = ((($362)) + 32|0);
   $364 = HEAP32[$363>>2]|0;
   (__celt_autocorr($35,$44,$360,$361,24,1024,$364)|0);
   $365 = +HEAPF32[$44>>2];
   $366 = $365 * 1.0001000165939331;
   HEAPF32[$44>>2] = $366;
   $7 = 1;
   while(1) {
    $367 = $7;
    $368 = ($367|0)<=(24);
    if (!($368)) {
     break;
    }
    $369 = $7;
    $370 = (($44) + ($369<<2)|0);
    $371 = +HEAPF32[$370>>2];
    $372 = $371 * 6.4000007114373147E-5;
    $373 = $7;
    $374 = (+($373|0));
    $375 = $372 * $374;
    $376 = $7;
    $377 = (+($376|0));
    $378 = $375 * $377;
    $379 = $7;
    $380 = (($44) + ($379<<2)|0);
    $381 = +HEAPF32[$380>>2];
    $382 = $381 - $378;
    HEAPF32[$380>>2] = $382;
    $383 = $7;
    $384 = (($383) + 1)|0;
    $7 = $384;
   }
   $385 = $11;
   $386 = $6;
   $387 = ($386*24)|0;
   $388 = (($385) + ($387<<2)|0);
   __celt_lpc($388,$44,24);
  }
  $389 = $33;
  $390 = $389<<1;
  $391 = ($390|0)<(1024);
  $392 = $33;
  $393 = $392<<1;
  $394 = $391 ? $393 : 1024;
  $42 = $394;
  $7 = 0;
  while(1) {
   $395 = $7;
   $396 = ($395|0)<(24);
   if (!($396)) {
    break;
   }
   $397 = $39;
   $398 = $42;
   $399 = (2048 - ($398))|0;
   $400 = (($399) - 1)|0;
   $401 = $7;
   $402 = (($400) - ($401))|0;
   $403 = (($397) + ($402<<2)|0);
   $404 = +HEAPF32[$403>>2];
   $405 = $7;
   $406 = (($45) + ($405<<2)|0);
   HEAPF32[$406>>2] = $404;
   $407 = $7;
   $408 = (($407) + 1)|0;
   $7 = $408;
  }
  $409 = ((($35)) + 4096|0);
  $410 = $42;
  $411 = (0 - ($410))|0;
  $412 = (($409) + ($411<<2)|0);
  $413 = $11;
  $414 = $6;
  $415 = ($414*24)|0;
  $416 = (($413) + ($415<<2)|0);
  $417 = ((($35)) + 4096|0);
  $418 = $42;
  $419 = (0 - ($418))|0;
  $420 = (($417) + ($419<<2)|0);
  $421 = $42;
  $422 = $3;
  $423 = ((($422)) + 32|0);
  $424 = HEAP32[$423>>2]|0;
  _celt_fir_c($412,$416,$420,$421,24,$45,$424);
  $46 = 1.0;
  $47 = 1.0;
  $425 = $42;
  $426 = $425 >> 1;
  $48 = $426;
  $7 = 0;
  while(1) {
   $427 = $7;
   $428 = $48;
   $429 = ($427|0)<($428|0);
   if (!($429)) {
    break;
   }
   $430 = $48;
   $431 = (1024 - ($430))|0;
   $432 = $7;
   $433 = (($431) + ($432))|0;
   $434 = (($35) + ($433<<2)|0);
   $435 = +HEAPF32[$434>>2];
   $49 = $435;
   $436 = $49;
   $437 = $49;
   $438 = $436 * $437;
   $439 = $46;
   $440 = $439 + $438;
   $46 = $440;
   $441 = $48;
   $442 = $441<<1;
   $443 = (1024 - ($442))|0;
   $444 = $7;
   $445 = (($443) + ($444))|0;
   $446 = (($35) + ($445<<2)|0);
   $447 = +HEAPF32[$446>>2];
   $49 = $447;
   $448 = $49;
   $449 = $49;
   $450 = $448 * $449;
   $451 = $47;
   $452 = $451 + $450;
   $47 = $452;
   $453 = $7;
   $454 = (($453) + 1)|0;
   $7 = $454;
  }
  $455 = $46;
  $456 = $47;
  $457 = $455 < $456;
  $458 = $46;
  $459 = $47;
  $460 = $457 ? $458 : $459;
  $46 = $460;
  $461 = $46;
  $462 = $47;
  $463 = $461 / $462;
  $464 = $463;
  $465 = (+Math_sqrt((+$464)));
  $466 = $465;
  $36 = $466;
  $467 = $39;
  $468 = $39;
  $469 = $4;
  $470 = (($468) + ($469<<2)|0);
  $471 = $4;
  $472 = (2048 - ($471))|0;
  $473 = $472<<2;
  $474 = $39;
  $475 = $39;
  $476 = $4;
  $477 = (($475) + ($476<<2)|0);
  $478 = $474;
  $479 = $477;
  $480 = (($478) - ($479))|0;
  $481 = (($480|0) / 4)&-1;
  $482 = 0;
  $483 = (($473) + ($482))|0;
  _memmove(($467|0),($470|0),($483|0))|0;
  $484 = $33;
  $485 = (1024 - ($484))|0;
  $40 = $485;
  $486 = $4;
  $487 = $18;
  $488 = (($486) + ($487))|0;
  $41 = $488;
  $489 = $32;
  $490 = $36;
  $491 = $489 * $490;
  $37 = $491;
  $43 = 0;
  $7 = 0;
  while(1) {
   $492 = $7;
   $493 = $41;
   $494 = ($492|0)<($493|0);
   if (!($494)) {
    break;
   }
   $495 = $43;
   $496 = $33;
   $497 = ($495|0)>=($496|0);
   if ($497) {
    $498 = $33;
    $499 = $43;
    $500 = (($499) - ($498))|0;
    $43 = $500;
    $501 = $37;
    $502 = $36;
    $503 = $501 * $502;
    $37 = $503;
   }
   $504 = $37;
   $505 = $40;
   $506 = $43;
   $507 = (($505) + ($506))|0;
   $508 = (($35) + ($507<<2)|0);
   $509 = +HEAPF32[$508>>2];
   $510 = $504 * $509;
   $511 = $39;
   $512 = $4;
   $513 = (2048 - ($512))|0;
   $514 = $7;
   $515 = (($513) + ($514))|0;
   $516 = (($511) + ($515<<2)|0);
   HEAPF32[$516>>2] = $510;
   $517 = $39;
   $518 = $4;
   $519 = (1024 - ($518))|0;
   $520 = $40;
   $521 = (($519) + ($520))|0;
   $522 = $43;
   $523 = (($521) + ($522))|0;
   $524 = (($517) + ($523<<2)|0);
   $525 = +HEAPF32[$524>>2];
   $50 = $525;
   $526 = $50;
   $527 = $50;
   $528 = $526 * $527;
   $529 = $38;
   $530 = $529 + $528;
   $38 = $530;
   $531 = $7;
   $532 = (($531) + 1)|0;
   $7 = $532;
   $533 = $43;
   $534 = (($533) + 1)|0;
   $43 = $534;
  }
  $7 = 0;
  while(1) {
   $535 = $7;
   $536 = ($535|0)<(24);
   $537 = $39;
   if (!($536)) {
    break;
   }
   $538 = $4;
   $539 = (2048 - ($538))|0;
   $540 = (($539) - 1)|0;
   $541 = $7;
   $542 = (($540) - ($541))|0;
   $543 = (($537) + ($542<<2)|0);
   $544 = +HEAPF32[$543>>2];
   $545 = $7;
   $546 = (($51) + ($545<<2)|0);
   HEAPF32[$546>>2] = $544;
   $547 = $7;
   $548 = (($547) + 1)|0;
   $7 = $548;
  }
  $549 = ((($537)) + 8192|0);
  $550 = $4;
  $551 = (0 - ($550))|0;
  $552 = (($549) + ($551<<2)|0);
  $553 = $11;
  $554 = $6;
  $555 = ($554*24)|0;
  $556 = (($553) + ($555<<2)|0);
  $557 = $39;
  $558 = ((($557)) + 8192|0);
  $559 = $4;
  $560 = (0 - ($559))|0;
  $561 = (($558) + ($560<<2)|0);
  $562 = $41;
  $563 = $3;
  $564 = ((($563)) + 32|0);
  $565 = HEAP32[$564>>2]|0;
  _celt_iir($552,$556,$561,$562,24,$51,$565);
  $52 = 0.0;
  $7 = 0;
  while(1) {
   $566 = $7;
   $567 = $41;
   $568 = ($566|0)<($567|0);
   if (!($568)) {
    break;
   }
   $569 = $39;
   $570 = $4;
   $571 = (2048 - ($570))|0;
   $572 = $7;
   $573 = (($571) + ($572))|0;
   $574 = (($569) + ($573<<2)|0);
   $575 = +HEAPF32[$574>>2];
   $53 = $575;
   $576 = $53;
   $577 = $53;
   $578 = $576 * $577;
   $579 = $52;
   $580 = $579 + $578;
   $52 = $580;
   $581 = $7;
   $582 = (($581) + 1)|0;
   $7 = $582;
  }
  $583 = $38;
  $584 = $52;
  $585 = 0.20000000298023224 * $584;
  $586 = $583 > $585;
  L85: do {
   if ($586) {
    $598 = $38;
    $599 = $52;
    $600 = $598 < $599;
    if ($600) {
     $601 = $38;
     $602 = $601 + 1.0;
     $603 = $52;
     $604 = $603 + 1.0;
     $605 = $602 / $604;
     $606 = $605;
     $607 = (+Math_sqrt((+$606)));
     $608 = $607;
     $54 = $608;
     $7 = 0;
     while(1) {
      $609 = $7;
      $610 = $18;
      $611 = ($609|0)<($610|0);
      if (!($611)) {
       break;
      }
      $612 = $31;
      $613 = $7;
      $614 = (($612) + ($613<<2)|0);
      $615 = +HEAPF32[$614>>2];
      $616 = $54;
      $617 = 1.0 - $616;
      $618 = $615 * $617;
      $619 = 1.0 - $618;
      $55 = $619;
      $620 = $55;
      $621 = $39;
      $622 = $4;
      $623 = (2048 - ($622))|0;
      $624 = $7;
      $625 = (($623) + ($624))|0;
      $626 = (($621) + ($625<<2)|0);
      $627 = +HEAPF32[$626>>2];
      $628 = $620 * $627;
      $629 = $39;
      $630 = $4;
      $631 = (2048 - ($630))|0;
      $632 = $7;
      $633 = (($631) + ($632))|0;
      $634 = (($629) + ($633<<2)|0);
      HEAPF32[$634>>2] = $628;
      $635 = $7;
      $636 = (($635) + 1)|0;
      $7 = $636;
     }
     $637 = $18;
     $7 = $637;
     while(1) {
      $638 = $7;
      $639 = $41;
      $640 = ($638|0)<($639|0);
      if (!($640)) {
       break L85;
      }
      $641 = $54;
      $642 = $39;
      $643 = $4;
      $644 = (2048 - ($643))|0;
      $645 = $7;
      $646 = (($644) + ($645))|0;
      $647 = (($642) + ($646<<2)|0);
      $648 = +HEAPF32[$647>>2];
      $649 = $641 * $648;
      $650 = $39;
      $651 = $4;
      $652 = (2048 - ($651))|0;
      $653 = $7;
      $654 = (($652) + ($653))|0;
      $655 = (($650) + ($654<<2)|0);
      HEAPF32[$655>>2] = $649;
      $656 = $7;
      $657 = (($656) + 1)|0;
      $7 = $657;
     }
    }
   } else {
    $7 = 0;
    while(1) {
     $587 = $7;
     $588 = $41;
     $589 = ($587|0)<($588|0);
     if (!($589)) {
      break L85;
     }
     $590 = $39;
     $591 = $4;
     $592 = (2048 - ($591))|0;
     $593 = $7;
     $594 = (($592) + ($593))|0;
     $595 = (($590) + ($594<<2)|0);
     HEAPF32[$595>>2] = 0.0;
     $596 = $7;
     $597 = (($596) + 1)|0;
     $7 = $597;
    }
   }
  } while(0);
  $658 = $39;
  $659 = ((($658)) + 8192|0);
  $660 = $3;
  $661 = ((($660)) + 52|0);
  $662 = HEAP32[$661>>2]|0;
  $663 = $3;
  $664 = ((($663)) + 52|0);
  $665 = HEAP32[$664>>2]|0;
  $666 = $18;
  $667 = $3;
  $668 = ((($667)) + 60|0);
  $669 = +HEAPF32[$668>>2];
  $670 = - $669;
  $671 = $3;
  $672 = ((($671)) + 60|0);
  $673 = +HEAPF32[$672>>2];
  $674 = - $673;
  $675 = $3;
  $676 = ((($675)) + 68|0);
  $677 = HEAP32[$676>>2]|0;
  $678 = $3;
  $679 = ((($678)) + 68|0);
  $680 = HEAP32[$679>>2]|0;
  $681 = $3;
  $682 = ((($681)) + 32|0);
  $683 = HEAP32[$682>>2]|0;
  _comb_filter($340,$659,$662,$665,$666,$670,$674,$677,$680,0,0,$683);
  $7 = 0;
  while(1) {
   $684 = $7;
   $685 = $18;
   $686 = (($685|0) / 2)&-1;
   $687 = ($684|0)<($686|0);
   if (!($687)) {
    break;
   }
   $688 = $31;
   $689 = $7;
   $690 = (($688) + ($689<<2)|0);
   $691 = +HEAPF32[$690>>2];
   $692 = $18;
   $693 = (($692) - 1)|0;
   $694 = $7;
   $695 = (($693) - ($694))|0;
   $696 = (($340) + ($695<<2)|0);
   $697 = +HEAPF32[$696>>2];
   $698 = $691 * $697;
   $699 = $31;
   $700 = $18;
   $701 = $7;
   $702 = (($700) - ($701))|0;
   $703 = (($702) - 1)|0;
   $704 = (($699) + ($703<<2)|0);
   $705 = +HEAPF32[$704>>2];
   $706 = $7;
   $707 = (($340) + ($706<<2)|0);
   $708 = +HEAPF32[$707>>2];
   $709 = $705 * $708;
   $710 = $698 + $709;
   $711 = $39;
   $712 = $7;
   $713 = (2048 + ($712))|0;
   $714 = (($711) + ($713<<2)|0);
   HEAPF32[$714>>2] = $710;
   $715 = $7;
   $716 = (($715) + 1)|0;
   $7 = $716;
  }
  $717 = $6;
  $718 = (($717) + 1)|0;
  $6 = $718;
  $719 = $8;
  $720 = ($718|0)<($719|0);
  if (!($720)) {
   break;
  }
 }
 $721 = $34;
 _llvm_stackrestore(($721|0));
 $722 = $20;
 $723 = (($722) + 1)|0;
 $724 = $3;
 $725 = ((($724)) + 48|0);
 HEAP32[$725>>2] = $723;
 STACKTOP = sp;return;
}
function _deemphasis($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $18 = 0;
 $27 = $10;
 $28 = (_llvm_stacksave()|0);
 $20 = $28;
 $$alloca_mul = $27<<2;
 $29 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $30 = $13;
 $31 = +HEAPF32[$30>>2];
 $19 = $31;
 $32 = $10;
 $33 = $12;
 $34 = (($32|0) / ($33|0))&-1;
 $17 = $34;
 $16 = 0;
 while(1) {
  $35 = $14;
  $36 = $16;
  $37 = (($35) + ($36<<2)|0);
  $38 = +HEAPF32[$37>>2];
  $24 = $38;
  $39 = $8;
  $40 = $16;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $22 = $42;
  $43 = $9;
  $44 = $16;
  $45 = (($43) + ($44<<2)|0);
  $23 = $45;
  $46 = $12;
  $47 = ($46|0)>(1);
  $21 = 0;
  L3: do {
   if ($47) {
    while(1) {
     $48 = $21;
     $49 = $10;
     $50 = ($48|0)<($49|0);
     if (!($50)) {
      break;
     }
     $51 = $22;
     $52 = $21;
     $53 = (($51) + ($52<<2)|0);
     $54 = +HEAPF32[$53>>2];
     $55 = $24;
     $56 = $54 + $55;
     $57 = $56 + 1.0000000031710769E-30;
     $25 = $57;
     $58 = $19;
     $59 = $25;
     $60 = $58 * $59;
     $24 = $60;
     $61 = $25;
     $62 = $21;
     $63 = (($29) + ($62<<2)|0);
     HEAPF32[$63>>2] = $61;
     $64 = $21;
     $65 = (($64) + 1)|0;
     $21 = $65;
    }
    $18 = 1;
   } else {
    while(1) {
     $66 = $21;
     $67 = $10;
     $68 = ($66|0)<($67|0);
     if (!($68)) {
      break L3;
     }
     $69 = $22;
     $70 = $21;
     $71 = (($69) + ($70<<2)|0);
     $72 = +HEAPF32[$71>>2];
     $73 = $24;
     $74 = $72 + $73;
     $75 = $74 + 1.0000000031710769E-30;
     $26 = $75;
     $76 = $19;
     $77 = $26;
     $78 = $76 * $77;
     $24 = $78;
     $79 = $26;
     $80 = $79 * 3.0517578125E-5;
     $81 = $23;
     $82 = $21;
     $83 = $11;
     $84 = Math_imul($82, $83)|0;
     $85 = (($81) + ($84<<2)|0);
     HEAPF32[$85>>2] = $80;
     $86 = $21;
     $87 = (($86) + 1)|0;
     $21 = $87;
    }
   }
  } while(0);
  $88 = $24;
  $89 = $14;
  $90 = $16;
  $91 = (($89) + ($90<<2)|0);
  HEAPF32[$91>>2] = $88;
  $92 = $18;
  $93 = ($92|0)!=(0);
  L12: do {
   if ($93) {
    $21 = 0;
    while(1) {
     $94 = $21;
     $95 = $17;
     $96 = ($94|0)<($95|0);
     if (!($96)) {
      break L12;
     }
     $97 = $21;
     $98 = $12;
     $99 = Math_imul($97, $98)|0;
     $100 = (($29) + ($99<<2)|0);
     $101 = +HEAPF32[$100>>2];
     $102 = $101 * 3.0517578125E-5;
     $103 = $23;
     $104 = $21;
     $105 = $11;
     $106 = Math_imul($104, $105)|0;
     $107 = (($103) + ($106<<2)|0);
     HEAPF32[$107>>2] = $102;
     $108 = $21;
     $109 = (($108) + 1)|0;
     $21 = $109;
    }
   }
  } while(0);
  $110 = $16;
  $111 = (($110) + 1)|0;
  $16 = $111;
  $112 = $11;
  $113 = ($111|0)<($112|0);
  if (!($113)) {
   break;
  }
 }
 $114 = $20;
 _llvm_stackrestore(($114|0));
 STACKTOP = sp;return;
}
function _ec_tell_61($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _tf_decode($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $11;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22<<3;
 $18 = $23;
 $24 = $11;
 $25 = (_ec_tell_61($24)|0);
 $19 = $25;
 $26 = $8;
 $27 = ($26|0)!=(0);
 $28 = $27 ? 2 : 4;
 $17 = $28;
 $29 = $10;
 $30 = ($29|0)>(0);
 if ($30) {
  $31 = $19;
  $32 = $17;
  $33 = (($31) + ($32))|0;
  $34 = (($33) + 1)|0;
  $35 = $18;
  $36 = ($34>>>0)<=($35>>>0);
  $38 = $36;
 } else {
  $38 = 0;
 }
 $37 = $38&1;
 $15 = $37;
 $39 = $15;
 $40 = $18;
 $41 = (($40) - ($39))|0;
 $18 = $41;
 $13 = 0;
 $16 = 0;
 $42 = $6;
 $12 = $42;
 while(1) {
  $43 = $12;
  $44 = $7;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $19;
  $47 = $17;
  $48 = (($46) + ($47))|0;
  $49 = $18;
  $50 = ($48>>>0)<=($49>>>0);
  if ($50) {
   $51 = $11;
   $52 = $17;
   $53 = (_ec_dec_bit_logp($51,$52)|0);
   $54 = $13;
   $55 = $54 ^ $53;
   $13 = $55;
   $56 = $11;
   $57 = (_ec_tell_61($56)|0);
   $19 = $57;
   $58 = $13;
   $59 = $16;
   $60 = $59 | $58;
   $16 = $60;
  }
  $61 = $13;
  $62 = $9;
  $63 = $12;
  $64 = (($62) + ($63<<2)|0);
  HEAP32[$64>>2] = $61;
  $65 = $8;
  $66 = ($65|0)!=(0);
  $67 = $66 ? 4 : 5;
  $17 = $67;
  $68 = $12;
  $69 = (($68) + 1)|0;
  $12 = $69;
 }
 $14 = 0;
 $70 = $15;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $10;
  $73 = (28967 + ($72<<3)|0);
  $74 = $8;
  $75 = $74<<2;
  $76 = (($75) + 0)|0;
  $77 = $16;
  $78 = (($76) + ($77))|0;
  $79 = (($73) + ($78)|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80 << 24 >> 24;
  $82 = $10;
  $83 = (28967 + ($82<<3)|0);
  $84 = $8;
  $85 = $84<<2;
  $86 = (($85) + 2)|0;
  $87 = $16;
  $88 = (($86) + ($87))|0;
  $89 = (($83) + ($88)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90 << 24 >> 24;
  $92 = ($81|0)!=($91|0);
  if ($92) {
   $93 = $11;
   $94 = (_ec_dec_bit_logp($93,1)|0);
   $14 = $94;
  }
 }
 $95 = $6;
 $12 = $95;
 while(1) {
  $96 = $12;
  $97 = $7;
  $98 = ($96|0)<($97|0);
  if (!($98)) {
   break;
  }
  $99 = $10;
  $100 = (28967 + ($99<<3)|0);
  $101 = $8;
  $102 = $101<<2;
  $103 = $14;
  $104 = $103<<1;
  $105 = (($102) + ($104))|0;
  $106 = $9;
  $107 = $12;
  $108 = (($106) + ($107<<2)|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($105) + ($109))|0;
  $111 = (($100) + ($110)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112 << 24 >> 24;
  $114 = $9;
  $115 = $12;
  $116 = (($114) + ($115<<2)|0);
  HEAP32[$116>>2] = $113;
  $117 = $12;
  $118 = (($117) + 1)|0;
  $12 = $118;
 }
 STACKTOP = sp;return;
}
function _celt_synthesis($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$alloca_mul = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $25 = $12;
 $39 = $13;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $35 = $41;
 $42 = $13;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $34 = $44;
 $45 = $13;
 $46 = ((($45)) + 44|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $22;
 $49 = $47 << $48;
 $31 = $49;
 $50 = $31;
 $51 = (_llvm_stacksave()|0);
 $36 = $51;
 $$alloca_mul = $50<<2;
 $52 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $53 = $22;
 $54 = 1 << $53;
 $28 = $54;
 $55 = $21;
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $28;
  $30 = $57;
  $58 = $13;
  $59 = ((($58)) + 44|0);
  $60 = HEAP32[$59>>2]|0;
  $32 = $60;
  $61 = $13;
  $62 = ((($61)) + 36|0);
  $63 = HEAP32[$62>>2]|0;
  $33 = $63;
 } else {
  $30 = 1;
  $64 = $13;
  $65 = ((($64)) + 44|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $22;
  $68 = $66 << $67;
  $32 = $68;
  $69 = $13;
  $70 = ((($69)) + 36|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $22;
  $73 = (($71) - ($72))|0;
  $33 = $73;
 }
 $74 = $20;
 $75 = ($74|0)==(2);
 $76 = $19;
 $77 = ($76|0)==(1);
 $or$cond = $75 & $77;
 if ($or$cond) {
  $78 = $13;
  $79 = $14;
  $80 = $16;
  $81 = $17;
  $82 = $18;
  $83 = $28;
  $84 = $23;
  $85 = $24;
  _denormalise_bands($78,$79,$52,$80,$81,$82,$83,$84,$85);
  $86 = $15;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $35;
  $90 = (($89|0) / 2)&-1;
  $91 = (($88) + ($90<<2)|0);
  $37 = $91;
  $92 = $37;
  $93 = $31;
  $94 = $93<<2;
  $95 = $37;
  $96 = $95;
  $97 = $52;
  $98 = (($96) - ($97))|0;
  $99 = (($98|0) / 4)&-1;
  $100 = 0;
  $101 = (($94) + ($100))|0;
  _memcpy(($92|0),($52|0),($101|0))|0;
  $29 = 0;
  while(1) {
   $102 = $29;
   $103 = $30;
   $104 = ($102|0)<($103|0);
   if (!($104)) {
    break;
   }
   $105 = $13;
   $106 = ((($105)) + 64|0);
   $107 = $37;
   $108 = $29;
   $109 = (($107) + ($108<<2)|0);
   $110 = $15;
   $111 = HEAP32[$110>>2]|0;
   $112 = $32;
   $113 = $29;
   $114 = Math_imul($112, $113)|0;
   $115 = (($111) + ($114<<2)|0);
   $116 = $13;
   $117 = ((($116)) + 60|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $35;
   $120 = $33;
   $121 = $30;
   $122 = $25;
   _clt_mdct_backward_c($106,$109,$115,$118,$119,$120,$121,$122);
   $123 = $29;
   $124 = (($123) + 1)|0;
   $29 = $124;
  }
  $29 = 0;
  while(1) {
   $125 = $29;
   $126 = $30;
   $127 = ($125|0)<($126|0);
   if (!($127)) {
    break;
   }
   $128 = $13;
   $129 = ((($128)) + 64|0);
   $130 = $29;
   $131 = (($52) + ($130<<2)|0);
   $132 = $15;
   $133 = ((($132)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $32;
   $136 = $29;
   $137 = Math_imul($135, $136)|0;
   $138 = (($134) + ($137<<2)|0);
   $139 = $13;
   $140 = ((($139)) + 60|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $35;
   $143 = $33;
   $144 = $30;
   $145 = $25;
   _clt_mdct_backward_c($129,$131,$138,$141,$142,$143,$144,$145);
   $146 = $29;
   $147 = (($146) + 1)|0;
   $29 = $147;
  }
  $260 = $36;
  _llvm_stackrestore(($260|0));
  STACKTOP = sp;return;
 }
 $148 = $20;
 $149 = ($148|0)==(1);
 $150 = $19;
 $151 = ($150|0)==(2);
 $or$cond3 = $149 & $151;
 if (!($or$cond3)) {
  $26 = 0;
  while(1) {
   $216 = $13;
   $217 = $14;
   $218 = $26;
   $219 = $31;
   $220 = Math_imul($218, $219)|0;
   $221 = (($217) + ($220<<2)|0);
   $222 = $16;
   $223 = $26;
   $224 = $34;
   $225 = Math_imul($223, $224)|0;
   $226 = (($222) + ($225<<2)|0);
   $227 = $17;
   $228 = $18;
   $229 = $28;
   $230 = $23;
   $231 = $24;
   _denormalise_bands($216,$221,$52,$226,$227,$228,$229,$230,$231);
   $29 = 0;
   while(1) {
    $232 = $29;
    $233 = $30;
    $234 = ($232|0)<($233|0);
    if (!($234)) {
     break;
    }
    $235 = $13;
    $236 = ((($235)) + 64|0);
    $237 = $29;
    $238 = (($52) + ($237<<2)|0);
    $239 = $15;
    $240 = $26;
    $241 = (($239) + ($240<<2)|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = $32;
    $244 = $29;
    $245 = Math_imul($243, $244)|0;
    $246 = (($242) + ($245<<2)|0);
    $247 = $13;
    $248 = ((($247)) + 60|0);
    $249 = HEAP32[$248>>2]|0;
    $250 = $35;
    $251 = $33;
    $252 = $30;
    $253 = $25;
    _clt_mdct_backward_c($236,$238,$246,$249,$250,$251,$252,$253);
    $254 = $29;
    $255 = (($254) + 1)|0;
    $29 = $255;
   }
   $256 = $26;
   $257 = (($256) + 1)|0;
   $26 = $257;
   $258 = $20;
   $259 = ($257|0)<($258|0);
   if (!($259)) {
    break;
   }
  }
  $260 = $36;
  _llvm_stackrestore(($260|0));
  STACKTOP = sp;return;
 }
 $152 = $15;
 $153 = HEAP32[$152>>2]|0;
 $154 = $35;
 $155 = (($154|0) / 2)&-1;
 $156 = (($153) + ($155<<2)|0);
 $38 = $156;
 $157 = $13;
 $158 = $14;
 $159 = $16;
 $160 = $17;
 $161 = $18;
 $162 = $28;
 $163 = $23;
 $164 = $24;
 _denormalise_bands($157,$158,$52,$159,$160,$161,$162,$163,$164);
 $165 = $13;
 $166 = $14;
 $167 = $31;
 $168 = (($166) + ($167<<2)|0);
 $169 = $38;
 $170 = $16;
 $171 = $34;
 $172 = (($170) + ($171<<2)|0);
 $173 = $17;
 $174 = $18;
 $175 = $28;
 $176 = $23;
 $177 = $24;
 _denormalise_bands($165,$168,$169,$172,$173,$174,$175,$176,$177);
 $27 = 0;
 while(1) {
  $178 = $27;
  $179 = $31;
  $180 = ($178|0)<($179|0);
  if (!($180)) {
   break;
  }
  $181 = $27;
  $182 = (($52) + ($181<<2)|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $38;
  $185 = $27;
  $186 = (($184) + ($185<<2)|0);
  $187 = +HEAPF32[$186>>2];
  $188 = $183 + $187;
  $189 = 0.5 * $188;
  $190 = $27;
  $191 = (($52) + ($190<<2)|0);
  HEAPF32[$191>>2] = $189;
  $192 = $27;
  $193 = (($192) + 1)|0;
  $27 = $193;
 }
 $29 = 0;
 while(1) {
  $194 = $29;
  $195 = $30;
  $196 = ($194|0)<($195|0);
  if (!($196)) {
   break;
  }
  $197 = $13;
  $198 = ((($197)) + 64|0);
  $199 = $29;
  $200 = (($52) + ($199<<2)|0);
  $201 = $15;
  $202 = HEAP32[$201>>2]|0;
  $203 = $32;
  $204 = $29;
  $205 = Math_imul($203, $204)|0;
  $206 = (($202) + ($205<<2)|0);
  $207 = $13;
  $208 = ((($207)) + 60|0);
  $209 = HEAP32[$208>>2]|0;
  $210 = $35;
  $211 = $33;
  $212 = $30;
  $213 = $25;
  _clt_mdct_backward_c($198,$200,$206,$209,$210,$211,$212,$213);
  $214 = $29;
  $215 = (($214) + 1)|0;
  $29 = $215;
 }
 $260 = $36;
 _llvm_stackrestore(($260|0));
 STACKTOP = sp;return;
}
function _ec_get_error_65($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _celt_plc_pitch_search($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $6 = sp + 4096|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _pitch_downsample($8,$7,2048,$9,$10);
 $11 = ((($7)) + 1440|0);
 $12 = $5;
 _pitch_search($11,$7,1328,620,$6,$12);
 $13 = HEAP32[$6>>2]|0;
 $14 = (720 - ($13))|0;
 HEAP32[$6>>2] = $14;
 $15 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _ec_tell_frac($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 3;
 $2 = $9;
 $10 = $1;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (Math_clz32(($12|0))|0);
 $14 = (32 - ($13))|0;
 $4 = $14;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $4;
 $19 = (($18) - 16)|0;
 $20 = $17 >>> $19;
 $3 = $20;
 $21 = $3;
 $22 = $21 >>> 12;
 $23 = (($22) - 8)|0;
 $5 = $23;
 $24 = $3;
 $25 = $5;
 $26 = (4552 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($24>>>0)>($27>>>0);
 $29 = $28&1;
 $30 = $5;
 $31 = (($30) + ($29))|0;
 $5 = $31;
 $32 = $4;
 $33 = $32 << 3;
 $34 = $5;
 $35 = (($33) + ($34))|0;
 $4 = $35;
 $36 = $2;
 $37 = $4;
 $38 = (($36) - ($37))|0;
 STACKTOP = sp;return ($38|0);
}
function _ec_dec_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $3;
 HEAP32[$7>>2] = $6;
 $8 = $5;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = ((($11)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $3;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = 0;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 HEAP32[$16>>2] = 0;
 $17 = $3;
 $18 = ((($17)) + 20|0);
 HEAP32[$18>>2] = 9;
 $19 = $3;
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = 0;
 $21 = $3;
 $22 = ((($21)) + 28|0);
 HEAP32[$22>>2] = 128;
 $23 = $3;
 $24 = (_ec_read_byte($23)|0);
 $25 = $3;
 $26 = ((($25)) + 40|0);
 HEAP32[$26>>2] = $24;
 $27 = $3;
 $28 = ((($27)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1)|0;
 $31 = $3;
 $32 = ((($31)) + 40|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >> 1;
 $35 = (($30) - ($34))|0;
 $36 = $3;
 $37 = ((($36)) + 32|0);
 HEAP32[$37>>2] = $35;
 $38 = $3;
 $39 = ((($38)) + 44|0);
 HEAP32[$39>>2] = 0;
 $40 = $3;
 _ec_dec_normalize($40);
 STACKTOP = sp;return;
}
function _ec_read_byte($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if (!($8)) {
  $18 = 0;
  STACKTOP = sp;return ($18|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 $15 = (($10) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17;
 STACKTOP = sp;return ($18|0);
}
function _ec_dec_normalize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $3 = $1;
  $4 = ((($3)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)<=(8388608);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 8)|0;
  HEAP32[$8>>2] = $10;
  $11 = $1;
  $12 = ((($11)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 8;
  HEAP32[$12>>2] = $14;
  $15 = $1;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $2 = $17;
  $18 = $1;
  $19 = (_ec_read_byte($18)|0);
  $20 = $1;
  $21 = ((($20)) + 40|0);
  HEAP32[$21>>2] = $19;
  $22 = $2;
  $23 = $22 << 8;
  $24 = $1;
  $25 = ((($24)) + 40|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $23 | $26;
  $28 = $27 >> 1;
  $2 = $28;
  $29 = $1;
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 << 8;
  $33 = $2;
  $34 = $33 ^ -1;
  $35 = 255 & $34;
  $36 = (($32) + ($35))|0;
  $37 = $36 & 2147483647;
  $38 = $1;
  $39 = ((($38)) + 32|0);
  HEAP32[$39>>2] = $37;
 }
 STACKTOP = sp;return;
}
function _ec_decode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = (_celt_udiv($7,$8)|0);
 $10 = $2;
 $11 = ((($10)) + 36|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14>>>0) / ($17>>>0))&-1;
 $4 = $18;
 $19 = $3;
 $20 = $4;
 $21 = (($20) + 1)|0;
 $22 = $3;
 $23 = $4;
 $24 = (($23) + 1)|0;
 $25 = (($22) - ($24))|0;
 $26 = $3;
 $27 = $4;
 $28 = (($27) + 1)|0;
 $29 = ($26>>>0)<($28>>>0);
 $30 = $29&1;
 $31 = (0 - ($30))|0;
 $32 = $25 & $31;
 $33 = (($21) + ($32))|0;
 $34 = (($19) - ($33))|0;
 STACKTOP = sp;return ($34|0);
}
function _celt_udiv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _ec_decode_bin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = $7 >>> $8;
 $10 = $2;
 $11 = ((($10)) + 36|0);
 HEAP32[$11>>2] = $9;
 $12 = $2;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14>>>0) / ($17>>>0))&-1;
 $4 = $18;
 $19 = $3;
 $20 = 1 << $19;
 $21 = $4;
 $22 = (($21) + 1)|0;
 $23 = $3;
 $24 = 1 << $23;
 $25 = $4;
 $26 = (($25) + 1)|0;
 $27 = (($24) - ($26))|0;
 $28 = $3;
 $29 = 1 << $28;
 $30 = $4;
 $31 = (($30) + 1)|0;
 $32 = ($29>>>0)<($31>>>0);
 $33 = $32&1;
 $34 = (0 - ($33))|0;
 $35 = $27 & $34;
 $36 = (($22) + ($35))|0;
 $37 = (($20) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _ec_dec_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $7;
 $13 = $6;
 $14 = (($12) - ($13))|0;
 $15 = Math_imul($11, $14)|0;
 $8 = $15;
 $16 = $8;
 $17 = $4;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) - ($16))|0;
 HEAP32[$18>>2] = $20;
 $21 = $5;
 $22 = ($21>>>0)>(0);
 $23 = $4;
 if ($22) {
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = $5;
  $28 = (($26) - ($27))|0;
  $29 = Math_imul($25, $28)|0;
  $36 = $29;
  $34 = $4;
  $35 = ((($34)) + 28|0);
  HEAP32[$35>>2] = $36;
  $37 = $4;
  _ec_dec_normalize($37);
  STACKTOP = sp;return;
 } else {
  $30 = ((($23)) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $8;
  $33 = (($31) - ($32))|0;
  $36 = $33;
  $34 = $4;
  $35 = ((($34)) + 28|0);
  HEAP32[$35>>2] = $36;
  $37 = $4;
  _ec_dec_normalize($37);
  STACKTOP = sp;return;
 }
}
function _ec_dec_bit_logp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $4;
 $15 = $3;
 $16 = $14 >>> $15;
 $6 = $16;
 $17 = $5;
 $18 = $6;
 $19 = ($17>>>0)<($18>>>0);
 $20 = $19&1;
 $7 = $20;
 $21 = $7;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $23 = $5;
  $24 = $6;
  $25 = (($23) - ($24))|0;
  $26 = $2;
  $27 = ((($26)) + 32|0);
  HEAP32[$27>>2] = $25;
 }
 $28 = $7;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $6;
  $36 = $30;
 } else {
  $31 = $4;
  $32 = $6;
  $33 = (($31) - ($32))|0;
  $36 = $33;
 }
 $34 = $2;
 $35 = ((($34)) + 28|0);
 HEAP32[$35>>2] = $36;
 $37 = $2;
 _ec_dec_normalize($37);
 $38 = $7;
 STACKTOP = sp;return ($38|0);
}
function _ec_dec_icdf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = ((($11)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $8 = $13;
 $14 = $3;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $7 = $16;
 $17 = $8;
 $18 = $5;
 $19 = $17 >>> $18;
 $6 = $19;
 $10 = -1;
 while(1) {
  $20 = $8;
  $9 = $20;
  $21 = $6;
  $22 = $4;
  $23 = $10;
  $24 = (($23) + 1)|0;
  $10 = $24;
  $25 = (($22) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = Math_imul($21, $27)|0;
  $8 = $28;
  $29 = $7;
  $30 = $8;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
 }
 $32 = $7;
 $33 = $8;
 $34 = (($32) - ($33))|0;
 $35 = $3;
 $36 = ((($35)) + 32|0);
 HEAP32[$36>>2] = $34;
 $37 = $9;
 $38 = $8;
 $39 = (($37) - ($38))|0;
 $40 = $3;
 $41 = ((($40)) + 28|0);
 HEAP32[$41>>2] = $39;
 $42 = $3;
 _ec_dec_normalize($42);
 $43 = $10;
 STACKTOP = sp;return ($43|0);
}
function _ec_dec_uint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = (($9) + -1)|0;
 $4 = $10;
 $11 = $4;
 $12 = (Math_clz32(($11|0))|0);
 $13 = (32 - ($12))|0;
 $7 = $13;
 $14 = $7;
 $15 = ($14|0)>(8);
 if (!($15)) {
  $44 = $4;
  $45 = (($44) + 1)|0;
  $4 = $45;
  $46 = $3;
  $47 = $4;
  $48 = (_ec_decode($46,$47)|0);
  $6 = $48;
  $49 = $3;
  $50 = $6;
  $51 = $6;
  $52 = (($51) + 1)|0;
  $53 = $4;
  _ec_dec_update($49,$50,$52,$53);
  $54 = $6;
  $2 = $54;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 $16 = $7;
 $17 = (($16) - 8)|0;
 $7 = $17;
 $18 = $4;
 $19 = $7;
 $20 = $18 >>> $19;
 $21 = (($20) + 1)|0;
 $5 = $21;
 $22 = $3;
 $23 = $5;
 $24 = (_ec_decode($22,$23)|0);
 $6 = $24;
 $25 = $3;
 $26 = $6;
 $27 = $6;
 $28 = (($27) + 1)|0;
 $29 = $5;
 _ec_dec_update($25,$26,$28,$29);
 $30 = $6;
 $31 = $7;
 $32 = $30 << $31;
 $33 = $3;
 $34 = $7;
 $35 = (_ec_dec_bits($33,$34)|0);
 $36 = $32 | $35;
 $8 = $36;
 $37 = $8;
 $38 = $4;
 $39 = ($37>>>0)<=($38>>>0);
 if ($39) {
  $40 = $8;
  $2 = $40;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 } else {
  $41 = $3;
  $42 = ((($41)) + 44|0);
  HEAP32[$42>>2] = 1;
  $43 = $4;
  $2 = $43;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _ec_dec_bits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $5 = $12;
 $13 = $5;
 $14 = $3;
 $15 = ($13>>>0)<($14>>>0);
 if ($15) {
  while(1) {
   $16 = $2;
   $17 = (_ec_read_byte_from_end($16)|0);
   $18 = $5;
   $19 = $17 << $18;
   $20 = $4;
   $21 = $20 | $19;
   $4 = $21;
   $22 = $5;
   $23 = (($22) + 8)|0;
   $5 = $23;
   $24 = $5;
   $25 = ($24|0)<=(24);
   if (!($25)) {
    break;
   }
  }
 }
 $26 = $4;
 $27 = $3;
 $28 = 1 << $27;
 $29 = (($28) - 1)|0;
 $30 = $26 & $29;
 $6 = $30;
 $31 = $3;
 $32 = $4;
 $33 = $32 >>> $31;
 $4 = $33;
 $34 = $3;
 $35 = $5;
 $36 = (($35) - ($34))|0;
 $5 = $36;
 $37 = $4;
 $38 = $2;
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = $37;
 $40 = $5;
 $41 = $2;
 $42 = ((($41)) + 16|0);
 HEAP32[$42>>2] = $40;
 $43 = $3;
 $44 = $2;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($43))|0;
 HEAP32[$45>>2] = $47;
 $48 = $6;
 STACKTOP = sp;return ($48|0);
}
function _ec_read_byte_from_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if (!($8)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $1;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 $18 = (($13) - ($17))|0;
 $19 = (($10) + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function _ec_enc_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $3;
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $3;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = $3;
 $15 = ((($14)) + 20|0);
 HEAP32[$15>>2] = 33;
 $16 = $3;
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 $19 = ((($18)) + 28|0);
 HEAP32[$19>>2] = -2147483648;
 $20 = $3;
 $21 = ((($20)) + 40|0);
 HEAP32[$21>>2] = -1;
 $22 = $3;
 $23 = ((($22)) + 32|0);
 HEAP32[$23>>2] = 0;
 $24 = $3;
 $25 = ((($24)) + 36|0);
 HEAP32[$25>>2] = 0;
 $26 = $5;
 $27 = $3;
 $28 = ((($27)) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $3;
 $30 = ((($29)) + 44|0);
 HEAP32[$30>>2] = 0;
 STACKTOP = sp;return;
}
function _ec_encode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $7;
 $13 = (_celt_udiv_80($11,$12)|0);
 $8 = $13;
 $14 = $5;
 $15 = ($14>>>0)>(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $8;
  $20 = $7;
  $21 = $5;
  $22 = (($20) - ($21))|0;
  $23 = Math_imul($19, $22)|0;
  $24 = (($18) - ($23))|0;
  $25 = $4;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24))|0;
  HEAP32[$26>>2] = $28;
  $29 = $8;
  $30 = $6;
  $31 = $5;
  $32 = (($30) - ($31))|0;
  $33 = Math_imul($29, $32)|0;
  $34 = $4;
  $35 = ((($34)) + 28|0);
  HEAP32[$35>>2] = $33;
  $45 = $4;
  _ec_enc_normalize($45);
  STACKTOP = sp;return;
 } else {
  $36 = $8;
  $37 = $7;
  $38 = $6;
  $39 = (($37) - ($38))|0;
  $40 = Math_imul($36, $39)|0;
  $41 = $4;
  $42 = ((($41)) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) - ($40))|0;
  HEAP32[$42>>2] = $44;
  $45 = $4;
  _ec_enc_normalize($45);
  STACKTOP = sp;return;
 }
}
function _celt_udiv_80($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _ec_enc_normalize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = ((($2)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4>>>0)<=(8388608);
  if (!($5)) {
   break;
  }
  $6 = $1;
  $7 = $1;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 >>> 23;
  _ec_enc_carry_out($6,$10);
  $11 = $1;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 8;
  $15 = $14 & 2147483647;
  $16 = $1;
  $17 = ((($16)) + 32|0);
  HEAP32[$17>>2] = $15;
  $18 = $1;
  $19 = ((($18)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 << 8;
  HEAP32[$19>>2] = $21;
  $22 = $1;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8)|0;
  HEAP32[$23>>2] = $25;
 }
 STACKTOP = sp;return;
}
function _ec_enc_carry_out($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ($6|0)!=(255);
 if (!($7)) {
  $48 = $2;
  $49 = ((($48)) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$49>>2] = $51;
  STACKTOP = sp;return;
 }
 $8 = $3;
 $9 = $8 >> 8;
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>=(0);
 if ($13) {
  $14 = $2;
  $15 = $2;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = (($17) + ($18))|0;
  $20 = (_ec_write_byte($14,$19)|0);
  $21 = $2;
  $22 = ((($21)) + 44|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 | $20;
  HEAP32[$22>>2] = $24;
 }
 $25 = $2;
 $26 = ((($25)) + 36|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(0);
 if ($28) {
  $29 = $4;
  $30 = (255 + ($29))|0;
  $31 = $30 & 255;
  $5 = $31;
  while(1) {
   $32 = $2;
   $33 = $5;
   $34 = (_ec_write_byte($32,$33)|0);
   $35 = $2;
   $36 = ((($35)) + 44|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 | $34;
   HEAP32[$36>>2] = $38;
   $39 = $2;
   $40 = ((($39)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + -1)|0;
   HEAP32[$40>>2] = $42;
   $43 = ($42>>>0)>(0);
   if (!($43)) {
    break;
   }
  }
 }
 $44 = $3;
 $45 = $44 & 255;
 $46 = $2;
 $47 = ((($46)) + 40|0);
 HEAP32[$47>>2] = $45;
 STACKTOP = sp;return;
}
function _ec_write_byte($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if ($15) {
  $2 = -1;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 } else {
  $16 = $4;
  $17 = $16&255;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$21>>2] = $23;
  $24 = (($19) + ($22)|0);
  HEAP8[$24>>0] = $17;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _ec_encode_bin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $7;
 $13 = $11 >>> $12;
 $8 = $13;
 $14 = $5;
 $15 = ($14>>>0)>(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $8;
  $20 = $7;
  $21 = 1 << $20;
  $22 = $5;
  $23 = (($21) - ($22))|0;
  $24 = Math_imul($19, $23)|0;
  $25 = (($18) - ($24))|0;
  $26 = $4;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25))|0;
  HEAP32[$27>>2] = $29;
  $30 = $8;
  $31 = $6;
  $32 = $5;
  $33 = (($31) - ($32))|0;
  $34 = Math_imul($30, $33)|0;
  $35 = $4;
  $36 = ((($35)) + 28|0);
  HEAP32[$36>>2] = $34;
  $47 = $4;
  _ec_enc_normalize($47);
  STACKTOP = sp;return;
 } else {
  $37 = $8;
  $38 = $7;
  $39 = 1 << $38;
  $40 = $6;
  $41 = (($39) - ($40))|0;
  $42 = Math_imul($37, $41)|0;
  $43 = $4;
  $44 = ((($43)) + 28|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) - ($42))|0;
  HEAP32[$44>>2] = $46;
  $47 = $4;
  _ec_enc_normalize($47);
  STACKTOP = sp;return;
 }
}
function _ec_enc_bit_logp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $3;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $8 = $14;
 $15 = $6;
 $16 = $5;
 $17 = $15 >>> $16;
 $7 = $17;
 $18 = $7;
 $19 = $6;
 $20 = (($19) - ($18))|0;
 $6 = $20;
 $21 = $4;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $8;
  $24 = $6;
  $25 = (($23) + ($24))|0;
  $26 = $3;
  $27 = ((($26)) + 32|0);
  HEAP32[$27>>2] = $25;
 }
 $28 = $4;
 $29 = ($28|0)!=(0);
 $30 = $7;
 $31 = $6;
 $32 = $29 ? $30 : $31;
 $33 = $3;
 $34 = ((($33)) + 28|0);
 HEAP32[$34>>2] = $32;
 $35 = $3;
 _ec_enc_normalize($35);
 STACKTOP = sp;return;
}
function _ec_enc_icdf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $7;
 $13 = $11 >>> $12;
 $8 = $13;
 $14 = $5;
 $15 = ($14|0)>(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $8;
  $20 = $6;
  $21 = $5;
  $22 = (($21) - 1)|0;
  $23 = (($20) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = Math_imul($19, $25)|0;
  $27 = (($18) - ($26))|0;
  $28 = $4;
  $29 = ((($28)) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($27))|0;
  HEAP32[$29>>2] = $31;
  $32 = $8;
  $33 = $6;
  $34 = $5;
  $35 = (($34) - 1)|0;
  $36 = (($33) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $6;
  $40 = $5;
  $41 = (($39) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($38) - ($43))|0;
  $45 = Math_imul($32, $44)|0;
  $46 = $4;
  $47 = ((($46)) + 28|0);
  HEAP32[$47>>2] = $45;
  $59 = $4;
  _ec_enc_normalize($59);
  STACKTOP = sp;return;
 } else {
  $48 = $8;
  $49 = $6;
  $50 = $5;
  $51 = (($49) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = Math_imul($48, $53)|0;
  $55 = $4;
  $56 = ((($55)) + 28|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) - ($54))|0;
  HEAP32[$56>>2] = $58;
  $59 = $4;
  _ec_enc_normalize($59);
  STACKTOP = sp;return;
 }
}
function _ec_enc_uint($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = (($9) + -1)|0;
 $5 = $10;
 $11 = $5;
 $12 = (Math_clz32(($11|0))|0);
 $13 = (32 - ($12))|0;
 $8 = $13;
 $14 = $8;
 $15 = ($14|0)>(8);
 if ($15) {
  $16 = $8;
  $17 = (($16) - 8)|0;
  $8 = $17;
  $18 = $5;
  $19 = $8;
  $20 = $18 >>> $19;
  $21 = (($20) + 1)|0;
  $6 = $21;
  $22 = $4;
  $23 = $8;
  $24 = $22 >>> $23;
  $7 = $24;
  $25 = $3;
  $26 = $7;
  $27 = $7;
  $28 = (($27) + 1)|0;
  $29 = $6;
  _ec_encode($25,$26,$28,$29);
  $30 = $3;
  $31 = $4;
  $32 = $8;
  $33 = 1 << $32;
  $34 = (($33) - 1)|0;
  $35 = $31 & $34;
  $36 = $8;
  _ec_enc_bits($30,$35,$36);
  STACKTOP = sp;return;
 } else {
  $37 = $3;
  $38 = $4;
  $39 = $4;
  $40 = (($39) + 1)|0;
  $41 = $5;
  $42 = (($41) + 1)|0;
  _ec_encode($37,$38,$40,$42);
  STACKTOP = sp;return;
 }
}
function _ec_enc_bits($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $7 = $13;
 $14 = $7;
 $15 = $5;
 $16 = (($14) + ($15))|0;
 $17 = ($16>>>0)>(32);
 if ($17) {
  while(1) {
   $18 = $3;
   $19 = $6;
   $20 = $19 & 255;
   $21 = (_ec_write_byte_at_end($18,$20)|0);
   $22 = $3;
   $23 = ((($22)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 | $21;
   HEAP32[$23>>2] = $25;
   $26 = $6;
   $27 = $26 >>> 8;
   $6 = $27;
   $28 = $7;
   $29 = (($28) - 8)|0;
   $7 = $29;
   $30 = $7;
   $31 = ($30|0)>=(8);
   if (!($31)) {
    break;
   }
  }
 }
 $32 = $4;
 $33 = $7;
 $34 = $32 << $33;
 $35 = $6;
 $36 = $35 | $34;
 $6 = $36;
 $37 = $5;
 $38 = $7;
 $39 = (($38) + ($37))|0;
 $7 = $39;
 $40 = $6;
 $41 = $3;
 $42 = ((($41)) + 12|0);
 HEAP32[$42>>2] = $40;
 $43 = $7;
 $44 = $3;
 $45 = ((($44)) + 16|0);
 HEAP32[$45>>2] = $43;
 $46 = $5;
 $47 = $3;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($46))|0;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return;
}
function _ec_write_byte_at_end($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = $3;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 if ($15) {
  $2 = -1;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 } else {
  $16 = $4;
  $17 = $16&255;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$24>>2] = $26;
  $27 = (($22) - ($26))|0;
  $28 = (($19) + ($27)|0);
  HEAP8[$28>>0] = $17;
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ec_enc_patch_initial_bits($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = (8 - ($8))|0;
 $6 = $9;
 $10 = $5;
 $11 = 1 << $10;
 $12 = (($11) - 1)|0;
 $13 = $6;
 $14 = $12 << $13;
 $7 = $14;
 $15 = $3;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)>(0);
 $19 = $3;
 if ($18) {
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $7;
  $24 = $23 ^ -1;
  $25 = $22 & $24;
  $26 = $4;
  $27 = $6;
  $28 = $26 << $27;
  $29 = $25 | $28;
  $30 = $29&255;
  $31 = $3;
  $32 = HEAP32[$31>>2]|0;
  HEAP8[$32>>0] = $30;
  STACKTOP = sp;return;
 }
 $33 = ((($19)) + 40|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>=(0);
 $36 = $3;
 if ($35) {
  $37 = ((($36)) + 40|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $7;
  $40 = $39 ^ -1;
  $41 = $38 & $40;
  $42 = $4;
  $43 = $6;
  $44 = $42 << $43;
  $45 = $41 | $44;
  $46 = $3;
  $47 = ((($46)) + 40|0);
  HEAP32[$47>>2] = $45;
  STACKTOP = sp;return;
 }
 $48 = ((($36)) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $5;
 $51 = -2147483648 >>> $50;
 $52 = ($49>>>0)<=($51>>>0);
 $53 = $3;
 if ($52) {
  $54 = ((($53)) + 32|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $7;
  $57 = $56 << 23;
  $58 = $57 ^ -1;
  $59 = $55 & $58;
  $60 = $4;
  $61 = $6;
  $62 = (23 + ($61))|0;
  $63 = $60 << $62;
  $64 = $59 | $63;
  $65 = $3;
  $66 = ((($65)) + 32|0);
  HEAP32[$66>>2] = $64;
  STACKTOP = sp;return;
 } else {
  $67 = ((($53)) + 44|0);
  HEAP32[$67>>2] = -1;
  STACKTOP = sp;return;
 }
}
function _ec_enc_shrink($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = (($5) + ($6)|0);
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0 - ($10))|0;
 $12 = (($7) + ($11)|0);
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + ($17)|0);
 $19 = $2;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (0 - ($21))|0;
 $23 = (($18) + ($22)|0);
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26;
 $28 = $2;
 $29 = HEAP32[$28>>2]|0;
 $30 = $3;
 $31 = (($29) + ($30)|0);
 $32 = $2;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (0 - ($34))|0;
 $36 = (($31) + ($35)|0);
 $37 = $2;
 $38 = HEAP32[$37>>2]|0;
 $39 = $2;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($38) + ($41)|0);
 $43 = $2;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (0 - ($45))|0;
 $47 = (($42) + ($46)|0);
 $48 = $36;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = 0;
 $52 = (($27) + ($51))|0;
 _memmove(($12|0),($23|0),($52|0))|0;
 $53 = $3;
 $54 = $2;
 $55 = ((($54)) + 4|0);
 HEAP32[$55>>2] = $53;
 STACKTOP = sp;return;
}
function _ec_enc_done($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (Math_clz32(($9|0))|0);
 $11 = (32 - ($10))|0;
 $12 = (32 - ($11))|0;
 $6 = $12;
 $13 = $6;
 $14 = 2147483647 >>> $13;
 $4 = $14;
 $15 = $1;
 $16 = ((($15)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $4;
 $19 = (($17) + ($18))|0;
 $20 = $4;
 $21 = $20 ^ -1;
 $22 = $19 & $21;
 $5 = $22;
 $23 = $5;
 $24 = $4;
 $25 = $23 | $24;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = ((($29)) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) + ($31))|0;
 $33 = ($25>>>0)>=($32>>>0);
 if ($33) {
  $34 = $6;
  $35 = (($34) + 1)|0;
  $6 = $35;
  $36 = $4;
  $37 = $36 >>> 1;
  $4 = $37;
  $38 = $1;
  $39 = ((($38)) + 32|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $4;
  $42 = (($40) + ($41))|0;
  $43 = $4;
  $44 = $43 ^ -1;
  $45 = $42 & $44;
  $5 = $45;
 }
 while(1) {
  $46 = $6;
  $47 = ($46|0)>(0);
  $48 = $1;
  if (!($47)) {
   break;
  }
  $49 = $5;
  $50 = $49 >>> 23;
  _ec_enc_carry_out($48,$50);
  $51 = $5;
  $52 = $51 << 8;
  $53 = $52 & 2147483647;
  $5 = $53;
  $54 = $6;
  $55 = (($54) - 8)|0;
  $6 = $55;
 }
 $56 = ((($48)) + 40|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)>=(0);
 if ($58) {
  label = 7;
 } else {
  $59 = $1;
  $60 = ((($59)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61>>>0)>(0);
  if ($62) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $63 = $1;
  _ec_enc_carry_out($63,0);
 }
 $64 = $1;
 $65 = ((($64)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $2 = $66;
 $67 = $1;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $3 = $69;
 while(1) {
  $70 = $3;
  $71 = ($70|0)>=(8);
  $72 = $1;
  if (!($71)) {
   break;
  }
  $73 = $2;
  $74 = $73 & 255;
  $75 = (_ec_write_byte_at_end($72,$74)|0);
  $76 = $1;
  $77 = ((($76)) + 44|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 | $75;
  HEAP32[$77>>2] = $79;
  $80 = $2;
  $81 = $80 >>> 8;
  $2 = $81;
  $82 = $3;
  $83 = (($82) - 8)|0;
  $3 = $83;
 }
 $84 = ((($72)) + 44|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0);
 if ($86) {
  STACKTOP = sp;return;
 }
 $87 = $1;
 $88 = HEAP32[$87>>2]|0;
 $89 = $1;
 $90 = ((($89)) + 24|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($88) + ($91)|0);
 $93 = $1;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $1;
 $97 = ((($96)) + 24|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($95) - ($98))|0;
 $100 = $1;
 $101 = ((($100)) + 8|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($99) - ($102))|0;
 $104 = $103;
 _memset(($92|0),0,($104|0))|0;
 $105 = $3;
 $106 = ($105|0)>(0);
 if (!($106)) {
  STACKTOP = sp;return;
 }
 $107 = $1;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $1;
 $111 = ((($110)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($109>>>0)>=($112>>>0);
 if ($113) {
  $114 = $1;
  $115 = ((($114)) + 44|0);
  HEAP32[$115>>2] = -1;
  STACKTOP = sp;return;
 }
 $116 = $6;
 $117 = (0 - ($116))|0;
 $6 = $117;
 $118 = $1;
 $119 = ((($118)) + 24|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $1;
 $122 = ((($121)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($120) + ($123))|0;
 $125 = $1;
 $126 = ((($125)) + 4|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124>>>0)>=($127>>>0);
 if ($128) {
  $129 = $6;
  $130 = $3;
  $131 = ($129|0)<($130|0);
  if ($131) {
   $132 = $6;
   $133 = 1 << $132;
   $134 = (($133) - 1)|0;
   $135 = $2;
   $136 = $135 & $134;
   $2 = $136;
   $137 = $1;
   $138 = ((($137)) + 44|0);
   HEAP32[$138>>2] = -1;
  }
 }
 $139 = $2;
 $140 = $139&255;
 $141 = $140&255;
 $142 = $1;
 $143 = HEAP32[$142>>2]|0;
 $144 = $1;
 $145 = ((($144)) + 4|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = $1;
 $148 = ((($147)) + 8|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($146) - ($149))|0;
 $151 = (($150) - 1)|0;
 $152 = (($143) + ($151)|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = $154 | $141;
 $156 = $155&255;
 HEAP8[$152>>0] = $156;
 STACKTOP = sp;return;
}
function _opus_fft_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
 } else {
  $18 = 0;
 }
 $10 = $18;
 HEAP32[$8>>2] = 1;
 $7 = 0;
 while(1) {
  $19 = $2;
  $20 = ((($19)) + 12|0);
  $21 = $7;
  $22 = $21<<1;
  $23 = (($20) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $6 = $25;
  $26 = $2;
  $27 = ((($26)) + 12|0);
  $28 = $7;
  $29 = $28<<1;
  $30 = (($29) + 1)|0;
  $31 = (($27) + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32 << 16 >> 16;
  $5 = $33;
  $34 = $7;
  $35 = (($8) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $6;
  $38 = Math_imul($36, $37)|0;
  $39 = $7;
  $40 = (($39) + 1)|0;
  $41 = (($8) + ($40<<2)|0);
  HEAP32[$41>>2] = $38;
  $42 = $7;
  $43 = (($42) + 1)|0;
  $7 = $43;
  $44 = $5;
  $45 = ($44|0)!=(1);
  if (!($45)) {
   break;
  }
 }
 $46 = $2;
 $47 = ((($46)) + 12|0);
 $48 = $7;
 $49 = $48<<1;
 $50 = (($49) - 1)|0;
 $51 = (($47) + ($50<<1)|0);
 $52 = HEAP16[$51>>1]|0;
 $53 = $52 << 16 >> 16;
 $5 = $53;
 $54 = $7;
 $55 = (($54) - 1)|0;
 $9 = $55;
 while(1) {
  $56 = $9;
  $57 = ($56|0)>=(0);
  if (!($57)) {
   break;
  }
  $58 = $9;
  $59 = ($58|0)!=(0);
  if ($59) {
   $60 = $2;
   $61 = ((($60)) + 12|0);
   $62 = $9;
   $63 = $62<<1;
   $64 = (($63) - 1)|0;
   $65 = (($61) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $4 = $67;
  } else {
   $4 = 1;
  }
  $68 = $2;
  $69 = ((($68)) + 12|0);
  $70 = $9;
  $71 = $70<<1;
  $72 = (($69) + ($71<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  switch ($74|0) {
  case 2:  {
   $75 = $3;
   $76 = $5;
   $77 = $9;
   $78 = (($8) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   _kf_bfly2($75,$76,$79);
   break;
  }
  case 4:  {
   $80 = $3;
   $81 = $9;
   $82 = (($8) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $10;
   $85 = $83 << $84;
   $86 = $2;
   $87 = $5;
   $88 = $9;
   $89 = (($8) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $4;
   _kf_bfly4($80,$85,$86,$87,$90,$91);
   break;
  }
  case 3:  {
   $92 = $3;
   $93 = $9;
   $94 = (($8) + ($93<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $10;
   $97 = $95 << $96;
   $98 = $2;
   $99 = $5;
   $100 = $9;
   $101 = (($8) + ($100<<2)|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = $4;
   _kf_bfly3($92,$97,$98,$99,$102,$103);
   break;
  }
  case 5:  {
   $104 = $3;
   $105 = $9;
   $106 = (($8) + ($105<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $10;
   $109 = $107 << $108;
   $110 = $2;
   $111 = $5;
   $112 = $9;
   $113 = (($8) + ($112<<2)|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $4;
   _kf_bfly5($104,$109,$110,$111,$114,$115);
   break;
  }
  default: {
  }
  }
  $116 = $4;
  $5 = $116;
  $117 = $9;
  $118 = (($117) + -1)|0;
  $9 = $118;
 }
 STACKTOP = sp;return;
}
function _kf_bfly2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0.70710676908493042;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $5;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = ((($13)) + 32|0);
  $6 = $14;
  $15 = $6;
  ;HEAP32[$9>>2]=HEAP32[$15>>2]|0;HEAP32[$9+4>>2]=HEAP32[$15+4>>2]|0;
  $16 = $3;
  $17 = +HEAPF32[$16>>2];
  $18 = +HEAPF32[$9>>2];
  $19 = $17 - $18;
  $20 = $6;
  HEAPF32[$20>>2] = $19;
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = ((($9)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $23 - $25;
  $27 = $6;
  $28 = ((($27)) + 4|0);
  HEAPF32[$28>>2] = $26;
  $29 = +HEAPF32[$9>>2];
  $30 = $3;
  $31 = +HEAPF32[$30>>2];
  $32 = $31 + $29;
  HEAPF32[$30>>2] = $32;
  $33 = ((($9)) + 4|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $3;
  $36 = ((($35)) + 4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 + $34;
  HEAPF32[$36>>2] = $38;
  $39 = $6;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $6;
  $43 = ((($42)) + 8|0);
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $41 + $45;
  $47 = $8;
  $48 = $46 * $47;
  HEAPF32[$9>>2] = $48;
  $49 = $6;
  $50 = ((($49)) + 8|0);
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $6;
  $54 = ((($53)) + 8|0);
  $55 = +HEAPF32[$54>>2];
  $56 = $52 - $55;
  $57 = $8;
  $58 = $56 * $57;
  $59 = ((($9)) + 4|0);
  HEAPF32[$59>>2] = $58;
  $60 = $3;
  $61 = ((($60)) + 8|0);
  $62 = +HEAPF32[$61>>2];
  $63 = +HEAPF32[$9>>2];
  $64 = $62 - $63;
  $65 = $6;
  $66 = ((($65)) + 8|0);
  HEAPF32[$66>>2] = $64;
  $67 = $3;
  $68 = ((($67)) + 8|0);
  $69 = ((($68)) + 4|0);
  $70 = +HEAPF32[$69>>2];
  $71 = ((($9)) + 4|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $70 - $72;
  $74 = $6;
  $75 = ((($74)) + 8|0);
  $76 = ((($75)) + 4|0);
  HEAPF32[$76>>2] = $73;
  $77 = +HEAPF32[$9>>2];
  $78 = $3;
  $79 = ((($78)) + 8|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $80 + $77;
  HEAPF32[$79>>2] = $81;
  $82 = ((($9)) + 4|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $3;
  $85 = ((($84)) + 8|0);
  $86 = ((($85)) + 4|0);
  $87 = +HEAPF32[$86>>2];
  $88 = $87 + $83;
  HEAPF32[$86>>2] = $88;
  $89 = $6;
  $90 = ((($89)) + 16|0);
  $91 = ((($90)) + 4|0);
  $92 = +HEAPF32[$91>>2];
  HEAPF32[$9>>2] = $92;
  $93 = $6;
  $94 = ((($93)) + 16|0);
  $95 = +HEAPF32[$94>>2];
  $96 = - $95;
  $97 = ((($9)) + 4|0);
  HEAPF32[$97>>2] = $96;
  $98 = $3;
  $99 = ((($98)) + 16|0);
  $100 = +HEAPF32[$99>>2];
  $101 = +HEAPF32[$9>>2];
  $102 = $100 - $101;
  $103 = $6;
  $104 = ((($103)) + 16|0);
  HEAPF32[$104>>2] = $102;
  $105 = $3;
  $106 = ((($105)) + 16|0);
  $107 = ((($106)) + 4|0);
  $108 = +HEAPF32[$107>>2];
  $109 = ((($9)) + 4|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $108 - $110;
  $112 = $6;
  $113 = ((($112)) + 16|0);
  $114 = ((($113)) + 4|0);
  HEAPF32[$114>>2] = $111;
  $115 = +HEAPF32[$9>>2];
  $116 = $3;
  $117 = ((($116)) + 16|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $118 + $115;
  HEAPF32[$117>>2] = $119;
  $120 = ((($9)) + 4|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $3;
  $123 = ((($122)) + 16|0);
  $124 = ((($123)) + 4|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $125 + $121;
  HEAPF32[$124>>2] = $126;
  $127 = $6;
  $128 = ((($127)) + 24|0);
  $129 = ((($128)) + 4|0);
  $130 = +HEAPF32[$129>>2];
  $131 = $6;
  $132 = ((($131)) + 24|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $130 - $133;
  $135 = $8;
  $136 = $134 * $135;
  HEAPF32[$9>>2] = $136;
  $137 = $6;
  $138 = ((($137)) + 24|0);
  $139 = ((($138)) + 4|0);
  $140 = +HEAPF32[$139>>2];
  $141 = - $140;
  $142 = $6;
  $143 = ((($142)) + 24|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $141 - $144;
  $146 = $8;
  $147 = $145 * $146;
  $148 = ((($9)) + 4|0);
  HEAPF32[$148>>2] = $147;
  $149 = $3;
  $150 = ((($149)) + 24|0);
  $151 = +HEAPF32[$150>>2];
  $152 = +HEAPF32[$9>>2];
  $153 = $151 - $152;
  $154 = $6;
  $155 = ((($154)) + 24|0);
  HEAPF32[$155>>2] = $153;
  $156 = $3;
  $157 = ((($156)) + 24|0);
  $158 = ((($157)) + 4|0);
  $159 = +HEAPF32[$158>>2];
  $160 = ((($9)) + 4|0);
  $161 = +HEAPF32[$160>>2];
  $162 = $159 - $161;
  $163 = $6;
  $164 = ((($163)) + 24|0);
  $165 = ((($164)) + 4|0);
  HEAPF32[$165>>2] = $162;
  $166 = +HEAPF32[$9>>2];
  $167 = $3;
  $168 = ((($167)) + 24|0);
  $169 = +HEAPF32[$168>>2];
  $170 = $169 + $166;
  HEAPF32[$168>>2] = $170;
  $171 = ((($9)) + 4|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $3;
  $174 = ((($173)) + 24|0);
  $175 = ((($174)) + 4|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $176 + $172;
  HEAPF32[$175>>2] = $177;
  $178 = $3;
  $179 = ((($178)) + 64|0);
  $3 = $179;
  $180 = $7;
  $181 = (($180) + 1)|0;
  $7 = $181;
 }
 STACKTOP = sp;return;
}
function _kf_bfly4($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0.0, $290 = 0.0, $291 = 0, $292 = 0.0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0, $297 = 0, $298 = 0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0.0, $317 = 0.0;
 var $318 = 0, $319 = 0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0.0, $330 = 0.0, $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0.0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0;
 var $372 = 0, $373 = 0.0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $40 = 0.0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0;
 var $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0;
 var $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0;
 var $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $13 = sp + 88|0;
 $14 = sp + 80|0;
 $16 = sp + 24|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $23 = $9;
 $24 = ($23|0)==(1);
 if ($24) {
  $12 = 0;
  while(1) {
   $25 = $12;
   $26 = $10;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $6;
   $29 = +HEAPF32[$28>>2];
   $30 = $6;
   $31 = ((($30)) + 16|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $29 - $32;
   HEAPF32[$13>>2] = $33;
   $34 = $6;
   $35 = ((($34)) + 4|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $6;
   $38 = ((($37)) + 16|0);
   $39 = ((($38)) + 4|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $36 - $40;
   $42 = ((($13)) + 4|0);
   HEAPF32[$42>>2] = $41;
   $43 = $6;
   $44 = ((($43)) + 16|0);
   $45 = +HEAPF32[$44>>2];
   $46 = $6;
   $47 = +HEAPF32[$46>>2];
   $48 = $47 + $45;
   HEAPF32[$46>>2] = $48;
   $49 = $6;
   $50 = ((($49)) + 16|0);
   $51 = ((($50)) + 4|0);
   $52 = +HEAPF32[$51>>2];
   $53 = $6;
   $54 = ((($53)) + 4|0);
   $55 = +HEAPF32[$54>>2];
   $56 = $55 + $52;
   HEAPF32[$54>>2] = $56;
   $57 = $6;
   $58 = ((($57)) + 8|0);
   $59 = +HEAPF32[$58>>2];
   $60 = $6;
   $61 = ((($60)) + 24|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $59 + $62;
   HEAPF32[$14>>2] = $63;
   $64 = $6;
   $65 = ((($64)) + 8|0);
   $66 = ((($65)) + 4|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $6;
   $69 = ((($68)) + 24|0);
   $70 = ((($69)) + 4|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $67 + $71;
   $73 = ((($14)) + 4|0);
   HEAPF32[$73>>2] = $72;
   $74 = $6;
   $75 = +HEAPF32[$74>>2];
   $76 = +HEAPF32[$14>>2];
   $77 = $75 - $76;
   $78 = $6;
   $79 = ((($78)) + 16|0);
   HEAPF32[$79>>2] = $77;
   $80 = $6;
   $81 = ((($80)) + 4|0);
   $82 = +HEAPF32[$81>>2];
   $83 = ((($14)) + 4|0);
   $84 = +HEAPF32[$83>>2];
   $85 = $82 - $84;
   $86 = $6;
   $87 = ((($86)) + 16|0);
   $88 = ((($87)) + 4|0);
   HEAPF32[$88>>2] = $85;
   $89 = +HEAPF32[$14>>2];
   $90 = $6;
   $91 = +HEAPF32[$90>>2];
   $92 = $91 + $89;
   HEAPF32[$90>>2] = $92;
   $93 = ((($14)) + 4|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $6;
   $96 = ((($95)) + 4|0);
   $97 = +HEAPF32[$96>>2];
   $98 = $97 + $94;
   HEAPF32[$96>>2] = $98;
   $99 = $6;
   $100 = ((($99)) + 8|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $6;
   $103 = ((($102)) + 24|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $101 - $104;
   HEAPF32[$14>>2] = $105;
   $106 = $6;
   $107 = ((($106)) + 8|0);
   $108 = ((($107)) + 4|0);
   $109 = +HEAPF32[$108>>2];
   $110 = $6;
   $111 = ((($110)) + 24|0);
   $112 = ((($111)) + 4|0);
   $113 = +HEAPF32[$112>>2];
   $114 = $109 - $113;
   $115 = ((($14)) + 4|0);
   HEAPF32[$115>>2] = $114;
   $116 = +HEAPF32[$13>>2];
   $117 = ((($14)) + 4|0);
   $118 = +HEAPF32[$117>>2];
   $119 = $116 + $118;
   $120 = $6;
   $121 = ((($120)) + 8|0);
   HEAPF32[$121>>2] = $119;
   $122 = ((($13)) + 4|0);
   $123 = +HEAPF32[$122>>2];
   $124 = +HEAPF32[$14>>2];
   $125 = $123 - $124;
   $126 = $6;
   $127 = ((($126)) + 8|0);
   $128 = ((($127)) + 4|0);
   HEAPF32[$128>>2] = $125;
   $129 = +HEAPF32[$13>>2];
   $130 = ((($14)) + 4|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $129 - $131;
   $133 = $6;
   $134 = ((($133)) + 24|0);
   HEAPF32[$134>>2] = $132;
   $135 = ((($13)) + 4|0);
   $136 = +HEAPF32[$135>>2];
   $137 = +HEAPF32[$14>>2];
   $138 = $136 + $137;
   $139 = $6;
   $140 = ((($139)) + 24|0);
   $141 = ((($140)) + 4|0);
   HEAPF32[$141>>2] = $138;
   $142 = $6;
   $143 = ((($142)) + 32|0);
   $6 = $143;
   $144 = $12;
   $145 = (($144) + 1)|0;
   $12 = $145;
  }
  STACKTOP = sp;return;
 }
 $146 = $9;
 $147 = $146<<1;
 $20 = $147;
 $148 = $9;
 $149 = ($148*3)|0;
 $21 = $149;
 $150 = $6;
 $22 = $150;
 $12 = 0;
 while(1) {
  $151 = $12;
  $152 = $10;
  $153 = ($151|0)<($152|0);
  if (!($153)) {
   break;
  }
  $154 = $22;
  $155 = $12;
  $156 = $11;
  $157 = Math_imul($155, $156)|0;
  $158 = (($154) + ($157<<3)|0);
  $6 = $158;
  $159 = $8;
  $160 = ((($159)) + 48|0);
  $161 = HEAP32[$160>>2]|0;
  $17 = $161;
  $18 = $161;
  $19 = $161;
  $15 = 0;
  while(1) {
   $162 = $15;
   $163 = $9;
   $164 = ($162|0)<($163|0);
   if (!($164)) {
    break;
   }
   $165 = $6;
   $166 = $9;
   $167 = (($165) + ($166<<3)|0);
   $168 = +HEAPF32[$167>>2];
   $169 = $17;
   $170 = +HEAPF32[$169>>2];
   $171 = $168 * $170;
   $172 = $6;
   $173 = $9;
   $174 = (($172) + ($173<<3)|0);
   $175 = ((($174)) + 4|0);
   $176 = +HEAPF32[$175>>2];
   $177 = $17;
   $178 = ((($177)) + 4|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $176 * $179;
   $181 = $171 - $180;
   HEAPF32[$16>>2] = $181;
   $182 = $6;
   $183 = $9;
   $184 = (($182) + ($183<<3)|0);
   $185 = +HEAPF32[$184>>2];
   $186 = $17;
   $187 = ((($186)) + 4|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $185 * $188;
   $190 = $6;
   $191 = $9;
   $192 = (($190) + ($191<<3)|0);
   $193 = ((($192)) + 4|0);
   $194 = +HEAPF32[$193>>2];
   $195 = $17;
   $196 = +HEAPF32[$195>>2];
   $197 = $194 * $196;
   $198 = $189 + $197;
   $199 = ((($16)) + 4|0);
   HEAPF32[$199>>2] = $198;
   $200 = $6;
   $201 = $20;
   $202 = (($200) + ($201<<3)|0);
   $203 = +HEAPF32[$202>>2];
   $204 = $18;
   $205 = +HEAPF32[$204>>2];
   $206 = $203 * $205;
   $207 = $6;
   $208 = $20;
   $209 = (($207) + ($208<<3)|0);
   $210 = ((($209)) + 4|0);
   $211 = +HEAPF32[$210>>2];
   $212 = $18;
   $213 = ((($212)) + 4|0);
   $214 = +HEAPF32[$213>>2];
   $215 = $211 * $214;
   $216 = $206 - $215;
   $217 = ((($16)) + 8|0);
   HEAPF32[$217>>2] = $216;
   $218 = $6;
   $219 = $20;
   $220 = (($218) + ($219<<3)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = $18;
   $223 = ((($222)) + 4|0);
   $224 = +HEAPF32[$223>>2];
   $225 = $221 * $224;
   $226 = $6;
   $227 = $20;
   $228 = (($226) + ($227<<3)|0);
   $229 = ((($228)) + 4|0);
   $230 = +HEAPF32[$229>>2];
   $231 = $18;
   $232 = +HEAPF32[$231>>2];
   $233 = $230 * $232;
   $234 = $225 + $233;
   $235 = ((($16)) + 8|0);
   $236 = ((($235)) + 4|0);
   HEAPF32[$236>>2] = $234;
   $237 = $6;
   $238 = $21;
   $239 = (($237) + ($238<<3)|0);
   $240 = +HEAPF32[$239>>2];
   $241 = $19;
   $242 = +HEAPF32[$241>>2];
   $243 = $240 * $242;
   $244 = $6;
   $245 = $21;
   $246 = (($244) + ($245<<3)|0);
   $247 = ((($246)) + 4|0);
   $248 = +HEAPF32[$247>>2];
   $249 = $19;
   $250 = ((($249)) + 4|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $248 * $251;
   $253 = $243 - $252;
   $254 = ((($16)) + 16|0);
   HEAPF32[$254>>2] = $253;
   $255 = $6;
   $256 = $21;
   $257 = (($255) + ($256<<3)|0);
   $258 = +HEAPF32[$257>>2];
   $259 = $19;
   $260 = ((($259)) + 4|0);
   $261 = +HEAPF32[$260>>2];
   $262 = $258 * $261;
   $263 = $6;
   $264 = $21;
   $265 = (($263) + ($264<<3)|0);
   $266 = ((($265)) + 4|0);
   $267 = +HEAPF32[$266>>2];
   $268 = $19;
   $269 = +HEAPF32[$268>>2];
   $270 = $267 * $269;
   $271 = $262 + $270;
   $272 = ((($16)) + 16|0);
   $273 = ((($272)) + 4|0);
   HEAPF32[$273>>2] = $271;
   $274 = $6;
   $275 = +HEAPF32[$274>>2];
   $276 = ((($16)) + 8|0);
   $277 = +HEAPF32[$276>>2];
   $278 = $275 - $277;
   $279 = ((($16)) + 40|0);
   HEAPF32[$279>>2] = $278;
   $280 = $6;
   $281 = ((($280)) + 4|0);
   $282 = +HEAPF32[$281>>2];
   $283 = ((($16)) + 8|0);
   $284 = ((($283)) + 4|0);
   $285 = +HEAPF32[$284>>2];
   $286 = $282 - $285;
   $287 = ((($16)) + 40|0);
   $288 = ((($287)) + 4|0);
   HEAPF32[$288>>2] = $286;
   $289 = ((($16)) + 8|0);
   $290 = +HEAPF32[$289>>2];
   $291 = $6;
   $292 = +HEAPF32[$291>>2];
   $293 = $292 + $290;
   HEAPF32[$291>>2] = $293;
   $294 = ((($16)) + 8|0);
   $295 = ((($294)) + 4|0);
   $296 = +HEAPF32[$295>>2];
   $297 = $6;
   $298 = ((($297)) + 4|0);
   $299 = +HEAPF32[$298>>2];
   $300 = $299 + $296;
   HEAPF32[$298>>2] = $300;
   $301 = +HEAPF32[$16>>2];
   $302 = ((($16)) + 16|0);
   $303 = +HEAPF32[$302>>2];
   $304 = $301 + $303;
   $305 = ((($16)) + 24|0);
   HEAPF32[$305>>2] = $304;
   $306 = ((($16)) + 4|0);
   $307 = +HEAPF32[$306>>2];
   $308 = ((($16)) + 16|0);
   $309 = ((($308)) + 4|0);
   $310 = +HEAPF32[$309>>2];
   $311 = $307 + $310;
   $312 = ((($16)) + 24|0);
   $313 = ((($312)) + 4|0);
   HEAPF32[$313>>2] = $311;
   $314 = +HEAPF32[$16>>2];
   $315 = ((($16)) + 16|0);
   $316 = +HEAPF32[$315>>2];
   $317 = $314 - $316;
   $318 = ((($16)) + 32|0);
   HEAPF32[$318>>2] = $317;
   $319 = ((($16)) + 4|0);
   $320 = +HEAPF32[$319>>2];
   $321 = ((($16)) + 16|0);
   $322 = ((($321)) + 4|0);
   $323 = +HEAPF32[$322>>2];
   $324 = $320 - $323;
   $325 = ((($16)) + 32|0);
   $326 = ((($325)) + 4|0);
   HEAPF32[$326>>2] = $324;
   $327 = $6;
   $328 = +HEAPF32[$327>>2];
   $329 = ((($16)) + 24|0);
   $330 = +HEAPF32[$329>>2];
   $331 = $328 - $330;
   $332 = $6;
   $333 = $20;
   $334 = (($332) + ($333<<3)|0);
   HEAPF32[$334>>2] = $331;
   $335 = $6;
   $336 = ((($335)) + 4|0);
   $337 = +HEAPF32[$336>>2];
   $338 = ((($16)) + 24|0);
   $339 = ((($338)) + 4|0);
   $340 = +HEAPF32[$339>>2];
   $341 = $337 - $340;
   $342 = $6;
   $343 = $20;
   $344 = (($342) + ($343<<3)|0);
   $345 = ((($344)) + 4|0);
   HEAPF32[$345>>2] = $341;
   $346 = $7;
   $347 = $17;
   $348 = (($347) + ($346<<3)|0);
   $17 = $348;
   $349 = $7;
   $350 = $349<<1;
   $351 = $18;
   $352 = (($351) + ($350<<3)|0);
   $18 = $352;
   $353 = $7;
   $354 = ($353*3)|0;
   $355 = $19;
   $356 = (($355) + ($354<<3)|0);
   $19 = $356;
   $357 = ((($16)) + 24|0);
   $358 = +HEAPF32[$357>>2];
   $359 = $6;
   $360 = +HEAPF32[$359>>2];
   $361 = $360 + $358;
   HEAPF32[$359>>2] = $361;
   $362 = ((($16)) + 24|0);
   $363 = ((($362)) + 4|0);
   $364 = +HEAPF32[$363>>2];
   $365 = $6;
   $366 = ((($365)) + 4|0);
   $367 = +HEAPF32[$366>>2];
   $368 = $367 + $364;
   HEAPF32[$366>>2] = $368;
   $369 = ((($16)) + 40|0);
   $370 = +HEAPF32[$369>>2];
   $371 = ((($16)) + 32|0);
   $372 = ((($371)) + 4|0);
   $373 = +HEAPF32[$372>>2];
   $374 = $370 + $373;
   $375 = $6;
   $376 = $9;
   $377 = (($375) + ($376<<3)|0);
   HEAPF32[$377>>2] = $374;
   $378 = ((($16)) + 40|0);
   $379 = ((($378)) + 4|0);
   $380 = +HEAPF32[$379>>2];
   $381 = ((($16)) + 32|0);
   $382 = +HEAPF32[$381>>2];
   $383 = $380 - $382;
   $384 = $6;
   $385 = $9;
   $386 = (($384) + ($385<<3)|0);
   $387 = ((($386)) + 4|0);
   HEAPF32[$387>>2] = $383;
   $388 = ((($16)) + 40|0);
   $389 = +HEAPF32[$388>>2];
   $390 = ((($16)) + 32|0);
   $391 = ((($390)) + 4|0);
   $392 = +HEAPF32[$391>>2];
   $393 = $389 - $392;
   $394 = $6;
   $395 = $21;
   $396 = (($394) + ($395<<3)|0);
   HEAPF32[$396>>2] = $393;
   $397 = ((($16)) + 40|0);
   $398 = ((($397)) + 4|0);
   $399 = +HEAPF32[$398>>2];
   $400 = ((($16)) + 32|0);
   $401 = +HEAPF32[$400>>2];
   $402 = $399 + $401;
   $403 = $6;
   $404 = $21;
   $405 = (($403) + ($404<<3)|0);
   $406 = ((($405)) + 4|0);
   HEAPF32[$406>>2] = $402;
   $407 = $6;
   $408 = ((($407)) + 8|0);
   $6 = $408;
   $409 = $15;
   $410 = (($409) + 1)|0;
   $15 = $410;
  }
  $411 = $12;
  $412 = (($411) + 1)|0;
  $12 = $412;
 }
 STACKTOP = sp;return;
}
function _kf_bfly3($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0.0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp + 16|0;
 $18 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $9;
 $21 = $20<<1;
 $14 = $21;
 $22 = $6;
 $19 = $22;
 $23 = $8;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $7;
 $27 = $9;
 $28 = Math_imul($26, $27)|0;
 $29 = (($25) + ($28<<3)|0);
 ;HEAP32[$18>>2]=HEAP32[$29>>2]|0;HEAP32[$18+4>>2]=HEAP32[$29+4>>2]|0;
 $12 = 0;
 while(1) {
  $30 = $12;
  $31 = $10;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $19;
  $34 = $12;
  $35 = $11;
  $36 = Math_imul($34, $35)|0;
  $37 = (($33) + ($36<<3)|0);
  $6 = $37;
  $38 = $8;
  $39 = ((($38)) + 48|0);
  $40 = HEAP32[$39>>2]|0;
  $16 = $40;
  $15 = $40;
  $41 = $9;
  $13 = $41;
  while(1) {
   $42 = $6;
   $43 = $9;
   $44 = (($42) + ($43<<3)|0);
   $45 = +HEAPF32[$44>>2];
   $46 = $15;
   $47 = +HEAPF32[$46>>2];
   $48 = $45 * $47;
   $49 = $6;
   $50 = $9;
   $51 = (($49) + ($50<<3)|0);
   $52 = ((($51)) + 4|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $15;
   $55 = ((($54)) + 4|0);
   $56 = +HEAPF32[$55>>2];
   $57 = $53 * $56;
   $58 = $48 - $57;
   $59 = ((($17)) + 8|0);
   HEAPF32[$59>>2] = $58;
   $60 = $6;
   $61 = $9;
   $62 = (($60) + ($61<<3)|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $15;
   $65 = ((($64)) + 4|0);
   $66 = +HEAPF32[$65>>2];
   $67 = $63 * $66;
   $68 = $6;
   $69 = $9;
   $70 = (($68) + ($69<<3)|0);
   $71 = ((($70)) + 4|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $15;
   $74 = +HEAPF32[$73>>2];
   $75 = $72 * $74;
   $76 = $67 + $75;
   $77 = ((($17)) + 8|0);
   $78 = ((($77)) + 4|0);
   HEAPF32[$78>>2] = $76;
   $79 = $6;
   $80 = $14;
   $81 = (($79) + ($80<<3)|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $16;
   $84 = +HEAPF32[$83>>2];
   $85 = $82 * $84;
   $86 = $6;
   $87 = $14;
   $88 = (($86) + ($87<<3)|0);
   $89 = ((($88)) + 4|0);
   $90 = +HEAPF32[$89>>2];
   $91 = $16;
   $92 = ((($91)) + 4|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $90 * $93;
   $95 = $85 - $94;
   $96 = ((($17)) + 16|0);
   HEAPF32[$96>>2] = $95;
   $97 = $6;
   $98 = $14;
   $99 = (($97) + ($98<<3)|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $16;
   $102 = ((($101)) + 4|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $100 * $103;
   $105 = $6;
   $106 = $14;
   $107 = (($105) + ($106<<3)|0);
   $108 = ((($107)) + 4|0);
   $109 = +HEAPF32[$108>>2];
   $110 = $16;
   $111 = +HEAPF32[$110>>2];
   $112 = $109 * $111;
   $113 = $104 + $112;
   $114 = ((($17)) + 16|0);
   $115 = ((($114)) + 4|0);
   HEAPF32[$115>>2] = $113;
   $116 = ((($17)) + 8|0);
   $117 = +HEAPF32[$116>>2];
   $118 = ((($17)) + 16|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $117 + $119;
   $121 = ((($17)) + 24|0);
   HEAPF32[$121>>2] = $120;
   $122 = ((($17)) + 8|0);
   $123 = ((($122)) + 4|0);
   $124 = +HEAPF32[$123>>2];
   $125 = ((($17)) + 16|0);
   $126 = ((($125)) + 4|0);
   $127 = +HEAPF32[$126>>2];
   $128 = $124 + $127;
   $129 = ((($17)) + 24|0);
   $130 = ((($129)) + 4|0);
   HEAPF32[$130>>2] = $128;
   $131 = ((($17)) + 8|0);
   $132 = +HEAPF32[$131>>2];
   $133 = ((($17)) + 16|0);
   $134 = +HEAPF32[$133>>2];
   $135 = $132 - $134;
   HEAPF32[$17>>2] = $135;
   $136 = ((($17)) + 8|0);
   $137 = ((($136)) + 4|0);
   $138 = +HEAPF32[$137>>2];
   $139 = ((($17)) + 16|0);
   $140 = ((($139)) + 4|0);
   $141 = +HEAPF32[$140>>2];
   $142 = $138 - $141;
   $143 = ((($17)) + 4|0);
   HEAPF32[$143>>2] = $142;
   $144 = $7;
   $145 = $15;
   $146 = (($145) + ($144<<3)|0);
   $15 = $146;
   $147 = $7;
   $148 = $147<<1;
   $149 = $16;
   $150 = (($149) + ($148<<3)|0);
   $16 = $150;
   $151 = $6;
   $152 = +HEAPF32[$151>>2];
   $153 = ((($17)) + 24|0);
   $154 = +HEAPF32[$153>>2];
   $155 = $154 * 0.5;
   $156 = $152 - $155;
   $157 = $6;
   $158 = $9;
   $159 = (($157) + ($158<<3)|0);
   HEAPF32[$159>>2] = $156;
   $160 = $6;
   $161 = ((($160)) + 4|0);
   $162 = +HEAPF32[$161>>2];
   $163 = ((($17)) + 24|0);
   $164 = ((($163)) + 4|0);
   $165 = +HEAPF32[$164>>2];
   $166 = $165 * 0.5;
   $167 = $162 - $166;
   $168 = $6;
   $169 = $9;
   $170 = (($168) + ($169<<3)|0);
   $171 = ((($170)) + 4|0);
   HEAPF32[$171>>2] = $167;
   $172 = ((($18)) + 4|0);
   $173 = +HEAPF32[$172>>2];
   $174 = +HEAPF32[$17>>2];
   $175 = $174 * $173;
   HEAPF32[$17>>2] = $175;
   $176 = ((($18)) + 4|0);
   $177 = +HEAPF32[$176>>2];
   $178 = ((($17)) + 4|0);
   $179 = +HEAPF32[$178>>2];
   $180 = $179 * $177;
   HEAPF32[$178>>2] = $180;
   $181 = ((($17)) + 24|0);
   $182 = +HEAPF32[$181>>2];
   $183 = $6;
   $184 = +HEAPF32[$183>>2];
   $185 = $184 + $182;
   HEAPF32[$183>>2] = $185;
   $186 = ((($17)) + 24|0);
   $187 = ((($186)) + 4|0);
   $188 = +HEAPF32[$187>>2];
   $189 = $6;
   $190 = ((($189)) + 4|0);
   $191 = +HEAPF32[$190>>2];
   $192 = $191 + $188;
   HEAPF32[$190>>2] = $192;
   $193 = $6;
   $194 = $9;
   $195 = (($193) + ($194<<3)|0);
   $196 = +HEAPF32[$195>>2];
   $197 = ((($17)) + 4|0);
   $198 = +HEAPF32[$197>>2];
   $199 = $196 + $198;
   $200 = $6;
   $201 = $14;
   $202 = (($200) + ($201<<3)|0);
   HEAPF32[$202>>2] = $199;
   $203 = $6;
   $204 = $9;
   $205 = (($203) + ($204<<3)|0);
   $206 = ((($205)) + 4|0);
   $207 = +HEAPF32[$206>>2];
   $208 = +HEAPF32[$17>>2];
   $209 = $207 - $208;
   $210 = $6;
   $211 = $14;
   $212 = (($210) + ($211<<3)|0);
   $213 = ((($212)) + 4|0);
   HEAPF32[$213>>2] = $209;
   $214 = ((($17)) + 4|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $6;
   $217 = $9;
   $218 = (($216) + ($217<<3)|0);
   $219 = +HEAPF32[$218>>2];
   $220 = $219 - $215;
   HEAPF32[$218>>2] = $220;
   $221 = +HEAPF32[$17>>2];
   $222 = $6;
   $223 = $9;
   $224 = (($222) + ($223<<3)|0);
   $225 = ((($224)) + 4|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $226 + $221;
   HEAPF32[$225>>2] = $227;
   $228 = $6;
   $229 = ((($228)) + 8|0);
   $6 = $229;
   $230 = $13;
   $231 = (($230) + -1)|0;
   $13 = $231;
   $232 = ($231|0)!=(0);
   if (!($232)) {
    break;
   }
  }
  $233 = $12;
  $234 = (($233) + 1)|0;
  $12 = $234;
 }
 STACKTOP = sp;return;
}
function _kf_bfly5($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0.0, $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0;
 var $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0;
 var $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0;
 var $354 = 0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0.0, $373 = 0, $374 = 0.0, $375 = 0.0, $376 = 0, $377 = 0, $378 = 0.0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0;
 var $390 = 0, $391 = 0.0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0, $397 = 0, $398 = 0, $399 = 0.0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0;
 var $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0;
 var $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0, $443 = 0, $444 = 0.0;
 var $445 = 0.0, $446 = 0.0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0;
 var $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0;
 var $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0.0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $19 = sp + 32|0;
 $21 = sp + 16|0;
 $22 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $24 = $6;
 $23 = $24;
 $25 = $8;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = $9;
 $30 = Math_imul($28, $29)|0;
 $31 = (($27) + ($30<<3)|0);
 ;HEAP32[$21>>2]=HEAP32[$31>>2]|0;HEAP32[$21+4>>2]=HEAP32[$31+4>>2]|0;
 $32 = $8;
 $33 = ((($32)) + 48|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $7;
 $36 = $35<<1;
 $37 = $9;
 $38 = Math_imul($36, $37)|0;
 $39 = (($34) + ($38<<3)|0);
 ;HEAP32[$22>>2]=HEAP32[$39>>2]|0;HEAP32[$22+4>>2]=HEAP32[$39+4>>2]|0;
 $40 = $8;
 $41 = ((($40)) + 48|0);
 $42 = HEAP32[$41>>2]|0;
 $20 = $42;
 $17 = 0;
 while(1) {
  $43 = $17;
  $44 = $10;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $23;
  $47 = $17;
  $48 = $11;
  $49 = Math_imul($47, $48)|0;
  $50 = (($46) + ($49<<3)|0);
  $6 = $50;
  $51 = $6;
  $12 = $51;
  $52 = $12;
  $53 = $9;
  $54 = (($52) + ($53<<3)|0);
  $13 = $54;
  $55 = $12;
  $56 = $9;
  $57 = $56<<1;
  $58 = (($55) + ($57<<3)|0);
  $14 = $58;
  $59 = $12;
  $60 = $9;
  $61 = ($60*3)|0;
  $62 = (($59) + ($61<<3)|0);
  $15 = $62;
  $63 = $12;
  $64 = $9;
  $65 = $64<<2;
  $66 = (($63) + ($65<<3)|0);
  $16 = $66;
  $18 = 0;
  while(1) {
   $67 = $18;
   $68 = $9;
   $69 = ($67|0)<($68|0);
   if (!($69)) {
    break;
   }
   $70 = $12;
   ;HEAP32[$19>>2]=HEAP32[$70>>2]|0;HEAP32[$19+4>>2]=HEAP32[$70+4>>2]|0;
   $71 = $13;
   $72 = +HEAPF32[$71>>2];
   $73 = $20;
   $74 = $18;
   $75 = $7;
   $76 = Math_imul($74, $75)|0;
   $77 = (($73) + ($76<<3)|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $72 * $78;
   $80 = $13;
   $81 = ((($80)) + 4|0);
   $82 = +HEAPF32[$81>>2];
   $83 = $20;
   $84 = $18;
   $85 = $7;
   $86 = Math_imul($84, $85)|0;
   $87 = (($83) + ($86<<3)|0);
   $88 = ((($87)) + 4|0);
   $89 = +HEAPF32[$88>>2];
   $90 = $82 * $89;
   $91 = $79 - $90;
   $92 = ((($19)) + 8|0);
   HEAPF32[$92>>2] = $91;
   $93 = $13;
   $94 = +HEAPF32[$93>>2];
   $95 = $20;
   $96 = $18;
   $97 = $7;
   $98 = Math_imul($96, $97)|0;
   $99 = (($95) + ($98<<3)|0);
   $100 = ((($99)) + 4|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $94 * $101;
   $103 = $13;
   $104 = ((($103)) + 4|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $20;
   $107 = $18;
   $108 = $7;
   $109 = Math_imul($107, $108)|0;
   $110 = (($106) + ($109<<3)|0);
   $111 = +HEAPF32[$110>>2];
   $112 = $105 * $111;
   $113 = $102 + $112;
   $114 = ((($19)) + 8|0);
   $115 = ((($114)) + 4|0);
   HEAPF32[$115>>2] = $113;
   $116 = $14;
   $117 = +HEAPF32[$116>>2];
   $118 = $20;
   $119 = $18;
   $120 = $119<<1;
   $121 = $7;
   $122 = Math_imul($120, $121)|0;
   $123 = (($118) + ($122<<3)|0);
   $124 = +HEAPF32[$123>>2];
   $125 = $117 * $124;
   $126 = $14;
   $127 = ((($126)) + 4|0);
   $128 = +HEAPF32[$127>>2];
   $129 = $20;
   $130 = $18;
   $131 = $130<<1;
   $132 = $7;
   $133 = Math_imul($131, $132)|0;
   $134 = (($129) + ($133<<3)|0);
   $135 = ((($134)) + 4|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $128 * $136;
   $138 = $125 - $137;
   $139 = ((($19)) + 16|0);
   HEAPF32[$139>>2] = $138;
   $140 = $14;
   $141 = +HEAPF32[$140>>2];
   $142 = $20;
   $143 = $18;
   $144 = $143<<1;
   $145 = $7;
   $146 = Math_imul($144, $145)|0;
   $147 = (($142) + ($146<<3)|0);
   $148 = ((($147)) + 4|0);
   $149 = +HEAPF32[$148>>2];
   $150 = $141 * $149;
   $151 = $14;
   $152 = ((($151)) + 4|0);
   $153 = +HEAPF32[$152>>2];
   $154 = $20;
   $155 = $18;
   $156 = $155<<1;
   $157 = $7;
   $158 = Math_imul($156, $157)|0;
   $159 = (($154) + ($158<<3)|0);
   $160 = +HEAPF32[$159>>2];
   $161 = $153 * $160;
   $162 = $150 + $161;
   $163 = ((($19)) + 16|0);
   $164 = ((($163)) + 4|0);
   HEAPF32[$164>>2] = $162;
   $165 = $15;
   $166 = +HEAPF32[$165>>2];
   $167 = $20;
   $168 = $18;
   $169 = ($168*3)|0;
   $170 = $7;
   $171 = Math_imul($169, $170)|0;
   $172 = (($167) + ($171<<3)|0);
   $173 = +HEAPF32[$172>>2];
   $174 = $166 * $173;
   $175 = $15;
   $176 = ((($175)) + 4|0);
   $177 = +HEAPF32[$176>>2];
   $178 = $20;
   $179 = $18;
   $180 = ($179*3)|0;
   $181 = $7;
   $182 = Math_imul($180, $181)|0;
   $183 = (($178) + ($182<<3)|0);
   $184 = ((($183)) + 4|0);
   $185 = +HEAPF32[$184>>2];
   $186 = $177 * $185;
   $187 = $174 - $186;
   $188 = ((($19)) + 24|0);
   HEAPF32[$188>>2] = $187;
   $189 = $15;
   $190 = +HEAPF32[$189>>2];
   $191 = $20;
   $192 = $18;
   $193 = ($192*3)|0;
   $194 = $7;
   $195 = Math_imul($193, $194)|0;
   $196 = (($191) + ($195<<3)|0);
   $197 = ((($196)) + 4|0);
   $198 = +HEAPF32[$197>>2];
   $199 = $190 * $198;
   $200 = $15;
   $201 = ((($200)) + 4|0);
   $202 = +HEAPF32[$201>>2];
   $203 = $20;
   $204 = $18;
   $205 = ($204*3)|0;
   $206 = $7;
   $207 = Math_imul($205, $206)|0;
   $208 = (($203) + ($207<<3)|0);
   $209 = +HEAPF32[$208>>2];
   $210 = $202 * $209;
   $211 = $199 + $210;
   $212 = ((($19)) + 24|0);
   $213 = ((($212)) + 4|0);
   HEAPF32[$213>>2] = $211;
   $214 = $16;
   $215 = +HEAPF32[$214>>2];
   $216 = $20;
   $217 = $18;
   $218 = $217<<2;
   $219 = $7;
   $220 = Math_imul($218, $219)|0;
   $221 = (($216) + ($220<<3)|0);
   $222 = +HEAPF32[$221>>2];
   $223 = $215 * $222;
   $224 = $16;
   $225 = ((($224)) + 4|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $20;
   $228 = $18;
   $229 = $228<<2;
   $230 = $7;
   $231 = Math_imul($229, $230)|0;
   $232 = (($227) + ($231<<3)|0);
   $233 = ((($232)) + 4|0);
   $234 = +HEAPF32[$233>>2];
   $235 = $226 * $234;
   $236 = $223 - $235;
   $237 = ((($19)) + 32|0);
   HEAPF32[$237>>2] = $236;
   $238 = $16;
   $239 = +HEAPF32[$238>>2];
   $240 = $20;
   $241 = $18;
   $242 = $241<<2;
   $243 = $7;
   $244 = Math_imul($242, $243)|0;
   $245 = (($240) + ($244<<3)|0);
   $246 = ((($245)) + 4|0);
   $247 = +HEAPF32[$246>>2];
   $248 = $239 * $247;
   $249 = $16;
   $250 = ((($249)) + 4|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $20;
   $253 = $18;
   $254 = $253<<2;
   $255 = $7;
   $256 = Math_imul($254, $255)|0;
   $257 = (($252) + ($256<<3)|0);
   $258 = +HEAPF32[$257>>2];
   $259 = $251 * $258;
   $260 = $248 + $259;
   $261 = ((($19)) + 32|0);
   $262 = ((($261)) + 4|0);
   HEAPF32[$262>>2] = $260;
   $263 = ((($19)) + 8|0);
   $264 = +HEAPF32[$263>>2];
   $265 = ((($19)) + 32|0);
   $266 = +HEAPF32[$265>>2];
   $267 = $264 + $266;
   $268 = ((($19)) + 56|0);
   HEAPF32[$268>>2] = $267;
   $269 = ((($19)) + 8|0);
   $270 = ((($269)) + 4|0);
   $271 = +HEAPF32[$270>>2];
   $272 = ((($19)) + 32|0);
   $273 = ((($272)) + 4|0);
   $274 = +HEAPF32[$273>>2];
   $275 = $271 + $274;
   $276 = ((($19)) + 56|0);
   $277 = ((($276)) + 4|0);
   HEAPF32[$277>>2] = $275;
   $278 = ((($19)) + 8|0);
   $279 = +HEAPF32[$278>>2];
   $280 = ((($19)) + 32|0);
   $281 = +HEAPF32[$280>>2];
   $282 = $279 - $281;
   $283 = ((($19)) + 80|0);
   HEAPF32[$283>>2] = $282;
   $284 = ((($19)) + 8|0);
   $285 = ((($284)) + 4|0);
   $286 = +HEAPF32[$285>>2];
   $287 = ((($19)) + 32|0);
   $288 = ((($287)) + 4|0);
   $289 = +HEAPF32[$288>>2];
   $290 = $286 - $289;
   $291 = ((($19)) + 80|0);
   $292 = ((($291)) + 4|0);
   HEAPF32[$292>>2] = $290;
   $293 = ((($19)) + 16|0);
   $294 = +HEAPF32[$293>>2];
   $295 = ((($19)) + 24|0);
   $296 = +HEAPF32[$295>>2];
   $297 = $294 + $296;
   $298 = ((($19)) + 64|0);
   HEAPF32[$298>>2] = $297;
   $299 = ((($19)) + 16|0);
   $300 = ((($299)) + 4|0);
   $301 = +HEAPF32[$300>>2];
   $302 = ((($19)) + 24|0);
   $303 = ((($302)) + 4|0);
   $304 = +HEAPF32[$303>>2];
   $305 = $301 + $304;
   $306 = ((($19)) + 64|0);
   $307 = ((($306)) + 4|0);
   HEAPF32[$307>>2] = $305;
   $308 = ((($19)) + 16|0);
   $309 = +HEAPF32[$308>>2];
   $310 = ((($19)) + 24|0);
   $311 = +HEAPF32[$310>>2];
   $312 = $309 - $311;
   $313 = ((($19)) + 72|0);
   HEAPF32[$313>>2] = $312;
   $314 = ((($19)) + 16|0);
   $315 = ((($314)) + 4|0);
   $316 = +HEAPF32[$315>>2];
   $317 = ((($19)) + 24|0);
   $318 = ((($317)) + 4|0);
   $319 = +HEAPF32[$318>>2];
   $320 = $316 - $319;
   $321 = ((($19)) + 72|0);
   $322 = ((($321)) + 4|0);
   HEAPF32[$322>>2] = $320;
   $323 = ((($19)) + 56|0);
   $324 = +HEAPF32[$323>>2];
   $325 = ((($19)) + 64|0);
   $326 = +HEAPF32[$325>>2];
   $327 = $324 + $326;
   $328 = $12;
   $329 = +HEAPF32[$328>>2];
   $330 = $329 + $327;
   HEAPF32[$328>>2] = $330;
   $331 = ((($19)) + 56|0);
   $332 = ((($331)) + 4|0);
   $333 = +HEAPF32[$332>>2];
   $334 = ((($19)) + 64|0);
   $335 = ((($334)) + 4|0);
   $336 = +HEAPF32[$335>>2];
   $337 = $333 + $336;
   $338 = $12;
   $339 = ((($338)) + 4|0);
   $340 = +HEAPF32[$339>>2];
   $341 = $340 + $337;
   HEAPF32[$339>>2] = $341;
   $342 = +HEAPF32[$19>>2];
   $343 = ((($19)) + 56|0);
   $344 = +HEAPF32[$343>>2];
   $345 = +HEAPF32[$21>>2];
   $346 = $344 * $345;
   $347 = $342 + $346;
   $348 = ((($19)) + 64|0);
   $349 = +HEAPF32[$348>>2];
   $350 = +HEAPF32[$22>>2];
   $351 = $349 * $350;
   $352 = $347 + $351;
   $353 = ((($19)) + 40|0);
   HEAPF32[$353>>2] = $352;
   $354 = ((($19)) + 4|0);
   $355 = +HEAPF32[$354>>2];
   $356 = ((($19)) + 56|0);
   $357 = ((($356)) + 4|0);
   $358 = +HEAPF32[$357>>2];
   $359 = +HEAPF32[$21>>2];
   $360 = $358 * $359;
   $361 = $355 + $360;
   $362 = ((($19)) + 64|0);
   $363 = ((($362)) + 4|0);
   $364 = +HEAPF32[$363>>2];
   $365 = +HEAPF32[$22>>2];
   $366 = $364 * $365;
   $367 = $361 + $366;
   $368 = ((($19)) + 40|0);
   $369 = ((($368)) + 4|0);
   HEAPF32[$369>>2] = $367;
   $370 = ((($19)) + 80|0);
   $371 = ((($370)) + 4|0);
   $372 = +HEAPF32[$371>>2];
   $373 = ((($21)) + 4|0);
   $374 = +HEAPF32[$373>>2];
   $375 = $372 * $374;
   $376 = ((($19)) + 72|0);
   $377 = ((($376)) + 4|0);
   $378 = +HEAPF32[$377>>2];
   $379 = ((($22)) + 4|0);
   $380 = +HEAPF32[$379>>2];
   $381 = $378 * $380;
   $382 = $375 + $381;
   $383 = ((($19)) + 48|0);
   HEAPF32[$383>>2] = $382;
   $384 = ((($19)) + 80|0);
   $385 = +HEAPF32[$384>>2];
   $386 = ((($21)) + 4|0);
   $387 = +HEAPF32[$386>>2];
   $388 = $385 * $387;
   $389 = - $388;
   $390 = ((($19)) + 72|0);
   $391 = +HEAPF32[$390>>2];
   $392 = ((($22)) + 4|0);
   $393 = +HEAPF32[$392>>2];
   $394 = $391 * $393;
   $395 = $389 - $394;
   $396 = ((($19)) + 48|0);
   $397 = ((($396)) + 4|0);
   HEAPF32[$397>>2] = $395;
   $398 = ((($19)) + 40|0);
   $399 = +HEAPF32[$398>>2];
   $400 = ((($19)) + 48|0);
   $401 = +HEAPF32[$400>>2];
   $402 = $399 - $401;
   $403 = $13;
   HEAPF32[$403>>2] = $402;
   $404 = ((($19)) + 40|0);
   $405 = ((($404)) + 4|0);
   $406 = +HEAPF32[$405>>2];
   $407 = ((($19)) + 48|0);
   $408 = ((($407)) + 4|0);
   $409 = +HEAPF32[$408>>2];
   $410 = $406 - $409;
   $411 = $13;
   $412 = ((($411)) + 4|0);
   HEAPF32[$412>>2] = $410;
   $413 = ((($19)) + 40|0);
   $414 = +HEAPF32[$413>>2];
   $415 = ((($19)) + 48|0);
   $416 = +HEAPF32[$415>>2];
   $417 = $414 + $416;
   $418 = $16;
   HEAPF32[$418>>2] = $417;
   $419 = ((($19)) + 40|0);
   $420 = ((($419)) + 4|0);
   $421 = +HEAPF32[$420>>2];
   $422 = ((($19)) + 48|0);
   $423 = ((($422)) + 4|0);
   $424 = +HEAPF32[$423>>2];
   $425 = $421 + $424;
   $426 = $16;
   $427 = ((($426)) + 4|0);
   HEAPF32[$427>>2] = $425;
   $428 = +HEAPF32[$19>>2];
   $429 = ((($19)) + 56|0);
   $430 = +HEAPF32[$429>>2];
   $431 = +HEAPF32[$22>>2];
   $432 = $430 * $431;
   $433 = $428 + $432;
   $434 = ((($19)) + 64|0);
   $435 = +HEAPF32[$434>>2];
   $436 = +HEAPF32[$21>>2];
   $437 = $435 * $436;
   $438 = $433 + $437;
   $439 = ((($19)) + 88|0);
   HEAPF32[$439>>2] = $438;
   $440 = ((($19)) + 4|0);
   $441 = +HEAPF32[$440>>2];
   $442 = ((($19)) + 56|0);
   $443 = ((($442)) + 4|0);
   $444 = +HEAPF32[$443>>2];
   $445 = +HEAPF32[$22>>2];
   $446 = $444 * $445;
   $447 = $441 + $446;
   $448 = ((($19)) + 64|0);
   $449 = ((($448)) + 4|0);
   $450 = +HEAPF32[$449>>2];
   $451 = +HEAPF32[$21>>2];
   $452 = $450 * $451;
   $453 = $447 + $452;
   $454 = ((($19)) + 88|0);
   $455 = ((($454)) + 4|0);
   HEAPF32[$455>>2] = $453;
   $456 = ((($19)) + 80|0);
   $457 = ((($456)) + 4|0);
   $458 = +HEAPF32[$457>>2];
   $459 = ((($22)) + 4|0);
   $460 = +HEAPF32[$459>>2];
   $461 = $458 * $460;
   $462 = - $461;
   $463 = ((($19)) + 72|0);
   $464 = ((($463)) + 4|0);
   $465 = +HEAPF32[$464>>2];
   $466 = ((($21)) + 4|0);
   $467 = +HEAPF32[$466>>2];
   $468 = $465 * $467;
   $469 = $462 + $468;
   $470 = ((($19)) + 96|0);
   HEAPF32[$470>>2] = $469;
   $471 = ((($19)) + 80|0);
   $472 = +HEAPF32[$471>>2];
   $473 = ((($22)) + 4|0);
   $474 = +HEAPF32[$473>>2];
   $475 = $472 * $474;
   $476 = ((($19)) + 72|0);
   $477 = +HEAPF32[$476>>2];
   $478 = ((($21)) + 4|0);
   $479 = +HEAPF32[$478>>2];
   $480 = $477 * $479;
   $481 = $475 - $480;
   $482 = ((($19)) + 96|0);
   $483 = ((($482)) + 4|0);
   HEAPF32[$483>>2] = $481;
   $484 = ((($19)) + 88|0);
   $485 = +HEAPF32[$484>>2];
   $486 = ((($19)) + 96|0);
   $487 = +HEAPF32[$486>>2];
   $488 = $485 + $487;
   $489 = $14;
   HEAPF32[$489>>2] = $488;
   $490 = ((($19)) + 88|0);
   $491 = ((($490)) + 4|0);
   $492 = +HEAPF32[$491>>2];
   $493 = ((($19)) + 96|0);
   $494 = ((($493)) + 4|0);
   $495 = +HEAPF32[$494>>2];
   $496 = $492 + $495;
   $497 = $14;
   $498 = ((($497)) + 4|0);
   HEAPF32[$498>>2] = $496;
   $499 = ((($19)) + 88|0);
   $500 = +HEAPF32[$499>>2];
   $501 = ((($19)) + 96|0);
   $502 = +HEAPF32[$501>>2];
   $503 = $500 - $502;
   $504 = $15;
   HEAPF32[$504>>2] = $503;
   $505 = ((($19)) + 88|0);
   $506 = ((($505)) + 4|0);
   $507 = +HEAPF32[$506>>2];
   $508 = ((($19)) + 96|0);
   $509 = ((($508)) + 4|0);
   $510 = +HEAPF32[$509>>2];
   $511 = $507 - $510;
   $512 = $15;
   $513 = ((($512)) + 4|0);
   HEAPF32[$513>>2] = $511;
   $514 = $12;
   $515 = ((($514)) + 8|0);
   $12 = $515;
   $516 = $13;
   $517 = ((($516)) + 8|0);
   $13 = $517;
   $518 = $14;
   $519 = ((($518)) + 8|0);
   $14 = $519;
   $520 = $15;
   $521 = ((($520)) + 8|0);
   $15 = $521;
   $522 = $16;
   $523 = ((($522)) + 8|0);
   $16 = $523;
   $524 = $18;
   $525 = (($524) + 1)|0;
   $18 = $525;
  }
  $526 = $17;
  $527 = (($526) + 1)|0;
  $17 = $527;
 }
 STACKTOP = sp;return;
}
function _opus_fft_c($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $7 = $11;
 $6 = 0;
 while(1) {
  $12 = $6;
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<3)|0);
  ;HEAP32[$8>>2]=HEAP32[$18>>2]|0;HEAP32[$8+4>>2]=HEAP32[$18+4>>2]|0;
  $19 = $7;
  $20 = +HEAPF32[$8>>2];
  $21 = $19 * $20;
  $22 = $5;
  $23 = $3;
  $24 = ((($23)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $6;
  $27 = (($25) + ($26<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = (($22) + ($29<<3)|0);
  HEAPF32[$30>>2] = $21;
  $31 = $7;
  $32 = ((($8)) + 4|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $31 * $33;
  $35 = $5;
  $36 = $3;
  $37 = ((($36)) + 44|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $6;
  $40 = (($38) + ($39<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  $43 = (($35) + ($42<<3)|0);
  $44 = ((($43)) + 4|0);
  HEAPF32[$44>>2] = $34;
  $45 = $6;
  $46 = (($45) + 1)|0;
  $6 = $46;
 }
 $47 = $3;
 $48 = $5;
 _opus_fft_impl($47,$48);
 STACKTOP = sp;return;
}
function _clt_mdct_forward_c($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$alloca_mul = 0, $$alloca_mul37 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0;
 var $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0.0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0;
 var $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0.0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $31 = sp + 48|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $44 = $8;
 $45 = ((($44)) + 8|0);
 $46 = $13;
 $47 = (($45) + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $20 = $48;
 $49 = $20;
 $50 = ((($49)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $22 = $51;
 $52 = $8;
 $53 = HEAP32[$52>>2]|0;
 $17 = $53;
 $54 = $8;
 $55 = ((($54)) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 $21 = $56;
 $16 = 0;
 while(1) {
  $57 = $16;
  $58 = $13;
  $59 = ($57|0)<($58|0);
  $60 = $17;
  $61 = $60 >> 1;
  if (!($59)) {
   break;
  }
  $17 = $61;
  $62 = $17;
  $63 = $21;
  $64 = (($63) + ($62<<2)|0);
  $21 = $64;
  $65 = $16;
  $66 = (($65) + 1)|0;
  $16 = $66;
 }
 $18 = $61;
 $67 = $17;
 $68 = $67 >> 2;
 $19 = $68;
 $69 = $18;
 $70 = (_llvm_stacksave()|0);
 $23 = $70;
 $$alloca_mul = $69<<2;
 $71 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $72 = $19;
 $$alloca_mul37 = $72<<3;
 $73 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul37)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul37)|0)+15)&-16)|0);;
 $74 = $9;
 $75 = $12;
 $76 = $75 >> 1;
 $77 = (($74) + ($76<<2)|0);
 $24 = $77;
 $78 = $9;
 $79 = $18;
 $80 = (($78) + ($79<<2)|0);
 $81 = ((($80)) + -4|0);
 $82 = $12;
 $83 = $82 >> 1;
 $84 = (($81) + ($83<<2)|0);
 $25 = $84;
 $26 = $71;
 $85 = $11;
 $86 = $12;
 $87 = $86 >> 1;
 $88 = (($85) + ($87<<2)|0);
 $27 = $88;
 $89 = $11;
 $90 = $12;
 $91 = $90 >> 1;
 $92 = (($89) + ($91<<2)|0);
 $93 = ((($92)) + -4|0);
 $28 = $93;
 $16 = 0;
 while(1) {
  $94 = $16;
  $95 = $12;
  $96 = (($95) + 3)|0;
  $97 = $96 >> 2;
  $98 = ($94|0)<($97|0);
  if (!($98)) {
   break;
  }
  $99 = $28;
  $100 = +HEAPF32[$99>>2];
  $101 = $24;
  $102 = $18;
  $103 = (($101) + ($102<<2)|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $100 * $104;
  $106 = $27;
  $107 = +HEAPF32[$106>>2];
  $108 = $25;
  $109 = +HEAPF32[$108>>2];
  $110 = $107 * $109;
  $111 = $105 + $110;
  $112 = $26;
  $113 = ((($112)) + 4|0);
  $26 = $113;
  HEAPF32[$112>>2] = $111;
  $114 = $27;
  $115 = +HEAPF32[$114>>2];
  $116 = $24;
  $117 = +HEAPF32[$116>>2];
  $118 = $115 * $117;
  $119 = $28;
  $120 = +HEAPF32[$119>>2];
  $121 = $25;
  $122 = $18;
  $123 = (0 - ($122))|0;
  $124 = (($121) + ($123<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $120 * $125;
  $127 = $118 - $126;
  $128 = $26;
  $129 = ((($128)) + 4|0);
  $26 = $129;
  HEAPF32[$128>>2] = $127;
  $130 = $24;
  $131 = ((($130)) + 8|0);
  $24 = $131;
  $132 = $25;
  $133 = ((($132)) + -8|0);
  $25 = $133;
  $134 = $27;
  $135 = ((($134)) + 8|0);
  $27 = $135;
  $136 = $28;
  $137 = ((($136)) + -8|0);
  $28 = $137;
  $138 = $16;
  $139 = (($138) + 1)|0;
  $16 = $139;
 }
 $140 = $11;
 $27 = $140;
 $141 = $11;
 $142 = $12;
 $143 = (($141) + ($142<<2)|0);
 $144 = ((($143)) + -4|0);
 $28 = $144;
 while(1) {
  $145 = $16;
  $146 = $19;
  $147 = $12;
  $148 = (($147) + 3)|0;
  $149 = $148 >> 2;
  $150 = (($146) - ($149))|0;
  $151 = ($145|0)<($150|0);
  if (!($151)) {
   break;
  }
  $152 = $25;
  $153 = +HEAPF32[$152>>2];
  $154 = $26;
  $155 = ((($154)) + 4|0);
  $26 = $155;
  HEAPF32[$154>>2] = $153;
  $156 = $24;
  $157 = +HEAPF32[$156>>2];
  $158 = $26;
  $159 = ((($158)) + 4|0);
  $26 = $159;
  HEAPF32[$158>>2] = $157;
  $160 = $24;
  $161 = ((($160)) + 8|0);
  $24 = $161;
  $162 = $25;
  $163 = ((($162)) + -8|0);
  $25 = $163;
  $164 = $16;
  $165 = (($164) + 1)|0;
  $16 = $165;
 }
 while(1) {
  $166 = $16;
  $167 = $19;
  $168 = ($166|0)<($167|0);
  if (!($168)) {
   break;
  }
  $169 = $27;
  $170 = +HEAPF32[$169>>2];
  $171 = $24;
  $172 = $18;
  $173 = (0 - ($172))|0;
  $174 = (($171) + ($173<<2)|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $170 * $175;
  $177 = - $176;
  $178 = $28;
  $179 = +HEAPF32[$178>>2];
  $180 = $25;
  $181 = +HEAPF32[$180>>2];
  $182 = $179 * $181;
  $183 = $177 + $182;
  $184 = $26;
  $185 = ((($184)) + 4|0);
  $26 = $185;
  HEAPF32[$184>>2] = $183;
  $186 = $28;
  $187 = +HEAPF32[$186>>2];
  $188 = $24;
  $189 = +HEAPF32[$188>>2];
  $190 = $187 * $189;
  $191 = $27;
  $192 = +HEAPF32[$191>>2];
  $193 = $25;
  $194 = $18;
  $195 = (($193) + ($194<<2)|0);
  $196 = +HEAPF32[$195>>2];
  $197 = $192 * $196;
  $198 = $190 + $197;
  $199 = $26;
  $200 = ((($199)) + 4|0);
  $26 = $200;
  HEAPF32[$199>>2] = $198;
  $201 = $24;
  $202 = ((($201)) + 8|0);
  $24 = $202;
  $203 = $25;
  $204 = ((($203)) + -8|0);
  $25 = $204;
  $205 = $27;
  $206 = ((($205)) + 8|0);
  $27 = $206;
  $207 = $28;
  $208 = ((($207)) + -8|0);
  $28 = $208;
  $209 = $16;
  $210 = (($209) + 1)|0;
  $16 = $210;
 }
 $29 = $71;
 $211 = $21;
 $30 = $211;
 $16 = 0;
 while(1) {
  $212 = $16;
  $213 = $19;
  $214 = ($212|0)<($213|0);
  if (!($214)) {
   break;
  }
  $215 = $30;
  $216 = $16;
  $217 = (($215) + ($216<<2)|0);
  $218 = +HEAPF32[$217>>2];
  $32 = $218;
  $219 = $30;
  $220 = $19;
  $221 = $16;
  $222 = (($220) + ($221))|0;
  $223 = (($219) + ($222<<2)|0);
  $224 = +HEAPF32[$223>>2];
  $33 = $224;
  $225 = $29;
  $226 = ((($225)) + 4|0);
  $29 = $226;
  $227 = +HEAPF32[$225>>2];
  $34 = $227;
  $228 = $29;
  $229 = ((($228)) + 4|0);
  $29 = $229;
  $230 = +HEAPF32[$228>>2];
  $35 = $230;
  $231 = $34;
  $232 = $32;
  $233 = $231 * $232;
  $234 = $35;
  $235 = $33;
  $236 = $234 * $235;
  $237 = $233 - $236;
  $36 = $237;
  $238 = $35;
  $239 = $32;
  $240 = $238 * $239;
  $241 = $34;
  $242 = $33;
  $243 = $241 * $242;
  $244 = $240 + $243;
  $37 = $244;
  $245 = $36;
  HEAPF32[$31>>2] = $245;
  $246 = $37;
  $247 = ((($31)) + 4|0);
  HEAPF32[$247>>2] = $246;
  $248 = $22;
  $249 = +HEAPF32[$31>>2];
  $250 = $248 * $249;
  HEAPF32[$31>>2] = $250;
  $251 = $22;
  $252 = ((($31)) + 4|0);
  $253 = +HEAPF32[$252>>2];
  $254 = $251 * $253;
  $255 = ((($31)) + 4|0);
  HEAPF32[$255>>2] = $254;
  $256 = $20;
  $257 = ((($256)) + 44|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $16;
  $260 = (($258) + ($259<<1)|0);
  $261 = HEAP16[$260>>1]|0;
  $262 = $261 << 16 >> 16;
  $263 = (($73) + ($262<<3)|0);
  ;HEAP32[$263>>2]=HEAP32[$31>>2]|0;HEAP32[$263+4>>2]=HEAP32[$31+4>>2]|0;
  $264 = $16;
  $265 = (($264) + 1)|0;
  $16 = $265;
 }
 $266 = $20;
 _opus_fft_impl($266,$73);
 $38 = $73;
 $267 = $10;
 $39 = $267;
 $268 = $10;
 $269 = $14;
 $270 = $18;
 $271 = (($270) - 1)|0;
 $272 = Math_imul($269, $271)|0;
 $273 = (($268) + ($272<<2)|0);
 $40 = $273;
 $274 = $21;
 $41 = $274;
 $16 = 0;
 while(1) {
  $275 = $16;
  $276 = $19;
  $277 = ($275|0)<($276|0);
  if (!($277)) {
   break;
  }
  $278 = $38;
  $279 = ((($278)) + 4|0);
  $280 = +HEAPF32[$279>>2];
  $281 = $41;
  $282 = $19;
  $283 = $16;
  $284 = (($282) + ($283))|0;
  $285 = (($281) + ($284<<2)|0);
  $286 = +HEAPF32[$285>>2];
  $287 = $280 * $286;
  $288 = $38;
  $289 = +HEAPF32[$288>>2];
  $290 = $41;
  $291 = $16;
  $292 = (($290) + ($291<<2)|0);
  $293 = +HEAPF32[$292>>2];
  $294 = $289 * $293;
  $295 = $287 - $294;
  $42 = $295;
  $296 = $38;
  $297 = +HEAPF32[$296>>2];
  $298 = $41;
  $299 = $19;
  $300 = $16;
  $301 = (($299) + ($300))|0;
  $302 = (($298) + ($301<<2)|0);
  $303 = +HEAPF32[$302>>2];
  $304 = $297 * $303;
  $305 = $38;
  $306 = ((($305)) + 4|0);
  $307 = +HEAPF32[$306>>2];
  $308 = $41;
  $309 = $16;
  $310 = (($308) + ($309<<2)|0);
  $311 = +HEAPF32[$310>>2];
  $312 = $307 * $311;
  $313 = $304 + $312;
  $43 = $313;
  $314 = $42;
  $315 = $39;
  HEAPF32[$315>>2] = $314;
  $316 = $43;
  $317 = $40;
  HEAPF32[$317>>2] = $316;
  $318 = $38;
  $319 = ((($318)) + 8|0);
  $38 = $319;
  $320 = $14;
  $321 = $320<<1;
  $322 = $39;
  $323 = (($322) + ($321<<2)|0);
  $39 = $323;
  $324 = $14;
  $325 = $324<<1;
  $326 = $40;
  $327 = (0 - ($325))|0;
  $328 = (($326) + ($327<<2)|0);
  $40 = $328;
  $329 = $16;
  $330 = (($329) + 1)|0;
  $16 = $330;
 }
 $331 = $23;
 _llvm_stackrestore(($331|0));
 STACKTOP = sp;return;
}
function _clt_mdct_backward_c($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0;
 var $263 = 0, $264 = 0.0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0;
 var $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $44 = $8;
 $45 = HEAP32[$44>>2]|0;
 $17 = $45;
 $46 = $8;
 $47 = ((($46)) + 24|0);
 $48 = HEAP32[$47>>2]|0;
 $20 = $48;
 $16 = 0;
 while(1) {
  $49 = $16;
  $50 = $13;
  $51 = ($49|0)<($50|0);
  $52 = $17;
  $53 = $52 >> 1;
  if (!($51)) {
   break;
  }
  $17 = $53;
  $54 = $17;
  $55 = $20;
  $56 = (($55) + ($54<<2)|0);
  $20 = $56;
  $57 = $16;
  $58 = (($57) + 1)|0;
  $16 = $58;
 }
 $18 = $53;
 $59 = $17;
 $60 = $59 >> 2;
 $19 = $60;
 $61 = $9;
 $21 = $61;
 $62 = $9;
 $63 = $14;
 $64 = $18;
 $65 = (($64) - 1)|0;
 $66 = Math_imul($63, $65)|0;
 $67 = (($62) + ($66<<2)|0);
 $22 = $67;
 $68 = $10;
 $69 = $12;
 $70 = $69 >> 1;
 $71 = (($68) + ($70<<2)|0);
 $23 = $71;
 $72 = $20;
 $24 = $72;
 $73 = $8;
 $74 = ((($73)) + 8|0);
 $75 = $13;
 $76 = (($74) + ($75<<2)|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 44|0);
 $79 = HEAP32[$78>>2]|0;
 $25 = $79;
 $16 = 0;
 while(1) {
  $80 = $16;
  $81 = $19;
  $82 = ($80|0)<($81|0);
  if (!($82)) {
   break;
  }
  $83 = $25;
  $84 = ((($83)) + 2|0);
  $25 = $84;
  $85 = HEAP16[$83>>1]|0;
  $86 = $85 << 16 >> 16;
  $26 = $86;
  $87 = $22;
  $88 = +HEAPF32[$87>>2];
  $89 = $24;
  $90 = $16;
  $91 = (($89) + ($90<<2)|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $88 * $92;
  $94 = $21;
  $95 = +HEAPF32[$94>>2];
  $96 = $24;
  $97 = $19;
  $98 = $16;
  $99 = (($97) + ($98))|0;
  $100 = (($96) + ($99<<2)|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $95 * $101;
  $103 = $93 + $102;
  $27 = $103;
  $104 = $21;
  $105 = +HEAPF32[$104>>2];
  $106 = $24;
  $107 = $16;
  $108 = (($106) + ($107<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $105 * $109;
  $111 = $22;
  $112 = +HEAPF32[$111>>2];
  $113 = $24;
  $114 = $19;
  $115 = $16;
  $116 = (($114) + ($115))|0;
  $117 = (($113) + ($116<<2)|0);
  $118 = +HEAPF32[$117>>2];
  $119 = $112 * $118;
  $120 = $110 - $119;
  $28 = $120;
  $121 = $27;
  $122 = $23;
  $123 = $26;
  $124 = $123<<1;
  $125 = (($124) + 1)|0;
  $126 = (($122) + ($125<<2)|0);
  HEAPF32[$126>>2] = $121;
  $127 = $28;
  $128 = $23;
  $129 = $26;
  $130 = $129<<1;
  $131 = (($128) + ($130<<2)|0);
  HEAPF32[$131>>2] = $127;
  $132 = $14;
  $133 = $132<<1;
  $134 = $21;
  $135 = (($134) + ($133<<2)|0);
  $21 = $135;
  $136 = $14;
  $137 = $136<<1;
  $138 = $22;
  $139 = (0 - ($137))|0;
  $140 = (($138) + ($139<<2)|0);
  $22 = $140;
  $141 = $16;
  $142 = (($141) + 1)|0;
  $16 = $142;
 }
 $143 = $8;
 $144 = ((($143)) + 8|0);
 $145 = $13;
 $146 = (($144) + ($145<<2)|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $10;
 $149 = $12;
 $150 = $149 >> 1;
 $151 = (($148) + ($150<<2)|0);
 _opus_fft_impl($147,$151);
 $152 = $10;
 $153 = $12;
 $154 = $153 >> 1;
 $155 = (($152) + ($154<<2)|0);
 $29 = $155;
 $156 = $10;
 $157 = $12;
 $158 = $157 >> 1;
 $159 = (($156) + ($158<<2)|0);
 $160 = $18;
 $161 = (($159) + ($160<<2)|0);
 $162 = ((($161)) + -8|0);
 $30 = $162;
 $163 = $20;
 $31 = $163;
 $16 = 0;
 while(1) {
  $164 = $16;
  $165 = $19;
  $166 = (($165) + 1)|0;
  $167 = $166 >> 1;
  $168 = ($164|0)<($167|0);
  if (!($168)) {
   break;
  }
  $169 = $29;
  $170 = ((($169)) + 4|0);
  $171 = +HEAPF32[$170>>2];
  $32 = $171;
  $172 = $29;
  $173 = +HEAPF32[$172>>2];
  $33 = $173;
  $174 = $31;
  $175 = $16;
  $176 = (($174) + ($175<<2)|0);
  $177 = +HEAPF32[$176>>2];
  $36 = $177;
  $178 = $31;
  $179 = $19;
  $180 = $16;
  $181 = (($179) + ($180))|0;
  $182 = (($178) + ($181<<2)|0);
  $183 = +HEAPF32[$182>>2];
  $37 = $183;
  $184 = $32;
  $185 = $36;
  $186 = $184 * $185;
  $187 = $33;
  $188 = $37;
  $189 = $187 * $188;
  $190 = $186 + $189;
  $34 = $190;
  $191 = $32;
  $192 = $37;
  $193 = $191 * $192;
  $194 = $33;
  $195 = $36;
  $196 = $194 * $195;
  $197 = $193 - $196;
  $35 = $197;
  $198 = $30;
  $199 = ((($198)) + 4|0);
  $200 = +HEAPF32[$199>>2];
  $32 = $200;
  $201 = $30;
  $202 = +HEAPF32[$201>>2];
  $33 = $202;
  $203 = $34;
  $204 = $29;
  HEAPF32[$204>>2] = $203;
  $205 = $35;
  $206 = $30;
  $207 = ((($206)) + 4|0);
  HEAPF32[$207>>2] = $205;
  $208 = $31;
  $209 = $19;
  $210 = $16;
  $211 = (($209) - ($210))|0;
  $212 = (($211) - 1)|0;
  $213 = (($208) + ($212<<2)|0);
  $214 = +HEAPF32[$213>>2];
  $36 = $214;
  $215 = $31;
  $216 = $18;
  $217 = $16;
  $218 = (($216) - ($217))|0;
  $219 = (($218) - 1)|0;
  $220 = (($215) + ($219<<2)|0);
  $221 = +HEAPF32[$220>>2];
  $37 = $221;
  $222 = $32;
  $223 = $36;
  $224 = $222 * $223;
  $225 = $33;
  $226 = $37;
  $227 = $225 * $226;
  $228 = $224 + $227;
  $34 = $228;
  $229 = $32;
  $230 = $37;
  $231 = $229 * $230;
  $232 = $33;
  $233 = $36;
  $234 = $232 * $233;
  $235 = $231 - $234;
  $35 = $235;
  $236 = $34;
  $237 = $30;
  HEAPF32[$237>>2] = $236;
  $238 = $35;
  $239 = $29;
  $240 = ((($239)) + 4|0);
  HEAPF32[$240>>2] = $238;
  $241 = $29;
  $242 = ((($241)) + 8|0);
  $29 = $242;
  $243 = $30;
  $244 = ((($243)) + -8|0);
  $30 = $244;
  $245 = $16;
  $246 = (($245) + 1)|0;
  $16 = $246;
 }
 $247 = $10;
 $248 = $12;
 $249 = (($247) + ($248<<2)|0);
 $250 = ((($249)) + -4|0);
 $38 = $250;
 $251 = $10;
 $39 = $251;
 $252 = $11;
 $40 = $252;
 $253 = $11;
 $254 = $12;
 $255 = (($253) + ($254<<2)|0);
 $256 = ((($255)) + -4|0);
 $41 = $256;
 $16 = 0;
 while(1) {
  $257 = $16;
  $258 = $12;
  $259 = (($258|0) / 2)&-1;
  $260 = ($257|0)<($259|0);
  if (!($260)) {
   break;
  }
  $261 = $38;
  $262 = +HEAPF32[$261>>2];
  $42 = $262;
  $263 = $39;
  $264 = +HEAPF32[$263>>2];
  $43 = $264;
  $265 = $41;
  $266 = +HEAPF32[$265>>2];
  $267 = $43;
  $268 = $266 * $267;
  $269 = $40;
  $270 = +HEAPF32[$269>>2];
  $271 = $42;
  $272 = $270 * $271;
  $273 = $268 - $272;
  $274 = $39;
  $275 = ((($274)) + 4|0);
  $39 = $275;
  HEAPF32[$274>>2] = $273;
  $276 = $40;
  $277 = +HEAPF32[$276>>2];
  $278 = $43;
  $279 = $277 * $278;
  $280 = $41;
  $281 = +HEAPF32[$280>>2];
  $282 = $42;
  $283 = $281 * $282;
  $284 = $279 + $283;
  $285 = $38;
  $286 = ((($285)) + -4|0);
  $38 = $286;
  HEAPF32[$285>>2] = $284;
  $287 = $40;
  $288 = ((($287)) + 4|0);
  $40 = $288;
  $289 = $41;
  $290 = ((($289)) + -4|0);
  $41 = $290;
  $291 = $16;
  $292 = (($291) + 1)|0;
  $16 = $292;
 }
 STACKTOP = sp;return;
}
function _opus_custom_mode_create($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 L1: while(1) {
  $9 = $7;
  $10 = ($9|0)<(1);
  if (!($10)) {
   label = 12;
   break;
  }
  $8 = 0;
  while(1) {
   $11 = $8;
   $12 = ($11|0)<(4);
   if (!($12)) {
    break;
   }
   $13 = $4;
   $14 = $7;
   $15 = (4584 + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($13|0)==($17|0);
   if ($18) {
    $19 = $5;
    $20 = $8;
    $21 = $19 << $20;
    $22 = $7;
    $23 = (4584 + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($24)) + 44|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $7;
    $28 = (4584 + ($27<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($29)) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = Math_imul($26, $31)|0;
    $33 = ($21|0)==($32|0);
    if ($33) {
     label = 7;
     break L1;
    }
   }
   $40 = $8;
   $41 = (($40) + 1)|0;
   $8 = $41;
  }
  $42 = $7;
  $43 = (($42) + 1)|0;
  $7 = $43;
 }
 if ((label|0) == 7) {
  $34 = $6;
  $35 = ($34|0)!=(0|0);
  if ($35) {
   $36 = $6;
   HEAP32[$36>>2] = 0;
  }
  $37 = $7;
  $38 = (4584 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $3 = $39;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 12) {
  $44 = $6;
  $45 = ($44|0)!=(0|0);
  if ($45) {
   $46 = $6;
   HEAP32[$46>>2] = -1;
  }
  $3 = 0;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _pitch_downsample($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $11 = sp + 68|0;
 $13 = sp + 48|0;
 $14 = sp + 24|0;
 $15 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = 1.0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
 $16 = 0.80000001192092896;
 $10 = 1;
 while(1) {
  $17 = $10;
  $18 = $7;
  $19 = $18 >> 1;
  $20 = ($17|0)<($19|0);
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  if (!($20)) {
   break;
  }
  $23 = $10;
  $24 = $23<<1;
  $25 = (($24) - 1)|0;
  $26 = (($22) + ($25<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $5;
  $29 = HEAP32[$28>>2]|0;
  $30 = $10;
  $31 = $30<<1;
  $32 = (($31) + 1)|0;
  $33 = (($29) + ($32<<2)|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $27 + $34;
  $36 = 0.5 * $35;
  $37 = $5;
  $38 = HEAP32[$37>>2]|0;
  $39 = $10;
  $40 = $39<<1;
  $41 = (($38) + ($40<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $36 + $42;
  $44 = 0.5 * $43;
  $45 = $6;
  $46 = $10;
  $47 = (($45) + ($46<<2)|0);
  HEAPF32[$47>>2] = $44;
  $48 = $10;
  $49 = (($48) + 1)|0;
  $10 = $49;
 }
 $50 = ((($22)) + 4|0);
 $51 = +HEAPF32[$50>>2];
 $52 = 0.5 * $51;
 $53 = $5;
 $54 = HEAP32[$53>>2]|0;
 $55 = +HEAPF32[$54>>2];
 $56 = $52 + $55;
 $57 = 0.5 * $56;
 $58 = $6;
 HEAPF32[$58>>2] = $57;
 $59 = $8;
 $60 = ($59|0)==(2);
 if ($60) {
  $10 = 1;
  while(1) {
   $61 = $10;
   $62 = $7;
   $63 = $62 >> 1;
   $64 = ($61|0)<($63|0);
   $65 = $5;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   if (!($64)) {
    break;
   }
   $68 = $10;
   $69 = $68<<1;
   $70 = (($69) - 1)|0;
   $71 = (($67) + ($70<<2)|0);
   $72 = +HEAPF32[$71>>2];
   $73 = $5;
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $10;
   $77 = $76<<1;
   $78 = (($77) + 1)|0;
   $79 = (($75) + ($78<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $72 + $80;
   $82 = 0.5 * $81;
   $83 = $5;
   $84 = ((($83)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $10;
   $87 = $86<<1;
   $88 = (($85) + ($87<<2)|0);
   $89 = +HEAPF32[$88>>2];
   $90 = $82 + $89;
   $91 = 0.5 * $90;
   $92 = $6;
   $93 = $10;
   $94 = (($92) + ($93<<2)|0);
   $95 = +HEAPF32[$94>>2];
   $96 = $95 + $91;
   HEAPF32[$94>>2] = $96;
   $97 = $10;
   $98 = (($97) + 1)|0;
   $10 = $98;
  }
  $99 = ((($67)) + 4|0);
  $100 = +HEAPF32[$99>>2];
  $101 = 0.5 * $100;
  $102 = $5;
  $103 = ((($102)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = +HEAPF32[$104>>2];
  $106 = $101 + $105;
  $107 = 0.5 * $106;
  $108 = $6;
  $109 = +HEAPF32[$108>>2];
  $110 = $109 + $107;
  HEAPF32[$108>>2] = $110;
 }
 $111 = $6;
 $112 = $7;
 $113 = $112 >> 1;
 $114 = $9;
 (__celt_autocorr($111,$11,0,0,4,$113,$114)|0);
 $115 = +HEAPF32[$11>>2];
 $116 = $115 * 1.0001000165939331;
 HEAPF32[$11>>2] = $116;
 $10 = 1;
 while(1) {
  $117 = $10;
  $118 = ($117|0)<=(4);
  if (!($118)) {
   break;
  }
  $119 = $10;
  $120 = (($11) + ($119<<2)|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $10;
  $123 = (+($122|0));
  $124 = 0.0080000003799796104 * $123;
  $125 = $121 * $124;
  $126 = $10;
  $127 = (+($126|0));
  $128 = 0.0080000003799796104 * $127;
  $129 = $125 * $128;
  $130 = $10;
  $131 = (($11) + ($130<<2)|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $132 - $129;
  HEAPF32[$131>>2] = $133;
  $134 = $10;
  $135 = (($134) + 1)|0;
  $10 = $135;
 }
 __celt_lpc($13,$11,4);
 $10 = 0;
 while(1) {
  $136 = $10;
  $137 = ($136|0)<(4);
  if (!($137)) {
   break;
  }
  $138 = $12;
  $139 = 0.89999997615814208 * $138;
  $12 = $139;
  $140 = $10;
  $141 = (($13) + ($140<<2)|0);
  $142 = +HEAPF32[$141>>2];
  $143 = $12;
  $144 = $142 * $143;
  $145 = $10;
  $146 = (($13) + ($145<<2)|0);
  HEAPF32[$146>>2] = $144;
  $147 = $10;
  $148 = (($147) + 1)|0;
  $10 = $148;
 }
 $149 = +HEAPF32[$13>>2];
 $150 = $149 + 0.80000001192092896;
 HEAPF32[$15>>2] = $150;
 $151 = ((($13)) + 4|0);
 $152 = +HEAPF32[$151>>2];
 $153 = $16;
 $154 = +HEAPF32[$13>>2];
 $155 = $153 * $154;
 $156 = $152 + $155;
 $157 = ((($15)) + 4|0);
 HEAPF32[$157>>2] = $156;
 $158 = ((($13)) + 8|0);
 $159 = +HEAPF32[$158>>2];
 $160 = $16;
 $161 = ((($13)) + 4|0);
 $162 = +HEAPF32[$161>>2];
 $163 = $160 * $162;
 $164 = $159 + $163;
 $165 = ((($15)) + 8|0);
 HEAPF32[$165>>2] = $164;
 $166 = ((($13)) + 12|0);
 $167 = +HEAPF32[$166>>2];
 $168 = $16;
 $169 = ((($13)) + 8|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $168 * $170;
 $172 = $167 + $171;
 $173 = ((($15)) + 12|0);
 HEAPF32[$173>>2] = $172;
 $174 = $16;
 $175 = ((($13)) + 12|0);
 $176 = +HEAPF32[$175>>2];
 $177 = $174 * $176;
 $178 = ((($15)) + 16|0);
 HEAPF32[$178>>2] = $177;
 $179 = $6;
 $180 = $6;
 $181 = $7;
 $182 = $181 >> 1;
 _celt_fir5($179,$15,$180,$182,$14);
 STACKTOP = sp;return;
}
function _celt_fir5($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0;
 var $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $22 = $6;
 $23 = +HEAPF32[$22>>2];
 $11 = $23;
 $24 = $6;
 $25 = ((($24)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 $12 = $26;
 $27 = $6;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $13 = $29;
 $30 = $6;
 $31 = ((($30)) + 12|0);
 $32 = +HEAPF32[$31>>2];
 $14 = $32;
 $33 = $6;
 $34 = ((($33)) + 16|0);
 $35 = +HEAPF32[$34>>2];
 $15 = $35;
 $36 = $9;
 $37 = +HEAPF32[$36>>2];
 $16 = $37;
 $38 = $9;
 $39 = ((($38)) + 4|0);
 $40 = +HEAPF32[$39>>2];
 $17 = $40;
 $41 = $9;
 $42 = ((($41)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $18 = $43;
 $44 = $9;
 $45 = ((($44)) + 12|0);
 $46 = +HEAPF32[$45>>2];
 $19 = $46;
 $47 = $9;
 $48 = ((($47)) + 16|0);
 $49 = +HEAPF32[$48>>2];
 $20 = $49;
 $10 = 0;
 while(1) {
  $50 = $10;
  $51 = $8;
  $52 = ($50|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = $5;
  $54 = $10;
  $55 = (($53) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $21 = $56;
  $57 = $21;
  $58 = $11;
  $59 = $16;
  $60 = $58 * $59;
  $61 = $57 + $60;
  $21 = $61;
  $62 = $21;
  $63 = $12;
  $64 = $17;
  $65 = $63 * $64;
  $66 = $62 + $65;
  $21 = $66;
  $67 = $21;
  $68 = $13;
  $69 = $18;
  $70 = $68 * $69;
  $71 = $67 + $70;
  $21 = $71;
  $72 = $21;
  $73 = $14;
  $74 = $19;
  $75 = $73 * $74;
  $76 = $72 + $75;
  $21 = $76;
  $77 = $21;
  $78 = $15;
  $79 = $20;
  $80 = $78 * $79;
  $81 = $77 + $80;
  $21 = $81;
  $82 = $19;
  $20 = $82;
  $83 = $18;
  $19 = $83;
  $84 = $17;
  $18 = $84;
  $85 = $16;
  $17 = $85;
  $86 = $5;
  $87 = $10;
  $88 = (($86) + ($87<<2)|0);
  $89 = +HEAPF32[$88>>2];
  $16 = $89;
  $90 = $21;
  $91 = $7;
  $92 = $10;
  $93 = (($91) + ($92<<2)|0);
  HEAPF32[$93>>2] = $90;
  $94 = $10;
  $95 = (($94) + 1)|0;
  $10 = $95;
 }
 $96 = $16;
 $97 = $9;
 HEAPF32[$97>>2] = $96;
 $98 = $17;
 $99 = $9;
 $100 = ((($99)) + 4|0);
 HEAPF32[$100>>2] = $98;
 $101 = $18;
 $102 = $9;
 $103 = ((($102)) + 8|0);
 HEAPF32[$103>>2] = $101;
 $104 = $19;
 $105 = $9;
 $106 = ((($105)) + 12|0);
 HEAPF32[$106>>2] = $104;
 $107 = $20;
 $108 = $9;
 $109 = ((($108)) + 16|0);
 HEAPF32[$109>>2] = $107;
 STACKTOP = sp;return;
}
function _celt_pitch_xcorr($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $10;
  $17 = (($16) - 3)|0;
  $18 = ($15|0)<($17|0);
  if (!($18)) {
   break;
  }
  ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;
  $19 = $6;
  $20 = $7;
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = $9;
  _xcorr_kernel_c($19,$22,$13,$23);
  $24 = +HEAPF32[$13>>2];
  $25 = $8;
  $26 = $12;
  $27 = (($25) + ($26<<2)|0);
  HEAPF32[$27>>2] = $24;
  $28 = ((($13)) + 4|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $8;
  $31 = $12;
  $32 = (($31) + 1)|0;
  $33 = (($30) + ($32<<2)|0);
  HEAPF32[$33>>2] = $29;
  $34 = ((($13)) + 8|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $8;
  $37 = $12;
  $38 = (($37) + 2)|0;
  $39 = (($36) + ($38<<2)|0);
  HEAPF32[$39>>2] = $35;
  $40 = ((($13)) + 12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $8;
  $43 = $12;
  $44 = (($43) + 3)|0;
  $45 = (($42) + ($44<<2)|0);
  HEAPF32[$45>>2] = $41;
  $46 = $12;
  $47 = (($46) + 4)|0;
  $12 = $47;
 }
 while(1) {
  $48 = $12;
  $49 = $10;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $6;
  $52 = $7;
  $53 = $12;
  $54 = (($52) + ($53<<2)|0);
  $55 = $9;
  $56 = (+_celt_inner_prod_c_103($51,$54,$55));
  $14 = $56;
  $57 = $14;
  $58 = $8;
  $59 = $12;
  $60 = (($58) + ($59<<2)|0);
  HEAPF32[$60>>2] = $57;
  $61 = $12;
  $62 = (($61) + 1)|0;
  $12 = $62;
 }
 STACKTOP = sp;return;
}
function _xcorr_kernel_c($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = 0.0;
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $5 = $18;
 $19 = +HEAPF32[$17>>2];
 $9 = $19;
 $20 = $5;
 $21 = ((($20)) + 4|0);
 $5 = $21;
 $22 = +HEAPF32[$20>>2];
 $10 = $22;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $5 = $24;
 $25 = +HEAPF32[$23>>2];
 $11 = $25;
 $8 = 0;
 while(1) {
  $26 = $8;
  $27 = $7;
  $28 = (($27) - 3)|0;
  $29 = ($26|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $4;
  $31 = ((($30)) + 4|0);
  $4 = $31;
  $32 = +HEAPF32[$30>>2];
  $13 = $32;
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $5 = $34;
  $35 = +HEAPF32[$33>>2];
  $12 = $35;
  $36 = $6;
  $37 = +HEAPF32[$36>>2];
  $38 = $13;
  $39 = $9;
  $40 = $38 * $39;
  $41 = $37 + $40;
  $42 = $6;
  HEAPF32[$42>>2] = $41;
  $43 = $6;
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $13;
  $47 = $10;
  $48 = $46 * $47;
  $49 = $45 + $48;
  $50 = $6;
  $51 = ((($50)) + 4|0);
  HEAPF32[$51>>2] = $49;
  $52 = $6;
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $13;
  $56 = $11;
  $57 = $55 * $56;
  $58 = $54 + $57;
  $59 = $6;
  $60 = ((($59)) + 8|0);
  HEAPF32[$60>>2] = $58;
  $61 = $6;
  $62 = ((($61)) + 12|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $13;
  $65 = $12;
  $66 = $64 * $65;
  $67 = $63 + $66;
  $68 = $6;
  $69 = ((($68)) + 12|0);
  HEAPF32[$69>>2] = $67;
  $70 = $4;
  $71 = ((($70)) + 4|0);
  $4 = $71;
  $72 = +HEAPF32[$70>>2];
  $13 = $72;
  $73 = $5;
  $74 = ((($73)) + 4|0);
  $5 = $74;
  $75 = +HEAPF32[$73>>2];
  $9 = $75;
  $76 = $6;
  $77 = +HEAPF32[$76>>2];
  $78 = $13;
  $79 = $10;
  $80 = $78 * $79;
  $81 = $77 + $80;
  $82 = $6;
  HEAPF32[$82>>2] = $81;
  $83 = $6;
  $84 = ((($83)) + 4|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $13;
  $87 = $11;
  $88 = $86 * $87;
  $89 = $85 + $88;
  $90 = $6;
  $91 = ((($90)) + 4|0);
  HEAPF32[$91>>2] = $89;
  $92 = $6;
  $93 = ((($92)) + 8|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $13;
  $96 = $12;
  $97 = $95 * $96;
  $98 = $94 + $97;
  $99 = $6;
  $100 = ((($99)) + 8|0);
  HEAPF32[$100>>2] = $98;
  $101 = $6;
  $102 = ((($101)) + 12|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $13;
  $105 = $9;
  $106 = $104 * $105;
  $107 = $103 + $106;
  $108 = $6;
  $109 = ((($108)) + 12|0);
  HEAPF32[$109>>2] = $107;
  $110 = $4;
  $111 = ((($110)) + 4|0);
  $4 = $111;
  $112 = +HEAPF32[$110>>2];
  $13 = $112;
  $113 = $5;
  $114 = ((($113)) + 4|0);
  $5 = $114;
  $115 = +HEAPF32[$113>>2];
  $10 = $115;
  $116 = $6;
  $117 = +HEAPF32[$116>>2];
  $118 = $13;
  $119 = $11;
  $120 = $118 * $119;
  $121 = $117 + $120;
  $122 = $6;
  HEAPF32[$122>>2] = $121;
  $123 = $6;
  $124 = ((($123)) + 4|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $13;
  $127 = $12;
  $128 = $126 * $127;
  $129 = $125 + $128;
  $130 = $6;
  $131 = ((($130)) + 4|0);
  HEAPF32[$131>>2] = $129;
  $132 = $6;
  $133 = ((($132)) + 8|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $13;
  $136 = $9;
  $137 = $135 * $136;
  $138 = $134 + $137;
  $139 = $6;
  $140 = ((($139)) + 8|0);
  HEAPF32[$140>>2] = $138;
  $141 = $6;
  $142 = ((($141)) + 12|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $13;
  $145 = $10;
  $146 = $144 * $145;
  $147 = $143 + $146;
  $148 = $6;
  $149 = ((($148)) + 12|0);
  HEAPF32[$149>>2] = $147;
  $150 = $4;
  $151 = ((($150)) + 4|0);
  $4 = $151;
  $152 = +HEAPF32[$150>>2];
  $13 = $152;
  $153 = $5;
  $154 = ((($153)) + 4|0);
  $5 = $154;
  $155 = +HEAPF32[$153>>2];
  $11 = $155;
  $156 = $6;
  $157 = +HEAPF32[$156>>2];
  $158 = $13;
  $159 = $12;
  $160 = $158 * $159;
  $161 = $157 + $160;
  $162 = $6;
  HEAPF32[$162>>2] = $161;
  $163 = $6;
  $164 = ((($163)) + 4|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $13;
  $167 = $9;
  $168 = $166 * $167;
  $169 = $165 + $168;
  $170 = $6;
  $171 = ((($170)) + 4|0);
  HEAPF32[$171>>2] = $169;
  $172 = $6;
  $173 = ((($172)) + 8|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $13;
  $176 = $10;
  $177 = $175 * $176;
  $178 = $174 + $177;
  $179 = $6;
  $180 = ((($179)) + 8|0);
  HEAPF32[$180>>2] = $178;
  $181 = $6;
  $182 = ((($181)) + 12|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $13;
  $185 = $11;
  $186 = $184 * $185;
  $187 = $183 + $186;
  $188 = $6;
  $189 = ((($188)) + 12|0);
  HEAPF32[$189>>2] = $187;
  $190 = $8;
  $191 = (($190) + 4)|0;
  $8 = $191;
 }
 $192 = $8;
 $193 = (($192) + 1)|0;
 $8 = $193;
 $194 = $7;
 $195 = ($192|0)<($194|0);
 if ($195) {
  $196 = $4;
  $197 = ((($196)) + 4|0);
  $4 = $197;
  $198 = +HEAPF32[$196>>2];
  $14 = $198;
  $199 = $5;
  $200 = ((($199)) + 4|0);
  $5 = $200;
  $201 = +HEAPF32[$199>>2];
  $12 = $201;
  $202 = $6;
  $203 = +HEAPF32[$202>>2];
  $204 = $14;
  $205 = $9;
  $206 = $204 * $205;
  $207 = $203 + $206;
  $208 = $6;
  HEAPF32[$208>>2] = $207;
  $209 = $6;
  $210 = ((($209)) + 4|0);
  $211 = +HEAPF32[$210>>2];
  $212 = $14;
  $213 = $10;
  $214 = $212 * $213;
  $215 = $211 + $214;
  $216 = $6;
  $217 = ((($216)) + 4|0);
  HEAPF32[$217>>2] = $215;
  $218 = $6;
  $219 = ((($218)) + 8|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $14;
  $222 = $11;
  $223 = $221 * $222;
  $224 = $220 + $223;
  $225 = $6;
  $226 = ((($225)) + 8|0);
  HEAPF32[$226>>2] = $224;
  $227 = $6;
  $228 = ((($227)) + 12|0);
  $229 = +HEAPF32[$228>>2];
  $230 = $14;
  $231 = $12;
  $232 = $230 * $231;
  $233 = $229 + $232;
  $234 = $6;
  $235 = ((($234)) + 12|0);
  HEAPF32[$235>>2] = $233;
 }
 $236 = $8;
 $237 = (($236) + 1)|0;
 $8 = $237;
 $238 = $7;
 $239 = ($236|0)<($238|0);
 if ($239) {
  $240 = $4;
  $241 = ((($240)) + 4|0);
  $4 = $241;
  $242 = +HEAPF32[$240>>2];
  $15 = $242;
  $243 = $5;
  $244 = ((($243)) + 4|0);
  $5 = $244;
  $245 = +HEAPF32[$243>>2];
  $9 = $245;
  $246 = $6;
  $247 = +HEAPF32[$246>>2];
  $248 = $15;
  $249 = $10;
  $250 = $248 * $249;
  $251 = $247 + $250;
  $252 = $6;
  HEAPF32[$252>>2] = $251;
  $253 = $6;
  $254 = ((($253)) + 4|0);
  $255 = +HEAPF32[$254>>2];
  $256 = $15;
  $257 = $11;
  $258 = $256 * $257;
  $259 = $255 + $258;
  $260 = $6;
  $261 = ((($260)) + 4|0);
  HEAPF32[$261>>2] = $259;
  $262 = $6;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF32[$263>>2];
  $265 = $15;
  $266 = $12;
  $267 = $265 * $266;
  $268 = $264 + $267;
  $269 = $6;
  $270 = ((($269)) + 8|0);
  HEAPF32[$270>>2] = $268;
  $271 = $6;
  $272 = ((($271)) + 12|0);
  $273 = +HEAPF32[$272>>2];
  $274 = $15;
  $275 = $9;
  $276 = $274 * $275;
  $277 = $273 + $276;
  $278 = $6;
  $279 = ((($278)) + 12|0);
  HEAPF32[$279>>2] = $277;
 }
 $280 = $8;
 $281 = $7;
 $282 = ($280|0)<($281|0);
 if (!($282)) {
  STACKTOP = sp;return;
 }
 $283 = $4;
 $284 = ((($283)) + 4|0);
 $4 = $284;
 $285 = +HEAPF32[$283>>2];
 $16 = $285;
 $286 = $5;
 $287 = ((($286)) + 4|0);
 $5 = $287;
 $288 = +HEAPF32[$286>>2];
 $10 = $288;
 $289 = $6;
 $290 = +HEAPF32[$289>>2];
 $291 = $16;
 $292 = $11;
 $293 = $291 * $292;
 $294 = $290 + $293;
 $295 = $6;
 HEAPF32[$295>>2] = $294;
 $296 = $6;
 $297 = ((($296)) + 4|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $16;
 $300 = $12;
 $301 = $299 * $300;
 $302 = $298 + $301;
 $303 = $6;
 $304 = ((($303)) + 4|0);
 HEAPF32[$304>>2] = $302;
 $305 = $6;
 $306 = ((($305)) + 8|0);
 $307 = +HEAPF32[$306>>2];
 $308 = $16;
 $309 = $9;
 $310 = $308 * $309;
 $311 = $307 + $310;
 $312 = $6;
 $313 = ((($312)) + 8|0);
 HEAPF32[$313>>2] = $311;
 $314 = $6;
 $315 = ((($314)) + 12|0);
 $316 = +HEAPF32[$315>>2];
 $317 = $16;
 $318 = $10;
 $319 = $317 * $318;
 $320 = $316 + $319;
 $321 = $6;
 $322 = ((($321)) + 12|0);
 HEAPF32[$322>>2] = $320;
 STACKTOP = sp;return;
}
function _celt_inner_prod_c_103($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $7;
  if (!($10)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 * $19;
  $21 = $11 + $20;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 STACKTOP = sp;return (+$11);
}
function _pitch_search($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul17 = 0, $$alloca_mul19 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
 var $133 = 0.0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $15 = sp + 24|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;
 $22 = $8;
 $23 = $9;
 $24 = (($22) + ($23))|0;
 $14 = $24;
 $25 = $8;
 $26 = $25 >> 2;
 $27 = (_llvm_stacksave()|0);
 $17 = $27;
 $$alloca_mul = $26<<2;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $29 = $14;
 $30 = $29 >> 2;
 $$alloca_mul17 = $30<<2;
 $31 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul17)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul17)|0)+15)&-16)|0);;
 $32 = $9;
 $33 = $32 >> 1;
 $$alloca_mul19 = $33<<2;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul19)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul19)|0)+15)&-16)|0);;
 $13 = 0;
 while(1) {
  $35 = $13;
  $36 = $8;
  $37 = $36 >> 2;
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $6;
  $40 = $13;
  $41 = $40<<1;
  $42 = (($39) + ($41<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $13;
  $45 = (($28) + ($44<<2)|0);
  HEAPF32[$45>>2] = $43;
  $46 = $13;
  $47 = (($46) + 1)|0;
  $13 = $47;
 }
 $13 = 0;
 while(1) {
  $48 = $13;
  $49 = $14;
  $50 = $49 >> 2;
  $51 = ($48|0)<($50|0);
  if (!($51)) {
   break;
  }
  $52 = $7;
  $53 = $13;
  $54 = $53<<1;
  $55 = (($52) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $13;
  $58 = (($31) + ($57<<2)|0);
  HEAPF32[$58>>2] = $56;
  $59 = $13;
  $60 = (($59) + 1)|0;
  $13 = $60;
 }
 $61 = $8;
 $62 = $61 >> 2;
 $63 = $9;
 $64 = $63 >> 2;
 $65 = $11;
 _celt_pitch_xcorr($28,$31,$34,$62,$64,$65);
 $66 = $8;
 $67 = $66 >> 2;
 $68 = $9;
 $69 = $68 >> 2;
 _find_best_pitch($34,$31,$67,$69,$15);
 $12 = 0;
 while(1) {
  $70 = $12;
  $71 = $9;
  $72 = $71 >> 1;
  $73 = ($70|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $12;
  $75 = (($34) + ($74<<2)|0);
  HEAPF32[$75>>2] = 0.0;
  $76 = $12;
  $77 = HEAP32[$15>>2]|0;
  $78 = $77<<1;
  $79 = (($76) - ($78))|0;
  $80 = (Math_abs(($79|0))|0);
  $81 = ($80|0)>(2);
  if ($81) {
   $82 = $12;
   $83 = ((($15)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $84<<1;
   $86 = (($82) - ($85))|0;
   $87 = (Math_abs(($86|0))|0);
   $88 = ($87|0)>(2);
   if (!($88)) {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $89 = $6;
   $90 = $7;
   $91 = $12;
   $92 = (($90) + ($91<<2)|0);
   $93 = $8;
   $94 = $93 >> 1;
   $95 = (+_celt_inner_prod_c_103($89,$92,$94));
   $18 = $95;
   $96 = $18;
   $97 = -1.0 > $96;
   $98 = $18;
   $99 = $97 ? -1.0 : $98;
   $100 = $12;
   $101 = (($34) + ($100<<2)|0);
   HEAPF32[$101>>2] = $99;
  }
  $102 = $12;
  $103 = (($102) + 1)|0;
  $12 = $103;
 }
 $104 = $7;
 $105 = $8;
 $106 = $105 >> 1;
 $107 = $9;
 $108 = $107 >> 1;
 _find_best_pitch($34,$104,$106,$108,$15);
 $109 = HEAP32[$15>>2]|0;
 $110 = ($109|0)>(0);
 if ($110) {
  $111 = HEAP32[$15>>2]|0;
  $112 = $9;
  $113 = $112 >> 1;
  $114 = (($113) - 1)|0;
  $115 = ($111|0)<($114|0);
  if ($115) {
   $116 = HEAP32[$15>>2]|0;
   $117 = (($116) - 1)|0;
   $118 = (($34) + ($117<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $19 = $119;
   $120 = HEAP32[$15>>2]|0;
   $121 = (($34) + ($120<<2)|0);
   $122 = +HEAPF32[$121>>2];
   $20 = $122;
   $123 = HEAP32[$15>>2]|0;
   $124 = (($123) + 1)|0;
   $125 = (($34) + ($124<<2)|0);
   $126 = +HEAPF32[$125>>2];
   $21 = $126;
   $127 = $21;
   $128 = $19;
   $129 = $127 - $128;
   $130 = $20;
   $131 = $19;
   $132 = $130 - $131;
   $133 = 0.69999998807907104 * $132;
   $134 = $129 > $133;
   if ($134) {
    $16 = 1;
    $143 = HEAP32[$15>>2]|0;
    $144 = $143<<1;
    $145 = $16;
    $146 = (($144) - ($145))|0;
    $147 = $10;
    HEAP32[$147>>2] = $146;
    $148 = $17;
    _llvm_stackrestore(($148|0));
    STACKTOP = sp;return;
   }
   $135 = $19;
   $136 = $21;
   $137 = $135 - $136;
   $138 = $20;
   $139 = $21;
   $140 = $138 - $139;
   $141 = 0.69999998807907104 * $140;
   $142 = $137 > $141;
   if ($142) {
    $16 = -1;
    $143 = HEAP32[$15>>2]|0;
    $144 = $143<<1;
    $145 = $16;
    $146 = (($144) - ($145))|0;
    $147 = $10;
    HEAP32[$147>>2] = $146;
    $148 = $17;
    _llvm_stackrestore(($148|0));
    STACKTOP = sp;return;
   } else {
    $16 = 0;
    $143 = HEAP32[$15>>2]|0;
    $144 = $143<<1;
    $145 = $16;
    $146 = (($144) - ($145))|0;
    $147 = $10;
    HEAP32[$147>>2] = $146;
    $148 = $17;
    _llvm_stackrestore(($148|0));
    STACKTOP = sp;return;
   }
  }
 }
 $16 = 0;
 $143 = HEAP32[$15>>2]|0;
 $144 = $143<<1;
 $145 = $16;
 $146 = (($144) - ($145))|0;
 $147 = $10;
 HEAP32[$147>>2] = $146;
 $148 = $17;
 _llvm_stackrestore(($148|0));
 STACKTOP = sp;return;
}
function _find_best_pitch($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 16|0;
 $14 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = 1.0;
 HEAPF32[$13>>2] = -1.0;
 $17 = ((($13)) + 4|0);
 HEAPF32[$17>>2] = -1.0;
 HEAPF32[$14>>2] = 0.0;
 $18 = ((($14)) + 4|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = $9;
 HEAP32[$19>>2] = 0;
 $20 = $9;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 1;
 $11 = 0;
 while(1) {
  $22 = $11;
  $23 = $7;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $12;
  $26 = $6;
  $27 = $11;
  $28 = (($26) + ($27<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $6;
  $31 = $11;
  $32 = (($30) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $29 * $33;
  $35 = $25 + $34;
  $12 = $35;
  $36 = $11;
  $37 = (($36) + 1)|0;
  $11 = $37;
 }
 $10 = 0;
 while(1) {
  $38 = $10;
  $39 = $8;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $5;
  $42 = $10;
  $43 = (($41) + ($42<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 > 0.0;
  if ($45) {
   $46 = $5;
   $47 = $10;
   $48 = (($46) + ($47<<2)|0);
   $49 = +HEAPF32[$48>>2];
   $16 = $49;
   $50 = $16;
   $51 = $50 * 9.999999960041972E-13;
   $16 = $51;
   $52 = $16;
   $53 = $16;
   $54 = $52 * $53;
   $15 = $54;
   $55 = $15;
   $56 = ((($14)) + 4|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $55 * $57;
   $59 = ((($13)) + 4|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $12;
   $62 = $60 * $61;
   $63 = $58 > $62;
   if ($63) {
    $64 = $15;
    $65 = +HEAPF32[$14>>2];
    $66 = $64 * $65;
    $67 = +HEAPF32[$13>>2];
    $68 = $12;
    $69 = $67 * $68;
    $70 = $66 > $69;
    if ($70) {
     $71 = +HEAPF32[$13>>2];
     $72 = ((($13)) + 4|0);
     HEAPF32[$72>>2] = $71;
     $73 = +HEAPF32[$14>>2];
     $74 = ((($14)) + 4|0);
     HEAPF32[$74>>2] = $73;
     $75 = $9;
     $76 = HEAP32[$75>>2]|0;
     $77 = $9;
     $78 = ((($77)) + 4|0);
     HEAP32[$78>>2] = $76;
     $79 = $15;
     HEAPF32[$13>>2] = $79;
     $80 = $12;
     HEAPF32[$14>>2] = $80;
     $81 = $10;
     $82 = $9;
     $$sink = $81;$$sink1 = $82;
    } else {
     $83 = $15;
     $84 = ((($13)) + 4|0);
     HEAPF32[$84>>2] = $83;
     $85 = $12;
     $86 = ((($14)) + 4|0);
     HEAPF32[$86>>2] = $85;
     $87 = $10;
     $88 = $9;
     $89 = ((($88)) + 4|0);
     $$sink = $87;$$sink1 = $89;
    }
    HEAP32[$$sink1>>2] = $$sink;
   }
  }
  $90 = $6;
  $91 = $10;
  $92 = $7;
  $93 = (($91) + ($92))|0;
  $94 = (($90) + ($93<<2)|0);
  $95 = +HEAPF32[$94>>2];
  $96 = $6;
  $97 = $10;
  $98 = $7;
  $99 = (($97) + ($98))|0;
  $100 = (($96) + ($99<<2)|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $95 * $101;
  $103 = $6;
  $104 = $10;
  $105 = (($103) + ($104<<2)|0);
  $106 = +HEAPF32[$105>>2];
  $107 = $6;
  $108 = $10;
  $109 = (($107) + ($108<<2)|0);
  $110 = +HEAPF32[$109>>2];
  $111 = $106 * $110;
  $112 = $102 - $111;
  $113 = $12;
  $114 = $113 + $112;
  $12 = $114;
  $115 = $12;
  $116 = 1.0 > $115;
  $117 = $12;
  $118 = $116 ? 1.0 : $117;
  $12 = $118;
  $119 = $10;
  $120 = (($119) + 1)|0;
  $10 = $120;
 }
 STACKTOP = sp;return;
}
function _remove_doubling($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 $7 = $7|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0.0;
 var $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0;
 var $262 = 0.0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0.0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0;
 var $299 = 0.0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $26 = sp + 52|0;
 $27 = sp + 40|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $38 = $10;
 $31 = $38;
 $39 = $9;
 $40 = (($39|0) / 2)&-1;
 $9 = $40;
 $41 = $10;
 $42 = (($41|0) / 2)&-1;
 $10 = $42;
 $43 = $12;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44|0) / 2)&-1;
 HEAP32[$43>>2] = $45;
 $46 = $13;
 $47 = (($46|0) / 2)&-1;
 $13 = $47;
 $48 = $11;
 $49 = (($48|0) / 2)&-1;
 $11 = $49;
 $50 = $9;
 $51 = $8;
 $52 = (($51) + ($50<<2)|0);
 $8 = $52;
 $53 = $12;
 $54 = HEAP32[$53>>2]|0;
 $55 = $9;
 $56 = ($54|0)>=($55|0);
 if ($56) {
  $57 = $9;
  $58 = (($57) - 1)|0;
  $59 = $12;
  HEAP32[$59>>2] = $58;
 }
 $60 = $12;
 $61 = HEAP32[$60>>2]|0;
 $19 = $61;
 $18 = $61;
 $62 = $9;
 $63 = (($62) + 1)|0;
 $64 = (_llvm_stacksave()|0);
 $32 = $64;
 $$alloca_mul = $63<<2;
 $65 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $66 = $8;
 $67 = $8;
 $68 = $8;
 $69 = $19;
 $70 = (0 - ($69))|0;
 $71 = (($68) + ($70<<2)|0);
 $72 = $11;
 _dual_inner_prod_c($66,$67,$71,$72,$24,$23);
 $73 = +HEAPF32[$24>>2];
 HEAPF32[$65>>2] = $73;
 $74 = +HEAPF32[$24>>2];
 $25 = $74;
 $17 = 1;
 while(1) {
  $75 = $17;
  $76 = $9;
  $77 = ($75|0)<=($76|0);
  if (!($77)) {
   break;
  }
  $78 = $25;
  $79 = $8;
  $80 = $17;
  $81 = (0 - ($80))|0;
  $82 = (($79) + ($81<<2)|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $8;
  $85 = $17;
  $86 = (0 - ($85))|0;
  $87 = (($84) + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = $83 * $88;
  $90 = $78 + $89;
  $91 = $8;
  $92 = $11;
  $93 = $17;
  $94 = (($92) - ($93))|0;
  $95 = (($91) + ($94<<2)|0);
  $96 = +HEAPF32[$95>>2];
  $97 = $8;
  $98 = $11;
  $99 = $17;
  $100 = (($98) - ($99))|0;
  $101 = (($97) + ($100<<2)|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $96 * $102;
  $104 = $90 - $103;
  $25 = $104;
  $105 = $25;
  $106 = 0.0 > $105;
  $107 = $25;
  $108 = $106 ? 0.0 : $107;
  $109 = $17;
  $110 = (($65) + ($109<<2)|0);
  HEAPF32[$110>>2] = $108;
  $111 = $17;
  $112 = (($111) + 1)|0;
  $17 = $112;
 }
 $113 = $19;
 $114 = (($65) + ($113<<2)|0);
 $115 = +HEAPF32[$114>>2];
 $25 = $115;
 $116 = +HEAPF32[$23>>2];
 $28 = $116;
 $117 = $25;
 $29 = $117;
 $118 = +HEAPF32[$23>>2];
 $119 = +HEAPF32[$24>>2];
 $120 = $25;
 $121 = $119 * $120;
 $122 = 1.0 + $121;
 $123 = $122;
 $124 = (+Math_sqrt((+$123)));
 $125 = $124;
 $126 = $118 / $125;
 $21 = $126;
 $20 = $126;
 $16 = 2;
 while(1) {
  $127 = $16;
  $128 = ($127|0)<=(15);
  if (!($128)) {
   break;
  }
  $36 = 0.0;
  $129 = $19;
  $130 = $129<<1;
  $131 = $16;
  $132 = (($130) + ($131))|0;
  $133 = $16;
  $134 = $133<<1;
  $135 = (_celt_udiv_108($132,$134)|0);
  $33 = $135;
  $136 = $33;
  $137 = $10;
  $138 = ($136|0)<($137|0);
  if ($138) {
   break;
  }
  $139 = $16;
  $140 = ($139|0)==(2);
  do {
   if ($140) {
    $141 = $33;
    $142 = $19;
    $143 = (($141) + ($142))|0;
    $144 = $9;
    $145 = ($143|0)>($144|0);
    $146 = $19;
    if ($145) {
     $34 = $146;
     break;
    } else {
     $147 = $33;
     $148 = (($146) + ($147))|0;
     $34 = $148;
     break;
    }
   } else {
    $149 = $16;
    $150 = (16440 + ($149<<2)|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = $151<<1;
    $153 = $19;
    $154 = Math_imul($152, $153)|0;
    $155 = $16;
    $156 = (($154) + ($155))|0;
    $157 = $16;
    $158 = $157<<1;
    $159 = (_celt_udiv_108($156,$158)|0);
    $34 = $159;
   }
  } while(0);
  $160 = $8;
  $161 = $8;
  $162 = $33;
  $163 = (0 - ($162))|0;
  $164 = (($161) + ($163<<2)|0);
  $165 = $8;
  $166 = $34;
  $167 = (0 - ($166))|0;
  $168 = (($165) + ($167<<2)|0);
  $169 = $11;
  _dual_inner_prod_c($160,$164,$168,$169,$23,$26);
  $170 = +HEAPF32[$26>>2];
  $171 = +HEAPF32[$23>>2];
  $172 = $171 + $170;
  HEAPF32[$23>>2] = $172;
  $173 = $33;
  $174 = (($65) + ($173<<2)|0);
  $175 = +HEAPF32[$174>>2];
  $176 = $34;
  $177 = (($65) + ($176<<2)|0);
  $178 = +HEAPF32[$177>>2];
  $179 = $175 + $178;
  $25 = $179;
  $180 = +HEAPF32[$23>>2];
  $181 = +HEAPF32[$24>>2];
  $182 = 2.0 * $181;
  $183 = $182 * 1.0;
  $184 = $25;
  $185 = $183 * $184;
  $186 = 1.0 + $185;
  $187 = $186;
  $188 = (+Math_sqrt((+$187)));
  $189 = $188;
  $190 = $180 / $189;
  $35 = $190;
  $191 = $33;
  $192 = $13;
  $193 = (($191) - ($192))|0;
  $194 = (Math_abs(($193|0))|0);
  $195 = ($194|0)<=(1);
  do {
   if ($195) {
    $196 = $14;
    $36 = $196;
   } else {
    $197 = $33;
    $198 = $13;
    $199 = (($197) - ($198))|0;
    $200 = (Math_abs(($199|0))|0);
    $201 = ($200|0)<=(2);
    if ($201) {
     $202 = $16;
     $203 = ($202*5)|0;
     $204 = $16;
     $205 = Math_imul($203, $204)|0;
     $206 = $19;
     $207 = ($205|0)<($206|0);
     if ($207) {
      $208 = $14;
      $209 = 0.5 * $208;
      $36 = $209;
      break;
     }
    }
    $36 = 0.0;
   }
  } while(0);
  $210 = $21;
  $211 = 0.69999998807907104 * $210;
  $212 = $36;
  $213 = $211 - $212;
  $214 = 0.30000001192092896 > $213;
  if ($214) {
   $219 = 0.30000001192092896;
  } else {
   $215 = $21;
   $216 = 0.69999998807907104 * $215;
   $217 = $36;
   $218 = $216 - $217;
   $219 = $218;
  }
  $37 = $219;
  $220 = $33;
  $221 = $10;
  $222 = ($221*3)|0;
  $223 = ($220|0)<($222|0);
  if ($223) {
   $224 = $21;
   $225 = 0.85000002384185791 * $224;
   $226 = $36;
   $227 = $225 - $226;
   $228 = 0.40000000596046448 > $227;
   if ($228) {
    $233 = 0.40000000596046448;
   } else {
    $229 = $21;
    $230 = 0.85000002384185791 * $229;
    $231 = $36;
    $232 = $230 - $231;
    $233 = $232;
   }
   $37 = $233;
  } else {
   $234 = $33;
   $235 = $10;
   $236 = $235<<1;
   $237 = ($234|0)<($236|0);
   if ($237) {
    $238 = $21;
    $239 = 0.89999997615814208 * $238;
    $240 = $36;
    $241 = $239 - $240;
    $242 = 0.5 > $241;
    if ($242) {
     $247 = 0.5;
    } else {
     $243 = $21;
     $244 = 0.89999997615814208 * $243;
     $245 = $36;
     $246 = $244 - $245;
     $247 = $246;
    }
    $37 = $247;
   }
  }
  $248 = $35;
  $249 = $37;
  $250 = $248 > $249;
  if ($250) {
   $251 = +HEAPF32[$23>>2];
   $28 = $251;
   $252 = $25;
   $29 = $252;
   $253 = $33;
   $18 = $253;
   $254 = $35;
   $20 = $254;
  }
  $255 = $16;
  $256 = (($255) + 1)|0;
  $16 = $256;
 }
 $257 = $28;
 $258 = 0.0 > $257;
 $259 = $28;
 $260 = $258 ? 0.0 : $259;
 $28 = $260;
 $261 = $29;
 $262 = $28;
 $263 = $261 <= $262;
 if ($263) {
  $22 = 1.0;
 } else {
  $264 = $28;
  $265 = $29;
  $266 = $265 + 1.0;
  $267 = $264 / $266;
  $22 = $267;
 }
 $16 = 0;
 while(1) {
  $268 = $16;
  $269 = ($268|0)<(3);
  if (!($269)) {
   break;
  }
  $270 = $8;
  $271 = $8;
  $272 = $18;
  $273 = $16;
  $274 = (($272) + ($273))|0;
  $275 = (($274) - 1)|0;
  $276 = (0 - ($275))|0;
  $277 = (($271) + ($276<<2)|0);
  $278 = $11;
  $279 = (+_celt_inner_prod_c_103($270,$277,$278));
  $280 = $16;
  $281 = (($27) + ($280<<2)|0);
  HEAPF32[$281>>2] = $279;
  $282 = $16;
  $283 = (($282) + 1)|0;
  $16 = $283;
 }
 $284 = ((($27)) + 8|0);
 $285 = +HEAPF32[$284>>2];
 $286 = +HEAPF32[$27>>2];
 $287 = $285 - $286;
 $288 = ((($27)) + 4|0);
 $289 = +HEAPF32[$288>>2];
 $290 = +HEAPF32[$27>>2];
 $291 = $289 - $290;
 $292 = 0.69999998807907104 * $291;
 $293 = $287 > $292;
 do {
  if ($293) {
   $30 = 1;
  } else {
   $294 = +HEAPF32[$27>>2];
   $295 = ((($27)) + 8|0);
   $296 = +HEAPF32[$295>>2];
   $297 = $294 - $296;
   $298 = ((($27)) + 4|0);
   $299 = +HEAPF32[$298>>2];
   $300 = ((($27)) + 8|0);
   $301 = +HEAPF32[$300>>2];
   $302 = $299 - $301;
   $303 = 0.69999998807907104 * $302;
   $304 = $297 > $303;
   if ($304) {
    $30 = -1;
    break;
   } else {
    $30 = 0;
    break;
   }
  }
 } while(0);
 $305 = $22;
 $306 = $20;
 $307 = $305 > $306;
 if ($307) {
  $308 = $20;
  $22 = $308;
 }
 $309 = $18;
 $310 = $309<<1;
 $311 = $30;
 $312 = (($310) + ($311))|0;
 $313 = $12;
 HEAP32[$313>>2] = $312;
 $314 = $12;
 $315 = HEAP32[$314>>2]|0;
 $316 = $31;
 $317 = ($315|0)<($316|0);
 if (!($317)) {
  $320 = $22;
  $321 = $32;
  _llvm_stackrestore(($321|0));
  STACKTOP = sp;return (+$320);
 }
 $318 = $31;
 $319 = $12;
 HEAP32[$319>>2] = $318;
 $320 = $22;
 $321 = $32;
 _llvm_stackrestore(($321|0));
 STACKTOP = sp;return (+$320);
}
function _dual_inner_prod_c($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = 0.0;
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $9;
  $17 = ($15|0)<($16|0);
  $18 = $13;
  if (!($17)) {
   break;
  }
  $19 = $6;
  $20 = $12;
  $21 = (($19) + ($20<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $7;
  $24 = $12;
  $25 = (($23) + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $22 * $26;
  $28 = $18 + $27;
  $13 = $28;
  $29 = $14;
  $30 = $6;
  $31 = $12;
  $32 = (($30) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $8;
  $35 = $12;
  $36 = (($34) + ($35<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $33 * $37;
  $39 = $29 + $38;
  $14 = $39;
  $40 = $12;
  $41 = (($40) + 1)|0;
  $12 = $41;
 }
 $42 = $10;
 HEAPF32[$42>>2] = $18;
 $43 = $14;
 $44 = $11;
 HEAPF32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function _celt_udiv_108($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function __celt_lpc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $12 = 0.0, $13 = 0.0, $14 = 0;
 var $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0;
 var $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $4;
 $15 = +HEAPF32[$14>>2];
 $9 = $15;
 $16 = $3;
 $10 = $16;
 $6 = 0;
 while(1) {
  $17 = $6;
  $18 = $5;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $10;
  $21 = $6;
  $22 = (($20) + ($21<<2)|0);
  HEAPF32[$22>>2] = 0.0;
  $23 = $6;
  $24 = (($23) + 1)|0;
  $6 = $24;
 }
 $25 = $4;
 $26 = +HEAPF32[$25>>2];
 $27 = $26 != 0.0;
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $6 = 0;
 while(1) {
  $28 = $6;
  $29 = $5;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   label = 15;
   break;
  }
  $11 = 0.0;
  $7 = 0;
  while(1) {
   $31 = $7;
   $32 = $6;
   $33 = ($31|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = $10;
   $35 = $7;
   $36 = (($34) + ($35<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = $4;
   $39 = $6;
   $40 = $7;
   $41 = (($39) - ($40))|0;
   $42 = (($38) + ($41<<2)|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $37 * $43;
   $45 = $11;
   $46 = $45 + $44;
   $11 = $46;
   $47 = $7;
   $48 = (($47) + 1)|0;
   $7 = $48;
  }
  $49 = $4;
  $50 = $6;
  $51 = (($50) + 1)|0;
  $52 = (($49) + ($51<<2)|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $11;
  $55 = $54 + $53;
  $11 = $55;
  $56 = $11;
  $57 = $9;
  $58 = $56 / $57;
  $59 = - $58;
  $8 = $59;
  $60 = $8;
  $61 = $10;
  $62 = $6;
  $63 = (($61) + ($62<<2)|0);
  HEAPF32[$63>>2] = $60;
  $7 = 0;
  while(1) {
   $64 = $7;
   $65 = $6;
   $66 = (($65) + 1)|0;
   $67 = $66 >> 1;
   $68 = ($64|0)<($67|0);
   if (!($68)) {
    break;
   }
   $69 = $10;
   $70 = $7;
   $71 = (($69) + ($70<<2)|0);
   $72 = +HEAPF32[$71>>2];
   $12 = $72;
   $73 = $10;
   $74 = $6;
   $75 = (($74) - 1)|0;
   $76 = $7;
   $77 = (($75) - ($76))|0;
   $78 = (($73) + ($77<<2)|0);
   $79 = +HEAPF32[$78>>2];
   $13 = $79;
   $80 = $12;
   $81 = $8;
   $82 = $13;
   $83 = $81 * $82;
   $84 = $80 + $83;
   $85 = $10;
   $86 = $7;
   $87 = (($85) + ($86<<2)|0);
   HEAPF32[$87>>2] = $84;
   $88 = $13;
   $89 = $8;
   $90 = $12;
   $91 = $89 * $90;
   $92 = $88 + $91;
   $93 = $10;
   $94 = $6;
   $95 = (($94) - 1)|0;
   $96 = $7;
   $97 = (($95) - ($96))|0;
   $98 = (($93) + ($97<<2)|0);
   HEAPF32[$98>>2] = $92;
   $99 = $7;
   $100 = (($99) + 1)|0;
   $7 = $100;
  }
  $101 = $9;
  $102 = $8;
  $103 = $8;
  $104 = $102 * $103;
  $105 = $9;
  $106 = $104 * $105;
  $107 = $101 - $106;
  $9 = $107;
  $108 = $9;
  $109 = $4;
  $110 = +HEAPF32[$109>>2];
  $111 = 0.0010000000474974513 * $110;
  $112 = $108 < $111;
  if ($112) {
   label = 15;
   break;
  }
  $113 = $6;
  $114 = (($113) + 1)|0;
  $6 = $114;
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return;
 }
}
function _celt_fir_c($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $$alloca_mul13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $11;
 $20 = (_llvm_stacksave()|0);
 $16 = $20;
 $$alloca_mul = $19<<2;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $22 = $10;
 $23 = $11;
 $24 = (($22) + ($23))|0;
 $$alloca_mul13 = $24<<2;
 $25 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul13)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul13)|0)+15)&-16)|0);;
 $14 = 0;
 while(1) {
  $26 = $14;
  $27 = $11;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $8;
  $30 = $11;
  $31 = $14;
  $32 = (($30) - ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = (($29) + ($33<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $14;
  $37 = (($21) + ($36<<2)|0);
  HEAPF32[$37>>2] = $35;
  $38 = $14;
  $39 = (($38) + 1)|0;
  $14 = $39;
 }
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = $11;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $12;
  $44 = $11;
  $45 = $14;
  $46 = (($44) - ($45))|0;
  $47 = (($46) - 1)|0;
  $48 = (($43) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $14;
  $51 = (($25) + ($50<<2)|0);
  HEAPF32[$51>>2] = $49;
  $52 = $14;
  $53 = (($52) + 1)|0;
  $14 = $53;
 }
 $14 = 0;
 while(1) {
  $54 = $14;
  $55 = $10;
  $56 = ($54|0)<($55|0);
  if (!($56)) {
   break;
  }
  $57 = $7;
  $58 = $14;
  $59 = (($57) + ($58<<2)|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $14;
  $62 = $11;
  $63 = (($61) + ($62))|0;
  $64 = (($25) + ($63<<2)|0);
  HEAPF32[$64>>2] = $60;
  $65 = $14;
  $66 = (($65) + 1)|0;
  $14 = $66;
 }
 $14 = 0;
 while(1) {
  $67 = $14;
  $68 = $11;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $7;
  $71 = $10;
  $72 = $14;
  $73 = (($71) - ($72))|0;
  $74 = (($73) - 1)|0;
  $75 = (($70) + ($74<<2)|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $12;
  $78 = $14;
  $79 = (($77) + ($78<<2)|0);
  HEAPF32[$79>>2] = $76;
  $80 = $14;
  $81 = (($80) + 1)|0;
  $14 = $81;
 }
 $14 = 0;
 while(1) {
  $82 = $14;
  $83 = $10;
  $84 = (($83) - 3)|0;
  $85 = ($82|0)<($84|0);
  if (!($85)) {
   break;
  }
  ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;
  $86 = $14;
  $87 = (($25) + ($86<<2)|0);
  $88 = $11;
  _xcorr_kernel_c_113($21,$87,$17,$88);
  $89 = $7;
  $90 = $14;
  $91 = (($89) + ($90<<2)|0);
  $92 = +HEAPF32[$91>>2];
  $93 = +HEAPF32[$17>>2];
  $94 = $92 + $93;
  $95 = $9;
  $96 = $14;
  $97 = (($95) + ($96<<2)|0);
  HEAPF32[$97>>2] = $94;
  $98 = $7;
  $99 = $14;
  $100 = (($99) + 1)|0;
  $101 = (($98) + ($100<<2)|0);
  $102 = +HEAPF32[$101>>2];
  $103 = ((($17)) + 4|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $102 + $104;
  $106 = $9;
  $107 = $14;
  $108 = (($107) + 1)|0;
  $109 = (($106) + ($108<<2)|0);
  HEAPF32[$109>>2] = $105;
  $110 = $7;
  $111 = $14;
  $112 = (($111) + 2)|0;
  $113 = (($110) + ($112<<2)|0);
  $114 = +HEAPF32[$113>>2];
  $115 = ((($17)) + 8|0);
  $116 = +HEAPF32[$115>>2];
  $117 = $114 + $116;
  $118 = $9;
  $119 = $14;
  $120 = (($119) + 2)|0;
  $121 = (($118) + ($120<<2)|0);
  HEAPF32[$121>>2] = $117;
  $122 = $7;
  $123 = $14;
  $124 = (($123) + 3)|0;
  $125 = (($122) + ($124<<2)|0);
  $126 = +HEAPF32[$125>>2];
  $127 = ((($17)) + 12|0);
  $128 = +HEAPF32[$127>>2];
  $129 = $126 + $128;
  $130 = $9;
  $131 = $14;
  $132 = (($131) + 3)|0;
  $133 = (($130) + ($132<<2)|0);
  HEAPF32[$133>>2] = $129;
  $134 = $14;
  $135 = (($134) + 4)|0;
  $14 = $135;
 }
 while(1) {
  $136 = $14;
  $137 = $10;
  $138 = ($136|0)<($137|0);
  if (!($138)) {
   break;
  }
  $18 = 0.0;
  $15 = 0;
  while(1) {
   $139 = $15;
   $140 = $11;
   $141 = ($139|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = $18;
   $143 = $15;
   $144 = (($21) + ($143<<2)|0);
   $145 = +HEAPF32[$144>>2];
   $146 = $14;
   $147 = $15;
   $148 = (($146) + ($147))|0;
   $149 = (($25) + ($148<<2)|0);
   $150 = +HEAPF32[$149>>2];
   $151 = $145 * $150;
   $152 = $142 + $151;
   $18 = $152;
   $153 = $15;
   $154 = (($153) + 1)|0;
   $15 = $154;
  }
  $155 = $7;
  $156 = $14;
  $157 = (($155) + ($156<<2)|0);
  $158 = +HEAPF32[$157>>2];
  $159 = $18;
  $160 = $158 + $159;
  $161 = $9;
  $162 = $14;
  $163 = (($161) + ($162<<2)|0);
  HEAPF32[$163>>2] = $160;
  $164 = $14;
  $165 = (($164) + 1)|0;
  $14 = $165;
 }
 $166 = $16;
 _llvm_stackrestore(($166|0));
 STACKTOP = sp;return;
}
function _xcorr_kernel_c_113($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0;
 var $245 = 0.0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0, $317 = 0.0;
 var $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = 0.0;
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $5 = $18;
 $19 = +HEAPF32[$17>>2];
 $9 = $19;
 $20 = $5;
 $21 = ((($20)) + 4|0);
 $5 = $21;
 $22 = +HEAPF32[$20>>2];
 $10 = $22;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $5 = $24;
 $25 = +HEAPF32[$23>>2];
 $11 = $25;
 $8 = 0;
 while(1) {
  $26 = $8;
  $27 = $7;
  $28 = (($27) - 3)|0;
  $29 = ($26|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $4;
  $31 = ((($30)) + 4|0);
  $4 = $31;
  $32 = +HEAPF32[$30>>2];
  $13 = $32;
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $5 = $34;
  $35 = +HEAPF32[$33>>2];
  $12 = $35;
  $36 = $6;
  $37 = +HEAPF32[$36>>2];
  $38 = $13;
  $39 = $9;
  $40 = $38 * $39;
  $41 = $37 + $40;
  $42 = $6;
  HEAPF32[$42>>2] = $41;
  $43 = $6;
  $44 = ((($43)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $13;
  $47 = $10;
  $48 = $46 * $47;
  $49 = $45 + $48;
  $50 = $6;
  $51 = ((($50)) + 4|0);
  HEAPF32[$51>>2] = $49;
  $52 = $6;
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $13;
  $56 = $11;
  $57 = $55 * $56;
  $58 = $54 + $57;
  $59 = $6;
  $60 = ((($59)) + 8|0);
  HEAPF32[$60>>2] = $58;
  $61 = $6;
  $62 = ((($61)) + 12|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $13;
  $65 = $12;
  $66 = $64 * $65;
  $67 = $63 + $66;
  $68 = $6;
  $69 = ((($68)) + 12|0);
  HEAPF32[$69>>2] = $67;
  $70 = $4;
  $71 = ((($70)) + 4|0);
  $4 = $71;
  $72 = +HEAPF32[$70>>2];
  $13 = $72;
  $73 = $5;
  $74 = ((($73)) + 4|0);
  $5 = $74;
  $75 = +HEAPF32[$73>>2];
  $9 = $75;
  $76 = $6;
  $77 = +HEAPF32[$76>>2];
  $78 = $13;
  $79 = $10;
  $80 = $78 * $79;
  $81 = $77 + $80;
  $82 = $6;
  HEAPF32[$82>>2] = $81;
  $83 = $6;
  $84 = ((($83)) + 4|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $13;
  $87 = $11;
  $88 = $86 * $87;
  $89 = $85 + $88;
  $90 = $6;
  $91 = ((($90)) + 4|0);
  HEAPF32[$91>>2] = $89;
  $92 = $6;
  $93 = ((($92)) + 8|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $13;
  $96 = $12;
  $97 = $95 * $96;
  $98 = $94 + $97;
  $99 = $6;
  $100 = ((($99)) + 8|0);
  HEAPF32[$100>>2] = $98;
  $101 = $6;
  $102 = ((($101)) + 12|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $13;
  $105 = $9;
  $106 = $104 * $105;
  $107 = $103 + $106;
  $108 = $6;
  $109 = ((($108)) + 12|0);
  HEAPF32[$109>>2] = $107;
  $110 = $4;
  $111 = ((($110)) + 4|0);
  $4 = $111;
  $112 = +HEAPF32[$110>>2];
  $13 = $112;
  $113 = $5;
  $114 = ((($113)) + 4|0);
  $5 = $114;
  $115 = +HEAPF32[$113>>2];
  $10 = $115;
  $116 = $6;
  $117 = +HEAPF32[$116>>2];
  $118 = $13;
  $119 = $11;
  $120 = $118 * $119;
  $121 = $117 + $120;
  $122 = $6;
  HEAPF32[$122>>2] = $121;
  $123 = $6;
  $124 = ((($123)) + 4|0);
  $125 = +HEAPF32[$124>>2];
  $126 = $13;
  $127 = $12;
  $128 = $126 * $127;
  $129 = $125 + $128;
  $130 = $6;
  $131 = ((($130)) + 4|0);
  HEAPF32[$131>>2] = $129;
  $132 = $6;
  $133 = ((($132)) + 8|0);
  $134 = +HEAPF32[$133>>2];
  $135 = $13;
  $136 = $9;
  $137 = $135 * $136;
  $138 = $134 + $137;
  $139 = $6;
  $140 = ((($139)) + 8|0);
  HEAPF32[$140>>2] = $138;
  $141 = $6;
  $142 = ((($141)) + 12|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $13;
  $145 = $10;
  $146 = $144 * $145;
  $147 = $143 + $146;
  $148 = $6;
  $149 = ((($148)) + 12|0);
  HEAPF32[$149>>2] = $147;
  $150 = $4;
  $151 = ((($150)) + 4|0);
  $4 = $151;
  $152 = +HEAPF32[$150>>2];
  $13 = $152;
  $153 = $5;
  $154 = ((($153)) + 4|0);
  $5 = $154;
  $155 = +HEAPF32[$153>>2];
  $11 = $155;
  $156 = $6;
  $157 = +HEAPF32[$156>>2];
  $158 = $13;
  $159 = $12;
  $160 = $158 * $159;
  $161 = $157 + $160;
  $162 = $6;
  HEAPF32[$162>>2] = $161;
  $163 = $6;
  $164 = ((($163)) + 4|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $13;
  $167 = $9;
  $168 = $166 * $167;
  $169 = $165 + $168;
  $170 = $6;
  $171 = ((($170)) + 4|0);
  HEAPF32[$171>>2] = $169;
  $172 = $6;
  $173 = ((($172)) + 8|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $13;
  $176 = $10;
  $177 = $175 * $176;
  $178 = $174 + $177;
  $179 = $6;
  $180 = ((($179)) + 8|0);
  HEAPF32[$180>>2] = $178;
  $181 = $6;
  $182 = ((($181)) + 12|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $13;
  $185 = $11;
  $186 = $184 * $185;
  $187 = $183 + $186;
  $188 = $6;
  $189 = ((($188)) + 12|0);
  HEAPF32[$189>>2] = $187;
  $190 = $8;
  $191 = (($190) + 4)|0;
  $8 = $191;
 }
 $192 = $8;
 $193 = (($192) + 1)|0;
 $8 = $193;
 $194 = $7;
 $195 = ($192|0)<($194|0);
 if ($195) {
  $196 = $4;
  $197 = ((($196)) + 4|0);
  $4 = $197;
  $198 = +HEAPF32[$196>>2];
  $14 = $198;
  $199 = $5;
  $200 = ((($199)) + 4|0);
  $5 = $200;
  $201 = +HEAPF32[$199>>2];
  $12 = $201;
  $202 = $6;
  $203 = +HEAPF32[$202>>2];
  $204 = $14;
  $205 = $9;
  $206 = $204 * $205;
  $207 = $203 + $206;
  $208 = $6;
  HEAPF32[$208>>2] = $207;
  $209 = $6;
  $210 = ((($209)) + 4|0);
  $211 = +HEAPF32[$210>>2];
  $212 = $14;
  $213 = $10;
  $214 = $212 * $213;
  $215 = $211 + $214;
  $216 = $6;
  $217 = ((($216)) + 4|0);
  HEAPF32[$217>>2] = $215;
  $218 = $6;
  $219 = ((($218)) + 8|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $14;
  $222 = $11;
  $223 = $221 * $222;
  $224 = $220 + $223;
  $225 = $6;
  $226 = ((($225)) + 8|0);
  HEAPF32[$226>>2] = $224;
  $227 = $6;
  $228 = ((($227)) + 12|0);
  $229 = +HEAPF32[$228>>2];
  $230 = $14;
  $231 = $12;
  $232 = $230 * $231;
  $233 = $229 + $232;
  $234 = $6;
  $235 = ((($234)) + 12|0);
  HEAPF32[$235>>2] = $233;
 }
 $236 = $8;
 $237 = (($236) + 1)|0;
 $8 = $237;
 $238 = $7;
 $239 = ($236|0)<($238|0);
 if ($239) {
  $240 = $4;
  $241 = ((($240)) + 4|0);
  $4 = $241;
  $242 = +HEAPF32[$240>>2];
  $15 = $242;
  $243 = $5;
  $244 = ((($243)) + 4|0);
  $5 = $244;
  $245 = +HEAPF32[$243>>2];
  $9 = $245;
  $246 = $6;
  $247 = +HEAPF32[$246>>2];
  $248 = $15;
  $249 = $10;
  $250 = $248 * $249;
  $251 = $247 + $250;
  $252 = $6;
  HEAPF32[$252>>2] = $251;
  $253 = $6;
  $254 = ((($253)) + 4|0);
  $255 = +HEAPF32[$254>>2];
  $256 = $15;
  $257 = $11;
  $258 = $256 * $257;
  $259 = $255 + $258;
  $260 = $6;
  $261 = ((($260)) + 4|0);
  HEAPF32[$261>>2] = $259;
  $262 = $6;
  $263 = ((($262)) + 8|0);
  $264 = +HEAPF32[$263>>2];
  $265 = $15;
  $266 = $12;
  $267 = $265 * $266;
  $268 = $264 + $267;
  $269 = $6;
  $270 = ((($269)) + 8|0);
  HEAPF32[$270>>2] = $268;
  $271 = $6;
  $272 = ((($271)) + 12|0);
  $273 = +HEAPF32[$272>>2];
  $274 = $15;
  $275 = $9;
  $276 = $274 * $275;
  $277 = $273 + $276;
  $278 = $6;
  $279 = ((($278)) + 12|0);
  HEAPF32[$279>>2] = $277;
 }
 $280 = $8;
 $281 = $7;
 $282 = ($280|0)<($281|0);
 if (!($282)) {
  STACKTOP = sp;return;
 }
 $283 = $4;
 $284 = ((($283)) + 4|0);
 $4 = $284;
 $285 = +HEAPF32[$283>>2];
 $16 = $285;
 $286 = $5;
 $287 = ((($286)) + 4|0);
 $5 = $287;
 $288 = +HEAPF32[$286>>2];
 $10 = $288;
 $289 = $6;
 $290 = +HEAPF32[$289>>2];
 $291 = $16;
 $292 = $11;
 $293 = $291 * $292;
 $294 = $290 + $293;
 $295 = $6;
 HEAPF32[$295>>2] = $294;
 $296 = $6;
 $297 = ((($296)) + 4|0);
 $298 = +HEAPF32[$297>>2];
 $299 = $16;
 $300 = $12;
 $301 = $299 * $300;
 $302 = $298 + $301;
 $303 = $6;
 $304 = ((($303)) + 4|0);
 HEAPF32[$304>>2] = $302;
 $305 = $6;
 $306 = ((($305)) + 8|0);
 $307 = +HEAPF32[$306>>2];
 $308 = $16;
 $309 = $9;
 $310 = $308 * $309;
 $311 = $307 + $310;
 $312 = $6;
 $313 = ((($312)) + 8|0);
 HEAPF32[$313>>2] = $311;
 $314 = $6;
 $315 = ((($314)) + 12|0);
 $316 = +HEAPF32[$315>>2];
 $317 = $16;
 $318 = $10;
 $319 = $317 * $318;
 $320 = $316 + $319;
 $321 = $6;
 $322 = ((($321)) + 12|0);
 HEAPF32[$322>>2] = $320;
 STACKTOP = sp;return;
}
function _celt_iir($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $$alloca_mul13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0;
 var $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $17 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $11;
 $20 = (_llvm_stacksave()|0);
 $16 = $20;
 $$alloca_mul = $19<<2;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $22 = $10;
 $23 = $11;
 $24 = (($22) + ($23))|0;
 $$alloca_mul13 = $24<<2;
 $25 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul13)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul13)|0)+15)&-16)|0);;
 $14 = 0;
 while(1) {
  $26 = $14;
  $27 = $11;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $8;
  $30 = $11;
  $31 = $14;
  $32 = (($30) - ($31))|0;
  $33 = (($32) - 1)|0;
  $34 = (($29) + ($33<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $14;
  $37 = (($21) + ($36<<2)|0);
  HEAPF32[$37>>2] = $35;
  $38 = $14;
  $39 = (($38) + 1)|0;
  $14 = $39;
 }
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = $11;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $12;
  $44 = $11;
  $45 = $14;
  $46 = (($44) - ($45))|0;
  $47 = (($46) - 1)|0;
  $48 = (($43) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = - $49;
  $51 = $14;
  $52 = (($25) + ($51<<2)|0);
  HEAPF32[$52>>2] = $50;
  $53 = $14;
  $54 = (($53) + 1)|0;
  $14 = $54;
 }
 while(1) {
  $55 = $14;
  $56 = $10;
  $57 = $11;
  $58 = (($56) + ($57))|0;
  $59 = ($55|0)<($58|0);
  if (!($59)) {
   break;
  }
  $60 = $14;
  $61 = (($25) + ($60<<2)|0);
  HEAPF32[$61>>2] = 0.0;
  $62 = $14;
  $63 = (($62) + 1)|0;
  $14 = $63;
 }
 $14 = 0;
 while(1) {
  $64 = $14;
  $65 = $10;
  $66 = (($65) - 3)|0;
  $67 = ($64|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = $7;
  $69 = $14;
  $70 = (($68) + ($69<<2)|0);
  $71 = +HEAPF32[$70>>2];
  HEAPF32[$17>>2] = $71;
  $72 = $7;
  $73 = $14;
  $74 = (($73) + 1)|0;
  $75 = (($72) + ($74<<2)|0);
  $76 = +HEAPF32[$75>>2];
  $77 = ((($17)) + 4|0);
  HEAPF32[$77>>2] = $76;
  $78 = $7;
  $79 = $14;
  $80 = (($79) + 2)|0;
  $81 = (($78) + ($80<<2)|0);
  $82 = +HEAPF32[$81>>2];
  $83 = ((($17)) + 8|0);
  HEAPF32[$83>>2] = $82;
  $84 = $7;
  $85 = $14;
  $86 = (($85) + 3)|0;
  $87 = (($84) + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = ((($17)) + 12|0);
  HEAPF32[$89>>2] = $88;
  $90 = $14;
  $91 = (($25) + ($90<<2)|0);
  $92 = $11;
  _xcorr_kernel_c_113($21,$91,$17,$92);
  $93 = +HEAPF32[$17>>2];
  $94 = - $93;
  $95 = $14;
  $96 = $11;
  $97 = (($95) + ($96))|0;
  $98 = (($25) + ($97<<2)|0);
  HEAPF32[$98>>2] = $94;
  $99 = +HEAPF32[$17>>2];
  $100 = $9;
  $101 = $14;
  $102 = (($100) + ($101<<2)|0);
  HEAPF32[$102>>2] = $99;
  $103 = ((($17)) + 4|0);
  $104 = +HEAPF32[$103>>2];
  $105 = $14;
  $106 = $11;
  $107 = (($105) + ($106))|0;
  $108 = (($25) + ($107<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $8;
  $111 = +HEAPF32[$110>>2];
  $112 = $109 * $111;
  $113 = $104 + $112;
  $114 = ((($17)) + 4|0);
  HEAPF32[$114>>2] = $113;
  $115 = ((($17)) + 4|0);
  $116 = +HEAPF32[$115>>2];
  $117 = - $116;
  $118 = $14;
  $119 = $11;
  $120 = (($118) + ($119))|0;
  $121 = (($120) + 1)|0;
  $122 = (($25) + ($121<<2)|0);
  HEAPF32[$122>>2] = $117;
  $123 = ((($17)) + 4|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $9;
  $126 = $14;
  $127 = (($126) + 1)|0;
  $128 = (($125) + ($127<<2)|0);
  HEAPF32[$128>>2] = $124;
  $129 = ((($17)) + 8|0);
  $130 = +HEAPF32[$129>>2];
  $131 = $14;
  $132 = $11;
  $133 = (($131) + ($132))|0;
  $134 = (($133) + 1)|0;
  $135 = (($25) + ($134<<2)|0);
  $136 = +HEAPF32[$135>>2];
  $137 = $8;
  $138 = +HEAPF32[$137>>2];
  $139 = $136 * $138;
  $140 = $130 + $139;
  $141 = ((($17)) + 8|0);
  HEAPF32[$141>>2] = $140;
  $142 = ((($17)) + 8|0);
  $143 = +HEAPF32[$142>>2];
  $144 = $14;
  $145 = $11;
  $146 = (($144) + ($145))|0;
  $147 = (($25) + ($146<<2)|0);
  $148 = +HEAPF32[$147>>2];
  $149 = $8;
  $150 = ((($149)) + 4|0);
  $151 = +HEAPF32[$150>>2];
  $152 = $148 * $151;
  $153 = $143 + $152;
  $154 = ((($17)) + 8|0);
  HEAPF32[$154>>2] = $153;
  $155 = ((($17)) + 8|0);
  $156 = +HEAPF32[$155>>2];
  $157 = - $156;
  $158 = $14;
  $159 = $11;
  $160 = (($158) + ($159))|0;
  $161 = (($160) + 2)|0;
  $162 = (($25) + ($161<<2)|0);
  HEAPF32[$162>>2] = $157;
  $163 = ((($17)) + 8|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $9;
  $166 = $14;
  $167 = (($166) + 2)|0;
  $168 = (($165) + ($167<<2)|0);
  HEAPF32[$168>>2] = $164;
  $169 = ((($17)) + 12|0);
  $170 = +HEAPF32[$169>>2];
  $171 = $14;
  $172 = $11;
  $173 = (($171) + ($172))|0;
  $174 = (($173) + 2)|0;
  $175 = (($25) + ($174<<2)|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $8;
  $178 = +HEAPF32[$177>>2];
  $179 = $176 * $178;
  $180 = $170 + $179;
  $181 = ((($17)) + 12|0);
  HEAPF32[$181>>2] = $180;
  $182 = ((($17)) + 12|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $14;
  $185 = $11;
  $186 = (($184) + ($185))|0;
  $187 = (($186) + 1)|0;
  $188 = (($25) + ($187<<2)|0);
  $189 = +HEAPF32[$188>>2];
  $190 = $8;
  $191 = ((($190)) + 4|0);
  $192 = +HEAPF32[$191>>2];
  $193 = $189 * $192;
  $194 = $183 + $193;
  $195 = ((($17)) + 12|0);
  HEAPF32[$195>>2] = $194;
  $196 = ((($17)) + 12|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $14;
  $199 = $11;
  $200 = (($198) + ($199))|0;
  $201 = (($25) + ($200<<2)|0);
  $202 = +HEAPF32[$201>>2];
  $203 = $8;
  $204 = ((($203)) + 8|0);
  $205 = +HEAPF32[$204>>2];
  $206 = $202 * $205;
  $207 = $197 + $206;
  $208 = ((($17)) + 12|0);
  HEAPF32[$208>>2] = $207;
  $209 = ((($17)) + 12|0);
  $210 = +HEAPF32[$209>>2];
  $211 = - $210;
  $212 = $14;
  $213 = $11;
  $214 = (($212) + ($213))|0;
  $215 = (($214) + 3)|0;
  $216 = (($25) + ($215<<2)|0);
  HEAPF32[$216>>2] = $211;
  $217 = ((($17)) + 12|0);
  $218 = +HEAPF32[$217>>2];
  $219 = $9;
  $220 = $14;
  $221 = (($220) + 3)|0;
  $222 = (($219) + ($221<<2)|0);
  HEAPF32[$222>>2] = $218;
  $223 = $14;
  $224 = (($223) + 4)|0;
  $14 = $224;
 }
 while(1) {
  $225 = $14;
  $226 = $10;
  $227 = ($225|0)<($226|0);
  if (!($227)) {
   break;
  }
  $228 = $7;
  $229 = $14;
  $230 = (($228) + ($229<<2)|0);
  $231 = +HEAPF32[$230>>2];
  $18 = $231;
  $15 = 0;
  while(1) {
   $232 = $15;
   $233 = $11;
   $234 = ($232|0)<($233|0);
   if (!($234)) {
    break;
   }
   $235 = $15;
   $236 = (($21) + ($235<<2)|0);
   $237 = +HEAPF32[$236>>2];
   $238 = $14;
   $239 = $15;
   $240 = (($238) + ($239))|0;
   $241 = (($25) + ($240<<2)|0);
   $242 = +HEAPF32[$241>>2];
   $243 = $237 * $242;
   $244 = $18;
   $245 = $244 - $243;
   $18 = $245;
   $246 = $15;
   $247 = (($246) + 1)|0;
   $15 = $247;
  }
  $248 = $18;
  $249 = $14;
  $250 = $11;
  $251 = (($249) + ($250))|0;
  $252 = (($25) + ($251<<2)|0);
  HEAPF32[$252>>2] = $248;
  $253 = $18;
  $254 = $9;
  $255 = $14;
  $256 = (($254) + ($255<<2)|0);
  HEAPF32[$256>>2] = $253;
  $257 = $14;
  $258 = (($257) + 1)|0;
  $14 = $258;
 }
 $14 = 0;
 while(1) {
  $259 = $14;
  $260 = $11;
  $261 = ($259|0)<($260|0);
  if (!($261)) {
   break;
  }
  $262 = $9;
  $263 = $10;
  $264 = $14;
  $265 = (($263) - ($264))|0;
  $266 = (($265) - 1)|0;
  $267 = (($262) + ($266<<2)|0);
  $268 = +HEAPF32[$267>>2];
  $269 = $12;
  $270 = $14;
  $271 = (($269) + ($270<<2)|0);
  HEAPF32[$271>>2] = $268;
  $272 = $14;
  $273 = (($272) + 1)|0;
  $14 = $273;
 }
 $274 = $16;
 _llvm_stackrestore(($274|0));
 STACKTOP = sp;return;
}
function __celt_autocorr($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0.0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $21 = $12;
 $22 = $11;
 $23 = (($21) - ($22))|0;
 $17 = $23;
 $24 = $12;
 $25 = (_llvm_stacksave()|0);
 $20 = $25;
 $$alloca_mul = $24<<2;
 $26 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $27 = $10;
 $28 = ($27|0)==(0);
 if ($28) {
  $29 = $7;
  $19 = $29;
 } else {
  $15 = 0;
  while(1) {
   $30 = $15;
   $31 = $12;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = $7;
   $34 = $15;
   $35 = (($33) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $15;
   $38 = (($26) + ($37<<2)|0);
   HEAPF32[$38>>2] = $36;
   $39 = $15;
   $40 = (($39) + 1)|0;
   $15 = $40;
  }
  $15 = 0;
  while(1) {
   $41 = $15;
   $42 = $10;
   $43 = ($41|0)<($42|0);
   if (!($43)) {
    break;
   }
   $44 = $7;
   $45 = $15;
   $46 = (($44) + ($45<<2)|0);
   $47 = +HEAPF32[$46>>2];
   $48 = $9;
   $49 = $15;
   $50 = (($48) + ($49<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $47 * $51;
   $53 = $15;
   $54 = (($26) + ($53<<2)|0);
   HEAPF32[$54>>2] = $52;
   $55 = $7;
   $56 = $12;
   $57 = $15;
   $58 = (($56) - ($57))|0;
   $59 = (($58) - 1)|0;
   $60 = (($55) + ($59<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $9;
   $63 = $15;
   $64 = (($62) + ($63<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $61 * $65;
   $67 = $12;
   $68 = $15;
   $69 = (($67) - ($68))|0;
   $70 = (($69) - 1)|0;
   $71 = (($26) + ($70<<2)|0);
   HEAPF32[$71>>2] = $66;
   $72 = $15;
   $73 = (($72) + 1)|0;
   $15 = $73;
  }
  $19 = $26;
 }
 $18 = 0;
 $74 = $19;
 $75 = $19;
 $76 = $8;
 $77 = $17;
 $78 = $11;
 $79 = (($78) + 1)|0;
 $80 = $13;
 _celt_pitch_xcorr($74,$75,$76,$77,$79,$80);
 $16 = 0;
 while(1) {
  $81 = $16;
  $82 = $11;
  $83 = ($81|0)<=($82|0);
  if (!($83)) {
   break;
  }
  $84 = $16;
  $85 = $17;
  $86 = (($84) + ($85))|0;
  $15 = $86;
  $14 = 0.0;
  while(1) {
   $87 = $15;
   $88 = $12;
   $89 = ($87|0)<($88|0);
   $90 = $14;
   if (!($89)) {
    break;
   }
   $91 = $19;
   $92 = $15;
   $93 = (($91) + ($92<<2)|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $19;
   $96 = $15;
   $97 = $16;
   $98 = (($96) - ($97))|0;
   $99 = (($95) + ($98<<2)|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $94 * $100;
   $102 = $90 + $101;
   $14 = $102;
   $103 = $15;
   $104 = (($103) + 1)|0;
   $15 = $104;
  }
  $105 = $8;
  $106 = $16;
  $107 = (($105) + ($106<<2)|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $108 + $90;
  HEAPF32[$107>>2] = $109;
  $110 = $16;
  $111 = (($110) + 1)|0;
  $16 = $111;
 }
 $112 = $18;
 $113 = $20;
 _llvm_stackrestore(($113|0));
 STACKTOP = sp;return ($112|0);
}
function _quant_coarse_energy($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 var $$ = 0, $$alloca_mul = 0, $$alloca_mul35 = 0, $$alloca_mul37 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0.0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0.0;
 var $302 = 0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0;
 var $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $36 = sp + 96|0;
 $43 = sp + 24|0;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 $20 = $3;
 $21 = $4;
 $22 = $5;
 $23 = $6;
 $24 = $7;
 $25 = $8;
 $26 = $9;
 $27 = $10;
 $28 = $11;
 $29 = $12;
 $30 = $13;
 $31 = $14;
 $32 = $15;
 $33 = $16;
 $38 = 0;
 $50 = $29;
 $51 = ($50|0)!=(0);
 if ($51) {
  $72 = 1;
 } else {
  $52 = $31;
  $53 = ($52|0)!=(0);
  if ($53) {
   $72 = 0;
  } else {
   $54 = $30;
   $55 = +HEAPF32[$54>>2];
   $56 = $26;
   $57 = $56<<1;
   $58 = $19;
   $59 = $18;
   $60 = (($58) - ($59))|0;
   $61 = Math_imul($57, $60)|0;
   $62 = (+($61|0));
   $63 = $55 > $62;
   if ($63) {
    $64 = $28;
    $65 = $19;
    $66 = $18;
    $67 = (($65) - ($66))|0;
    $68 = $26;
    $69 = Math_imul($67, $68)|0;
    $70 = ($64|0)>($69|0);
    $72 = $70;
   } else {
    $72 = 0;
   }
  }
 }
 $71 = $72&1;
 $34 = $71;
 $73 = $23;
 $74 = (+($73>>>0));
 $75 = $30;
 $76 = +HEAPF32[$75>>2];
 $77 = $74 * $76;
 $78 = $32;
 $79 = (+($78|0));
 $80 = $77 * $79;
 $81 = $26;
 $82 = $81<<9;
 $83 = (+($82|0));
 $84 = $80 / $83;
 $85 = (~~(($84)));
 $39 = $85;
 $86 = $21;
 $87 = $22;
 $88 = $18;
 $89 = $20;
 $90 = $17;
 $91 = ((($90)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $26;
 $94 = (+_loss_distortion($86,$87,$88,$89,$92,$93));
 $40 = $94;
 $95 = $25;
 $96 = (_ec_tell_122($95)|0);
 $37 = $96;
 $97 = $37;
 $98 = (($97) + 3)|0;
 $99 = $23;
 $100 = ($98>>>0)>($99>>>0);
 if ($100) {
  $34 = 0;
  $31 = 0;
 }
 $35 = 16.0;
 $101 = $19;
 $102 = $18;
 $103 = (($101) - ($102))|0;
 $104 = ($103|0)>(10);
 if ($104) {
  $105 = $35;
  $106 = $28;
  $107 = (+($106|0));
  $108 = 0.125 * $107;
  $109 = $105 < $108;
  if ($109) {
   $110 = $35;
   $114 = $110;
  } else {
   $111 = $28;
   $112 = (+($111|0));
   $113 = 0.125 * $112;
   $114 = $113;
  }
  $35 = $114;
 }
 $115 = $33;
 $116 = ($115|0)!=(0);
 if ($116) {
  $35 = 3.0;
 }
 $117 = $25;
 dest=$36; src=$117; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $118 = $26;
 $119 = $17;
 $120 = ((($119)) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = Math_imul($118, $121)|0;
 $123 = (_llvm_stacksave()|0);
 $41 = $123;
 $$alloca_mul = $122<<2;
 $124 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $125 = $26;
 $126 = $17;
 $127 = ((($126)) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = Math_imul($125, $128)|0;
 $$alloca_mul35 = $129<<2;
 $130 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul35)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul35)|0)+15)&-16)|0);;
 $131 = $22;
 $132 = $26;
 $133 = $17;
 $134 = ((($133)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = Math_imul($132, $135)|0;
 $137 = $136<<2;
 $138 = $22;
 $139 = $124;
 $140 = $138;
 $141 = (($139) - ($140))|0;
 $142 = (($141|0) / 4)&-1;
 $143 = 0;
 $144 = (($137) + ($143))|0;
 _memcpy(($124|0),($131|0),($144|0))|0;
 $145 = $31;
 $146 = ($145|0)!=(0);
 $147 = $34;
 $148 = ($147|0)!=(0);
 $or$cond = $146 | $148;
 if ($or$cond) {
  $149 = $17;
  $150 = $18;
  $151 = $19;
  $152 = $21;
  $153 = $23;
  $154 = $37;
  $155 = $27;
  $156 = (26775 + (($155*84)|0)|0);
  $157 = ((($156)) + 42|0);
  $158 = $25;
  $159 = $26;
  $160 = $27;
  $161 = $35;
  $162 = $33;
  $163 = (_quant_coarse_energy_impl($149,$150,$151,$152,$124,$153,$154,$157,$130,$158,$159,$160,1,$161,$162)|0);
  $38 = $163;
 }
 $164 = $34;
 $165 = ($164|0)!=(0);
 if ($165) {
  $267 = $22;
  $268 = $26;
  $269 = $17;
  $270 = ((($269)) + 8|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = Math_imul($268, $271)|0;
  $273 = $272<<2;
  $274 = $22;
  $275 = $274;
  $276 = $124;
  $277 = (($275) - ($276))|0;
  $278 = (($277|0) / 4)&-1;
  $279 = 0;
  $280 = (($273) + ($279))|0;
  _memcpy(($267|0),($124|0),($280|0))|0;
  $281 = $24;
  $282 = $26;
  $283 = $17;
  $284 = ((($283)) + 8|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = Math_imul($282, $285)|0;
  $287 = $286<<2;
  $288 = $24;
  $289 = $288;
  $290 = $130;
  $291 = (($289) - ($290))|0;
  $292 = (($291|0) / 4)&-1;
  $293 = 0;
  $294 = (($287) + ($293))|0;
  _memcpy(($281|0),($130|0),($294|0))|0;
 } else {
  $166 = $25;
  $167 = (_ec_tell_frac($166)|0);
  $44 = $167;
  $168 = $25;
  dest=$43; src=$168; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $169 = (_ec_range_bytes($36)|0);
  $45 = $169;
  $170 = (_ec_range_bytes($43)|0);
  $46 = $170;
  $171 = (_ec_get_buffer($43)|0);
  $172 = $45;
  $173 = (($171) + ($172)|0);
  $42 = $173;
  $174 = $46;
  $175 = $45;
  $176 = (($174) - ($175))|0;
  $47 = $176;
  $177 = $47;
  $178 = ($177|0)==(0);
  $$ = $178 ? 1 : $176;
  $47 = $$;
  $179 = $47;
  $180 = (_llvm_stacksave()|0);
  $49 = $180;
  $$alloca_mul37 = $179;
  $181 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul37)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul37)|0)+15)&-16)|0);;
  $182 = $42;
  $183 = $46;
  $184 = $45;
  $185 = (($183) - ($184))|0;
  $186 = $185;
  $187 = $42;
  $188 = $181;
  $189 = $187;
  $190 = (($188) - ($189))|0;
  $191 = 0;
  $192 = (($186) + ($191))|0;
  _memcpy(($181|0),($182|0),($192|0))|0;
  $193 = $25;
  dest=$193; src=$36; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $194 = $17;
  $195 = $18;
  $196 = $19;
  $197 = $21;
  $198 = $22;
  $199 = $23;
  $200 = $37;
  $201 = $27;
  $202 = (26775 + (($201*84)|0)|0);
  $203 = $34;
  $204 = (($202) + (($203*42)|0)|0);
  $205 = $24;
  $206 = $25;
  $207 = $26;
  $208 = $27;
  $209 = $35;
  $210 = $33;
  $211 = (_quant_coarse_energy_impl($194,$195,$196,$197,$198,$199,$200,$204,$205,$206,$207,$208,0,$209,$210)|0);
  $48 = $211;
  $212 = $31;
  $213 = ($212|0)!=(0);
  do {
   if ($213) {
    $214 = $38;
    $215 = $48;
    $216 = ($214|0)<($215|0);
    if (!($216)) {
     $217 = $38;
     $218 = $48;
     $219 = ($217|0)==($218|0);
     if (!($219)) {
      break;
     }
     $220 = $25;
     $221 = (_ec_tell_frac($220)|0);
     $222 = $39;
     $223 = (($221) + ($222))|0;
     $224 = $44;
     $225 = ($223|0)>($224|0);
     if (!($225)) {
      break;
     }
    }
    $226 = $25;
    dest=$226; src=$43; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $227 = $42;
    $228 = $46;
    $229 = $45;
    $230 = (($228) - ($229))|0;
    $231 = $230;
    $232 = $42;
    $233 = $232;
    $234 = $181;
    $235 = (($233) - ($234))|0;
    $236 = 0;
    $237 = (($231) + ($236))|0;
    _memcpy(($227|0),($181|0),($237|0))|0;
    $238 = $22;
    $239 = $26;
    $240 = $17;
    $241 = ((($240)) + 8|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = Math_imul($239, $242)|0;
    $244 = $243<<2;
    $245 = $22;
    $246 = $245;
    $247 = $124;
    $248 = (($246) - ($247))|0;
    $249 = (($248|0) / 4)&-1;
    $250 = 0;
    $251 = (($244) + ($250))|0;
    _memcpy(($238|0),($124|0),($251|0))|0;
    $252 = $24;
    $253 = $26;
    $254 = $17;
    $255 = ((($254)) + 8|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = Math_imul($253, $256)|0;
    $258 = $257<<2;
    $259 = $24;
    $260 = $259;
    $261 = $130;
    $262 = (($260) - ($261))|0;
    $263 = (($262|0) / 4)&-1;
    $264 = 0;
    $265 = (($258) + ($264))|0;
    _memcpy(($252|0),($130|0),($265|0))|0;
    $34 = 1;
   }
  } while(0);
  $266 = $49;
  _llvm_stackrestore(($266|0));
 }
 $295 = $34;
 $296 = ($295|0)!=(0);
 if ($296) {
  $297 = $40;
  $298 = $30;
  HEAPF32[$298>>2] = $297;
  $312 = $41;
  _llvm_stackrestore(($312|0));
  STACKTOP = sp;return;
 } else {
  $299 = $27;
  $300 = (16604 + ($299<<2)|0);
  $301 = +HEAPF32[$300>>2];
  $302 = $27;
  $303 = (16604 + ($302<<2)|0);
  $304 = +HEAPF32[$303>>2];
  $305 = $301 * $304;
  $306 = $30;
  $307 = +HEAPF32[$306>>2];
  $308 = $305 * $307;
  $309 = $40;
  $310 = $308 + $309;
  $311 = $30;
  HEAPF32[$311>>2] = $310;
  $312 = $41;
  _llvm_stackrestore(($312|0));
  STACKTOP = sp;return;
 }
}
function _loss_distortion($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $51 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $16 = $8;
  $13 = $16;
  while(1) {
   $17 = $13;
   $18 = $9;
   $19 = ($17|0)<($18|0);
   if (!($19)) {
    break;
   }
   $20 = $6;
   $21 = $13;
   $22 = $12;
   $23 = $10;
   $24 = Math_imul($22, $23)|0;
   $25 = (($21) + ($24))|0;
   $26 = (($20) + ($25<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $7;
   $29 = $13;
   $30 = $12;
   $31 = $10;
   $32 = Math_imul($30, $31)|0;
   $33 = (($29) + ($32))|0;
   $34 = (($28) + ($33<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $27 - $35;
   $15 = $36;
   $37 = $14;
   $38 = $15;
   $39 = $15;
   $40 = $38 * $39;
   $41 = $37 + $40;
   $14 = $41;
   $42 = $13;
   $43 = (($42) + 1)|0;
   $13 = $43;
  }
  $44 = $12;
  $45 = (($44) + 1)|0;
  $12 = $45;
  $46 = $11;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
 }
 $48 = $14;
 $49 = 200.0 < $48;
 $50 = $14;
 $51 = $49 ? 200.0 : $50;
 STACKTOP = sp;return (+$51);
}
function _ec_tell_122($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _quant_coarse_energy_impl($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = +$13;
 $14 = $14|0;
 var $$ = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0;
 var $139 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0;
 var $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0;
 var $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $33 = sp + 48|0;
 $37 = sp + 32|0;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $14;
 $32 = 0;
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
 $46 = $21;
 $47 = (($46) + 3)|0;
 $48 = $20;
 $49 = ($47|0)<=($48|0);
 if ($49) {
  $50 = $24;
  $51 = $27;
  _ec_enc_bit_logp($50,$51,3);
 }
 $52 = $27;
 $53 = ($52|0)!=(0);
 if ($53) {
  $34 = 0.0;
  $35 = 0.149993896484375;
 } else {
  $54 = $26;
  $55 = (16620 + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $35 = $56;
  $57 = $26;
  $58 = (16604 + ($57<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $34 = $59;
 }
 $60 = $16;
 $30 = $60;
 while(1) {
  $61 = $30;
  $62 = $17;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $31 = 0;
  while(1) {
   $64 = $18;
   $65 = $30;
   $66 = $31;
   $67 = $15;
   $68 = ((($67)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = Math_imul($66, $69)|0;
   $71 = (($65) + ($70))|0;
   $72 = (($64) + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $40 = $73;
   $74 = $19;
   $75 = $30;
   $76 = $31;
   $77 = $15;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = Math_imul($76, $79)|0;
   $81 = (($75) + ($80))|0;
   $82 = (($74) + ($81<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $84 = -9.0 > $83;
   if ($84) {
    $95 = -9.0;
   } else {
    $85 = $19;
    $86 = $30;
    $87 = $31;
    $88 = $15;
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = Math_imul($87, $90)|0;
    $92 = (($86) + ($91))|0;
    $93 = (($85) + ($92<<2)|0);
    $94 = +HEAPF32[$93>>2];
    $95 = $94;
   }
   $43 = $95;
   $96 = $40;
   $97 = $34;
   $98 = $43;
   $99 = $97 * $98;
   $100 = $96 - $99;
   $101 = $31;
   $102 = (($33) + ($101<<2)|0);
   $103 = +HEAPF32[$102>>2];
   $104 = $100 - $103;
   $41 = $104;
   $105 = $41;
   $106 = 0.5 + $105;
   $107 = $106;
   $108 = (+Math_floor((+$107)));
   $109 = (~~(($108)));
   HEAP32[$37>>2] = $109;
   $110 = $19;
   $111 = $30;
   $112 = $31;
   $113 = $15;
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = Math_imul($112, $115)|0;
   $117 = (($111) + ($116))|0;
   $118 = (($110) + ($117<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $120 = -28.0 > $119;
   if ($120) {
    $133 = -28.0;
   } else {
    $121 = $19;
    $122 = $30;
    $123 = $31;
    $124 = $15;
    $125 = ((($124)) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = Math_imul($123, $126)|0;
    $128 = (($122) + ($127))|0;
    $129 = (($121) + ($128<<2)|0);
    $130 = +HEAPF32[$129>>2];
    $133 = $130;
   }
   $131 = $28;
   $132 = $133 - $131;
   $44 = $132;
   $134 = HEAP32[$37>>2]|0;
   $135 = ($134|0)<(0);
   if ($135) {
    $136 = $40;
    $137 = $44;
    $138 = $136 < $137;
    if ($138) {
     $139 = $44;
     $140 = $40;
     $141 = $139 - $140;
     $142 = (~~(($141)));
     $143 = HEAP32[$37>>2]|0;
     $144 = (($143) + ($142))|0;
     HEAP32[$37>>2] = $144;
     $145 = HEAP32[$37>>2]|0;
     $146 = ($145|0)>(0);
     $$ = $146 ? 0 : $144;
     HEAP32[$37>>2] = $$;
    }
   }
   $147 = HEAP32[$37>>2]|0;
   $38 = $147;
   $148 = $24;
   $149 = (_ec_tell_122($148)|0);
   $21 = $149;
   $150 = $20;
   $151 = $21;
   $152 = (($150) - ($151))|0;
   $153 = $25;
   $154 = ($153*3)|0;
   $155 = $17;
   $156 = $30;
   $157 = (($155) - ($156))|0;
   $158 = Math_imul($154, $157)|0;
   $159 = (($152) - ($158))|0;
   $36 = $159;
   $160 = $30;
   $161 = $16;
   $162 = ($160|0)!=($161|0);
   $163 = $36;
   $164 = ($163|0)<(30);
   $or$cond = $162 & $164;
   if ($or$cond) {
    $165 = $36;
    $166 = ($165|0)<(24);
    if ($166) {
     $167 = HEAP32[$37>>2]|0;
     $168 = (1)<($167|0);
     $169 = HEAP32[$37>>2]|0;
     $170 = $168 ? 1 : $169;
     HEAP32[$37>>2] = $170;
    }
    $171 = $36;
    $172 = ($171|0)<(16);
    if ($172) {
     $173 = HEAP32[$37>>2]|0;
     $174 = (-1)>($173|0);
     $175 = HEAP32[$37>>2]|0;
     $176 = $174 ? -1 : $175;
     HEAP32[$37>>2] = $176;
    }
   }
   $177 = $29;
   $178 = ($177|0)!=(0);
   $179 = $30;
   $180 = ($179|0)>=(2);
   $or$cond3 = $178 & $180;
   if ($or$cond3) {
    $181 = HEAP32[$37>>2]|0;
    $182 = ($181|0)<(0);
    $183 = HEAP32[$37>>2]|0;
    $184 = $182 ? $183 : 0;
    HEAP32[$37>>2] = $184;
   }
   $185 = $20;
   $186 = $21;
   $187 = (($185) - ($186))|0;
   $188 = ($187|0)>=(15);
   do {
    if ($188) {
     $189 = $30;
     $190 = ($189|0)<(20);
     $191 = $30;
     $192 = $190 ? $191 : 20;
     $193 = $192<<1;
     $45 = $193;
     $194 = $24;
     $195 = $22;
     $196 = $45;
     $197 = (($195) + ($196)|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = $199 << 7;
     $201 = $22;
     $202 = $45;
     $203 = (($202) + 1)|0;
     $204 = (($201) + ($203)|0);
     $205 = HEAP8[$204>>0]|0;
     $206 = $205&255;
     $207 = $206 << 6;
     _ec_laplace_encode($194,$37,$200,$207);
    } else {
     $208 = $20;
     $209 = $21;
     $210 = (($208) - ($209))|0;
     $211 = ($210|0)>=(2);
     if ($211) {
      $212 = HEAP32[$37>>2]|0;
      $213 = ($212|0)<(1);
      $214 = HEAP32[$37>>2]|0;
      $215 = $213 ? $214 : 1;
      $216 = (-1)>($215|0);
      if ($216) {
       $221 = -1;
      } else {
       $217 = HEAP32[$37>>2]|0;
       $218 = ($217|0)<(1);
       $219 = HEAP32[$37>>2]|0;
       $220 = $218 ? $219 : 1;
       $221 = $220;
      }
      HEAP32[$37>>2] = $221;
      $222 = $24;
      $223 = HEAP32[$37>>2]|0;
      $224 = $223<<1;
      $225 = HEAP32[$37>>2]|0;
      $226 = ($225|0)<(0);
      $227 = $226&1;
      $228 = (0 - ($227))|0;
      $229 = $224 ^ $228;
      _ec_enc_icdf($222,$229,27111,2);
      break;
     } else {
      $230 = $20;
      $231 = $21;
      $232 = (($230) - ($231))|0;
      $233 = ($232|0)>=(1);
      if ($233) {
       $234 = HEAP32[$37>>2]|0;
       $235 = (0)<($234|0);
       $236 = HEAP32[$37>>2]|0;
       $237 = $235 ? 0 : $236;
       HEAP32[$37>>2] = $237;
       $238 = $24;
       $239 = HEAP32[$37>>2]|0;
       $240 = (0 - ($239))|0;
       _ec_enc_bit_logp($238,$240,1);
       break;
      } else {
       HEAP32[$37>>2] = -1;
       break;
      }
     }
    }
   } while(0);
   $241 = $41;
   $242 = HEAP32[$37>>2]|0;
   $243 = (+($242|0));
   $244 = $241 - $243;
   $245 = $23;
   $246 = $30;
   $247 = $31;
   $248 = $15;
   $249 = ((($248)) + 8|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = Math_imul($247, $250)|0;
   $252 = (($246) + ($251))|0;
   $253 = (($245) + ($252<<2)|0);
   HEAPF32[$253>>2] = $244;
   $254 = $38;
   $255 = HEAP32[$37>>2]|0;
   $256 = (($254) - ($255))|0;
   $257 = (Math_abs(($256|0))|0);
   $258 = $32;
   $259 = (($258) + ($257))|0;
   $32 = $259;
   $260 = HEAP32[$37>>2]|0;
   $261 = (+($260|0));
   $39 = $261;
   $262 = $34;
   $263 = $43;
   $264 = $262 * $263;
   $265 = $31;
   $266 = (($33) + ($265<<2)|0);
   $267 = +HEAPF32[$266>>2];
   $268 = $264 + $267;
   $269 = $39;
   $270 = $268 + $269;
   $42 = $270;
   $271 = $42;
   $272 = $19;
   $273 = $30;
   $274 = $31;
   $275 = $15;
   $276 = ((($275)) + 8|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = Math_imul($274, $277)|0;
   $279 = (($273) + ($278))|0;
   $280 = (($272) + ($279<<2)|0);
   HEAPF32[$280>>2] = $271;
   $281 = $31;
   $282 = (($33) + ($281<<2)|0);
   $283 = +HEAPF32[$282>>2];
   $284 = $39;
   $285 = $283 + $284;
   $286 = $35;
   $287 = $39;
   $288 = $286 * $287;
   $289 = $285 - $288;
   $290 = $31;
   $291 = (($33) + ($290<<2)|0);
   HEAPF32[$291>>2] = $289;
   $292 = $31;
   $293 = (($292) + 1)|0;
   $31 = $293;
   $294 = $25;
   $295 = ($293|0)<($294|0);
   if (!($295)) {
    break;
   }
  }
  $296 = $30;
  $297 = (($296) + 1)|0;
  $30 = $297;
 }
 $298 = $29;
 $299 = ($298|0)!=(0);
 $300 = $32;
 $301 = $299 ? 0 : $300;
 STACKTOP = sp;return ($301|0);
}
function _ec_range_bytes($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _ec_get_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _quant_fine_energy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $21 = $9;
 $16 = $21;
 while(1) {
  $22 = $16;
  $23 = $10;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $13;
  $26 = $16;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = 1 << $28;
  $30 = $29&65535;
  $18 = $30;
  $31 = $13;
  $32 = $16;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)<=(0);
  if (!($35)) {
   $17 = 0;
   while(1) {
    $36 = $12;
    $37 = $16;
    $38 = $17;
    $39 = $8;
    $40 = ((($39)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = Math_imul($38, $41)|0;
    $43 = (($37) + ($42))|0;
    $44 = (($36) + ($43<<2)|0);
    $45 = +HEAPF32[$44>>2];
    $46 = $45 + 0.5;
    $47 = $18;
    $48 = $47 << 16 >> 16;
    $49 = (+($48|0));
    $50 = $46 * $49;
    $51 = $50;
    $52 = (+Math_floor((+$51)));
    $53 = (~~(($52)));
    $19 = $53;
    $54 = $19;
    $55 = $18;
    $56 = $55 << 16 >> 16;
    $57 = (($56) - 1)|0;
    $58 = ($54|0)>($57|0);
    if ($58) {
     $59 = $18;
     $60 = $59 << 16 >> 16;
     $61 = (($60) - 1)|0;
     $19 = $61;
    }
    $62 = $19;
    $63 = ($62|0)<(0);
    if ($63) {
     $19 = 0;
    }
    $64 = $14;
    $65 = $19;
    $66 = $13;
    $67 = $16;
    $68 = (($66) + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    _ec_enc_bits($64,$65,$69);
    $70 = $19;
    $71 = (+($70|0));
    $72 = $71 + 0.5;
    $73 = $13;
    $74 = $16;
    $75 = (($73) + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (14 - ($76))|0;
    $78 = 1 << $77;
    $79 = (+($78|0));
    $80 = $72 * $79;
    $81 = $80 * 6.103515625E-5;
    $82 = $81 - 0.5;
    $20 = $82;
    $83 = $20;
    $84 = $11;
    $85 = $16;
    $86 = $17;
    $87 = $8;
    $88 = ((($87)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = Math_imul($86, $89)|0;
    $91 = (($85) + ($90))|0;
    $92 = (($84) + ($91<<2)|0);
    $93 = +HEAPF32[$92>>2];
    $94 = $93 + $83;
    HEAPF32[$92>>2] = $94;
    $95 = $20;
    $96 = $12;
    $97 = $16;
    $98 = $17;
    $99 = $8;
    $100 = ((($99)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = Math_imul($98, $101)|0;
    $103 = (($97) + ($102))|0;
    $104 = (($96) + ($103<<2)|0);
    $105 = +HEAPF32[$104>>2];
    $106 = $105 - $95;
    HEAPF32[$104>>2] = $106;
    $107 = $17;
    $108 = (($107) + 1)|0;
    $17 = $108;
    $109 = $15;
    $110 = ($108|0)<($109|0);
    if (!($110)) {
     break;
    }
   }
  }
  $111 = $16;
  $112 = (($111) + 1)|0;
  $16 = $112;
 }
 STACKTOP = sp;return;
}
function _quant_energy_finalise($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $21 = 0;
 while(1) {
  $25 = $21;
  $26 = ($25|0)<(2);
  if (!($26)) {
   break;
  }
  $27 = $11;
  $20 = $27;
  while(1) {
   $28 = $20;
   $29 = $12;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $17;
   $32 = $19;
   $33 = ($31|0)>=($32|0);
   if (!($33)) {
    break;
   }
   $34 = $15;
   $35 = $20;
   $36 = (($34) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)>=(8);
   if (!($38)) {
    $39 = $16;
    $40 = $20;
    $41 = (($39) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $21;
    $44 = ($42|0)!=($43|0);
    if (!($44)) {
     $22 = 0;
     while(1) {
      $45 = $14;
      $46 = $20;
      $47 = $22;
      $48 = $10;
      $49 = ((($48)) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = Math_imul($47, $50)|0;
      $52 = (($46) + ($51))|0;
      $53 = (($45) + ($52<<2)|0);
      $54 = +HEAPF32[$53>>2];
      $55 = $54 < 0.0;
      $56 = $55 ? 0 : 1;
      $23 = $56;
      $57 = $18;
      $58 = $23;
      _ec_enc_bits($57,$58,1);
      $59 = $23;
      $60 = (+($59|0));
      $61 = $60 - 0.5;
      $62 = $15;
      $63 = $20;
      $64 = (($62) + ($63<<2)|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (14 - ($65))|0;
      $67 = (($66) - 1)|0;
      $68 = 1 << $67;
      $69 = (+($68|0));
      $70 = $61 * $69;
      $71 = $70 * 6.103515625E-5;
      $24 = $71;
      $72 = $24;
      $73 = $13;
      $74 = $20;
      $75 = $22;
      $76 = $10;
      $77 = ((($76)) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = Math_imul($75, $78)|0;
      $80 = (($74) + ($79))|0;
      $81 = (($73) + ($80<<2)|0);
      $82 = +HEAPF32[$81>>2];
      $83 = $82 + $72;
      HEAPF32[$81>>2] = $83;
      $84 = $17;
      $85 = (($84) + -1)|0;
      $17 = $85;
      $86 = $22;
      $87 = (($86) + 1)|0;
      $22 = $87;
      $88 = $19;
      $89 = ($87|0)<($88|0);
      if (!($89)) {
       break;
      }
     }
    }
   }
   $90 = $20;
   $91 = (($90) + 1)|0;
   $20 = $91;
  }
  $92 = $21;
  $93 = (($92) + 1)|0;
  $21 = $93;
 }
 STACKTOP = sp;return;
}
function _unquant_coarse_energy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0;
 var $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0;
 var $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $19 = sp + 32|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $28 = $15;
 $29 = (26775 + (($28*84)|0)|0);
 $30 = $12;
 $31 = (($29) + (($30*42)|0)|0);
 $16 = $31;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;
 $32 = $12;
 $33 = ($32|0)!=(0);
 if ($33) {
  $20 = 0.0;
  $21 = 0.149993896484375;
 } else {
  $34 = $15;
  $35 = (16620 + ($34<<2)|0);
  $36 = +HEAPF32[$35>>2];
  $21 = $36;
  $37 = $15;
  $38 = (16604 + ($37<<2)|0);
  $39 = +HEAPF32[$38>>2];
  $20 = $39;
 }
 $40 = $13;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42<<3;
 $22 = $43;
 $44 = $9;
 $17 = $44;
 while(1) {
  $45 = $17;
  $46 = $10;
  $47 = ($45|0)<($46|0);
  if (!($47)) {
   break;
  }
  $18 = 0;
  while(1) {
   $48 = $13;
   $49 = (_ec_tell_122($48)|0);
   $23 = $49;
   $50 = $22;
   $51 = $23;
   $52 = (($50) - ($51))|0;
   $53 = ($52|0)>=(15);
   do {
    if ($53) {
     $54 = $17;
     $55 = ($54|0)<(20);
     $56 = $17;
     $57 = $55 ? $56 : 20;
     $58 = $57<<1;
     $27 = $58;
     $59 = $13;
     $60 = $16;
     $61 = $27;
     $62 = (($60) + ($61)|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $64 << 7;
     $66 = $16;
     $67 = $27;
     $68 = (($67) + 1)|0;
     $69 = (($66) + ($68)|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = $70&255;
     $72 = $71 << 6;
     $73 = (_ec_laplace_decode($59,$65,$72)|0);
     $24 = $73;
    } else {
     $74 = $22;
     $75 = $23;
     $76 = (($74) - ($75))|0;
     $77 = ($76|0)>=(2);
     if ($77) {
      $78 = $13;
      $79 = (_ec_dec_icdf($78,27111,2)|0);
      $24 = $79;
      $80 = $24;
      $81 = $80 >> 1;
      $82 = $24;
      $83 = $82 & 1;
      $84 = (0 - ($83))|0;
      $85 = $81 ^ $84;
      $24 = $85;
      break;
     }
     $86 = $22;
     $87 = $23;
     $88 = (($86) - ($87))|0;
     $89 = ($88|0)>=(1);
     if ($89) {
      $90 = $13;
      $91 = (_ec_dec_bit_logp($90,1)|0);
      $92 = (0 - ($91))|0;
      $24 = $92;
      break;
     } else {
      $24 = -1;
      break;
     }
    }
   } while(0);
   $93 = $24;
   $94 = (+($93|0));
   $25 = $94;
   $95 = $11;
   $96 = $17;
   $97 = $18;
   $98 = $8;
   $99 = ((($98)) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = Math_imul($97, $100)|0;
   $102 = (($96) + ($101))|0;
   $103 = (($95) + ($102<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = -9.0 > $104;
   if ($105) {
    $125 = -9.0;
   } else {
    $106 = $11;
    $107 = $17;
    $108 = $18;
    $109 = $8;
    $110 = ((($109)) + 8|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = Math_imul($108, $111)|0;
    $113 = (($107) + ($112))|0;
    $114 = (($106) + ($113<<2)|0);
    $115 = +HEAPF32[$114>>2];
    $125 = $115;
   }
   $116 = $11;
   $117 = $17;
   $118 = $18;
   $119 = $8;
   $120 = ((($119)) + 8|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = Math_imul($118, $121)|0;
   $123 = (($117) + ($122))|0;
   $124 = (($116) + ($123<<2)|0);
   HEAPF32[$124>>2] = $125;
   $126 = $20;
   $127 = $11;
   $128 = $17;
   $129 = $18;
   $130 = $8;
   $131 = ((($130)) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = Math_imul($129, $132)|0;
   $134 = (($128) + ($133))|0;
   $135 = (($127) + ($134<<2)|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $126 * $136;
   $138 = $18;
   $139 = (($19) + ($138<<2)|0);
   $140 = +HEAPF32[$139>>2];
   $141 = $137 + $140;
   $142 = $25;
   $143 = $141 + $142;
   $26 = $143;
   $144 = $26;
   $145 = $11;
   $146 = $17;
   $147 = $18;
   $148 = $8;
   $149 = ((($148)) + 8|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = Math_imul($147, $150)|0;
   $152 = (($146) + ($151))|0;
   $153 = (($145) + ($152<<2)|0);
   HEAPF32[$153>>2] = $144;
   $154 = $18;
   $155 = (($19) + ($154<<2)|0);
   $156 = +HEAPF32[$155>>2];
   $157 = $25;
   $158 = $156 + $157;
   $159 = $21;
   $160 = $25;
   $161 = $159 * $160;
   $162 = $158 - $161;
   $163 = $18;
   $164 = (($19) + ($163<<2)|0);
   HEAPF32[$164>>2] = $162;
   $165 = $18;
   $166 = (($165) + 1)|0;
   $18 = $166;
   $167 = $14;
   $168 = ($166|0)<($167|0);
   if (!($168)) {
    break;
   }
  }
  $169 = $17;
  $170 = (($169) + 1)|0;
  $17 = $170;
 }
 STACKTOP = sp;return;
}
function _unquant_fine_energy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $18 = $8;
 $14 = $18;
 while(1) {
  $19 = $14;
  $20 = $9;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $11;
  $23 = $14;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)<=(0);
  if (!($26)) {
   $15 = 0;
   while(1) {
    $27 = $12;
    $28 = $11;
    $29 = $14;
    $30 = (($28) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_ec_dec_bits($27,$31)|0);
    $16 = $32;
    $33 = $16;
    $34 = (+($33|0));
    $35 = $34 + 0.5;
    $36 = $11;
    $37 = $14;
    $38 = (($36) + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (14 - ($39))|0;
    $41 = 1 << $40;
    $42 = (+($41|0));
    $43 = $35 * $42;
    $44 = $43 * 6.103515625E-5;
    $45 = $44 - 0.5;
    $17 = $45;
    $46 = $17;
    $47 = $10;
    $48 = $14;
    $49 = $15;
    $50 = $7;
    $51 = ((($50)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = Math_imul($49, $52)|0;
    $54 = (($48) + ($53))|0;
    $55 = (($47) + ($54<<2)|0);
    $56 = +HEAPF32[$55>>2];
    $57 = $56 + $46;
    HEAPF32[$55>>2] = $57;
    $58 = $15;
    $59 = (($58) + 1)|0;
    $15 = $59;
    $60 = $13;
    $61 = ($59|0)<($60|0);
    if (!($61)) {
     break;
    }
   }
  }
  $62 = $14;
  $63 = (($62) + 1)|0;
  $14 = $63;
 }
 STACKTOP = sp;return;
}
function _unquant_energy_finalise($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $19 = 0;
 while(1) {
  $23 = $19;
  $24 = ($23|0)<(2);
  if (!($24)) {
   break;
  }
  $25 = $10;
  $18 = $25;
  while(1) {
   $26 = $18;
   $27 = $11;
   $28 = ($26|0)<($27|0);
   if (!($28)) {
    break;
   }
   $29 = $15;
   $30 = $17;
   $31 = ($29|0)>=($30|0);
   if (!($31)) {
    break;
   }
   $32 = $13;
   $33 = $18;
   $34 = (($32) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)>=(8);
   if (!($36)) {
    $37 = $14;
    $38 = $18;
    $39 = (($37) + ($38<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $19;
    $42 = ($40|0)!=($41|0);
    if (!($42)) {
     $20 = 0;
     while(1) {
      $43 = $16;
      $44 = (_ec_dec_bits($43,1)|0);
      $21 = $44;
      $45 = $21;
      $46 = (+($45|0));
      $47 = $46 - 0.5;
      $48 = $13;
      $49 = $18;
      $50 = (($48) + ($49<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (14 - ($51))|0;
      $53 = (($52) - 1)|0;
      $54 = 1 << $53;
      $55 = (+($54|0));
      $56 = $47 * $55;
      $57 = $56 * 6.103515625E-5;
      $22 = $57;
      $58 = $22;
      $59 = $12;
      $60 = $18;
      $61 = $20;
      $62 = $9;
      $63 = ((($62)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = Math_imul($61, $64)|0;
      $66 = (($60) + ($65))|0;
      $67 = (($59) + ($66<<2)|0);
      $68 = +HEAPF32[$67>>2];
      $69 = $68 + $58;
      HEAPF32[$67>>2] = $69;
      $70 = $15;
      $71 = (($70) + -1)|0;
      $15 = $71;
      $72 = $20;
      $73 = (($72) + 1)|0;
      $20 = $73;
      $74 = $17;
      $75 = ($73|0)<($74|0);
      if (!($75)) {
       break;
      }
     }
    }
   }
   $76 = $18;
   $77 = (($76) + 1)|0;
   $18 = $77;
  }
  $78 = $19;
  $79 = (($78) + 1)|0;
  $19 = $79;
 }
 STACKTOP = sp;return;
}
function _amp2Log2($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $13 = 0;
  while(1) {
   $14 = $13;
   $15 = $7;
   $16 = ($14|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $9;
   $18 = $13;
   $19 = $12;
   $20 = $6;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = Math_imul($19, $22)|0;
   $24 = (($18) + ($23))|0;
   $25 = (($17) + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $26;
   $28 = (+Math_log((+$27)));
   $29 = 1.4426950408889634 * $28;
   $30 = $29;
   $31 = $13;
   $32 = (16504 + ($31<<2)|0);
   $33 = +HEAPF32[$32>>2];
   $34 = $30 - $33;
   $35 = $10;
   $36 = $13;
   $37 = $12;
   $38 = $6;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = Math_imul($37, $40)|0;
   $42 = (($36) + ($41))|0;
   $43 = (($35) + ($42<<2)|0);
   HEAPF32[$43>>2] = $34;
   $44 = $13;
   $45 = (($44) + 1)|0;
   $13 = $45;
  }
  $46 = $7;
  $13 = $46;
  while(1) {
   $47 = $13;
   $48 = $8;
   $49 = ($47|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $10;
   $51 = $12;
   $52 = $6;
   $53 = ((($52)) + 8|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = Math_imul($51, $54)|0;
   $56 = $13;
   $57 = (($55) + ($56))|0;
   $58 = (($50) + ($57<<2)|0);
   HEAPF32[$58>>2] = -14.0;
   $59 = $13;
   $60 = (($59) + 1)|0;
   $13 = $60;
  }
  $61 = $12;
  $62 = (($61) + 1)|0;
  $12 = $62;
  $63 = $11;
  $64 = ($62|0)<($63|0);
  if (!($64)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _compute_allocation($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 var $$alloca_mul = 0, $$alloca_mul39 = 0, $$alloca_mul41 = 0, $$alloca_mul43 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $22 = $3;
 $23 = $4;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $14;
 $34 = $15;
 $35 = $16;
 $36 = $17;
 $37 = $18;
 $56 = $27;
 $57 = ($56|0)>(0);
 $58 = $27;
 $59 = $57 ? $58 : 0;
 $27 = $59;
 $60 = $19;
 $61 = ((($60)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $40 = $62;
 $63 = $20;
 $43 = $63;
 $64 = $27;
 $65 = ($64|0)>=(8);
 $66 = $65 ? 8 : 0;
 $44 = $66;
 $67 = $44;
 $68 = $27;
 $69 = (($68) - ($67))|0;
 $27 = $69;
 $46 = 0;
 $45 = 0;
 $70 = $32;
 $71 = ($70|0)==(2);
 do {
  if ($71) {
   $72 = $21;
   $73 = $20;
   $74 = (($72) - ($73))|0;
   $75 = (27114 + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $45 = $77;
   $78 = $45;
   $79 = $27;
   $80 = ($78|0)>($79|0);
   if ($80) {
    $45 = 0;
    break;
   } else {
    $81 = $45;
    $82 = $27;
    $83 = (($82) - ($81))|0;
    $27 = $83;
    $84 = $27;
    $85 = ($84|0)>=(8);
    $86 = $85 ? 8 : 0;
    $46 = $86;
    $87 = $46;
    $88 = $27;
    $89 = (($88) - ($87))|0;
    $27 = $89;
    break;
   }
  }
 } while(0);
 $90 = $40;
 $91 = (_llvm_stacksave()|0);
 $47 = $91;
 $$alloca_mul = $90<<2;
 $92 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $93 = $40;
 $$alloca_mul39 = $93<<2;
 $94 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul39)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul39)|0)+15)&-16)|0);;
 $95 = $40;
 $$alloca_mul41 = $95<<2;
 $96 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul41)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul41)|0)+15)&-16)|0);;
 $97 = $40;
 $$alloca_mul43 = $97<<2;
 $98 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul43)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul43)|0)+15)&-16)|0);;
 $99 = $20;
 $41 = $99;
 while(1) {
  $100 = $41;
  $101 = $21;
  $102 = ($100|0)<($101|0);
  if (!($102)) {
   break;
  }
  $103 = $32;
  $104 = $103 << 3;
  $105 = $19;
  $106 = ((($105)) + 32|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $41;
  $109 = (($108) + 1)|0;
  $110 = (($107) + ($109<<1)|0);
  $111 = HEAP16[$110>>1]|0;
  $112 = $111 << 16 >> 16;
  $113 = $19;
  $114 = ((($113)) + 32|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $41;
  $117 = (($115) + ($116<<1)|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = (($112) - ($119))|0;
  $121 = ($120*3)|0;
  $122 = $33;
  $123 = $121 << $122;
  $124 = $123 << 3;
  $125 = $124 >> 4;
  $126 = ($104|0)>($125|0);
  if ($126) {
   $127 = $32;
   $128 = $127 << 3;
   $152 = $128;
  } else {
   $129 = $19;
   $130 = ((($129)) + 32|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $41;
   $133 = (($132) + 1)|0;
   $134 = (($131) + ($133<<1)|0);
   $135 = HEAP16[$134>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = $19;
   $138 = ((($137)) + 32|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $41;
   $141 = (($139) + ($140<<1)|0);
   $142 = HEAP16[$141>>1]|0;
   $143 = $142 << 16 >> 16;
   $144 = (($136) - ($143))|0;
   $145 = ($144*3)|0;
   $146 = $33;
   $147 = $145 << $146;
   $148 = $147 << 3;
   $149 = $148 >> 4;
   $152 = $149;
  }
  $150 = $41;
  $151 = (($96) + ($150<<2)|0);
  HEAP32[$151>>2] = $152;
  $153 = $32;
  $154 = $19;
  $155 = ((($154)) + 32|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $41;
  $158 = (($157) + 1)|0;
  $159 = (($156) + ($158<<1)|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160 << 16 >> 16;
  $162 = $19;
  $163 = ((($162)) + 32|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $41;
  $166 = (($164) + ($165<<1)|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $167 << 16 >> 16;
  $169 = (($161) - ($168))|0;
  $170 = Math_imul($153, $169)|0;
  $171 = $24;
  $172 = (($171) - 5)|0;
  $173 = $33;
  $174 = (($172) - ($173))|0;
  $175 = Math_imul($170, $174)|0;
  $176 = $21;
  $177 = $41;
  $178 = (($176) - ($177))|0;
  $179 = (($178) - 1)|0;
  $180 = Math_imul($175, $179)|0;
  $181 = $33;
  $182 = (($181) + 3)|0;
  $183 = 1 << $182;
  $184 = Math_imul($180, $183)|0;
  $185 = $184 >> 6;
  $186 = $41;
  $187 = (($98) + ($186<<2)|0);
  HEAP32[$187>>2] = $185;
  $188 = $19;
  $189 = ((($188)) + 32|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = $41;
  $192 = (($191) + 1)|0;
  $193 = (($190) + ($192<<1)|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194 << 16 >> 16;
  $196 = $19;
  $197 = ((($196)) + 32|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $41;
  $200 = (($198) + ($199<<1)|0);
  $201 = HEAP16[$200>>1]|0;
  $202 = $201 << 16 >> 16;
  $203 = (($195) - ($202))|0;
  $204 = $33;
  $205 = $203 << $204;
  $206 = ($205|0)==(1);
  if ($206) {
   $207 = $32;
   $208 = $207 << 3;
   $209 = $41;
   $210 = (($98) + ($209<<2)|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) - ($208))|0;
   HEAP32[$210>>2] = $212;
  }
  $213 = $41;
  $214 = (($213) + 1)|0;
  $41 = $214;
 }
 $38 = 1;
 $215 = $19;
 $216 = ((($215)) + 48|0);
 $217 = HEAP32[$216>>2]|0;
 $218 = (($217) - 1)|0;
 $39 = $218;
 while(1) {
  $48 = 0;
  $49 = 0;
  $219 = $38;
  $220 = $39;
  $221 = (($219) + ($220))|0;
  $222 = $221 >> 1;
  $50 = $222;
  $223 = $21;
  $41 = $223;
  while(1) {
   $224 = $41;
   $225 = (($224) + -1)|0;
   $41 = $225;
   $226 = $20;
   $227 = ($224|0)>($226|0);
   if (!($227)) {
    break;
   }
   $228 = $19;
   $229 = ((($228)) + 32|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $41;
   $232 = (($231) + 1)|0;
   $233 = (($230) + ($232<<1)|0);
   $234 = HEAP16[$233>>1]|0;
   $235 = $234 << 16 >> 16;
   $236 = $19;
   $237 = ((($236)) + 32|0);
   $238 = HEAP32[$237>>2]|0;
   $239 = $41;
   $240 = (($238) + ($239<<1)|0);
   $241 = HEAP16[$240>>1]|0;
   $242 = $241 << 16 >> 16;
   $243 = (($235) - ($242))|0;
   $52 = $243;
   $244 = $32;
   $245 = $52;
   $246 = Math_imul($244, $245)|0;
   $247 = $19;
   $248 = ((($247)) + 52|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $50;
   $251 = $40;
   $252 = Math_imul($250, $251)|0;
   $253 = $41;
   $254 = (($252) + ($253))|0;
   $255 = (($249) + ($254)|0);
   $256 = HEAP8[$255>>0]|0;
   $257 = $256&255;
   $258 = Math_imul($246, $257)|0;
   $259 = $33;
   $260 = $258 << $259;
   $261 = $260 >> 2;
   $51 = $261;
   $262 = $51;
   $263 = ($262|0)>(0);
   if ($263) {
    $264 = $51;
    $265 = $41;
    $266 = (($98) + ($265<<2)|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (($264) + ($267))|0;
    $269 = (0)>($268|0);
    if ($269) {
     $275 = 0;
    } else {
     $270 = $51;
     $271 = $41;
     $272 = (($98) + ($271<<2)|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = (($270) + ($273))|0;
     $275 = $274;
    }
    $51 = $275;
   }
   $276 = $22;
   $277 = $41;
   $278 = (($276) + ($277<<2)|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = $51;
   $281 = (($280) + ($279))|0;
   $51 = $281;
   $282 = $51;
   $283 = $41;
   $284 = (($96) + ($283<<2)|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($282|0)>=($285|0);
   $287 = $48;
   $288 = ($287|0)!=(0);
   $or$cond = $286 | $288;
   if (!($or$cond)) {
    $303 = $51;
    $304 = $32;
    $305 = $304 << 3;
    $306 = ($303|0)>=($305|0);
    if (!($306)) {
     continue;
    }
    $307 = $32;
    $308 = $307 << 3;
    $309 = $49;
    $310 = (($309) + ($308))|0;
    $49 = $310;
    continue;
   }
   $48 = 1;
   $289 = $51;
   $290 = $23;
   $291 = $41;
   $292 = (($290) + ($291<<2)|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = ($289|0)<($293|0);
   if ($294) {
    $295 = $51;
    $302 = $295;
   } else {
    $296 = $23;
    $297 = $41;
    $298 = (($296) + ($297<<2)|0);
    $299 = HEAP32[$298>>2]|0;
    $302 = $299;
   }
   $300 = $49;
   $301 = (($300) + ($302))|0;
   $49 = $301;
  }
  $311 = $49;
  $312 = $27;
  $313 = ($311|0)>($312|0);
  $314 = $50;
  if ($313) {
   $315 = (($314) - 1)|0;
   $39 = $315;
  } else {
   $316 = (($314) + 1)|0;
   $38 = $316;
  }
  $317 = $38;
  $318 = $39;
  $319 = ($317|0)<=($318|0);
  if (!($319)) {
   break;
  }
 }
 $320 = $38;
 $321 = (($320) + -1)|0;
 $38 = $321;
 $39 = $320;
 $322 = $20;
 $41 = $322;
 while(1) {
  $323 = $41;
  $324 = $21;
  $325 = ($323|0)<($324|0);
  $326 = $19;
  if (!($325)) {
   break;
  }
  $327 = ((($326)) + 32|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $41;
  $330 = (($329) + 1)|0;
  $331 = (($328) + ($330<<1)|0);
  $332 = HEAP16[$331>>1]|0;
  $333 = $332 << 16 >> 16;
  $334 = $19;
  $335 = ((($334)) + 32|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $41;
  $338 = (($336) + ($337<<1)|0);
  $339 = HEAP16[$338>>1]|0;
  $340 = $339 << 16 >> 16;
  $341 = (($333) - ($340))|0;
  $55 = $341;
  $342 = $32;
  $343 = $55;
  $344 = Math_imul($342, $343)|0;
  $345 = $19;
  $346 = ((($345)) + 52|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $38;
  $349 = $40;
  $350 = Math_imul($348, $349)|0;
  $351 = $41;
  $352 = (($350) + ($351))|0;
  $353 = (($347) + ($352)|0);
  $354 = HEAP8[$353>>0]|0;
  $355 = $354&255;
  $356 = Math_imul($344, $355)|0;
  $357 = $33;
  $358 = $356 << $357;
  $359 = $358 >> 2;
  $53 = $359;
  $360 = $39;
  $361 = $19;
  $362 = ((($361)) + 48|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = ($360|0)>=($363|0);
  if ($364) {
   $365 = $23;
   $366 = $41;
   $367 = (($365) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $387 = $368;
  } else {
   $369 = $32;
   $370 = $55;
   $371 = Math_imul($369, $370)|0;
   $372 = $19;
   $373 = ((($372)) + 52|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = $39;
   $376 = $40;
   $377 = Math_imul($375, $376)|0;
   $378 = $41;
   $379 = (($377) + ($378))|0;
   $380 = (($374) + ($379)|0);
   $381 = HEAP8[$380>>0]|0;
   $382 = $381&255;
   $383 = Math_imul($371, $382)|0;
   $384 = $33;
   $385 = $383 << $384;
   $386 = $385 >> 2;
   $387 = $386;
  }
  $54 = $387;
  $388 = $53;
  $389 = ($388|0)>(0);
  if ($389) {
   $390 = $53;
   $391 = $41;
   $392 = (($98) + ($391<<2)|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = (($390) + ($393))|0;
   $395 = (0)>($394|0);
   if ($395) {
    $401 = 0;
   } else {
    $396 = $53;
    $397 = $41;
    $398 = (($98) + ($397<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (($396) + ($399))|0;
    $401 = $400;
   }
   $53 = $401;
  }
  $402 = $54;
  $403 = ($402|0)>(0);
  if ($403) {
   $404 = $54;
   $405 = $41;
   $406 = (($98) + ($405<<2)|0);
   $407 = HEAP32[$406>>2]|0;
   $408 = (($404) + ($407))|0;
   $409 = (0)>($408|0);
   if ($409) {
    $415 = 0;
   } else {
    $410 = $54;
    $411 = $41;
    $412 = (($98) + ($411<<2)|0);
    $413 = HEAP32[$412>>2]|0;
    $414 = (($410) + ($413))|0;
    $415 = $414;
   }
   $54 = $415;
  }
  $416 = $38;
  $417 = ($416|0)>(0);
  if ($417) {
   $418 = $22;
   $419 = $41;
   $420 = (($418) + ($419<<2)|0);
   $421 = HEAP32[$420>>2]|0;
   $422 = $53;
   $423 = (($422) + ($421))|0;
   $53 = $423;
  }
  $424 = $22;
  $425 = $41;
  $426 = (($424) + ($425<<2)|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = $54;
  $429 = (($428) + ($427))|0;
  $54 = $429;
  $430 = $22;
  $431 = $41;
  $432 = (($430) + ($431<<2)|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = ($433|0)>(0);
  if ($434) {
   $435 = $41;
   $43 = $435;
  }
  $436 = $54;
  $437 = $53;
  $438 = (($436) - ($437))|0;
  $439 = (0)>($438|0);
  if ($439) {
   $443 = 0;
  } else {
   $440 = $54;
   $441 = $53;
   $442 = (($440) - ($441))|0;
   $443 = $442;
  }
  $54 = $443;
  $444 = $53;
  $445 = $41;
  $446 = (($92) + ($445<<2)|0);
  HEAP32[$446>>2] = $444;
  $447 = $54;
  $448 = $41;
  $449 = (($94) + ($448<<2)|0);
  HEAP32[$449>>2] = $447;
  $450 = $41;
  $451 = (($450) + 1)|0;
  $41 = $451;
 }
 $452 = $20;
 $453 = $21;
 $454 = $43;
 $455 = $23;
 $456 = $27;
 $457 = $28;
 $458 = $44;
 $459 = $25;
 $460 = $45;
 $461 = $26;
 $462 = $46;
 $463 = $29;
 $464 = $30;
 $465 = $31;
 $466 = $32;
 $467 = $33;
 $468 = $34;
 $469 = $35;
 $470 = $36;
 $471 = $37;
 $472 = (_interp_bits2pulses($326,$452,$453,$454,$92,$94,$96,$455,$456,$457,$458,$459,$460,$461,$462,$463,$464,$465,$466,$467,$468,$469,$470,$471)|0);
 $42 = $472;
 $473 = $42;
 $474 = $47;
 _llvm_stackrestore(($474|0));
 STACKTOP = sp;return ($473|0);
}
function _interp_bits2pulses($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 var $$sink = 0, $$sink4 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $24 = $0;
 $25 = $1;
 $26 = $2;
 $27 = $3;
 $28 = $4;
 $29 = $5;
 $30 = $6;
 $31 = $7;
 $32 = $8;
 $33 = $9;
 $34 = $10;
 $35 = $11;
 $36 = $12;
 $37 = $13;
 $38 = $14;
 $39 = $15;
 $40 = $16;
 $41 = $17;
 $42 = $18;
 $43 = $19;
 $44 = $20;
 $45 = $21;
 $46 = $22;
 $47 = $23;
 $55 = -1;
 $77 = $42;
 $78 = $77 << 3;
 $56 = $78;
 $79 = $42;
 $80 = ($79|0)>(1);
 $81 = $80&1;
 $54 = $81;
 $82 = $43;
 $83 = $82 << 3;
 $53 = $83;
 $49 = 0;
 $50 = 64;
 $51 = 0;
 while(1) {
  $84 = $51;
  $85 = ($84|0)<(6);
  if (!($85)) {
   break;
  }
  $86 = $49;
  $87 = $50;
  $88 = (($86) + ($87))|0;
  $89 = $88 >> 1;
  $61 = $89;
  $48 = 0;
  $59 = 0;
  $90 = $26;
  $52 = $90;
  while(1) {
   $91 = $52;
   $92 = (($91) + -1)|0;
   $52 = $92;
   $93 = $25;
   $94 = ($91|0)>($93|0);
   if (!($94)) {
    break;
   }
   $95 = $28;
   $96 = $52;
   $97 = (($95) + ($96<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $61;
   $100 = $29;
   $101 = $52;
   $102 = (($100) + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = Math_imul($99, $103)|0;
   $105 = $104 >> 6;
   $106 = (($98) + ($105))|0;
   $62 = $106;
   $107 = $62;
   $108 = $30;
   $109 = $52;
   $110 = (($108) + ($109<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($107|0)>=($111|0);
   $113 = $59;
   $114 = ($113|0)!=(0);
   $or$cond = $112 | $114;
   if (!($or$cond)) {
    $129 = $62;
    $130 = $56;
    $131 = ($129|0)>=($130|0);
    if (!($131)) {
     continue;
    }
    $132 = $56;
    $133 = $48;
    $134 = (($133) + ($132))|0;
    $48 = $134;
    continue;
   }
   $59 = 1;
   $115 = $62;
   $116 = $31;
   $117 = $52;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($115|0)<($119|0);
   if ($120) {
    $121 = $62;
    $128 = $121;
   } else {
    $122 = $31;
    $123 = $52;
    $124 = (($122) + ($123<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $128 = $125;
   }
   $126 = $48;
   $127 = (($126) + ($128))|0;
   $48 = $127;
  }
  $135 = $48;
  $136 = $32;
  $137 = ($135|0)>($136|0);
  $138 = $61;
  if ($137) {
   $50 = $138;
  } else {
   $49 = $138;
  }
  $139 = $51;
  $140 = (($139) + 1)|0;
  $51 = $140;
 }
 $48 = 0;
 $59 = 0;
 $141 = $26;
 $52 = $141;
 while(1) {
  $142 = $52;
  $143 = (($142) + -1)|0;
  $52 = $143;
  $144 = $25;
  $145 = ($142|0)>($144|0);
  if (!($145)) {
   break;
  }
  $146 = $28;
  $147 = $52;
  $148 = (($146) + ($147<<2)|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $49;
  $151 = $29;
  $152 = $52;
  $153 = (($151) + ($152<<2)|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = Math_imul($150, $154)|0;
  $156 = $155 >> 6;
  $157 = (($149) + ($156))|0;
  $63 = $157;
  $158 = $63;
  $159 = $30;
  $160 = $52;
  $161 = (($159) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($158|0)>=($162|0);
  $164 = $59;
  $165 = ($164|0)!=(0);
  $or$cond3 = $163 | $165;
  do {
   if ($or$cond3) {
    $59 = 1;
   } else {
    $166 = $63;
    $167 = $56;
    $168 = ($166|0)>=($167|0);
    if ($168) {
     $169 = $56;
     $63 = $169;
     break;
    } else {
     $63 = 0;
     break;
    }
   }
  } while(0);
  $170 = $63;
  $171 = $31;
  $172 = $52;
  $173 = (($171) + ($172<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ($170|0)<($174|0);
  if ($175) {
   $176 = $63;
   $181 = $176;
  } else {
   $177 = $31;
   $178 = $52;
   $179 = (($177) + ($178<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180;
  }
  $63 = $181;
  $182 = $63;
  $183 = $39;
  $184 = $52;
  $185 = (($183) + ($184<<2)|0);
  HEAP32[$185>>2] = $182;
  $186 = $63;
  $187 = $48;
  $188 = (($187) + ($186))|0;
  $48 = $188;
 }
 $189 = $26;
 $55 = $189;
 while(1) {
  $190 = $55;
  $191 = (($190) - 1)|0;
  $52 = $191;
  $192 = $52;
  $193 = $27;
  $194 = ($192|0)<=($193|0);
  if ($194) {
   label = 29;
   break;
  }
  $198 = $32;
  $199 = $48;
  $200 = (($198) - ($199))|0;
  $57 = $200;
  $201 = $57;
  $202 = $24;
  $203 = ((($202)) + 32|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $55;
  $206 = (($204) + ($205<<1)|0);
  $207 = HEAP16[$206>>1]|0;
  $208 = $207 << 16 >> 16;
  $209 = $24;
  $210 = ((($209)) + 32|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $25;
  $213 = (($211) + ($212<<1)|0);
  $214 = HEAP16[$213>>1]|0;
  $215 = $214 << 16 >> 16;
  $216 = (($208) - ($215))|0;
  $217 = (_celt_udiv_137($201,$216)|0);
  $58 = $217;
  $218 = $24;
  $219 = ((($218)) + 32|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $55;
  $222 = (($220) + ($221<<1)|0);
  $223 = HEAP16[$222>>1]|0;
  $224 = $223 << 16 >> 16;
  $225 = $24;
  $226 = ((($225)) + 32|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $25;
  $229 = (($227) + ($228<<1)|0);
  $230 = HEAP16[$229>>1]|0;
  $231 = $230 << 16 >> 16;
  $232 = (($224) - ($231))|0;
  $233 = $58;
  $234 = Math_imul($232, $233)|0;
  $235 = $57;
  $236 = (($235) - ($234))|0;
  $57 = $236;
  $237 = $57;
  $238 = $24;
  $239 = ((($238)) + 32|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $52;
  $242 = (($240) + ($241<<1)|0);
  $243 = HEAP16[$242>>1]|0;
  $244 = $243 << 16 >> 16;
  $245 = $24;
  $246 = ((($245)) + 32|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $25;
  $249 = (($247) + ($248<<1)|0);
  $250 = HEAP16[$249>>1]|0;
  $251 = $250 << 16 >> 16;
  $252 = (($244) - ($251))|0;
  $253 = (($237) - ($252))|0;
  $254 = ($253|0)>(0);
  if ($254) {
   $255 = $57;
   $256 = $24;
   $257 = ((($256)) + 32|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = $52;
   $260 = (($258) + ($259<<1)|0);
   $261 = HEAP16[$260>>1]|0;
   $262 = $261 << 16 >> 16;
   $263 = $24;
   $264 = ((($263)) + 32|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = $25;
   $267 = (($265) + ($266<<1)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = $268 << 16 >> 16;
   $270 = (($262) - ($269))|0;
   $271 = (($255) - ($270))|0;
   $272 = $271;
  } else {
   $272 = 0;
  }
  $66 = $272;
  $273 = $24;
  $274 = ((($273)) + 32|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $55;
  $277 = (($275) + ($276<<1)|0);
  $278 = HEAP16[$277>>1]|0;
  $279 = $278 << 16 >> 16;
  $280 = $24;
  $281 = ((($280)) + 32|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $52;
  $284 = (($282) + ($283<<1)|0);
  $285 = HEAP16[$284>>1]|0;
  $286 = $285 << 16 >> 16;
  $287 = (($279) - ($286))|0;
  $64 = $287;
  $288 = $39;
  $289 = $52;
  $290 = (($288) + ($289<<2)|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = $58;
  $293 = $64;
  $294 = Math_imul($292, $293)|0;
  $295 = (($291) + ($294))|0;
  $296 = $66;
  $297 = (($295) + ($296))|0;
  $65 = $297;
  $298 = $65;
  $299 = $30;
  $300 = $52;
  $301 = (($299) + ($300<<2)|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $56;
  $304 = (($303) + 8)|0;
  $305 = ($302|0)>($304|0);
  if ($305) {
   $306 = $30;
   $307 = $52;
   $308 = (($306) + ($307<<2)|0);
   $309 = HEAP32[$308>>2]|0;
   $313 = $309;
  } else {
   $310 = $56;
   $311 = (($310) + 8)|0;
   $313 = $311;
  }
  $312 = ($298|0)>=($313|0);
  if ($312) {
   $314 = $45;
   $315 = ($314|0)!=(0);
   if ($315) {
    $316 = $55;
    $317 = $25;
    $318 = (($317) + 2)|0;
    $319 = ($316|0)<=($318|0);
    if ($319) {
     label = 40;
     break;
    }
    $320 = $65;
    $321 = $52;
    $322 = $46;
    $323 = ($321|0)<($322|0);
    $324 = $323 ? 7 : 9;
    $325 = $64;
    $326 = Math_imul($324, $325)|0;
    $327 = $43;
    $328 = $326 << $327;
    $329 = $328 << 3;
    $330 = $329 >> 4;
    $331 = ($320|0)>($330|0);
    if ($331) {
     $332 = $52;
     $333 = $47;
     $334 = ($332|0)<=($333|0);
     if ($334) {
      label = 40;
      break;
     }
    }
    $336 = $44;
    _ec_enc_bit_logp($336,0,1);
   } else {
    $337 = $44;
    $338 = (_ec_dec_bit_logp($337,1)|0);
    $339 = ($338|0)!=(0);
    if ($339) {
     break;
    }
   }
   $340 = $48;
   $341 = (($340) + 8)|0;
   $48 = $341;
   $342 = $65;
   $343 = (($342) - 8)|0;
   $65 = $343;
  }
  $344 = $39;
  $345 = $52;
  $346 = (($344) + ($345<<2)|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $36;
  $349 = (($347) + ($348))|0;
  $350 = $48;
  $351 = (($350) - ($349))|0;
  $48 = $351;
  $352 = $36;
  $353 = ($352|0)>(0);
  if ($353) {
   $354 = $52;
   $355 = $25;
   $356 = (($354) - ($355))|0;
   $357 = (27114 + ($356)|0);
   $358 = HEAP8[$357>>0]|0;
   $359 = $358&255;
   $36 = $359;
  }
  $360 = $36;
  $361 = $48;
  $362 = (($361) + ($360))|0;
  $48 = $362;
  $363 = $65;
  $364 = $56;
  $365 = ($363|0)>=($364|0);
  if ($365) {
   $366 = $56;
   $367 = $48;
   $368 = (($367) + ($366))|0;
   $48 = $368;
   $369 = $56;
   $370 = $39;
   $371 = $52;
   $372 = (($370) + ($371<<2)|0);
   $$sink = $369;$$sink4 = $372;
  } else {
   $373 = $39;
   $374 = $52;
   $375 = (($373) + ($374<<2)|0);
   $$sink = 0;$$sink4 = $375;
  }
  HEAP32[$$sink4>>2] = $$sink;
  $376 = $55;
  $377 = (($376) + -1)|0;
  $55 = $377;
 }
 if ((label|0) == 29) {
  $195 = $34;
  $196 = $32;
  $197 = (($196) + ($195))|0;
  $32 = $197;
 }
 else if ((label|0) == 40) {
  $335 = $44;
  _ec_enc_bit_logp($335,1,1);
 }
 $378 = $36;
 $379 = ($378|0)>(0);
 do {
  if ($379) {
   $380 = $45;
   $381 = ($380|0)!=(0);
   if (!($381)) {
    $400 = $25;
    $401 = $44;
    $402 = $55;
    $403 = (($402) + 1)|0;
    $404 = $25;
    $405 = (($403) - ($404))|0;
    $406 = (_ec_dec_uint($401,$405)|0);
    $407 = (($400) + ($406))|0;
    $408 = $35;
    HEAP32[$408>>2] = $407;
    break;
   }
   $382 = $35;
   $383 = HEAP32[$382>>2]|0;
   $384 = $55;
   $385 = ($383|0)<($384|0);
   if ($385) {
    $386 = $35;
    $387 = HEAP32[$386>>2]|0;
    $390 = $387;
   } else {
    $388 = $55;
    $390 = $388;
   }
   $389 = $35;
   HEAP32[$389>>2] = $390;
   $391 = $44;
   $392 = $35;
   $393 = HEAP32[$392>>2]|0;
   $394 = $25;
   $395 = (($393) - ($394))|0;
   $396 = $55;
   $397 = (($396) + 1)|0;
   $398 = $25;
   $399 = (($397) - ($398))|0;
   _ec_enc_uint($391,$395,$399);
  } else {
   $409 = $35;
   HEAP32[$409>>2] = 0;
  }
 } while(0);
 $410 = $35;
 $411 = HEAP32[$410>>2]|0;
 $412 = $25;
 $413 = ($411|0)<=($412|0);
 if ($413) {
  $414 = $38;
  $415 = $32;
  $416 = (($415) + ($414))|0;
  $32 = $416;
  $38 = 0;
 }
 $417 = $38;
 $418 = ($417|0)>(0);
 do {
  if ($418) {
   $419 = $45;
   $420 = ($419|0)!=(0);
   $421 = $44;
   if ($420) {
    $422 = $37;
    $423 = HEAP32[$422>>2]|0;
    _ec_enc_bit_logp($421,$423,1);
    break;
   } else {
    $424 = (_ec_dec_bit_logp($421,1)|0);
    $425 = $37;
    HEAP32[$425>>2] = $424;
    break;
   }
  } else {
   $426 = $37;
   HEAP32[$426>>2] = 0;
  }
 } while(0);
 $427 = $32;
 $428 = $48;
 $429 = (($427) - ($428))|0;
 $57 = $429;
 $430 = $57;
 $431 = $24;
 $432 = ((($431)) + 32|0);
 $433 = HEAP32[$432>>2]|0;
 $434 = $55;
 $435 = (($433) + ($434<<1)|0);
 $436 = HEAP16[$435>>1]|0;
 $437 = $436 << 16 >> 16;
 $438 = $24;
 $439 = ((($438)) + 32|0);
 $440 = HEAP32[$439>>2]|0;
 $441 = $25;
 $442 = (($440) + ($441<<1)|0);
 $443 = HEAP16[$442>>1]|0;
 $444 = $443 << 16 >> 16;
 $445 = (($437) - ($444))|0;
 $446 = (_celt_udiv_137($430,$445)|0);
 $58 = $446;
 $447 = $24;
 $448 = ((($447)) + 32|0);
 $449 = HEAP32[$448>>2]|0;
 $450 = $55;
 $451 = (($449) + ($450<<1)|0);
 $452 = HEAP16[$451>>1]|0;
 $453 = $452 << 16 >> 16;
 $454 = $24;
 $455 = ((($454)) + 32|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = $25;
 $458 = (($456) + ($457<<1)|0);
 $459 = HEAP16[$458>>1]|0;
 $460 = $459 << 16 >> 16;
 $461 = (($453) - ($460))|0;
 $462 = $58;
 $463 = Math_imul($461, $462)|0;
 $464 = $57;
 $465 = (($464) - ($463))|0;
 $57 = $465;
 $466 = $25;
 $52 = $466;
 while(1) {
  $467 = $52;
  $468 = $55;
  $469 = ($467|0)<($468|0);
  if (!($469)) {
   break;
  }
  $470 = $58;
  $471 = $24;
  $472 = ((($471)) + 32|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = $52;
  $475 = (($474) + 1)|0;
  $476 = (($473) + ($475<<1)|0);
  $477 = HEAP16[$476>>1]|0;
  $478 = $477 << 16 >> 16;
  $479 = $24;
  $480 = ((($479)) + 32|0);
  $481 = HEAP32[$480>>2]|0;
  $482 = $52;
  $483 = (($481) + ($482<<1)|0);
  $484 = HEAP16[$483>>1]|0;
  $485 = $484 << 16 >> 16;
  $486 = (($478) - ($485))|0;
  $487 = Math_imul($470, $486)|0;
  $488 = $39;
  $489 = $52;
  $490 = (($488) + ($489<<2)|0);
  $491 = HEAP32[$490>>2]|0;
  $492 = (($491) + ($487))|0;
  HEAP32[$490>>2] = $492;
  $493 = $52;
  $494 = (($493) + 1)|0;
  $52 = $494;
 }
 $495 = $25;
 $52 = $495;
 while(1) {
  $496 = $52;
  $497 = $55;
  $498 = ($496|0)<($497|0);
  if (!($498)) {
   break;
  }
  $499 = $57;
  $500 = $24;
  $501 = ((($500)) + 32|0);
  $502 = HEAP32[$501>>2]|0;
  $503 = $52;
  $504 = (($503) + 1)|0;
  $505 = (($502) + ($504<<1)|0);
  $506 = HEAP16[$505>>1]|0;
  $507 = $506 << 16 >> 16;
  $508 = $24;
  $509 = ((($508)) + 32|0);
  $510 = HEAP32[$509>>2]|0;
  $511 = $52;
  $512 = (($510) + ($511<<1)|0);
  $513 = HEAP16[$512>>1]|0;
  $514 = $513 << 16 >> 16;
  $515 = (($507) - ($514))|0;
  $516 = ($499|0)<($515|0);
  if ($516) {
   $517 = $57;
   $534 = $517;
  } else {
   $518 = $24;
   $519 = ((($518)) + 32|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = $52;
   $522 = (($521) + 1)|0;
   $523 = (($520) + ($522<<1)|0);
   $524 = HEAP16[$523>>1]|0;
   $525 = $524 << 16 >> 16;
   $526 = $24;
   $527 = ((($526)) + 32|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = $52;
   $530 = (($528) + ($529<<1)|0);
   $531 = HEAP16[$530>>1]|0;
   $532 = $531 << 16 >> 16;
   $533 = (($525) - ($532))|0;
   $534 = $533;
  }
  $67 = $534;
  $535 = $67;
  $536 = $39;
  $537 = $52;
  $538 = (($536) + ($537<<2)|0);
  $539 = HEAP32[$538>>2]|0;
  $540 = (($539) + ($535))|0;
  HEAP32[$538>>2] = $540;
  $541 = $67;
  $542 = $57;
  $543 = (($542) - ($541))|0;
  $57 = $543;
  $544 = $52;
  $545 = (($544) + 1)|0;
  $52 = $545;
 }
 $60 = 0;
 $546 = $25;
 $52 = $546;
 while(1) {
  $547 = $52;
  $548 = $55;
  $549 = ($547|0)<($548|0);
  if (!($549)) {
   break;
  }
  $550 = $24;
  $551 = ((($550)) + 32|0);
  $552 = HEAP32[$551>>2]|0;
  $553 = $52;
  $554 = (($553) + 1)|0;
  $555 = (($552) + ($554<<1)|0);
  $556 = HEAP16[$555>>1]|0;
  $557 = $556 << 16 >> 16;
  $558 = $24;
  $559 = ((($558)) + 32|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = $52;
  $562 = (($560) + ($561<<1)|0);
  $563 = HEAP16[$562>>1]|0;
  $564 = $563 << 16 >> 16;
  $565 = (($557) - ($564))|0;
  $68 = $565;
  $566 = $68;
  $567 = $43;
  $568 = $566 << $567;
  $69 = $568;
  $569 = $39;
  $570 = $52;
  $571 = (($569) + ($570<<2)|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = $60;
  $574 = (($572) + ($573))|0;
  $74 = $574;
  $575 = $69;
  $576 = ($575|0)>(1);
  $577 = $74;
  if ($576) {
   $578 = $31;
   $579 = $52;
   $580 = (($578) + ($579<<2)|0);
   $581 = HEAP32[$580>>2]|0;
   $582 = (($577) - ($581))|0;
   $583 = ($582|0)>(0);
   if ($583) {
    $584 = $74;
    $585 = $31;
    $586 = $52;
    $587 = (($585) + ($586<<2)|0);
    $588 = HEAP32[$587>>2]|0;
    $589 = (($584) - ($588))|0;
    $590 = $589;
   } else {
    $590 = 0;
   }
   $73 = $590;
   $591 = $74;
   $592 = $73;
   $593 = (($591) - ($592))|0;
   $594 = $39;
   $595 = $52;
   $596 = (($594) + ($595<<2)|0);
   HEAP32[$596>>2] = $593;
   $597 = $42;
   $598 = $69;
   $599 = Math_imul($597, $598)|0;
   $600 = $42;
   $601 = ($600|0)==(2);
   $602 = $69;
   $603 = ($602|0)>(2);
   $or$cond6 = $601 & $603;
   if ($or$cond6) {
    $604 = $37;
    $605 = HEAP32[$604>>2]|0;
    $606 = ($605|0)!=(0);
    if ($606) {
     $611 = 0;
    } else {
     $607 = $52;
     $608 = $35;
     $609 = HEAP32[$608>>2]|0;
     $610 = ($607|0)<($609|0);
     $611 = $610;
    }
   } else {
    $611 = 0;
   }
   $612 = $611 ? 1 : 0;
   $613 = (($599) + ($612))|0;
   $70 = $613;
   $614 = $70;
   $615 = $24;
   $616 = ((($615)) + 56|0);
   $617 = HEAP32[$616>>2]|0;
   $618 = $52;
   $619 = (($617) + ($618<<1)|0);
   $620 = HEAP16[$619>>1]|0;
   $621 = $620 << 16 >> 16;
   $622 = $53;
   $623 = (($621) + ($622))|0;
   $624 = Math_imul($614, $623)|0;
   $72 = $624;
   $625 = $72;
   $626 = $625 >> 1;
   $627 = $70;
   $628 = ($627*21)|0;
   $629 = (($626) - ($628))|0;
   $71 = $629;
   $630 = $69;
   $631 = ($630|0)==(2);
   if ($631) {
    $632 = $70;
    $633 = $632 << 3;
    $634 = $633 >> 2;
    $635 = $71;
    $636 = (($635) + ($634))|0;
    $71 = $636;
   }
   $637 = $39;
   $638 = $52;
   $639 = (($637) + ($638<<2)|0);
   $640 = HEAP32[$639>>2]|0;
   $641 = $71;
   $642 = (($640) + ($641))|0;
   $643 = $70;
   $644 = $643<<1;
   $645 = $644 << 3;
   $646 = ($642|0)<($645|0);
   if ($646) {
    $647 = $72;
    $648 = $647 >> 2;
    $649 = $71;
    $650 = (($649) + ($648))|0;
    $71 = $650;
   } else {
    $651 = $39;
    $652 = $52;
    $653 = (($651) + ($652<<2)|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = $71;
    $656 = (($654) + ($655))|0;
    $657 = $70;
    $658 = ($657*3)|0;
    $659 = $658 << 3;
    $660 = ($656|0)<($659|0);
    if ($660) {
     $661 = $72;
     $662 = $661 >> 3;
     $663 = $71;
     $664 = (($663) + ($662))|0;
     $71 = $664;
    }
   }
   $665 = $39;
   $666 = $52;
   $667 = (($665) + ($666<<2)|0);
   $668 = HEAP32[$667>>2]|0;
   $669 = $71;
   $670 = (($668) + ($669))|0;
   $671 = $70;
   $672 = $671 << 2;
   $673 = (($670) + ($672))|0;
   $674 = (0)>($673|0);
   if ($674) {
    $687 = 0;
   } else {
    $675 = $39;
    $676 = $52;
    $677 = (($675) + ($676<<2)|0);
    $678 = HEAP32[$677>>2]|0;
    $679 = $71;
    $680 = (($678) + ($679))|0;
    $681 = $70;
    $682 = $681 << 2;
    $683 = (($680) + ($682))|0;
    $687 = $683;
   }
   $684 = $40;
   $685 = $52;
   $686 = (($684) + ($685<<2)|0);
   HEAP32[$686>>2] = $687;
   $688 = $40;
   $689 = $52;
   $690 = (($688) + ($689<<2)|0);
   $691 = HEAP32[$690>>2]|0;
   $692 = $70;
   $693 = (_celt_udiv_137($691,$692)|0);
   $694 = $693 >>> 3;
   $695 = $40;
   $696 = $52;
   $697 = (($695) + ($696<<2)|0);
   HEAP32[$697>>2] = $694;
   $698 = $42;
   $699 = $40;
   $700 = $52;
   $701 = (($699) + ($700<<2)|0);
   $702 = HEAP32[$701>>2]|0;
   $703 = Math_imul($698, $702)|0;
   $704 = $39;
   $705 = $52;
   $706 = (($704) + ($705<<2)|0);
   $707 = HEAP32[$706>>2]|0;
   $708 = $707 >> 3;
   $709 = ($703|0)>($708|0);
   if ($709) {
    $710 = $39;
    $711 = $52;
    $712 = (($710) + ($711<<2)|0);
    $713 = HEAP32[$712>>2]|0;
    $714 = $54;
    $715 = $713 >> $714;
    $716 = $715 >> 3;
    $717 = $40;
    $718 = $52;
    $719 = (($717) + ($718<<2)|0);
    HEAP32[$719>>2] = $716;
   }
   $720 = $40;
   $721 = $52;
   $722 = (($720) + ($721<<2)|0);
   $723 = HEAP32[$722>>2]|0;
   $724 = ($723|0)<(8);
   if ($724) {
    $725 = $40;
    $726 = $52;
    $727 = (($725) + ($726<<2)|0);
    $728 = HEAP32[$727>>2]|0;
    $732 = $728;
   } else {
    $732 = 8;
   }
   $729 = $40;
   $730 = $52;
   $731 = (($729) + ($730<<2)|0);
   HEAP32[$731>>2] = $732;
   $733 = $40;
   $734 = $52;
   $735 = (($733) + ($734<<2)|0);
   $736 = HEAP32[$735>>2]|0;
   $737 = $70;
   $738 = $737 << 3;
   $739 = Math_imul($736, $738)|0;
   $740 = $39;
   $741 = $52;
   $742 = (($740) + ($741<<2)|0);
   $743 = HEAP32[$742>>2]|0;
   $744 = $71;
   $745 = (($743) + ($744))|0;
   $746 = ($739|0)>=($745|0);
   $747 = $746&1;
   $748 = $41;
   $749 = $52;
   $750 = (($748) + ($749<<2)|0);
   HEAP32[$750>>2] = $747;
   $751 = $42;
   $752 = $40;
   $753 = $52;
   $754 = (($752) + ($753<<2)|0);
   $755 = HEAP32[$754>>2]|0;
   $756 = Math_imul($751, $755)|0;
   $757 = $756 << 3;
   $758 = $39;
   $759 = $52;
   $760 = (($758) + ($759<<2)|0);
   $761 = HEAP32[$760>>2]|0;
   $762 = (($761) - ($757))|0;
   HEAP32[$760>>2] = $762;
  } else {
   $763 = $42;
   $764 = $763 << 3;
   $765 = (($577) - ($764))|0;
   $766 = (0)>($765|0);
   if ($766) {
    $771 = 0;
   } else {
    $767 = $74;
    $768 = $42;
    $769 = $768 << 3;
    $770 = (($767) - ($769))|0;
    $771 = $770;
   }
   $73 = $771;
   $772 = $74;
   $773 = $73;
   $774 = (($772) - ($773))|0;
   $775 = $39;
   $776 = $52;
   $777 = (($775) + ($776<<2)|0);
   HEAP32[$777>>2] = $774;
   $778 = $40;
   $779 = $52;
   $780 = (($778) + ($779<<2)|0);
   HEAP32[$780>>2] = 0;
   $781 = $41;
   $782 = $52;
   $783 = (($781) + ($782<<2)|0);
   HEAP32[$783>>2] = 1;
  }
  $784 = $73;
  $785 = ($784|0)>(0);
  if ($785) {
   $786 = $73;
   $787 = $54;
   $788 = (($787) + 3)|0;
   $789 = $786 >> $788;
   $790 = $40;
   $791 = $52;
   $792 = (($790) + ($791<<2)|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = (8 - ($793))|0;
   $795 = ($789|0)<($794|0);
   if ($795) {
    $796 = $73;
    $797 = $54;
    $798 = (($797) + 3)|0;
    $799 = $796 >> $798;
    $805 = $799;
   } else {
    $800 = $40;
    $801 = $52;
    $802 = (($800) + ($801<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (8 - ($803))|0;
    $805 = $804;
   }
   $75 = $805;
   $806 = $75;
   $807 = $40;
   $808 = $52;
   $809 = (($807) + ($808<<2)|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = (($810) + ($806))|0;
   HEAP32[$809>>2] = $811;
   $812 = $75;
   $813 = $42;
   $814 = Math_imul($812, $813)|0;
   $815 = $814 << 3;
   $76 = $815;
   $816 = $76;
   $817 = $73;
   $818 = $60;
   $819 = (($817) - ($818))|0;
   $820 = ($816|0)>=($819|0);
   $821 = $820&1;
   $822 = $41;
   $823 = $52;
   $824 = (($822) + ($823<<2)|0);
   HEAP32[$824>>2] = $821;
   $825 = $76;
   $826 = $73;
   $827 = (($826) - ($825))|0;
   $73 = $827;
  }
  $828 = $73;
  $60 = $828;
  $829 = $52;
  $830 = (($829) + 1)|0;
  $52 = $830;
 }
 $831 = $60;
 $832 = $33;
 HEAP32[$832>>2] = $831;
 while(1) {
  $833 = $52;
  $834 = $26;
  $835 = ($833|0)<($834|0);
  if (!($835)) {
   break;
  }
  $836 = $39;
  $837 = $52;
  $838 = (($836) + ($837<<2)|0);
  $839 = HEAP32[$838>>2]|0;
  $840 = $54;
  $841 = $839 >> $840;
  $842 = $841 >> 3;
  $843 = $40;
  $844 = $52;
  $845 = (($843) + ($844<<2)|0);
  HEAP32[$845>>2] = $842;
  $846 = $39;
  $847 = $52;
  $848 = (($846) + ($847<<2)|0);
  HEAP32[$848>>2] = 0;
  $849 = $40;
  $850 = $52;
  $851 = (($849) + ($850<<2)|0);
  $852 = HEAP32[$851>>2]|0;
  $853 = ($852|0)<(1);
  $854 = $853&1;
  $855 = $41;
  $856 = $52;
  $857 = (($855) + ($856<<2)|0);
  HEAP32[$857>>2] = $854;
  $858 = $52;
  $859 = (($858) + 1)|0;
  $52 = $859;
 }
 $860 = $55;
 STACKTOP = sp;return ($860|0);
}
function _celt_udiv_137($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _alg_quant($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul24 = 0, $$alloca_mul26 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0;
 var $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0;
 var $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0;
 var $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0;
 var $188 = 0.0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $28 = $7;
 $29 = (_llvm_stacksave()|0);
 $20 = $29;
 $$alloca_mul = $28<<2;
 $30 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $31 = $7;
 $$alloca_mul24 = $31<<2;
 $32 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul24)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul24)|0)+15)&-16)|0);;
 $33 = $7;
 $$alloca_mul26 = $33<<2;
 $34 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul26)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul26)|0)+15)&-16)|0);;
 $35 = $6;
 $36 = $7;
 $37 = $10;
 $38 = $8;
 $39 = $9;
 _exp_rotation($35,$36,1,$37,$38,$39);
 $16 = 0.0;
 $13 = 0;
 while(1) {
  $40 = $6;
  $41 = $13;
  $42 = (($40) + ($41<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $43 > 0.0;
  $45 = $13;
  $46 = (($34) + ($45<<2)|0);
  if ($44) {
   HEAPF32[$46>>2] = 1.0;
  } else {
   HEAPF32[$46>>2] = -1.0;
   $47 = $6;
   $48 = $13;
   $49 = (($47) + ($48<<2)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = - $50;
   $52 = $6;
   $53 = $13;
   $54 = (($52) + ($53<<2)|0);
   HEAPF32[$54>>2] = $51;
  }
  $55 = $13;
  $56 = (($32) + ($55<<2)|0);
  HEAP32[$56>>2] = 0;
  $57 = $13;
  $58 = (($30) + ($57<<2)|0);
  HEAPF32[$58>>2] = 0.0;
  $59 = $13;
  $60 = (($59) + 1)|0;
  $13 = $60;
  $61 = $7;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
 }
 $18 = 0.0;
 $17 = 0.0;
 $63 = $8;
 $15 = $63;
 $64 = $8;
 $65 = $7;
 $66 = $65 >> 1;
 $67 = ($64|0)>($66|0);
 if ($67) {
  $13 = 0;
  while(1) {
   $68 = $6;
   $69 = $13;
   $70 = (($68) + ($69<<2)|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $16;
   $73 = $72 + $71;
   $16 = $73;
   $74 = $13;
   $75 = (($74) + 1)|0;
   $13 = $75;
   $76 = $7;
   $77 = ($75|0)<($76|0);
   if (!($77)) {
    break;
   }
  }
  $78 = $16;
  $79 = $78 > 1.0000000036274937E-15;
  $80 = $16;
  $81 = $80 < 64.0;
  $or$cond = $79 & $81;
  if (!($or$cond)) {
   $82 = $6;
   HEAPF32[$82>>2] = 1.0;
   $13 = 1;
   while(1) {
    $83 = $6;
    $84 = $13;
    $85 = (($83) + ($84<<2)|0);
    HEAPF32[$85>>2] = 0.0;
    $86 = $13;
    $87 = (($86) + 1)|0;
    $13 = $87;
    $88 = $7;
    $89 = ($87|0)<($88|0);
    if (!($89)) {
     break;
    }
   }
   $16 = 1.0;
  }
  $90 = $8;
  $91 = (($90) - 1)|0;
  $92 = (+($91|0));
  $93 = $16;
  $94 = 1.0 / $93;
  $95 = $92 * $94;
  $21 = $95;
  $13 = 0;
  while(1) {
   $96 = $21;
   $97 = $6;
   $98 = $13;
   $99 = (($97) + ($98<<2)|0);
   $100 = +HEAPF32[$99>>2];
   $101 = $96 * $100;
   $102 = $101;
   $103 = (+Math_floor((+$102)));
   $104 = (~~(($103)));
   $105 = $13;
   $106 = (($32) + ($105<<2)|0);
   HEAP32[$106>>2] = $104;
   $107 = $13;
   $108 = (($32) + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (+($109|0));
   $111 = $13;
   $112 = (($30) + ($111<<2)|0);
   HEAPF32[$112>>2] = $110;
   $113 = $18;
   $114 = $13;
   $115 = (($30) + ($114<<2)|0);
   $116 = +HEAPF32[$115>>2];
   $117 = $13;
   $118 = (($30) + ($117<<2)|0);
   $119 = +HEAPF32[$118>>2];
   $120 = $116 * $119;
   $121 = $113 + $120;
   $18 = $121;
   $122 = $17;
   $123 = $6;
   $124 = $13;
   $125 = (($123) + ($124<<2)|0);
   $126 = +HEAPF32[$125>>2];
   $127 = $13;
   $128 = (($30) + ($127<<2)|0);
   $129 = +HEAPF32[$128>>2];
   $130 = $126 * $129;
   $131 = $122 + $130;
   $17 = $131;
   $132 = $13;
   $133 = (($30) + ($132<<2)|0);
   $134 = +HEAPF32[$133>>2];
   $135 = $134 * 2.0;
   HEAPF32[$133>>2] = $135;
   $136 = $13;
   $137 = (($32) + ($136<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $15;
   $140 = (($139) - ($138))|0;
   $15 = $140;
   $141 = $13;
   $142 = (($141) + 1)|0;
   $13 = $142;
   $143 = $7;
   $144 = ($142|0)<($143|0);
   if (!($144)) {
    break;
   }
  }
 }
 $145 = $15;
 $146 = $7;
 $147 = (($146) + 3)|0;
 $148 = ($145|0)>($147|0);
 if ($148) {
  $149 = $15;
  $150 = (+($149|0));
  $22 = $150;
  $151 = $18;
  $152 = $22;
  $153 = $22;
  $154 = $152 * $153;
  $155 = $151 + $154;
  $18 = $155;
  $156 = $18;
  $157 = $22;
  $158 = +HEAPF32[$30>>2];
  $159 = $157 * $158;
  $160 = $156 + $159;
  $18 = $160;
  $161 = $15;
  $162 = HEAP32[$32>>2]|0;
  $163 = (($162) + ($161))|0;
  HEAP32[$32>>2] = $163;
  $15 = 0;
 }
 $14 = 1.0;
 $12 = 0;
 while(1) {
  $164 = $12;
  $165 = $15;
  $166 = ($164|0)<($165|0);
  if (!($166)) {
   break;
  }
  $24 = -999999986991104.0;
  $25 = 0.0;
  $23 = 0;
  $167 = $18;
  $168 = $167 + 1.0;
  $18 = $168;
  $13 = 0;
  while(1) {
   $169 = $17;
   $170 = $6;
   $171 = $13;
   $172 = (($170) + ($171<<2)|0);
   $173 = +HEAPF32[$172>>2];
   $174 = $169 + $173;
   $26 = $174;
   $175 = $18;
   $176 = $13;
   $177 = (($30) + ($176<<2)|0);
   $178 = +HEAPF32[$177>>2];
   $179 = $175 + $178;
   $27 = $179;
   $180 = $26;
   $181 = $26;
   $182 = $180 * $181;
   $26 = $182;
   $183 = $25;
   $184 = $26;
   $185 = $183 * $184;
   $186 = $27;
   $187 = $24;
   $188 = $186 * $187;
   $189 = $185 > $188;
   if ($189) {
    $190 = $27;
    $25 = $190;
    $191 = $26;
    $24 = $191;
    $192 = $13;
    $23 = $192;
   }
   $193 = $13;
   $194 = (($193) + 1)|0;
   $13 = $194;
   $195 = $7;
   $196 = ($194|0)<($195|0);
   if (!($196)) {
    break;
   }
  }
  $197 = $17;
  $198 = $6;
  $199 = $23;
  $200 = (($198) + ($199<<2)|0);
  $201 = +HEAPF32[$200>>2];
  $202 = $197 + $201;
  $17 = $202;
  $203 = $18;
  $204 = $23;
  $205 = (($30) + ($204<<2)|0);
  $206 = +HEAPF32[$205>>2];
  $207 = $203 + $206;
  $18 = $207;
  $208 = $14;
  $209 = 2.0 * $208;
  $210 = $23;
  $211 = (($30) + ($210<<2)|0);
  $212 = +HEAPF32[$211>>2];
  $213 = $212 + $209;
  HEAPF32[$211>>2] = $213;
  $214 = $23;
  $215 = (($32) + ($214<<2)|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + 1)|0;
  HEAP32[$215>>2] = $217;
  $218 = $12;
  $219 = (($218) + 1)|0;
  $12 = $219;
 }
 $13 = 0;
 while(1) {
  $220 = $13;
  $221 = (($34) + ($220<<2)|0);
  $222 = +HEAPF32[$221>>2];
  $223 = $6;
  $224 = $13;
  $225 = (($223) + ($224<<2)|0);
  $226 = +HEAPF32[$225>>2];
  $227 = $222 * $226;
  $228 = $6;
  $229 = $13;
  $230 = (($228) + ($229<<2)|0);
  HEAPF32[$230>>2] = $227;
  $231 = $13;
  $232 = (($34) + ($231<<2)|0);
  $233 = +HEAPF32[$232>>2];
  $234 = $233 < 0.0;
  if ($234) {
   $235 = $13;
   $236 = (($32) + ($235<<2)|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (0 - ($237))|0;
   $239 = $13;
   $240 = (($32) + ($239<<2)|0);
   HEAP32[$240>>2] = $238;
  }
  $241 = $13;
  $242 = (($241) + 1)|0;
  $13 = $242;
  $243 = $7;
  $244 = ($242|0)<($243|0);
  if (!($244)) {
   break;
  }
 }
 $245 = $7;
 $246 = $8;
 $247 = $11;
 _encode_pulses($32,$245,$246,$247);
 $248 = $7;
 $249 = $10;
 $250 = (_extract_collapse_mask($32,$248,$249)|0);
 $19 = $250;
 $251 = $19;
 $252 = $20;
 _llvm_stackrestore(($252|0));
 STACKTOP = sp;return ($251|0);
}
function _exp_rotation($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = 0;
 $19 = $10;
 $20 = $19<<1;
 $21 = $7;
 $22 = ($20|0)>=($21|0);
 $23 = $11;
 $24 = ($23|0)==(0);
 $or$cond = $22 | $24;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $25 = $11;
 $26 = (($25) - 1)|0;
 $27 = (16636 + ($26<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $18 = $28;
 $29 = $7;
 $30 = (+($29|0));
 $31 = 1.0 * $30;
 $32 = $7;
 $33 = $18;
 $34 = $10;
 $35 = Math_imul($33, $34)|0;
 $36 = (($32) + ($35))|0;
 $37 = (+($36|0));
 $38 = $31 / $37;
 $15 = $38;
 $39 = $15;
 $40 = $15;
 $41 = $39 * $40;
 $42 = 0.5 * $41;
 $16 = $42;
 $43 = $16;
 $44 = 1.5707963705062866 * $43;
 $45 = $44;
 $46 = (+Math_cos((+$45)));
 $47 = $46;
 $13 = $47;
 $48 = $16;
 $49 = 1.0 - $48;
 $50 = 1.5707963705062866 * $49;
 $51 = $50;
 $52 = (+Math_cos((+$51)));
 $53 = $52;
 $14 = $53;
 $54 = $7;
 $55 = $9;
 $56 = $55<<3;
 $57 = ($54|0)>=($56|0);
 L4: do {
  if ($57) {
   $17 = 1;
   while(1) {
    $58 = $17;
    $59 = $17;
    $60 = Math_imul($58, $59)|0;
    $61 = $17;
    $62 = (($60) + ($61))|0;
    $63 = $9;
    $64 = Math_imul($62, $63)|0;
    $65 = $9;
    $66 = $65 >> 2;
    $67 = (($64) + ($66))|0;
    $68 = $7;
    $69 = ($67|0)<($68|0);
    if (!($69)) {
     break L4;
    }
    $70 = $17;
    $71 = (($70) + 1)|0;
    $17 = $71;
   }
  }
 } while(0);
 $72 = $7;
 $73 = $9;
 $74 = (_celt_udiv_138($72,$73)|0);
 $7 = $74;
 $12 = 0;
 while(1) {
  $75 = $12;
  $76 = $9;
  $77 = ($75|0)<($76|0);
  if (!($77)) {
   break;
  }
  $78 = $8;
  $79 = ($78|0)<(0);
  if ($79) {
   $80 = $17;
   $81 = ($80|0)!=(0);
   if ($81) {
    $82 = $6;
    $83 = $12;
    $84 = $7;
    $85 = Math_imul($83, $84)|0;
    $86 = (($82) + ($85<<2)|0);
    $87 = $7;
    $88 = $17;
    $89 = $14;
    $90 = $13;
    _exp_rotation1($86,$87,$88,$89,$90);
   }
   $91 = $6;
   $92 = $12;
   $93 = $7;
   $94 = Math_imul($92, $93)|0;
   $95 = (($91) + ($94<<2)|0);
   $96 = $7;
   $97 = $13;
   $98 = $14;
   _exp_rotation1($95,$96,1,$97,$98);
  } else {
   $99 = $6;
   $100 = $12;
   $101 = $7;
   $102 = Math_imul($100, $101)|0;
   $103 = (($99) + ($102<<2)|0);
   $104 = $7;
   $105 = $13;
   $106 = $14;
   $107 = - $106;
   _exp_rotation1($103,$104,1,$105,$107);
   $108 = $17;
   $109 = ($108|0)!=(0);
   if ($109) {
    $110 = $6;
    $111 = $12;
    $112 = $7;
    $113 = Math_imul($111, $112)|0;
    $114 = (($110) + ($113<<2)|0);
    $115 = $7;
    $116 = $17;
    $117 = $14;
    $118 = $13;
    $119 = - $118;
    _exp_rotation1($114,$115,$116,$117,$119);
   }
  }
  $120 = $12;
  $121 = (($120) + 1)|0;
  $12 = $121;
 }
 STACKTOP = sp;return;
}
function _extract_collapse_mask($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $6;
 $13 = ($12|0)<=(1);
 if ($13) {
  $3 = 1;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 $14 = $5;
 $15 = $6;
 $16 = (_celt_udiv_138($14,$15)|0);
 $8 = $16;
 $7 = 0;
 $9 = 0;
 while(1) {
  $11 = 0;
  $10 = 0;
  while(1) {
   $17 = $4;
   $18 = $9;
   $19 = $8;
   $20 = Math_imul($18, $19)|0;
   $21 = $10;
   $22 = (($20) + ($21))|0;
   $23 = (($17) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $11;
   $26 = $25 | $24;
   $11 = $26;
   $27 = $10;
   $28 = (($27) + 1)|0;
   $10 = $28;
   $29 = $8;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
  }
  $31 = $11;
  $32 = ($31|0)!=(0);
  $33 = $32&1;
  $34 = $9;
  $35 = $33 << $34;
  $36 = $7;
  $37 = $36 | $35;
  $7 = $37;
  $38 = $9;
  $39 = (($38) + 1)|0;
  $9 = $39;
  $40 = $6;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
 }
 $42 = $7;
 $3 = $42;
 $43 = $3;
 STACKTOP = sp;return ($43|0);
}
function _celt_udiv_138($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _exp_rotation1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = $5;
 $12 = $17;
 $18 = $9;
 $19 = - $18;
 $11 = $19;
 $10 = 0;
 while(1) {
  $20 = $10;
  $21 = $6;
  $22 = $7;
  $23 = (($21) - ($22))|0;
  $24 = ($20|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $12;
  $26 = +HEAPF32[$25>>2];
  $13 = $26;
  $27 = $12;
  $28 = $7;
  $29 = (($27) + ($28<<2)|0);
  $30 = +HEAPF32[$29>>2];
  $14 = $30;
  $31 = $8;
  $32 = $14;
  $33 = $31 * $32;
  $34 = $9;
  $35 = $13;
  $36 = $34 * $35;
  $37 = $33 + $36;
  $38 = $12;
  $39 = $7;
  $40 = (($38) + ($39<<2)|0);
  HEAPF32[$40>>2] = $37;
  $41 = $8;
  $42 = $13;
  $43 = $41 * $42;
  $44 = $11;
  $45 = $14;
  $46 = $44 * $45;
  $47 = $43 + $46;
  $48 = $12;
  $49 = ((($48)) + 4|0);
  $12 = $49;
  HEAPF32[$48>>2] = $47;
  $50 = $10;
  $51 = (($50) + 1)|0;
  $10 = $51;
 }
 $52 = $5;
 $53 = $6;
 $54 = $7;
 $55 = $54<<1;
 $56 = (($53) - ($55))|0;
 $57 = (($56) - 1)|0;
 $58 = (($52) + ($57<<2)|0);
 $12 = $58;
 $59 = $6;
 $60 = $7;
 $61 = $60<<1;
 $62 = (($59) - ($61))|0;
 $63 = (($62) - 1)|0;
 $10 = $63;
 while(1) {
  $64 = $10;
  $65 = ($64|0)>=(0);
  if (!($65)) {
   break;
  }
  $66 = $12;
  $67 = +HEAPF32[$66>>2];
  $15 = $67;
  $68 = $12;
  $69 = $7;
  $70 = (($68) + ($69<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $16 = $71;
  $72 = $8;
  $73 = $16;
  $74 = $72 * $73;
  $75 = $9;
  $76 = $15;
  $77 = $75 * $76;
  $78 = $74 + $77;
  $79 = $12;
  $80 = $7;
  $81 = (($79) + ($80<<2)|0);
  HEAPF32[$81>>2] = $78;
  $82 = $8;
  $83 = $15;
  $84 = $82 * $83;
  $85 = $11;
  $86 = $16;
  $87 = $85 * $86;
  $88 = $84 + $87;
  $89 = $12;
  $90 = ((($89)) + -4|0);
  $12 = $90;
  HEAPF32[$89>>2] = $88;
  $91 = $10;
  $92 = (($91) + -1)|0;
  $10 = $92;
 }
 STACKTOP = sp;return;
}
function _alg_unquant($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $8;
 $18 = (_llvm_stacksave()|0);
 $16 = $18;
 $$alloca_mul = $17<<2;
 $19 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $20 = $8;
 $21 = $9;
 $22 = $12;
 $23 = (+_decode_pulses($19,$20,$21,$22));
 $14 = $23;
 $24 = $7;
 $25 = $8;
 $26 = $14;
 $27 = $13;
 _normalise_residual($19,$24,$25,$26,$27);
 $28 = $7;
 $29 = $8;
 $30 = $11;
 $31 = $9;
 $32 = $10;
 _exp_rotation($28,$29,-1,$30,$31,$32);
 $33 = $8;
 $34 = $11;
 $35 = (_extract_collapse_mask($19,$33,$34)|0);
 $15 = $35;
 $36 = $15;
 $37 = $16;
 _llvm_stackrestore(($37|0));
 STACKTOP = sp;return ($36|0);
}
function _normalise_residual($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $8;
 $11 = $13;
 $14 = $11;
 $15 = $14;
 $16 = (+Math_sqrt((+$15)));
 $17 = $16;
 $18 = 1.0 / $17;
 $19 = $9;
 $20 = $18 * $19;
 $12 = $20;
 $10 = 0;
 while(1) {
  $21 = $12;
  $22 = $5;
  $23 = $10;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (+($25|0));
  $27 = $21 * $26;
  $28 = $6;
  $29 = $10;
  $30 = (($28) + ($29<<2)|0);
  HEAPF32[$30>>2] = $27;
  $31 = $10;
  $32 = (($31) + 1)|0;
  $10 = $32;
  $33 = $7;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _renormalise_vector($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = $4;
 $15 = $5;
 $16 = (+_celt_inner_prod_c_141($13,$14,$15));
 $17 = 1.0000000036274937E-15 + $16;
 $9 = $17;
 $18 = $9;
 $11 = $18;
 $19 = $11;
 $20 = $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = $21;
 $23 = 1.0 / $22;
 $24 = $6;
 $25 = $23 * $24;
 $10 = $25;
 $26 = $4;
 $12 = $26;
 $8 = 0;
 while(1) {
  $27 = $8;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $10;
  $31 = $12;
  $32 = +HEAPF32[$31>>2];
  $33 = $30 * $32;
  $34 = $12;
  HEAPF32[$34>>2] = $33;
  $35 = $12;
  $36 = ((($35)) + 4|0);
  $12 = $36;
  $37 = $8;
  $38 = (($37) + 1)|0;
  $8 = $38;
 }
 STACKTOP = sp;return;
}
function _celt_inner_prod_c_141($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $7;
  if (!($10)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 * $19;
  $21 = $11 + $20;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 STACKTOP = sp;return (+$11);
}
function _stereo_itheta($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $15 = 1.0000000036274937E-15;
 $14 = 1.0000000036274937E-15;
 $18 = $7;
 $19 = ($18|0)!=(0);
 L1: do {
  if ($19) {
   $10 = 0;
   while(1) {
    $20 = $10;
    $21 = $8;
    $22 = ($20|0)<($21|0);
    if (!($22)) {
     break L1;
    }
    $23 = $5;
    $24 = $10;
    $25 = (($23) + ($24<<2)|0);
    $26 = +HEAPF32[$25>>2];
    $27 = $6;
    $28 = $10;
    $29 = (($27) + ($28<<2)|0);
    $30 = +HEAPF32[$29>>2];
    $31 = $26 + $30;
    $16 = $31;
    $32 = $5;
    $33 = $10;
    $34 = (($32) + ($33<<2)|0);
    $35 = +HEAPF32[$34>>2];
    $36 = $6;
    $37 = $10;
    $38 = (($36) + ($37<<2)|0);
    $39 = +HEAPF32[$38>>2];
    $40 = $35 - $39;
    $17 = $40;
    $41 = $14;
    $42 = $16;
    $43 = $16;
    $44 = $42 * $43;
    $45 = $41 + $44;
    $14 = $45;
    $46 = $15;
    $47 = $17;
    $48 = $17;
    $49 = $47 * $48;
    $50 = $46 + $49;
    $15 = $50;
    $51 = $10;
    $52 = (($51) + 1)|0;
    $10 = $52;
   }
  } else {
   $53 = $5;
   $54 = $5;
   $55 = $8;
   $56 = (+_celt_inner_prod_c_141($53,$54,$55));
   $57 = $14;
   $58 = $57 + $56;
   $14 = $58;
   $59 = $6;
   $60 = $6;
   $61 = $8;
   $62 = (+_celt_inner_prod_c_141($59,$60,$61));
   $63 = $15;
   $64 = $63 + $62;
   $15 = $64;
  }
 } while(0);
 $65 = $14;
 $66 = $65;
 $67 = (+Math_sqrt((+$66)));
 $68 = $67;
 $12 = $68;
 $69 = $15;
 $70 = $69;
 $71 = (+Math_sqrt((+$70)));
 $72 = $71;
 $13 = $72;
 $73 = $13;
 $74 = $73;
 $75 = $12;
 $76 = $75;
 $77 = (+Math_atan2((+$74),(+$76)));
 $78 = 10430.3818359375 * $77;
 $79 = 0.5 + $78;
 $80 = (+Math_floor((+$79)));
 $81 = (~~(($80)));
 $11 = $81;
 $82 = $11;
 STACKTOP = sp;return ($82|0);
}
function _silk_Get_Decoder_Size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 HEAP32[$3>>2] = 8544;
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _silk_InitDecoder($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $5 = $1;
 $4 = $5;
 $2 = 0;
 while(1) {
  $6 = $2;
  $7 = ($6|0)<(2);
  if (!($7)) {
   break;
  }
  $8 = $4;
  $9 = $2;
  $10 = (($8) + (($9*4260)|0)|0);
  $11 = (_silk_init_decoder($10)|0);
  $3 = $11;
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
 }
 $14 = $1;
 $15 = ((($14)) + 8520|0);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
 $16 = $1;
 $17 = ((($16)) + 8540|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 STACKTOP = sp;return ($18|0);
}
function _silk_Decode($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$alloca_mul = 0, $$alloca_mul55 = 0, $$alloca_mul57 = 0, $$sink = 0, $$sink13 = 0, $$sink18 = 0, $$sink19 = 0, $$sink21 = 0, $$sink22 = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $19 = sp + 84|0;
 $21 = sp + 76|0;
 $23 = sp + 64|0;
 $24 = sp + 56|0;
 $32 = sp + 136|0;
 $37 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 HEAP32[$19>>2] = 0;
 $20 = 0;
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;
 $38 = $9;
 $26 = $38;
 $39 = $26;
 $27 = $39;
 $40 = $12;
 $41 = ($40|0)!=(0);
 L1: do {
  if ($41) {
   $18 = 0;
   while(1) {
    $42 = $18;
    $43 = $10;
    $44 = ((($43)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($42|0)<($45|0);
    if (!($46)) {
     break L1;
    }
    $47 = $27;
    $48 = $18;
    $49 = (($47) + (($48*4260)|0)|0);
    $50 = ((($49)) + 2388|0);
    HEAP32[$50>>2] = 0;
    $51 = $18;
    $52 = (($51) + 1)|0;
    $18 = $52;
   }
  }
 } while(0);
 $53 = $10;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $26;
 $57 = ((($56)) + 8536|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($55|0)>($58|0);
 if ($59) {
  $60 = $27;
  $61 = ((($60)) + 4260|0);
  $62 = (_silk_init_decoder($61)|0);
  $63 = $20;
  $64 = (($63) + ($62))|0;
  $20 = $64;
 }
 $65 = $10;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(1);
 if ($68) {
  $69 = $26;
  $70 = ((($69)) + 8536|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)==(2);
  if ($72) {
   $73 = $10;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $27;
   $77 = ((($76)) + 2316|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78*1000)|0;
   $80 = ($75|0)==($79|0);
   $82 = $80;
  } else {
   $82 = 0;
  }
 } else {
  $82 = 0;
 }
 $81 = $82&1;
 $29 = $81;
 $83 = $27;
 $84 = ((($83)) + 2388|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0);
 L14: do {
  if ($86) {
   $18 = 0;
   L16: while(1) {
    $87 = $18;
    $88 = $10;
    $89 = ((($88)) + 4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($87|0)<($90|0);
    if (!($91)) {
     break L14;
    }
    $92 = $10;
    $93 = ((($92)) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0);
    do {
     if ($95) {
      $96 = $27;
      $97 = $18;
      $98 = (($96) + (($97*4260)|0)|0);
      $99 = ((($98)) + 2392|0);
      HEAP32[$99>>2] = 1;
      $100 = $27;
      $101 = $18;
      $102 = (($100) + (($101*4260)|0)|0);
      $$sink22 = 2;$$sink24 = $102;
     } else {
      $103 = $10;
      $104 = ((($103)) + 16|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)==(10);
      if ($106) {
       $107 = $27;
       $108 = $18;
       $109 = (($107) + (($108*4260)|0)|0);
       $110 = ((($109)) + 2392|0);
       HEAP32[$110>>2] = 1;
       $111 = $27;
       $112 = $18;
       $113 = (($111) + (($112*4260)|0)|0);
       $$sink22 = 2;$$sink24 = $113;
       break;
      }
      $114 = $10;
      $115 = ((($114)) + 16|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(20);
      if ($117) {
       $118 = $27;
       $119 = $18;
       $120 = (($118) + (($119*4260)|0)|0);
       $121 = ((($120)) + 2392|0);
       HEAP32[$121>>2] = 1;
       $122 = $27;
       $123 = $18;
       $124 = (($122) + (($123*4260)|0)|0);
       $$sink22 = 4;$$sink24 = $124;
       break;
      }
      $125 = $10;
      $126 = ((($125)) + 16|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(40);
      if ($128) {
       $129 = $27;
       $130 = $18;
       $131 = (($129) + (($130*4260)|0)|0);
       $132 = ((($131)) + 2392|0);
       HEAP32[$132>>2] = 2;
       $133 = $27;
       $134 = $18;
       $135 = (($133) + (($134*4260)|0)|0);
       $$sink22 = 4;$$sink24 = $135;
       break;
      }
      $136 = $10;
      $137 = ((($136)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(60);
      if (!($139)) {
       label = 23;
       break L16;
      }
      $140 = $27;
      $141 = $18;
      $142 = (($140) + (($141*4260)|0)|0);
      $143 = ((($142)) + 2392|0);
      HEAP32[$143>>2] = 3;
      $144 = $27;
      $145 = $18;
      $146 = (($144) + (($145*4260)|0)|0);
      $$sink22 = 4;$$sink24 = $146;
     }
    } while(0);
    $147 = ((($$sink24)) + 2324|0);
    HEAP32[$147>>2] = $$sink22;
    $148 = $10;
    $149 = ((($148)) + 12|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $150 >> 10;
    $152 = (($151) + 1)|0;
    $31 = $152;
    $153 = $31;
    $154 = ($153|0)!=(8);
    $155 = $31;
    $156 = ($155|0)!=(12);
    $or$cond = $154 & $156;
    $157 = $31;
    $158 = ($157|0)!=(16);
    $or$cond3 = $or$cond & $158;
    if ($or$cond3) {
     label = 25;
     break;
    }
    $159 = $27;
    $160 = $18;
    $161 = (($159) + (($160*4260)|0)|0);
    $162 = $31;
    $163 = $10;
    $164 = ((($163)) + 8|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (_silk_decoder_set_fs($161,$162,$165)|0);
    $167 = $20;
    $168 = (($167) + ($166))|0;
    $20 = $168;
    $169 = $18;
    $170 = (($169) + 1)|0;
    $18 = $170;
   }
   if ((label|0) == 23) {
    $8 = -203;
    $806 = $8;
    STACKTOP = sp;return ($806|0);
   }
   else if ((label|0) == 25) {
    $8 = -200;
    $806 = $8;
    STACKTOP = sp;return ($806|0);
   }
  }
 } while(0);
 $171 = $10;
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)==(2);
 do {
  if ($173) {
   $174 = $10;
   $175 = ((($174)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($176|0)==(2);
   if ($177) {
    $178 = $26;
    $179 = ((($178)) + 8532|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)==(1);
    if (!($181)) {
     $182 = $26;
     $183 = ((($182)) + 8536|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)==(1);
     if (!($185)) {
      break;
     }
    }
    $186 = $26;
    $187 = ((($186)) + 8520|0);
    ;HEAP32[$187>>2]=0|0;
    $188 = $26;
    $189 = ((($188)) + 8520|0);
    $190 = ((($189)) + 8|0);
    ;HEAP32[$190>>2]=0|0;
    $191 = $27;
    $192 = ((($191)) + 4260|0);
    $193 = ((($192)) + 2432|0);
    $194 = $27;
    $195 = ((($194)) + 2432|0);
    _memcpy(($193|0),($195|0),300)|0;
   }
  }
 } while(0);
 $196 = $10;
 $197 = HEAP32[$196>>2]|0;
 $198 = $26;
 $199 = ((($198)) + 8532|0);
 HEAP32[$199>>2] = $197;
 $200 = $10;
 $201 = ((($200)) + 4|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = $26;
 $204 = ((($203)) + 8536|0);
 HEAP32[$204>>2] = $202;
 $205 = $10;
 $206 = ((($205)) + 8|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)>(48000);
 if (!($208)) {
  $209 = $10;
  $210 = ((($209)) + 8|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = ($211|0)<(8000);
  if (!($212)) {
   $214 = $11;
   $215 = ($214|0)!=(1);
   L50: do {
    if ($215) {
     $216 = $27;
     $217 = ((($216)) + 2388|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0);
     if ($219) {
      $18 = 0;
      while(1) {
       $220 = $18;
       $221 = $10;
       $222 = ((($221)) + 4|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($220|0)<($223|0);
       if (!($224)) {
        break;
       }
       $17 = 0;
       while(1) {
        $225 = $17;
        $226 = $27;
        $227 = $18;
        $228 = (($226) + (($227*4260)|0)|0);
        $229 = ((($228)) + 2392|0);
        $230 = HEAP32[$229>>2]|0;
        $231 = ($225|0)<($230|0);
        $232 = $13;
        $233 = (_ec_dec_bit_logp($232,1)|0);
        $234 = $27;
        $235 = $18;
        $236 = (($234) + (($235*4260)|0)|0);
        if (!($231)) {
         break;
        }
        $237 = ((($236)) + 2404|0);
        $238 = $17;
        $239 = (($237) + ($238<<2)|0);
        HEAP32[$239>>2] = $233;
        $240 = $17;
        $241 = (($240) + 1)|0;
        $17 = $241;
       }
       $242 = ((($236)) + 2416|0);
       HEAP32[$242>>2] = $233;
       $243 = $18;
       $244 = (($243) + 1)|0;
       $18 = $244;
      }
      $18 = 0;
      while(1) {
       $245 = $18;
       $246 = $10;
       $247 = ((($246)) + 4|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = ($245|0)<($248|0);
       if (!($249)) {
        break;
       }
       $250 = $27;
       $251 = $18;
       $252 = (($250) + (($251*4260)|0)|0);
       $253 = ((($252)) + 2420|0);
       ;HEAP32[$253>>2]=0|0;HEAP32[$253+4>>2]=0|0;HEAP32[$253+8>>2]=0|0;
       $254 = $27;
       $255 = $18;
       $256 = (($254) + (($255*4260)|0)|0);
       $257 = ((($256)) + 2416|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = ($258|0)!=(0);
       L64: do {
        if ($259) {
         $260 = $27;
         $261 = $18;
         $262 = (($260) + (($261*4260)|0)|0);
         $263 = ((($262)) + 2392|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = ($264|0)==(1);
         if ($265) {
          $266 = $27;
          $267 = $18;
          $268 = (($266) + (($267*4260)|0)|0);
          $269 = ((($268)) + 2420|0);
          HEAP32[$269>>2] = 1;
          break;
         }
         $270 = $13;
         $271 = $27;
         $272 = $18;
         $273 = (($271) + (($272*4260)|0)|0);
         $274 = ((($273)) + 2392|0);
         $275 = HEAP32[$274>>2]|0;
         $276 = (($275) - 2)|0;
         $277 = (16804 + ($276<<2)|0);
         $278 = HEAP32[$277>>2]|0;
         $279 = (_ec_dec_icdf($270,$278,8)|0);
         $280 = (($279) + 1)|0;
         $22 = $280;
         $17 = 0;
         while(1) {
          $281 = $17;
          $282 = $27;
          $283 = $18;
          $284 = (($282) + (($283*4260)|0)|0);
          $285 = ((($284)) + 2392|0);
          $286 = HEAP32[$285>>2]|0;
          $287 = ($281|0)<($286|0);
          if (!($287)) {
           break L64;
          }
          $288 = $22;
          $289 = $17;
          $290 = $288 >> $289;
          $291 = $290 & 1;
          $292 = $27;
          $293 = $18;
          $294 = (($292) + (($293*4260)|0)|0);
          $295 = ((($294)) + 2420|0);
          $296 = $17;
          $297 = (($295) + ($296<<2)|0);
          HEAP32[$297>>2] = $291;
          $298 = $17;
          $299 = (($298) + 1)|0;
          $17 = $299;
         }
        }
       } while(0);
       $300 = $18;
       $301 = (($300) + 1)|0;
       $18 = $301;
      }
      $302 = $11;
      $303 = ($302|0)==(0);
      if ($303) {
       $17 = 0;
       while(1) {
        $304 = $17;
        $305 = $27;
        $306 = ((($305)) + 2392|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = ($304|0)<($307|0);
        if (!($308)) {
         break L50;
        }
        $18 = 0;
        while(1) {
         $309 = $18;
         $310 = $10;
         $311 = ((($310)) + 4|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = ($309|0)<($312|0);
         if (!($313)) {
          break;
         }
         $314 = $27;
         $315 = $18;
         $316 = (($314) + (($315*4260)|0)|0);
         $317 = ((($316)) + 2420|0);
         $318 = $17;
         $319 = (($317) + ($318<<2)|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = ($320|0)!=(0);
         if ($321) {
          $322 = $10;
          $323 = ((($322)) + 4|0);
          $324 = HEAP32[$323>>2]|0;
          $325 = ($324|0)==(2);
          $326 = $18;
          $327 = ($326|0)==(0);
          $or$cond5 = $325 & $327;
          do {
           if ($or$cond5) {
            $328 = $13;
            _silk_stereo_decode_pred($328,$24);
            $329 = $27;
            $330 = ((($329)) + 4260|0);
            $331 = ((($330)) + 2420|0);
            $332 = $17;
            $333 = (($331) + ($332<<2)|0);
            $334 = HEAP32[$333>>2]|0;
            $335 = ($334|0)==(0);
            if (!($335)) {
             break;
            }
            $336 = $13;
            _silk_stereo_decode_mid_only($336,$19);
           }
          } while(0);
          $337 = $17;
          $338 = ($337|0)>(0);
          do {
           if ($338) {
            $339 = $27;
            $340 = $18;
            $341 = (($339) + (($340*4260)|0)|0);
            $342 = ((($341)) + 2420|0);
            $343 = $17;
            $344 = (($343) - 1)|0;
            $345 = (($342) + ($344<<2)|0);
            $346 = HEAP32[$345>>2]|0;
            $347 = ($346|0)!=(0);
            if (!($347)) {
             label = 64;
             break;
            }
            $33 = 2;
           } else {
            label = 64;
           }
          } while(0);
          if ((label|0) == 64) {
           label = 0;
           $33 = 0;
          }
          $348 = $27;
          $349 = $18;
          $350 = (($348) + (($349*4260)|0)|0);
          $351 = $13;
          $352 = $17;
          $353 = $33;
          _silk_decode_indices($350,$351,$352,1,$353);
          $354 = $13;
          $355 = $27;
          $356 = $18;
          $357 = (($355) + (($356*4260)|0)|0);
          $358 = ((($357)) + 2736|0);
          $359 = ((($358)) + 29|0);
          $360 = HEAP8[$359>>0]|0;
          $361 = $360 << 24 >> 24;
          $362 = $27;
          $363 = $18;
          $364 = (($362) + (($363*4260)|0)|0);
          $365 = ((($364)) + 2736|0);
          $366 = ((($365)) + 30|0);
          $367 = HEAP8[$366>>0]|0;
          $368 = $367 << 24 >> 24;
          $369 = $27;
          $370 = $18;
          $371 = (($369) + (($370*4260)|0)|0);
          $372 = ((($371)) + 2328|0);
          $373 = HEAP32[$372>>2]|0;
          _silk_decode_pulses($354,$32,$361,$368,$373);
         }
         $374 = $18;
         $375 = (($374) + 1)|0;
         $18 = $375;
        }
        $376 = $17;
        $377 = (($376) + 1)|0;
        $17 = $377;
       }
      }
     }
    }
   } while(0);
   $378 = $10;
   $379 = ((($378)) + 4|0);
   $380 = HEAP32[$379>>2]|0;
   $381 = ($380|0)==(2);
   L96: do {
    if ($381) {
     $382 = $11;
     $383 = ($382|0)==(0);
     do {
      if (!($383)) {
       $384 = $11;
       $385 = ($384|0)==(2);
       if ($385) {
        $386 = $27;
        $387 = ((($386)) + 2420|0);
        $388 = $27;
        $389 = ((($388)) + 2388|0);
        $390 = HEAP32[$389>>2]|0;
        $391 = (($387) + ($390<<2)|0);
        $392 = HEAP32[$391>>2]|0;
        $393 = ($392|0)==(1);
        if ($393) {
         break;
        }
       }
       $18 = 0;
       while(1) {
        $418 = $18;
        $419 = ($418|0)<(2);
        if (!($419)) {
         break L96;
        }
        $420 = $26;
        $421 = ((($420)) + 8520|0);
        $422 = $18;
        $423 = (($421) + ($422<<1)|0);
        $424 = HEAP16[$423>>1]|0;
        $425 = $424 << 16 >> 16;
        $426 = $18;
        $427 = (($24) + ($426<<2)|0);
        HEAP32[$427>>2] = $425;
        $428 = $18;
        $429 = (($428) + 1)|0;
        $18 = $429;
       }
      }
     } while(0);
     $394 = $13;
     _silk_stereo_decode_pred($394,$24);
     $395 = $11;
     $396 = ($395|0)==(0);
     if ($396) {
      $397 = $27;
      $398 = ((($397)) + 4260|0);
      $399 = ((($398)) + 2404|0);
      $400 = $27;
      $401 = ((($400)) + 2388|0);
      $402 = HEAP32[$401>>2]|0;
      $403 = (($399) + ($402<<2)|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = ($404|0)==(0);
      if (!($405)) {
       label = 74;
      }
     } else {
      label = 74;
     }
     do {
      if ((label|0) == 74) {
       $406 = $11;
       $407 = ($406|0)==(2);
       if ($407) {
        $408 = $27;
        $409 = ((($408)) + 4260|0);
        $410 = ((($409)) + 2420|0);
        $411 = $27;
        $412 = ((($411)) + 2388|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = (($410) + ($413<<2)|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = ($415|0)==(0);
        if ($416) {
         break;
        }
       }
       HEAP32[$19>>2] = 0;
       break L96;
      }
     } while(0);
     $417 = $13;
     _silk_stereo_decode_mid_only($417,$19);
    }
   } while(0);
   $430 = $10;
   $431 = ((($430)) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = ($432|0)==(2);
   $434 = HEAP32[$19>>2]|0;
   $435 = ($434|0)==(0);
   $or$cond7 = $433 & $435;
   if ($or$cond7) {
    $436 = $26;
    $437 = ((($436)) + 8540|0);
    $438 = HEAP32[$437>>2]|0;
    $439 = ($438|0)==(1);
    if ($439) {
     $440 = $26;
     $441 = ((($440)) + 4260|0);
     $442 = ((($441)) + 1348|0);
     _memset(($442|0),0,960)|0;
     $443 = $26;
     $444 = ((($443)) + 4260|0);
     $445 = ((($444)) + 1284|0);
     dest=$445; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $446 = $26;
     $447 = ((($446)) + 4260|0);
     $448 = ((($447)) + 2308|0);
     HEAP32[$448>>2] = 100;
     $449 = $26;
     $450 = ((($449)) + 4260|0);
     $451 = ((($450)) + 2312|0);
     HEAP8[$451>>0] = 10;
     $452 = $26;
     $453 = ((($452)) + 4260|0);
     $454 = ((($453)) + 4164|0);
     HEAP32[$454>>2] = 0;
     $455 = $26;
     $456 = ((($455)) + 4260|0);
     $457 = ((($456)) + 2376|0);
     HEAP32[$457>>2] = 1;
    }
   }
   $458 = $10;
   $459 = ((($458)) + 12|0);
   $460 = HEAP32[$459>>2]|0;
   $461 = $10;
   $462 = ((($461)) + 4|0);
   $463 = HEAP32[$462>>2]|0;
   $464 = Math_imul($460, $463)|0;
   $465 = $10;
   $466 = ((($465)) + 8|0);
   $467 = HEAP32[$466>>2]|0;
   $468 = $10;
   $469 = HEAP32[$468>>2]|0;
   $470 = Math_imul($467, $469)|0;
   $471 = ($464|0)<($470|0);
   $472 = $471&1;
   $30 = $472;
   $473 = $30;
   $474 = ($473|0)!=(0);
   if ($474) {
    $484 = 1;
   } else {
    $475 = $10;
    $476 = ((($475)) + 4|0);
    $477 = HEAP32[$476>>2]|0;
    $478 = $27;
    $479 = ((($478)) + 2328|0);
    $480 = HEAP32[$479>>2]|0;
    $481 = (($480) + 2)|0;
    $482 = Math_imul($477, $481)|0;
    $484 = $482;
   }
   $483 = (_llvm_stacksave()|0);
   $34 = $483;
   $$alloca_mul = $484<<1;
   $485 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
   $486 = $30;
   $487 = ($486|0)!=(0);
   if ($487) {
    $488 = $14;
    HEAP32[$23>>2] = $488;
    $489 = $14;
    $490 = $27;
    $$sink = $489;$$sink13 = $490;
   } else {
    HEAP32[$23>>2] = $485;
    $491 = $27;
    $$sink = $485;$$sink13 = $491;
   }
   $492 = ((($$sink13)) + 2328|0);
   $493 = HEAP32[$492>>2]|0;
   $494 = (($$sink) + ($493<<1)|0);
   $495 = ((($494)) + 4|0);
   $496 = ((($23)) + 4|0);
   HEAP32[$496>>2] = $495;
   $497 = $11;
   $498 = ($497|0)==(0);
   if ($498) {
    $499 = HEAP32[$19>>2]|0;
    $500 = ($499|0)!=(0);
    $501 = $500 ^ 1;
    $502 = $501&1;
    $28 = $502;
   } else {
    $503 = $26;
    $504 = ((($503)) + 8540|0);
    $505 = HEAP32[$504>>2]|0;
    $506 = ($505|0)!=(0);
    if ($506) {
     $507 = $10;
     $508 = ((($507)) + 4|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($509|0)==(2);
     $511 = $11;
     $512 = ($511|0)==(2);
     $or$cond15 = $510 & $512;
     if ($or$cond15) {
      $513 = $27;
      $514 = ((($513)) + 4260|0);
      $515 = ((($514)) + 2420|0);
      $516 = $27;
      $517 = ((($516)) + 4260|0);
      $518 = ((($517)) + 2388|0);
      $519 = HEAP32[$518>>2]|0;
      $520 = (($515) + ($519<<2)|0);
      $521 = HEAP32[$520>>2]|0;
      $522 = ($521|0)==(1);
      $524 = $522;
     } else {
      $524 = 0;
     }
    } else {
     $524 = 1;
    }
    $523 = $524&1;
    $28 = $523;
   }
   $18 = 0;
   while(1) {
    $525 = $18;
    $526 = $10;
    $527 = ((($526)) + 4|0);
    $528 = HEAP32[$527>>2]|0;
    $529 = ($525|0)<($528|0);
    if (!($529)) {
     break;
    }
    $530 = $18;
    $531 = ($530|0)==(0);
    $532 = $28;
    $533 = ($532|0)!=(0);
    $or$cond17 = $531 | $533;
    if ($or$cond17) {
     $534 = $27;
     $535 = ((($534)) + 2388|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = $18;
     $538 = (($536) - ($537))|0;
     $35 = $538;
     $539 = $35;
     $540 = ($539|0)<=(0);
     L140: do {
      if ($540) {
       $36 = 0;
      } else {
       $541 = $11;
       $542 = ($541|0)==(2);
       if ($542) {
        $543 = $27;
        $544 = $18;
        $545 = (($543) + (($544*4260)|0)|0);
        $546 = ((($545)) + 2420|0);
        $547 = $35;
        $548 = (($547) - 1)|0;
        $549 = (($546) + ($548<<2)|0);
        $550 = HEAP32[$549>>2]|0;
        $551 = ($550|0)!=(0);
        $552 = $551 ? 2 : 0;
        $36 = $552;
        break;
       }
       $553 = $18;
       $554 = ($553|0)>(0);
       do {
        if ($554) {
         $555 = $26;
         $556 = ((($555)) + 8540|0);
         $557 = HEAP32[$556>>2]|0;
         $558 = ($557|0)!=(0);
         if (!($558)) {
          break;
         }
         $36 = 1;
         break L140;
        }
       } while(0);
       $36 = 2;
      }
     } while(0);
     $559 = $27;
     $560 = $18;
     $561 = (($559) + (($560*4260)|0)|0);
     $562 = $13;
     $563 = $18;
     $564 = (($23) + ($563<<2)|0);
     $565 = HEAP32[$564>>2]|0;
     $566 = ((($565)) + 4|0);
     $567 = $11;
     $568 = $36;
     $569 = $16;
     $570 = (_silk_decode_frame($561,$562,$566,$21,$567,$568,$569)|0);
     $571 = $20;
     $572 = (($571) + ($570))|0;
     $20 = $572;
    } else {
     $573 = $18;
     $574 = (($23) + ($573<<2)|0);
     $575 = HEAP32[$574>>2]|0;
     $576 = ((($575)) + 4|0);
     $577 = HEAP32[$21>>2]|0;
     $578 = $577<<1;
     _memset(($576|0),0,($578|0))|0;
    }
    $579 = $27;
    $580 = $18;
    $581 = (($579) + (($580*4260)|0)|0);
    $582 = ((($581)) + 2388|0);
    $583 = HEAP32[$582>>2]|0;
    $584 = (($583) + 1)|0;
    HEAP32[$582>>2] = $584;
    $585 = $18;
    $586 = (($585) + 1)|0;
    $18 = $586;
   }
   $587 = $10;
   $588 = HEAP32[$587>>2]|0;
   $589 = ($588|0)==(2);
   if ($589) {
    $590 = $10;
    $591 = ((($590)) + 4|0);
    $592 = HEAP32[$591>>2]|0;
    $593 = ($592|0)==(2);
    if ($593) {
     $594 = $26;
     $595 = ((($594)) + 8520|0);
     $596 = HEAP32[$23>>2]|0;
     $597 = ((($23)) + 4|0);
     $598 = HEAP32[$597>>2]|0;
     $599 = $27;
     $600 = ((($599)) + 2316|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = HEAP32[$21>>2]|0;
     _silk_stereo_MS_to_LR($595,$596,$598,$24,$601,$602);
    } else {
     label = 112;
    }
   } else {
    label = 112;
   }
   if ((label|0) == 112) {
    $603 = HEAP32[$23>>2]|0;
    $604 = $26;
    $605 = ((($604)) + 8520|0);
    $606 = ((($605)) + 4|0);
    ;HEAP16[$603>>1]=HEAP16[$606>>1]|0;HEAP16[$603+2>>1]=HEAP16[$606+2>>1]|0;
    $607 = $26;
    $608 = ((($607)) + 8520|0);
    $609 = ((($608)) + 4|0);
    $610 = HEAP32[$23>>2]|0;
    $611 = HEAP32[$21>>2]|0;
    $612 = (($610) + ($611<<1)|0);
    ;HEAP16[$609>>1]=HEAP16[$612>>1]|0;HEAP16[$609+2>>1]=HEAP16[$612+2>>1]|0;
   }
   $613 = HEAP32[$21>>2]|0;
   $614 = $10;
   $615 = ((($614)) + 8|0);
   $616 = HEAP32[$615>>2]|0;
   $617 = Math_imul($613, $616)|0;
   $618 = $27;
   $619 = ((($618)) + 2316|0);
   $620 = HEAP32[$619>>2]|0;
   $621 = $620&65535;
   $622 = $621 << 16 >> 16;
   $623 = ($622*1000)|0;
   $624 = (($617|0) / ($623|0))&-1;
   $625 = $15;
   HEAP32[$625>>2] = $624;
   $626 = $10;
   $627 = HEAP32[$626>>2]|0;
   $628 = ($627|0)==(2);
   if ($628) {
    $629 = $15;
    $630 = HEAP32[$629>>2]|0;
    $631 = $630;
   } else {
    $631 = 1;
   }
   $$alloca_mul55 = $631<<1;
   $632 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul55)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul55)|0)+15)&-16)|0);;
   $633 = $10;
   $634 = HEAP32[$633>>2]|0;
   $635 = ($634|0)==(2);
   if ($635) {
    $25 = $632;
   } else {
    $636 = $14;
    $25 = $636;
   }
   $637 = $30;
   $638 = ($637|0)!=(0);
   if ($638) {
    $639 = $10;
    $640 = ((($639)) + 4|0);
    $641 = HEAP32[$640>>2]|0;
    $642 = $27;
    $643 = ((($642)) + 2328|0);
    $644 = HEAP32[$643>>2]|0;
    $645 = (($644) + 2)|0;
    $646 = Math_imul($641, $645)|0;
    $647 = $646;
   } else {
    $647 = 1;
   }
   $$alloca_mul57 = $647<<1;
   $648 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul57)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul57)|0)+15)&-16)|0);;
   $649 = $30;
   $650 = ($649|0)!=(0);
   if ($650) {
    $651 = $14;
    $652 = $10;
    $653 = ((($652)) + 4|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = $27;
    $656 = ((($655)) + 2328|0);
    $657 = HEAP32[$656>>2]|0;
    $658 = (($657) + 2)|0;
    $659 = Math_imul($654, $658)|0;
    $660 = $659<<1;
    $661 = $14;
    $662 = $648;
    $663 = $661;
    $664 = (($662) - ($663))|0;
    $665 = (($664|0) / 2)&-1;
    $666 = 0;
    $667 = (($660) + ($666))|0;
    _memcpy(($648|0),($651|0),($667|0))|0;
    HEAP32[$23>>2] = $648;
    $668 = $27;
    $669 = ((($668)) + 2328|0);
    $670 = HEAP32[$669>>2]|0;
    $671 = (($648) + ($670<<1)|0);
    $672 = ((($671)) + 4|0);
    $673 = ((($23)) + 4|0);
    HEAP32[$673>>2] = $672;
   }
   $18 = 0;
   while(1) {
    $674 = $18;
    $675 = $10;
    $676 = HEAP32[$675>>2]|0;
    $677 = $10;
    $678 = ((($677)) + 4|0);
    $679 = HEAP32[$678>>2]|0;
    $680 = ($676|0)<($679|0);
    $681 = $10;
    $682 = ((($681)) + 4|0);
    $$sink18 = $680 ? $681 : $682;
    $683 = HEAP32[$$sink18>>2]|0;
    $684 = ($674|0)<($683|0);
    if (!($684)) {
     break;
    }
    $685 = $27;
    $686 = $18;
    $687 = (($685) + (($686*4260)|0)|0);
    $688 = ((($687)) + 2432|0);
    $689 = $25;
    $690 = $18;
    $691 = (($23) + ($690<<2)|0);
    $692 = HEAP32[$691>>2]|0;
    $693 = ((($692)) + 2|0);
    $694 = HEAP32[$21>>2]|0;
    $695 = (_silk_resampler($688,$689,$693,$694)|0);
    $696 = $20;
    $697 = (($696) + ($695))|0;
    $20 = $697;
    $698 = $10;
    $699 = HEAP32[$698>>2]|0;
    $700 = ($699|0)==(2);
    L176: do {
     if ($700) {
      $17 = 0;
      while(1) {
       $701 = $17;
       $702 = $15;
       $703 = HEAP32[$702>>2]|0;
       $704 = ($701|0)<($703|0);
       if (!($704)) {
        break L176;
       }
       $705 = $25;
       $706 = $17;
       $707 = (($705) + ($706<<1)|0);
       $708 = HEAP16[$707>>1]|0;
       $709 = $14;
       $710 = $18;
       $711 = $17;
       $712 = $711<<1;
       $713 = (($710) + ($712))|0;
       $714 = (($709) + ($713<<1)|0);
       HEAP16[$714>>1] = $708;
       $715 = $17;
       $716 = (($715) + 1)|0;
       $17 = $716;
      }
     }
    } while(0);
    $717 = $18;
    $718 = (($717) + 1)|0;
    $18 = $718;
   }
   $719 = $10;
   $720 = HEAP32[$719>>2]|0;
   $721 = ($720|0)==(2);
   L183: do {
    if ($721) {
     $722 = $10;
     $723 = ((($722)) + 4|0);
     $724 = HEAP32[$723>>2]|0;
     $725 = ($724|0)==(1);
     if (!($725)) {
      break;
     }
     $726 = $29;
     $727 = ($726|0)!=(0);
     if ($727) {
      $728 = $27;
      $729 = ((($728)) + 4260|0);
      $730 = ((($729)) + 2432|0);
      $731 = $25;
      $732 = HEAP32[$23>>2]|0;
      $733 = ((($732)) + 2|0);
      $734 = HEAP32[$21>>2]|0;
      $735 = (_silk_resampler($730,$731,$733,$734)|0);
      $736 = $20;
      $737 = (($736) + ($735))|0;
      $20 = $737;
      $17 = 0;
      while(1) {
       $738 = $17;
       $739 = $15;
       $740 = HEAP32[$739>>2]|0;
       $741 = ($738|0)<($740|0);
       if (!($741)) {
        break L183;
       }
       $742 = $25;
       $743 = $17;
       $744 = (($742) + ($743<<1)|0);
       $745 = HEAP16[$744>>1]|0;
       $746 = $14;
       $747 = $17;
       $748 = $747<<1;
       $749 = (1 + ($748))|0;
       $750 = (($746) + ($749<<1)|0);
       HEAP16[$750>>1] = $745;
       $751 = $17;
       $752 = (($751) + 1)|0;
       $17 = $752;
      }
     } else {
      $17 = 0;
      while(1) {
       $753 = $17;
       $754 = $15;
       $755 = HEAP32[$754>>2]|0;
       $756 = ($753|0)<($755|0);
       if (!($756)) {
        break L183;
       }
       $757 = $14;
       $758 = $17;
       $759 = $758<<1;
       $760 = (0 + ($759))|0;
       $761 = (($757) + ($760<<1)|0);
       $762 = HEAP16[$761>>1]|0;
       $763 = $14;
       $764 = $17;
       $765 = $764<<1;
       $766 = (1 + ($765))|0;
       $767 = (($763) + ($766<<1)|0);
       HEAP16[$767>>1] = $762;
       $768 = $17;
       $769 = (($768) + 1)|0;
       $17 = $769;
      }
     }
    }
   } while(0);
   $770 = $27;
   $771 = ((($770)) + 4164|0);
   $772 = HEAP32[$771>>2]|0;
   $773 = ($772|0)==(2);
   if ($773) {
    ;HEAP32[$37>>2]=HEAP32[16648>>2]|0;HEAP32[$37+4>>2]=HEAP32[16648+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[16648+8>>2]|0;
    $774 = $27;
    $775 = ((($774)) + 2308|0);
    $776 = HEAP32[$775>>2]|0;
    $777 = $27;
    $778 = ((($777)) + 2316|0);
    $779 = HEAP32[$778>>2]|0;
    $780 = (($779) - 8)|0;
    $781 = $780 >> 2;
    $782 = (($37) + ($781<<2)|0);
    $783 = HEAP32[$782>>2]|0;
    $784 = Math_imul($776, $783)|0;
    $785 = $10;
    $$sink19 = $784;$$sink21 = $785;
   } else {
    $786 = $10;
    $$sink19 = 0;$$sink21 = $786;
   }
   $787 = ((($$sink21)) + 20|0);
   HEAP32[$787>>2] = $$sink19;
   $788 = $11;
   $789 = ($788|0)==(1);
   L200: do {
    if ($789) {
     $17 = 0;
     while(1) {
      $790 = $17;
      $791 = $26;
      $792 = ((($791)) + 8536|0);
      $793 = HEAP32[$792>>2]|0;
      $794 = ($790|0)<($793|0);
      if (!($794)) {
       break L200;
      }
      $795 = $26;
      $796 = $17;
      $797 = (($795) + (($796*4260)|0)|0);
      $798 = ((($797)) + 2312|0);
      HEAP8[$798>>0] = 10;
      $799 = $17;
      $800 = (($799) + 1)|0;
      $17 = $800;
     }
    } else {
     $801 = HEAP32[$19>>2]|0;
     $802 = $26;
     $803 = ((($802)) + 8540|0);
     HEAP32[$803>>2] = $801;
    }
   } while(0);
   $804 = $20;
   $8 = $804;
   $805 = $34;
   _llvm_stackrestore(($805|0));
   $806 = $8;
   STACKTOP = sp;return ($806|0);
  }
 }
 $20 = -200;
 $213 = $20;
 $8 = $213;
 $806 = $8;
 STACKTOP = sp;return ($806|0);
}
function _silk_Get_Encoder_Size($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 $3 = $1;
 HEAP32[$3>>2] = 24568;
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _silk_InitEncoder($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $9 = $3;
 $6 = $9;
 $10 = $6;
 _memset(($10|0),0,24568)|0;
 $7 = 0;
 while(1) {
  $11 = $7;
  $12 = ($11|0)<(2);
  $13 = $6;
  if (!($12)) {
   break;
  }
  $14 = $7;
  $15 = (($13) + (($14*12240)|0)|0);
  $16 = $4;
  $17 = (_silk_init_encoder($15,$16)|0);
  $18 = $8;
  $19 = (($18) + ($17))|0;
  $8 = $19;
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
 }
 $22 = ((($13)) + 24544|0);
 HEAP32[$22>>2] = 1;
 $23 = $6;
 $24 = ((($23)) + 24548|0);
 HEAP32[$24>>2] = 1;
 $25 = $3;
 $26 = $5;
 $27 = (_silk_QueryEncoder($25,$26)|0);
 $28 = $8;
 $29 = (($28) + ($27))|0;
 $8 = $29;
 $30 = $8;
 STACKTOP = sp;return ($30|0);
}
function _silk_QueryEncoder($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $7 = $2;
 $6 = $7;
 $8 = $6;
 $5 = $8;
 $9 = $6;
 $10 = ((($9)) + 24544|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $6;
 $14 = ((($13)) + 24548|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $5;
 $19 = ((($18)) + 4580|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 4588|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $3;
 $27 = ((($26)) + 12|0);
 HEAP32[$27>>2] = $25;
 $28 = $5;
 $29 = ((($28)) + 4592|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ((($31)) + 16|0);
 HEAP32[$32>>2] = $30;
 $33 = $5;
 $34 = ((($33)) + 4596|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = ((($36)) + 20|0);
 HEAP32[$37>>2] = $35;
 $38 = $5;
 $39 = ((($38)) + 4636|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $3;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = $40;
 $43 = $5;
 $44 = ((($43)) + 4632|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $3;
 $47 = ((($46)) + 28|0);
 HEAP32[$47>>2] = $45;
 $48 = $5;
 $49 = ((($48)) + 4640|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $3;
 $52 = ((($51)) + 32|0);
 HEAP32[$52>>2] = $50;
 $53 = $5;
 $54 = ((($53)) + 4648|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $3;
 $57 = ((($56)) + 36|0);
 HEAP32[$57>>2] = $55;
 $58 = $5;
 $59 = ((($58)) + 6120|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $3;
 $62 = ((($61)) + 40|0);
 HEAP32[$62>>2] = $60;
 $63 = $5;
 $64 = ((($63)) + 6108|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 $67 = ((($66)) + 44|0);
 HEAP32[$67>>2] = $65;
 $68 = $5;
 $69 = ((($68)) + 4708|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $3;
 $72 = ((($71)) + 48|0);
 HEAP32[$72>>2] = $70;
 $73 = $5;
 $74 = ((($73)) + 4600|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75&65535;
 $77 = $76 << 16 >> 16;
 $78 = ($77*1000)|0;
 $79 = $3;
 $80 = ((($79)) + 68|0);
 HEAP32[$80>>2] = $78;
 $81 = $5;
 $82 = ((($81)) + 4560|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $3;
 $85 = ((($84)) + 72|0);
 HEAP32[$85>>2] = $83;
 $86 = $5;
 $87 = ((($86)) + 4600|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)==(16);
 if (!($89)) {
  $96 = 0;
  $95 = $96&1;
  $97 = $3;
  $98 = ((($97)) + 76|0);
  HEAP32[$98>>2] = $95;
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $90 = $5;
 $91 = ((($90)) + 16|0);
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0);
 $96 = $94;
 $95 = $96&1;
 $97 = $3;
 $98 = ((($97)) + 76|0);
 HEAP32[$98>>2] = $95;
 $99 = $4;
 STACKTOP = sp;return ($99|0);
}
function _silk_Encode($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $$sink$sink = 0, $$sink23 = 0, $$sink8$sink = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
 var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
 var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
 var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
 var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
 var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
 var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
 var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
 var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
 var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
 var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
 var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $29 = sp + 64|0;
 $40 = sp + 160|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $19 = 0;
 $20 = 0;
 $21 = 0;
 $25 = 0;
 $46 = $8;
 $33 = $46;
 $47 = $9;
 $48 = ((($47)) + 64|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $33;
  $52 = ((($51)) + 4696|0);
  HEAP32[$52>>2] = 1;
  $53 = $33;
  $54 = ((($53)) + 12240|0);
  $55 = ((($54)) + 4696|0);
  HEAP32[$55>>2] = 1;
 }
 $56 = $33;
 $57 = ((($56)) + 12240|0);
 $58 = ((($57)) + 5780|0);
 HEAP32[$58>>2] = 0;
 $59 = $33;
 $60 = ((($59)) + 5780|0);
 HEAP32[$60>>2] = 0;
 $61 = $9;
 $62 = (_check_control_input($61)|0);
 $21 = $62;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $21;
  $7 = $64;
  $1318 = $7;
  STACKTOP = sp;return ($1318|0);
 }
 $65 = $9;
 $66 = ((($65)) + 84|0);
 HEAP32[$66>>2] = 0;
 $67 = $9;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $33;
 $71 = ((($70)) + 24548|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($69|0)>($72|0);
 if ($73) {
  $74 = $33;
  $75 = ((($74)) + 12240|0);
  $76 = $33;
  $77 = ((($76)) + 5124|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_silk_init_encoder($75,$78)|0);
  $80 = $21;
  $81 = (($80) + ($79))|0;
  $21 = $81;
  $82 = $33;
  $83 = ((($82)) + 24480|0);
  ;HEAP32[$83>>2]=0|0;
  $84 = $33;
  $85 = ((($84)) + 24480|0);
  $86 = ((($85)) + 8|0);
  ;HEAP32[$86>>2]=0|0;
  $87 = $33;
  $88 = ((($87)) + 24480|0);
  $89 = ((($88)) + 12|0);
  HEAP32[$89>>2] = 0;
  $90 = $33;
  $91 = ((($90)) + 24480|0);
  $92 = ((($91)) + 12|0);
  $93 = ((($92)) + 4|0);
  HEAP32[$93>>2] = 1;
  $94 = $33;
  $95 = ((($94)) + 24480|0);
  $96 = ((($95)) + 12|0);
  $97 = ((($96)) + 8|0);
  HEAP32[$97>>2] = 0;
  $98 = $33;
  $99 = ((($98)) + 24480|0);
  $100 = ((($99)) + 12|0);
  $101 = ((($100)) + 12|0);
  HEAP32[$101>>2] = 1;
  $102 = $33;
  $103 = ((($102)) + 24480|0);
  $104 = ((($103)) + 30|0);
  HEAP16[$104>>1] = 0;
  $105 = $33;
  $106 = ((($105)) + 24480|0);
  $107 = ((($106)) + 28|0);
  HEAP16[$107>>1] = 16384;
  $108 = $33;
  $109 = ((($108)) + 24544|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(2);
  if ($111) {
   $112 = $33;
   $113 = ((($112)) + 12240|0);
   $114 = ((($113)) + 5808|0);
   $115 = $33;
   $116 = ((($115)) + 5808|0);
   _memcpy(($114|0),($116|0),300)|0;
   $117 = $33;
   $118 = ((($117)) + 12240|0);
   $119 = $33;
   ;HEAP32[$118>>2]=HEAP32[$119>>2]|0;HEAP32[$118+4>>2]=HEAP32[$119+4>>2]|0;
  }
 }
 $120 = $9;
 $121 = ((($120)) + 24|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $33;
 $124 = ((($123)) + 4636|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($122|0)!=($125|0);
 if ($126) {
  $135 = 1;
 } else {
  $127 = $33;
  $128 = ((($127)) + 24548|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $9;
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($129|0)!=($132|0);
  $135 = $133;
 }
 $134 = $135&1;
 $34 = $134;
 $136 = $9;
 $137 = HEAP32[$136>>2]|0;
 $138 = $33;
 $139 = ((($138)) + 24544|0);
 HEAP32[$139>>2] = $137;
 $140 = $9;
 $141 = ((($140)) + 4|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = $33;
 $144 = ((($143)) + 24548|0);
 HEAP32[$144>>2] = $142;
 $145 = $11;
 $146 = ($145*100)|0;
 $147 = $9;
 $148 = ((($147)) + 8|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (($146|0) / ($149|0))&-1;
 $24 = $150;
 $151 = $24;
 $152 = ($151|0)>(1);
 $153 = $24;
 $154 = $153 >> 1;
 $155 = $152 ? $154 : 1;
 $36 = $155;
 $35 = 0;
 $156 = $14;
 $157 = ($156|0)!=(0);
 $158 = $24;
 L15: do {
  if ($157) {
   $159 = ($158|0)!=(1);
   if ($159) {
    $7 = -101;
    $1318 = $7;
    STACKTOP = sp;return ($1318|0);
   }
   $15 = 0;
   while(1) {
    $160 = $15;
    $161 = $9;
    $162 = ((($161)) + 4|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($160|0)<($163|0);
    if (!($164)) {
     break;
    }
    $165 = $33;
    $166 = $15;
    $167 = (($165) + (($166*12240)|0)|0);
    $168 = $33;
    $169 = $15;
    $170 = (($168) + (($169*12240)|0)|0);
    $171 = ((($170)) + 5124|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = (_silk_init_encoder($167,$172)|0);
    $21 = $173;
    $174 = $15;
    $175 = (($174) + 1)|0;
    $15 = $175;
   }
   $176 = $9;
   $177 = ((($176)) + 24|0);
   $178 = HEAP32[$177>>2]|0;
   $19 = $178;
   $179 = $9;
   $180 = ((($179)) + 24|0);
   HEAP32[$180>>2] = 10;
   $181 = $9;
   $182 = ((($181)) + 36|0);
   $183 = HEAP32[$182>>2]|0;
   $20 = $183;
   $184 = $9;
   $185 = ((($184)) + 36|0);
   HEAP32[$185>>2] = 0;
   $15 = 0;
   while(1) {
    $186 = $15;
    $187 = $9;
    $188 = ((($187)) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($186|0)<($189|0);
    if (!($190)) {
     break L15;
    }
    $191 = $33;
    $192 = $15;
    $193 = (($191) + (($192*12240)|0)|0);
    $194 = ((($193)) + 4700|0);
    HEAP32[$194>>2] = 0;
    $195 = $33;
    $196 = $15;
    $197 = (($195) + (($196*12240)|0)|0);
    $198 = ((($197)) + 4712|0);
    HEAP32[$198>>2] = 1;
    $199 = $15;
    $200 = (($199) + 1)|0;
    $15 = $200;
   }
  } else {
   $201 = $9;
   $202 = ((($201)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = Math_imul($158, $203)|0;
   $205 = $11;
   $206 = ($205*100)|0;
   $207 = ($204|0)!=($206|0);
   $208 = $11;
   $209 = ($208|0)<(0);
   $or$cond = $207 | $209;
   if ($or$cond) {
    $7 = -101;
    $1318 = $7;
    STACKTOP = sp;return ($1318|0);
   }
   $210 = $11;
   $211 = ($210*1000)|0;
   $212 = $9;
   $213 = ((($212)) + 24|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $9;
   $216 = ((($215)) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = Math_imul($214, $217)|0;
   $219 = ($211|0)>($218|0);
   if ($219) {
    $7 = -101;
    $1318 = $7;
    STACKTOP = sp;return ($1318|0);
   }
  }
 } while(0);
 $220 = $9;
 $221 = ((($220)) + 28|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = $9;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) - 1)|0;
 $227 = $222 >> $226;
 $28 = $227;
 $15 = 0;
 while(1) {
  $228 = $15;
  $229 = $9;
  $230 = ((($229)) + 4|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = ($228|0)<($231|0);
  if (!($232)) {
   break;
  }
  $233 = $15;
  $234 = ($233|0)==(1);
  if ($234) {
   $235 = $33;
   $236 = ((($235)) + 4600|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $237;
  } else {
   $238 = 0;
  }
  $37 = $238;
  $239 = $33;
  $240 = $15;
  $241 = (($239) + (($240*12240)|0)|0);
  $242 = $9;
  $243 = $28;
  $244 = $33;
  $245 = ((($244)) + 24560|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $15;
  $248 = $37;
  $249 = (_silk_control_encoder($241,$242,$243,$246,$247,$248)|0);
  $21 = $249;
  $250 = ($249|0)!=(0);
  if ($250) {
   label = 28;
   break;
  }
  $252 = $33;
  $253 = $15;
  $254 = (($252) + (($253*12240)|0)|0);
  $255 = ((($254)) + 4696|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ($256|0)!=(0);
  $258 = $34;
  $259 = ($258|0)!=(0);
  $or$cond3 = $257 | $259;
  L43: do {
   if ($or$cond3) {
    $16 = 0;
    while(1) {
     $260 = $16;
     $261 = $33;
     $262 = ((($261)) + 5776|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = ($260|0)<($263|0);
     if (!($264)) {
      break L43;
     }
     $265 = $33;
     $266 = $15;
     $267 = (($265) + (($266*12240)|0)|0);
     $268 = ((($267)) + 4756|0);
     $269 = $16;
     $270 = (($268) + ($269<<2)|0);
     HEAP32[$270>>2] = 0;
     $271 = $16;
     $272 = (($271) + 1)|0;
     $16 = $272;
    }
   }
  } while(0);
  $273 = $33;
  $274 = $15;
  $275 = (($273) + (($274*12240)|0)|0);
  $276 = ((($275)) + 6108|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $33;
  $279 = $15;
  $280 = (($278) + (($279*12240)|0)|0);
  $281 = ((($280)) + 6112|0);
  HEAP32[$281>>2] = $277;
  $282 = $15;
  $283 = (($282) + 1)|0;
  $15 = $283;
 }
 if ((label|0) == 28) {
  $251 = $21;
  $7 = $251;
  $1318 = $7;
  STACKTOP = sp;return ($1318|0);
 }
 $284 = $24;
 $285 = ($284*10)|0;
 $286 = $33;
 $287 = ((($286)) + 4600|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = Math_imul($285, $288)|0;
 $23 = $289;
 $290 = $23;
 $291 = $33;
 $292 = ((($291)) + 4580|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = Math_imul($290, $293)|0;
 $295 = $33;
 $296 = ((($295)) + 4600|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = ($297*1000)|0;
 $299 = (($294|0) / ($298|0))&-1;
 $26 = $299;
 $300 = $26;
 $301 = (_llvm_stacksave()|0);
 $38 = $301;
 $$alloca_mul = $300<<1;
 $302 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 while(1) {
  $303 = $33;
  $304 = ((($303)) + 4608|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $33;
  $307 = ((($306)) + 5772|0);
  $308 = HEAP32[$307>>2]|0;
  $309 = (($305) - ($308))|0;
  $22 = $309;
  $310 = $22;
  $311 = $23;
  $312 = ($310|0)<($311|0);
  $313 = $22;
  $314 = $23;
  $315 = $312 ? $313 : $314;
  $22 = $315;
  $316 = $22;
  $317 = $33;
  $318 = ((($317)) + 4580|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = Math_imul($316, $319)|0;
  $321 = $33;
  $322 = ((($321)) + 4600|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = ($323*1000)|0;
  $325 = (($320|0) / ($324|0))&-1;
  $25 = $325;
  $326 = $9;
  $327 = HEAP32[$326>>2]|0;
  $328 = ($327|0)==(2);
  if ($328) {
   $329 = $9;
   $330 = ((($329)) + 4|0);
   $331 = HEAP32[$330>>2]|0;
   $332 = ($331|0)==(2);
   if ($332) {
    $333 = $33;
    $334 = ((($333)) + 5780|0);
    $335 = HEAP32[$334>>2]|0;
    $39 = $335;
    $15 = 0;
    while(1) {
     $336 = $15;
     $337 = $25;
     $338 = ($336|0)<($337|0);
     if (!($338)) {
      break;
     }
     $339 = $10;
     $340 = $15;
     $341 = $340<<1;
     $342 = (($339) + ($341<<1)|0);
     $343 = HEAP16[$342>>1]|0;
     $344 = $15;
     $345 = (($302) + ($344<<1)|0);
     HEAP16[$345>>1] = $343;
     $346 = $15;
     $347 = (($346) + 1)|0;
     $15 = $347;
    }
    $348 = $33;
    $349 = ((($348)) + 24552|0);
    $350 = HEAP32[$349>>2]|0;
    $351 = ($350|0)==(1);
    $352 = $39;
    $353 = ($352|0)==(0);
    $or$cond5 = $351 & $353;
    if ($or$cond5) {
     $354 = $33;
     $355 = ((($354)) + 12240|0);
     $356 = ((($355)) + 5808|0);
     $357 = $33;
     $358 = ((($357)) + 5808|0);
     _memcpy(($356|0),($358|0),300)|0;
    }
    $359 = $33;
    $360 = ((($359)) + 5808|0);
    $361 = $33;
    $362 = ((($361)) + 5128|0);
    $363 = $33;
    $364 = ((($363)) + 5772|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = (($365) + 2)|0;
    $367 = (($362) + ($366<<1)|0);
    $368 = $25;
    $369 = (_silk_resampler($360,$367,$302,$368)|0);
    $370 = $21;
    $371 = (($370) + ($369))|0;
    $21 = $371;
    $372 = $22;
    $373 = $33;
    $374 = ((($373)) + 5772|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (($375) + ($372))|0;
    HEAP32[$374>>2] = $376;
    $377 = $33;
    $378 = ((($377)) + 12240|0);
    $379 = ((($378)) + 4608|0);
    $380 = HEAP32[$379>>2]|0;
    $381 = $33;
    $382 = ((($381)) + 12240|0);
    $383 = ((($382)) + 5772|0);
    $384 = HEAP32[$383>>2]|0;
    $385 = (($380) - ($384))|0;
    $22 = $385;
    $386 = $22;
    $387 = $24;
    $388 = ($387*10)|0;
    $389 = $33;
    $390 = ((($389)) + 12240|0);
    $391 = ((($390)) + 4600|0);
    $392 = HEAP32[$391>>2]|0;
    $393 = Math_imul($388, $392)|0;
    $394 = ($386|0)<($393|0);
    if ($394) {
     $395 = $22;
     $403 = $395;
    } else {
     $396 = $24;
     $397 = ($396*10)|0;
     $398 = $33;
     $399 = ((($398)) + 12240|0);
     $400 = ((($399)) + 4600|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = Math_imul($397, $401)|0;
     $403 = $402;
    }
    $22 = $403;
    $15 = 0;
    while(1) {
     $404 = $15;
     $405 = $25;
     $406 = ($404|0)<($405|0);
     if (!($406)) {
      break;
     }
     $407 = $10;
     $408 = $15;
     $409 = $408<<1;
     $410 = (($409) + 1)|0;
     $411 = (($407) + ($410<<1)|0);
     $412 = HEAP16[$411>>1]|0;
     $413 = $15;
     $414 = (($302) + ($413<<1)|0);
     HEAP16[$414>>1] = $412;
     $415 = $15;
     $416 = (($415) + 1)|0;
     $15 = $416;
    }
    $417 = $33;
    $418 = ((($417)) + 12240|0);
    $419 = ((($418)) + 5808|0);
    $420 = $33;
    $421 = ((($420)) + 12240|0);
    $422 = ((($421)) + 5128|0);
    $423 = $33;
    $424 = ((($423)) + 12240|0);
    $425 = ((($424)) + 5772|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (($426) + 2)|0;
    $428 = (($422) + ($427<<1)|0);
    $429 = $25;
    $430 = (_silk_resampler($419,$428,$302,$429)|0);
    $431 = $21;
    $432 = (($431) + ($430))|0;
    $21 = $432;
    $433 = $22;
    $434 = $33;
    $$sink$sink = $434;$$sink23 = 1;$$sink8$sink = $433;
   } else {
    label = 49;
   }
  } else {
   label = 49;
  }
  do {
   if ((label|0) == 49) {
    label = 0;
    $435 = $9;
    $436 = HEAP32[$435>>2]|0;
    $437 = ($436|0)==(2);
    if ($437) {
     $438 = $9;
     $439 = ((($438)) + 4|0);
     $440 = HEAP32[$439>>2]|0;
     $441 = ($440|0)==(1);
     if ($441) {
      $15 = 0;
      while(1) {
       $442 = $15;
       $443 = $25;
       $444 = ($442|0)<($443|0);
       if (!($444)) {
        break;
       }
       $445 = $10;
       $446 = $15;
       $447 = $446<<1;
       $448 = (($445) + ($447<<1)|0);
       $449 = HEAP16[$448>>1]|0;
       $450 = $449 << 16 >> 16;
       $451 = $10;
       $452 = $15;
       $453 = $452<<1;
       $454 = (($453) + 1)|0;
       $455 = (($451) + ($454<<1)|0);
       $456 = HEAP16[$455>>1]|0;
       $457 = $456 << 16 >> 16;
       $458 = (($450) + ($457))|0;
       $32 = $458;
       $459 = $32;
       $460 = $459 >> 1;
       $461 = $32;
       $462 = $461 & 1;
       $463 = (($460) + ($462))|0;
       $464 = $463&65535;
       $465 = $15;
       $466 = (($302) + ($465<<1)|0);
       HEAP16[$466>>1] = $464;
       $467 = $15;
       $468 = (($467) + 1)|0;
       $15 = $468;
      }
      $469 = $33;
      $470 = ((($469)) + 5808|0);
      $471 = $33;
      $472 = ((($471)) + 5128|0);
      $473 = $33;
      $474 = ((($473)) + 5772|0);
      $475 = HEAP32[$474>>2]|0;
      $476 = (($475) + 2)|0;
      $477 = (($472) + ($476<<1)|0);
      $478 = $25;
      $479 = (_silk_resampler($470,$477,$302,$478)|0);
      $480 = $21;
      $481 = (($480) + ($479))|0;
      $21 = $481;
      $482 = $33;
      $483 = ((($482)) + 24552|0);
      $484 = HEAP32[$483>>2]|0;
      $485 = ($484|0)==(2);
      L82: do {
       if ($485) {
        $486 = $33;
        $487 = ((($486)) + 5780|0);
        $488 = HEAP32[$487>>2]|0;
        $489 = ($488|0)==(0);
        if ($489) {
         $490 = $33;
         $491 = ((($490)) + 12240|0);
         $492 = ((($491)) + 5808|0);
         $493 = $33;
         $494 = ((($493)) + 12240|0);
         $495 = ((($494)) + 5128|0);
         $496 = $33;
         $497 = ((($496)) + 12240|0);
         $498 = ((($497)) + 5772|0);
         $499 = HEAP32[$498>>2]|0;
         $500 = (($499) + 2)|0;
         $501 = (($495) + ($500<<1)|0);
         $502 = $25;
         $503 = (_silk_resampler($492,$501,$302,$502)|0);
         $504 = $21;
         $505 = (($504) + ($503))|0;
         $21 = $505;
         $15 = 0;
         while(1) {
          $506 = $15;
          $507 = $33;
          $508 = ((($507)) + 4608|0);
          $509 = HEAP32[$508>>2]|0;
          $510 = ($506|0)<($509|0);
          if (!($510)) {
           break L82;
          }
          $511 = $33;
          $512 = ((($511)) + 5128|0);
          $513 = $33;
          $514 = ((($513)) + 5772|0);
          $515 = HEAP32[$514>>2]|0;
          $516 = $15;
          $517 = (($515) + ($516))|0;
          $518 = (($517) + 2)|0;
          $519 = (($512) + ($518<<1)|0);
          $520 = HEAP16[$519>>1]|0;
          $521 = $520 << 16 >> 16;
          $522 = $33;
          $523 = ((($522)) + 12240|0);
          $524 = ((($523)) + 5128|0);
          $525 = $33;
          $526 = ((($525)) + 12240|0);
          $527 = ((($526)) + 5772|0);
          $528 = HEAP32[$527>>2]|0;
          $529 = $15;
          $530 = (($528) + ($529))|0;
          $531 = (($530) + 2)|0;
          $532 = (($524) + ($531<<1)|0);
          $533 = HEAP16[$532>>1]|0;
          $534 = $533 << 16 >> 16;
          $535 = (($521) + ($534))|0;
          $536 = $535 >> 1;
          $537 = $536&65535;
          $538 = $33;
          $539 = ((($538)) + 5128|0);
          $540 = $33;
          $541 = ((($540)) + 5772|0);
          $542 = HEAP32[$541>>2]|0;
          $543 = $15;
          $544 = (($542) + ($543))|0;
          $545 = (($544) + 2)|0;
          $546 = (($539) + ($545<<1)|0);
          HEAP16[$546>>1] = $537;
          $547 = $15;
          $548 = (($547) + 1)|0;
          $15 = $548;
         }
        }
       }
      } while(0);
      $549 = $22;
      $550 = $33;
      $$sink$sink = $550;$$sink23 = 0;$$sink8$sink = $549;
      break;
     }
    }
    $551 = $10;
    $552 = $25;
    $553 = $552<<1;
    _memcpy(($302|0),($551|0),($553|0))|0;
    $554 = $33;
    $555 = ((($554)) + 5808|0);
    $556 = $33;
    $557 = ((($556)) + 5128|0);
    $558 = $33;
    $559 = ((($558)) + 5772|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = (($560) + 2)|0;
    $562 = (($557) + ($561<<1)|0);
    $563 = $25;
    $564 = (_silk_resampler($555,$562,$302,$563)|0);
    $565 = $21;
    $566 = (($565) + ($564))|0;
    $21 = $566;
    $567 = $22;
    $568 = $33;
    $$sink$sink = $568;$$sink23 = 0;$$sink8$sink = $567;
   }
  } while(0);
  $569 = (($$sink$sink) + (($$sink23*12240)|0)|0);
  $570 = ((($569)) + 5772|0);
  $571 = HEAP32[$570>>2]|0;
  $572 = (($571) + ($$sink8$sink))|0;
  HEAP32[$570>>2] = $572;
  $573 = $25;
  $574 = $9;
  $575 = HEAP32[$574>>2]|0;
  $576 = Math_imul($573, $575)|0;
  $577 = $10;
  $578 = (($577) + ($576<<1)|0);
  $10 = $578;
  $579 = $25;
  $580 = $11;
  $581 = (($580) - ($579))|0;
  $11 = $581;
  $582 = $33;
  $583 = ((($582)) + 24560|0);
  HEAP32[$583>>2] = 0;
  $584 = $33;
  $585 = ((($584)) + 5772|0);
  $586 = HEAP32[$585>>2]|0;
  $587 = $33;
  $588 = ((($587)) + 4608|0);
  $589 = HEAP32[$588>>2]|0;
  $590 = ($586|0)>=($589|0);
  if (!($590)) {
   break;
  }
  $591 = $33;
  $592 = ((($591)) + 5780|0);
  $593 = HEAP32[$592>>2]|0;
  $594 = ($593|0)!=(0);
  $595 = $14;
  $596 = ($595|0)!=(0);
  $or$cond13 = $594 | $596;
  if (!($or$cond13)) {
   ;HEAP8[$40>>0]=0|0;HEAP8[$40+1>>0]=0|0;
   $597 = $33;
   $598 = ((($597)) + 5776|0);
   $599 = HEAP32[$598>>2]|0;
   $600 = (($599) + 1)|0;
   $601 = $9;
   $602 = ((($601)) + 4|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = Math_imul($600, $603)|0;
   $605 = 256 >> $604;
   $606 = (256 - ($605))|0;
   $607 = $606&255;
   HEAP8[$40>>0] = $607;
   $608 = $12;
   _ec_enc_icdf($608,0,$40,8);
   $15 = 0;
   while(1) {
    $609 = $15;
    $610 = $9;
    $611 = ((($610)) + 4|0);
    $612 = HEAP32[$611>>2]|0;
    $613 = ($609|0)<($612|0);
    if (!($613)) {
     break;
    }
    $31 = 0;
    $16 = 0;
    while(1) {
     $614 = $16;
     $615 = $33;
     $616 = $15;
     $617 = (($615) + (($616*12240)|0)|0);
     $618 = ((($617)) + 5776|0);
     $619 = HEAP32[$618>>2]|0;
     $620 = ($614|0)<($619|0);
     if (!($620)) {
      break;
     }
     $621 = $33;
     $622 = $15;
     $623 = (($621) + (($622*12240)|0)|0);
     $624 = ((($623)) + 4756|0);
     $625 = $16;
     $626 = (($624) + ($625<<2)|0);
     $627 = HEAP32[$626>>2]|0;
     $628 = $16;
     $629 = $627 << $628;
     $630 = $31;
     $631 = $630 | $629;
     $31 = $631;
     $632 = $16;
     $633 = (($632) + 1)|0;
     $16 = $633;
    }
    $634 = $31;
    $635 = ($634|0)>(0);
    $636 = $635 ? 1 : 0;
    $637 = $636&255;
    $638 = $33;
    $639 = $15;
    $640 = (($638) + (($639*12240)|0)|0);
    $641 = ((($640)) + 4755|0);
    HEAP8[$641>>0] = $637;
    $642 = $31;
    $643 = ($642|0)!=(0);
    if ($643) {
     $644 = $33;
     $645 = $15;
     $646 = (($644) + (($645*12240)|0)|0);
     $647 = ((($646)) + 5776|0);
     $648 = HEAP32[$647>>2]|0;
     $649 = ($648|0)>(1);
     if ($649) {
      $650 = $12;
      $651 = $31;
      $652 = (($651) - 1)|0;
      $653 = $33;
      $654 = $15;
      $655 = (($653) + (($654*12240)|0)|0);
      $656 = ((($655)) + 5776|0);
      $657 = HEAP32[$656>>2]|0;
      $658 = (($657) - 2)|0;
      $659 = (16804 + ($658<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      _ec_enc_icdf($650,$652,$660,8);
     }
    }
    $661 = $15;
    $662 = (($661) + 1)|0;
    $15 = $662;
   }
   $16 = 0;
   while(1) {
    $663 = $16;
    $664 = $33;
    $665 = ((($664)) + 5776|0);
    $666 = HEAP32[$665>>2]|0;
    $667 = ($663|0)<($666|0);
    $15 = 0;
    if (!($667)) {
     break;
    }
    while(1) {
     $668 = $15;
     $669 = $9;
     $670 = ((($669)) + 4|0);
     $671 = HEAP32[$670>>2]|0;
     $672 = ($668|0)<($671|0);
     if (!($672)) {
      break;
     }
     $673 = $33;
     $674 = $15;
     $675 = (($673) + (($674*12240)|0)|0);
     $676 = ((($675)) + 4756|0);
     $677 = $16;
     $678 = (($676) + ($677<<2)|0);
     $679 = HEAP32[$678>>2]|0;
     $680 = ($679|0)!=(0);
     if ($680) {
      $681 = $9;
      $682 = ((($681)) + 4|0);
      $683 = HEAP32[$682>>2]|0;
      $684 = ($683|0)==(2);
      $685 = $15;
      $686 = ($685|0)==(0);
      $or$cond15 = $684 & $686;
      if ($or$cond15) {
       $687 = $12;
       $688 = $33;
       $689 = ((($688)) + 24480|0);
       $690 = ((($689)) + 34|0);
       $691 = $16;
       $692 = (($690) + (($691*6)|0)|0);
       _silk_stereo_encode_pred($687,$692);
       $693 = $33;
       $694 = ((($693)) + 12240|0);
       $695 = ((($694)) + 4756|0);
       $696 = $16;
       $697 = (($695) + ($696<<2)|0);
       $698 = HEAP32[$697>>2]|0;
       $699 = ($698|0)==(0);
       if ($699) {
        $700 = $12;
        $701 = $33;
        $702 = ((($701)) + 24480|0);
        $703 = ((($702)) + 52|0);
        $704 = $16;
        $705 = (($703) + ($704)|0);
        $706 = HEAP8[$705>>0]|0;
        _silk_stereo_encode_mid_only($700,$706);
       }
      }
      $707 = $16;
      $708 = ($707|0)>(0);
      if ($708) {
       $709 = $33;
       $710 = $15;
       $711 = (($709) + (($710*12240)|0)|0);
       $712 = ((($711)) + 4756|0);
       $713 = $16;
       $714 = (($713) - 1)|0;
       $715 = (($712) + ($714<<2)|0);
       $716 = HEAP32[$715>>2]|0;
       $717 = ($716|0)!=(0);
       if ($717) {
        $41 = 2;
       } else {
        label = 82;
       }
      } else {
       label = 82;
      }
      if ((label|0) == 82) {
       label = 0;
       $41 = 0;
      }
      $718 = $33;
      $719 = $15;
      $720 = (($718) + (($719*12240)|0)|0);
      $721 = $12;
      $722 = $16;
      $723 = $41;
      _silk_encode_indices($720,$721,$722,1,$723);
      $724 = $12;
      $725 = $33;
      $726 = $15;
      $727 = (($725) + (($726*12240)|0)|0);
      $728 = ((($727)) + 6132|0);
      $729 = $16;
      $730 = (($728) + (($729*36)|0)|0);
      $731 = ((($730)) + 29|0);
      $732 = HEAP8[$731>>0]|0;
      $733 = $732 << 24 >> 24;
      $734 = $33;
      $735 = $15;
      $736 = (($734) + (($735*12240)|0)|0);
      $737 = ((($736)) + 6132|0);
      $738 = $16;
      $739 = (($737) + (($738*36)|0)|0);
      $740 = ((($739)) + 30|0);
      $741 = HEAP8[$740>>0]|0;
      $742 = $741 << 24 >> 24;
      $743 = $33;
      $744 = $15;
      $745 = (($743) + (($744*12240)|0)|0);
      $746 = ((($745)) + 6240|0);
      $747 = $16;
      $748 = (($746) + (($747*320)|0)|0);
      $749 = $33;
      $750 = $15;
      $751 = (($749) + (($750*12240)|0)|0);
      $752 = ((($751)) + 4608|0);
      $753 = HEAP32[$752>>2]|0;
      _silk_encode_pulses($724,$733,$742,$748,$753);
     }
     $754 = $15;
     $755 = (($754) + 1)|0;
     $15 = $755;
    }
    $756 = $16;
    $757 = (($756) + 1)|0;
    $16 = $757;
   }
   while(1) {
    $758 = $15;
    $759 = $9;
    $760 = ((($759)) + 4|0);
    $761 = HEAP32[$760>>2]|0;
    $762 = ($758|0)<($761|0);
    if (!($762)) {
     break;
    }
    $763 = $33;
    $764 = $15;
    $765 = (($763) + (($764*12240)|0)|0);
    $766 = ((($765)) + 4756|0);
    ;HEAP32[$766>>2]=0|0;HEAP32[$766+4>>2]=0|0;HEAP32[$766+8>>2]=0|0;
    $767 = $15;
    $768 = (($767) + 1)|0;
    $15 = $768;
   }
   $769 = $12;
   $770 = (_ec_tell_154($769)|0);
   $771 = $33;
   $772 = ((($771)) + 24536|0);
   HEAP32[$772>>2] = $770;
  }
  $773 = $33;
  _silk_HP_variable_cutoff($773);
  $774 = $9;
  $775 = ((($774)) + 28|0);
  $776 = HEAP32[$775>>2]|0;
  $777 = $9;
  $778 = ((($777)) + 24|0);
  $779 = HEAP32[$778>>2]|0;
  $780 = Math_imul($776, $779)|0;
  $781 = (($780|0) / 1000)&-1;
  $17 = $781;
  $782 = $14;
  $783 = ($782|0)!=(0);
  if (!($783)) {
   $784 = $33;
   $785 = ((($784)) + 24536|0);
   $786 = HEAP32[$785>>2]|0;
   $787 = $17;
   $788 = (($787) - ($786))|0;
   $17 = $788;
  }
  $789 = $17;
  $790 = $33;
  $791 = ((($790)) + 5776|0);
  $792 = HEAP32[$791>>2]|0;
  $793 = (($789|0) / ($792|0))&-1;
  $17 = $793;
  $794 = $9;
  $795 = ((($794)) + 24|0);
  $796 = HEAP32[$795>>2]|0;
  $797 = ($796|0)==(10);
  $798 = $17;
  $799 = $798&65535;
  $800 = $799 << 16 >> 16;
  if ($797) {
   $801 = ($800*100)|0;
   $28 = $801;
  } else {
   $802 = ($800*50)|0;
   $28 = $802;
  }
  $803 = $33;
  $804 = ((($803)) + 24540|0);
  $805 = HEAP32[$804>>2]|0;
  $806 = ($805*1000)|0;
  $807 = (($806|0) / 500)&-1;
  $808 = $28;
  $809 = (($808) - ($807))|0;
  $28 = $809;
  $810 = $14;
  $811 = ($810|0)!=(0);
  if (!($811)) {
   $812 = $33;
   $813 = ((($812)) + 5780|0);
   $814 = HEAP32[$813>>2]|0;
   $815 = ($814|0)>(0);
   if ($815) {
    $816 = $12;
    $817 = (_ec_tell_154($816)|0);
    $818 = $33;
    $819 = ((($818)) + 24536|0);
    $820 = HEAP32[$819>>2]|0;
    $821 = (($817) - ($820))|0;
    $822 = $17;
    $823 = $33;
    $824 = ((($823)) + 5780|0);
    $825 = HEAP32[$824>>2]|0;
    $826 = Math_imul($822, $825)|0;
    $827 = (($821) - ($826))|0;
    $42 = $827;
    $828 = $42;
    $829 = ($828*1000)|0;
    $830 = (($829|0) / 500)&-1;
    $831 = $28;
    $832 = (($831) - ($830))|0;
    $28 = $832;
   }
  }
  $833 = $9;
  $834 = ((($833)) + 28|0);
  $835 = HEAP32[$834>>2]|0;
  $836 = ($835|0)>(5000);
  $837 = $28;
  do {
   if ($836) {
    $838 = $9;
    $839 = ((($838)) + 28|0);
    $840 = HEAP32[$839>>2]|0;
    $841 = ($837|0)>($840|0);
    if ($841) {
     $842 = $9;
     $843 = ((($842)) + 28|0);
     $844 = HEAP32[$843>>2]|0;
     $859 = $844;
     break;
    } else {
     $845 = $28;
     $846 = ($845|0)<(5000);
     $847 = $28;
     $848 = $846 ? 5000 : $847;
     $859 = $848;
     break;
    }
   } else {
    $849 = ($837|0)>(5000);
    if ($849) {
     $859 = 5000;
    } else {
     $850 = $28;
     $851 = $9;
     $852 = ((($851)) + 28|0);
     $853 = HEAP32[$852>>2]|0;
     $854 = ($850|0)<($853|0);
     if ($854) {
      $855 = $9;
      $856 = ((($855)) + 28|0);
      $857 = HEAP32[$856>>2]|0;
      $859 = $857;
      break;
     } else {
      $858 = $28;
      $859 = $858;
      break;
     }
    }
   }
  } while(0);
  $28 = $859;
  $860 = $9;
  $861 = ((($860)) + 4|0);
  $862 = HEAP32[$861>>2]|0;
  $863 = ($862|0)==(2);
  $864 = $33;
  if ($863) {
   $865 = ((($864)) + 24480|0);
   $866 = $33;
   $867 = ((($866)) + 5128|0);
   $868 = ((($867)) + 4|0);
   $869 = $33;
   $870 = ((($869)) + 12240|0);
   $871 = ((($870)) + 5128|0);
   $872 = ((($871)) + 4|0);
   $873 = $33;
   $874 = ((($873)) + 24480|0);
   $875 = ((($874)) + 34|0);
   $876 = $33;
   $877 = ((($876)) + 5780|0);
   $878 = HEAP32[$877>>2]|0;
   $879 = (($875) + (($878*6)|0)|0);
   $880 = $33;
   $881 = ((($880)) + 24480|0);
   $882 = ((($881)) + 52|0);
   $883 = $33;
   $884 = ((($883)) + 5780|0);
   $885 = HEAP32[$884>>2]|0;
   $886 = (($882) + ($885)|0);
   $887 = $28;
   $888 = $33;
   $889 = ((($888)) + 4556|0);
   $890 = HEAP32[$889>>2]|0;
   $891 = $9;
   $892 = ((($891)) + 56|0);
   $893 = HEAP32[$892>>2]|0;
   $894 = $33;
   $895 = ((($894)) + 4600|0);
   $896 = HEAP32[$895>>2]|0;
   $897 = $33;
   $898 = ((($897)) + 4608|0);
   $899 = HEAP32[$898>>2]|0;
   _silk_stereo_LR_to_MS($865,$868,$872,$879,$886,$29,$887,$890,$893,$896,$899);
   $900 = $33;
   $901 = ((($900)) + 24480|0);
   $902 = ((($901)) + 52|0);
   $903 = $33;
   $904 = ((($903)) + 5780|0);
   $905 = HEAP32[$904>>2]|0;
   $906 = (($902) + ($905)|0);
   $907 = HEAP8[$906>>0]|0;
   $908 = $907 << 24 >> 24;
   $909 = ($908|0)==(0);
   $910 = $33;
   if ($909) {
    $911 = ((($910)) + 24564|0);
    $912 = HEAP32[$911>>2]|0;
    $913 = ($912|0)==(1);
    if ($913) {
     $914 = $33;
     $915 = ((($914)) + 12240|0);
     $916 = ((($915)) + 7200|0);
     ;HEAP32[$916>>2]=0|0;HEAP32[$916+4>>2]=0|0;HEAP32[$916+8>>2]=0|0;HEAP32[$916+12>>2]=0|0;
     $917 = $33;
     $918 = ((($917)) + 12240|0);
     $919 = ((($918)) + 7216|0);
     _memset(($919|0),0,2140)|0;
     $920 = $33;
     $921 = ((($920)) + 12240|0);
     $922 = ((($921)) + 144|0);
     _memset(($922|0),0,4380)|0;
     $923 = $33;
     $924 = ((($923)) + 12240|0);
     $925 = ((($924)) + 4524|0);
     ;HEAP32[$925>>2]=0|0;HEAP32[$925+4>>2]=0|0;HEAP32[$925+8>>2]=0|0;HEAP32[$925+12>>2]=0|0;HEAP32[$925+16>>2]=0|0;HEAP32[$925+20>>2]=0|0;HEAP32[$925+24>>2]=0|0;HEAP32[$925+28>>2]=0|0;
     $926 = $33;
     $927 = ((($926)) + 12240|0);
     $928 = ((($927)) + 16|0);
     ;HEAP32[$928>>2]=0|0;HEAP32[$928+4>>2]=0|0;
     $929 = $33;
     $930 = ((($929)) + 12240|0);
     $931 = ((($930)) + 4568|0);
     HEAP32[$931>>2] = 100;
     $932 = $33;
     $933 = ((($932)) + 12240|0);
     $934 = ((($933)) + 144|0);
     $935 = ((($934)) + 4356|0);
     HEAP32[$935>>2] = 100;
     $936 = $33;
     $937 = ((($936)) + 12240|0);
     $938 = ((($937)) + 7200|0);
     HEAP8[$938>>0] = 10;
     $939 = $33;
     $940 = ((($939)) + 12240|0);
     $941 = ((($940)) + 4565|0);
     HEAP8[$941>>0] = 0;
     $942 = $33;
     $943 = ((($942)) + 12240|0);
     $944 = ((($943)) + 144|0);
     $945 = ((($944)) + 4372|0);
     HEAP32[$945>>2] = 65536;
     $946 = $33;
     $947 = ((($946)) + 12240|0);
     $948 = ((($947)) + 4696|0);
     HEAP32[$948>>2] = 1;
    }
    $949 = $33;
    $950 = ((($949)) + 12240|0);
    _silk_encode_do_VAD_FLP($950);
   } else {
    $951 = ((($910)) + 12240|0);
    $952 = ((($951)) + 4752|0);
    $953 = $33;
    $954 = ((($953)) + 5780|0);
    $955 = HEAP32[$954>>2]|0;
    $956 = (($952) + ($955)|0);
    HEAP8[$956>>0] = 0;
   }
   $957 = $14;
   $958 = ($957|0)!=(0);
   if (!($958)) {
    $959 = $12;
    $960 = $33;
    $961 = ((($960)) + 24480|0);
    $962 = ((($961)) + 34|0);
    $963 = $33;
    $964 = ((($963)) + 5780|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = (($962) + (($965*6)|0)|0);
    _silk_stereo_encode_pred($959,$966);
    $967 = $33;
    $968 = ((($967)) + 12240|0);
    $969 = ((($968)) + 4752|0);
    $970 = $33;
    $971 = ((($970)) + 5780|0);
    $972 = HEAP32[$971>>2]|0;
    $973 = (($969) + ($972)|0);
    $974 = HEAP8[$973>>0]|0;
    $975 = $974 << 24 >> 24;
    $976 = ($975|0)==(0);
    if ($976) {
     $977 = $12;
     $978 = $33;
     $979 = ((($978)) + 24480|0);
     $980 = ((($979)) + 52|0);
     $981 = $33;
     $982 = ((($981)) + 5780|0);
     $983 = HEAP32[$982>>2]|0;
     $984 = (($980) + ($983)|0);
     $985 = HEAP8[$984>>0]|0;
     _silk_stereo_encode_mid_only($977,$985);
    }
   }
  } else {
   $986 = ((($864)) + 5128|0);
   $987 = $33;
   $988 = ((($987)) + 24480|0);
   $989 = ((($988)) + 4|0);
   ;HEAP32[$986>>2]=HEAP32[$989>>2]|0;
   $990 = $33;
   $991 = ((($990)) + 24480|0);
   $992 = ((($991)) + 4|0);
   $993 = $33;
   $994 = ((($993)) + 5128|0);
   $995 = $33;
   $996 = ((($995)) + 4608|0);
   $997 = HEAP32[$996>>2]|0;
   $998 = (($994) + ($997<<1)|0);
   ;HEAP16[$992>>1]=HEAP16[$998>>1]|0;HEAP16[$992+2>>1]=HEAP16[$998+2>>1]|0;
  }
  $999 = $33;
  _silk_encode_do_VAD_FLP($999);
  $15 = 0;
  while(1) {
   $1000 = $15;
   $1001 = $9;
   $1002 = ((($1001)) + 4|0);
   $1003 = HEAP32[$1002>>2]|0;
   $1004 = ($1000|0)<($1003|0);
   if (!($1004)) {
    break;
   }
   $1005 = $9;
   $1006 = ((($1005)) + 52|0);
   $1007 = HEAP32[$1006>>2]|0;
   $43 = $1007;
   $1008 = $36;
   $1009 = ($1008|0)==(2);
   $1010 = $35;
   $1011 = ($1010|0)==(0);
   $or$cond17 = $1009 & $1011;
   do {
    if ($or$cond17) {
     $1012 = $43;
     $1013 = ($1012*3)|0;
     $1014 = (($1013|0) / 5)&-1;
     $43 = $1014;
    } else {
     $1015 = $36;
     $1016 = ($1015|0)==(3);
     if ($1016) {
      $1017 = $35;
      $1018 = ($1017|0)==(0);
      if ($1018) {
       $1019 = $43;
       $1020 = $1019<<1;
       $1021 = (($1020|0) / 5)&-1;
       $43 = $1021;
       break;
      }
      $1022 = $35;
      $1023 = ($1022|0)==(1);
      if (!($1023)) {
       break;
      }
      $1024 = $43;
      $1025 = ($1024*3)|0;
      $1026 = (($1025|0) / 4)&-1;
      $43 = $1026;
     }
    }
   } while(0);
   $1027 = $9;
   $1028 = ((($1027)) + 48|0);
   $1029 = HEAP32[$1028>>2]|0;
   $1030 = ($1029|0)!=(0);
   if ($1030) {
    $1031 = $35;
    $1032 = $36;
    $1033 = (($1032) - 1)|0;
    $1034 = ($1031|0)==($1033|0);
    $1036 = $1034;
   } else {
    $1036 = 0;
   }
   $1035 = $1036&1;
   $44 = $1035;
   $1037 = $9;
   $1038 = ((($1037)) + 4|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = ($1039|0)==(1);
   do {
    if ($1040) {
     $1041 = $28;
     $30 = $1041;
    } else {
     $1042 = $15;
     $1043 = (($29) + ($1042<<2)|0);
     $1044 = HEAP32[$1043>>2]|0;
     $30 = $1044;
     $1045 = $15;
     $1046 = ($1045|0)==(0);
     if (!($1046)) {
      break;
     }
     $1047 = ((($29)) + 4|0);
     $1048 = HEAP32[$1047>>2]|0;
     $1049 = ($1048|0)>(0);
     if (!($1049)) {
      break;
     }
     $44 = 0;
     $1050 = $9;
     $1051 = ((($1050)) + 52|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = $36;
     $1054 = $1053<<1;
     $1055 = (($1052|0) / ($1054|0))&-1;
     $1056 = $43;
     $1057 = (($1056) - ($1055))|0;
     $43 = $1057;
    }
   } while(0);
   $1058 = $30;
   $1059 = ($1058|0)>(0);
   if ($1059) {
    $1060 = $33;
    $1061 = $15;
    $1062 = (($1060) + (($1061*12240)|0)|0);
    $1063 = $30;
    (_silk_control_SNR($1062,$1063)|0);
    $1064 = $33;
    $1065 = ((($1064)) + 5780|0);
    $1066 = HEAP32[$1065>>2]|0;
    $1067 = $15;
    $1068 = (($1066) - ($1067))|0;
    $1069 = ($1068|0)<=(0);
    L188: do {
     if ($1069) {
      $45 = 0;
     } else {
      $1070 = $15;
      $1071 = ($1070|0)>(0);
      do {
       if ($1071) {
        $1072 = $33;
        $1073 = ((($1072)) + 24564|0);
        $1074 = HEAP32[$1073>>2]|0;
        $1075 = ($1074|0)!=(0);
        if (!($1075)) {
         break;
        }
        $45 = 1;
        break L188;
       }
      } while(0);
      $45 = 2;
     }
    } while(0);
    $1076 = $33;
    $1077 = $15;
    $1078 = (($1076) + (($1077*12240)|0)|0);
    $1079 = $13;
    $1080 = $12;
    $1081 = $45;
    $1082 = $43;
    $1083 = $44;
    $1084 = (_silk_encode_frame_FLP($1078,$1079,$1080,$1081,$1082,$1083)|0);
    $21 = $1084;
   }
   $1085 = $33;
   $1086 = $15;
   $1087 = (($1085) + (($1086*12240)|0)|0);
   $1088 = ((($1087)) + 4700|0);
   HEAP32[$1088>>2] = 0;
   $1089 = $33;
   $1090 = $15;
   $1091 = (($1089) + (($1090*12240)|0)|0);
   $1092 = ((($1091)) + 5772|0);
   HEAP32[$1092>>2] = 0;
   $1093 = $33;
   $1094 = $15;
   $1095 = (($1093) + (($1094*12240)|0)|0);
   $1096 = ((($1095)) + 5780|0);
   $1097 = HEAP32[$1096>>2]|0;
   $1098 = (($1097) + 1)|0;
   HEAP32[$1096>>2] = $1098;
   $1099 = $15;
   $1100 = (($1099) + 1)|0;
   $15 = $1100;
  }
  $1101 = $33;
  $1102 = ((($1101)) + 24480|0);
  $1103 = ((($1102)) + 52|0);
  $1104 = $33;
  $1105 = ((($1104)) + 5780|0);
  $1106 = HEAP32[$1105>>2]|0;
  $1107 = (($1106) - 1)|0;
  $1108 = (($1103) + ($1107)|0);
  $1109 = HEAP8[$1108>>0]|0;
  $1110 = $1109 << 24 >> 24;
  $1111 = $33;
  $1112 = ((($1111)) + 24564|0);
  HEAP32[$1112>>2] = $1110;
  $1113 = $13;
  $1114 = HEAP32[$1113>>2]|0;
  $1115 = ($1114|0)>(0);
  do {
   if ($1115) {
    $1116 = $33;
    $1117 = ((($1116)) + 5780|0);
    $1118 = HEAP32[$1117>>2]|0;
    $1119 = $33;
    $1120 = ((($1119)) + 5776|0);
    $1121 = HEAP32[$1120>>2]|0;
    $1122 = ($1118|0)==($1121|0);
    if ($1122) {
     $18 = 0;
     $15 = 0;
     while(1) {
      $1123 = $15;
      $1124 = $9;
      $1125 = ((($1124)) + 4|0);
      $1126 = HEAP32[$1125>>2]|0;
      $1127 = ($1123|0)<($1126|0);
      if (!($1127)) {
       break;
      }
      $16 = 0;
      while(1) {
       $1128 = $16;
       $1129 = $33;
       $1130 = $15;
       $1131 = (($1129) + (($1130*12240)|0)|0);
       $1132 = ((($1131)) + 5776|0);
       $1133 = HEAP32[$1132>>2]|0;
       $1134 = ($1128|0)<($1133|0);
       $1135 = $18;
       $1136 = $1135 << 1;
       $18 = $1136;
       $1137 = $33;
       $1138 = $15;
       $1139 = (($1137) + (($1138*12240)|0)|0);
       if (!($1134)) {
        break;
       }
       $1140 = ((($1139)) + 4752|0);
       $1141 = $16;
       $1142 = (($1140) + ($1141)|0);
       $1143 = HEAP8[$1142>>0]|0;
       $1144 = $1143 << 24 >> 24;
       $1145 = $18;
       $1146 = $1145 | $1144;
       $18 = $1146;
       $1147 = $16;
       $1148 = (($1147) + 1)|0;
       $16 = $1148;
      }
      $1149 = ((($1139)) + 4755|0);
      $1150 = HEAP8[$1149>>0]|0;
      $1151 = $1150 << 24 >> 24;
      $1152 = $18;
      $1153 = $1152 | $1151;
      $18 = $1153;
      $1154 = $15;
      $1155 = (($1154) + 1)|0;
      $15 = $1155;
     }
     $1156 = $14;
     $1157 = ($1156|0)!=(0);
     if (!($1157)) {
      $1158 = $12;
      $1159 = $18;
      $1160 = $33;
      $1161 = ((($1160)) + 5776|0);
      $1162 = HEAP32[$1161>>2]|0;
      $1163 = (($1162) + 1)|0;
      $1164 = $9;
      $1165 = ((($1164)) + 4|0);
      $1166 = HEAP32[$1165>>2]|0;
      $1167 = Math_imul($1163, $1166)|0;
      _ec_enc_patch_initial_bits($1158,$1159,$1167);
     }
     $1168 = $33;
     $1169 = ((($1168)) + 6112|0);
     $1170 = HEAP32[$1169>>2]|0;
     $1171 = ($1170|0)!=(0);
     do {
      if ($1171) {
       $1172 = $9;
       $1173 = ((($1172)) + 4|0);
       $1174 = HEAP32[$1173>>2]|0;
       $1175 = ($1174|0)==(1);
       if (!($1175)) {
        $1176 = $33;
        $1177 = ((($1176)) + 12240|0);
        $1178 = ((($1177)) + 6112|0);
        $1179 = HEAP32[$1178>>2]|0;
        $1180 = ($1179|0)!=(0);
        if (!($1180)) {
         break;
        }
       }
       $1181 = $13;
       HEAP32[$1181>>2] = 0;
      }
     } while(0);
     $1182 = $13;
     $1183 = HEAP32[$1182>>2]|0;
     $1184 = $1183<<3;
     $1185 = $33;
     $1186 = ((($1185)) + 24540|0);
     $1187 = HEAP32[$1186>>2]|0;
     $1188 = (($1187) + ($1184))|0;
     HEAP32[$1186>>2] = $1188;
     $1189 = $9;
     $1190 = ((($1189)) + 28|0);
     $1191 = HEAP32[$1190>>2]|0;
     $1192 = $9;
     $1193 = ((($1192)) + 24|0);
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = Math_imul($1191, $1194)|0;
     $1196 = (($1195|0) / 1000)&-1;
     $1197 = $33;
     $1198 = ((($1197)) + 24540|0);
     $1199 = HEAP32[$1198>>2]|0;
     $1200 = (($1199) - ($1196))|0;
     HEAP32[$1198>>2] = $1200;
     $1201 = $33;
     $1202 = ((($1201)) + 24540|0);
     $1203 = HEAP32[$1202>>2]|0;
     $1204 = ($1203|0)>(10000);
     do {
      if ($1204) {
       $1214 = 10000;
      } else {
       $1205 = $33;
       $1206 = ((($1205)) + 24540|0);
       $1207 = HEAP32[$1206>>2]|0;
       $1208 = ($1207|0)<(0);
       if ($1208) {
        $1214 = 0;
        break;
       }
       $1209 = $33;
       $1210 = ((($1209)) + 24540|0);
       $1211 = HEAP32[$1210>>2]|0;
       $1214 = $1211;
      }
     } while(0);
     $1212 = $33;
     $1213 = ((($1212)) + 24540|0);
     HEAP32[$1213>>2] = $1214;
     $1215 = $33;
     $1216 = ((($1215)) + 24556|0);
     $1217 = HEAP32[$1216>>2]|0;
     $1218 = $1217&65535;
     $1219 = $1218 << 16 >> 16;
     $1220 = 0;
     $1221 = $33;
     $1222 = ((($1221)) + 24556|0);
     $1223 = HEAP32[$1222>>2]|0;
     $1224 = $1223&65535;
     $1225 = $1224 << 16 >> 16;
     $1226 = ($1225*3188)|0;
     $1227 = $1226 >> 16;
     $1228 = (($1220) + ($1227))|0;
     $1229 = (13 + ($1228))|0;
     $27 = $1229;
     $1230 = $33;
     $1231 = ((($1230)) + 4556|0);
     $1232 = HEAP32[$1231>>2]|0;
     $1233 = $27;
     $1234 = ($1232|0)<($1233|0);
     $1235 = $33;
     $1236 = ((($1235)) + 24560|0);
     if ($1234) {
      HEAP32[$1236>>2] = 1;
      $1237 = $33;
      $1238 = ((($1237)) + 24556|0);
      HEAP32[$1238>>2] = 0;
      break;
     } else {
      HEAP32[$1236>>2] = 0;
      $1239 = $9;
      $1240 = ((($1239)) + 24|0);
      $1241 = HEAP32[$1240>>2]|0;
      $1242 = $33;
      $1243 = ((($1242)) + 24556|0);
      $1244 = HEAP32[$1243>>2]|0;
      $1245 = (($1244) + ($1241))|0;
      HEAP32[$1243>>2] = $1245;
      break;
     }
    }
   }
  } while(0);
  $1246 = $11;
  $1247 = ($1246|0)==(0);
  if ($1247) {
   break;
  }
  $1248 = $35;
  $1249 = (($1248) + 1)|0;
  $35 = $1249;
 }
 $1250 = $9;
 $1251 = ((($1250)) + 4|0);
 $1252 = HEAP32[$1251>>2]|0;
 $1253 = $33;
 $1254 = ((($1253)) + 24552|0);
 HEAP32[$1254>>2] = $1252;
 $1255 = $33;
 $1256 = ((($1255)) + 24560|0);
 $1257 = HEAP32[$1256>>2]|0;
 $1258 = $9;
 $1259 = ((($1258)) + 72|0);
 HEAP32[$1259>>2] = $1257;
 $1260 = $33;
 $1261 = ((($1260)) + 4600|0);
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = ($1262|0)==(16);
 if ($1263) {
  $1264 = $33;
  $1265 = ((($1264)) + 16|0);
  $1266 = ((($1265)) + 12|0);
  $1267 = HEAP32[$1266>>2]|0;
  $1268 = ($1267|0)==(0);
  $1270 = $1268;
 } else {
  $1270 = 0;
 }
 $1269 = $1270&1;
 $1271 = $9;
 $1272 = ((($1271)) + 76|0);
 HEAP32[$1272>>2] = $1269;
 $1273 = $33;
 $1274 = ((($1273)) + 4600|0);
 $1275 = HEAP32[$1274>>2]|0;
 $1276 = $1275&65535;
 $1277 = $1276 << 16 >> 16;
 $1278 = ($1277*1000)|0;
 $1279 = $9;
 $1280 = ((($1279)) + 68|0);
 HEAP32[$1280>>2] = $1278;
 $1281 = $9;
 $1282 = ((($1281)) + 56|0);
 $1283 = HEAP32[$1282>>2]|0;
 $1284 = ($1283|0)!=(0);
 if ($1284) {
  $1292 = 0;
 } else {
  $1285 = $33;
  $1286 = ((($1285)) + 24480|0);
  $1287 = ((($1286)) + 28|0);
  $1288 = HEAP16[$1287>>1]|0;
  $1289 = $1288 << 16 >> 16;
  $1292 = $1289;
 }
 $1290 = $9;
 $1291 = ((($1290)) + 80|0);
 HEAP32[$1291>>2] = $1292;
 $1293 = $14;
 $1294 = ($1293|0)!=(0);
 L234: do {
  if ($1294) {
   $1295 = $19;
   $1296 = $9;
   $1297 = ((($1296)) + 24|0);
   HEAP32[$1297>>2] = $1295;
   $1298 = $20;
   $1299 = $9;
   $1300 = ((($1299)) + 36|0);
   HEAP32[$1300>>2] = $1298;
   $15 = 0;
   while(1) {
    $1301 = $15;
    $1302 = $9;
    $1303 = ((($1302)) + 4|0);
    $1304 = HEAP32[$1303>>2]|0;
    $1305 = ($1301|0)<($1304|0);
    if (!($1305)) {
     break L234;
    }
    $1306 = $33;
    $1307 = $15;
    $1308 = (($1306) + (($1307*12240)|0)|0);
    $1309 = ((($1308)) + 4700|0);
    HEAP32[$1309>>2] = 0;
    $1310 = $33;
    $1311 = $15;
    $1312 = (($1310) + (($1311*12240)|0)|0);
    $1313 = ((($1312)) + 4712|0);
    HEAP32[$1313>>2] = 0;
    $1314 = $15;
    $1315 = (($1314) + 1)|0;
    $15 = $1315;
   }
  }
 } while(0);
 $1316 = $21;
 $7 = $1316;
 $1317 = $38;
 _llvm_stackrestore(($1317|0));
 $1318 = $7;
 STACKTOP = sp;return ($1318|0);
}
function _ec_tell_154($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _silk_encode_indices($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $15 = sp + 56|0;
 $16 = sp + 88|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $20 = $8;
 $21 = ($20|0)!=(0);
 $22 = $5;
 if ($21) {
  $23 = ((($22)) + 6132|0);
  $24 = $7;
  $25 = (($23) + (($24*36)|0)|0);
  $17 = $25;
 } else {
  $26 = ((($22)) + 4768|0);
  $17 = $26;
 }
 $27 = $17;
 $28 = ((($27)) + 29|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29 << 24 >> 24;
 $31 = $30<<1;
 $32 = $17;
 $33 = ((($32)) + 30|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = (($31) + ($35))|0;
 $12 = $36;
 $37 = $8;
 $38 = ($37|0)!=(0);
 $39 = $12;
 $40 = ($39|0)>=(2);
 $or$cond = $38 | $40;
 $41 = $6;
 $42 = $12;
 if ($or$cond) {
  $43 = (($42) - 2)|0;
  _ec_enc_icdf($41,$43,27699,8);
 } else {
  _ec_enc_icdf($41,$42,27703,8);
 }
 $44 = $9;
 $45 = ($44|0)==(2);
 $46 = $6;
 $47 = $17;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48 << 24 >> 24;
 if ($45) {
  _ec_enc_icdf($46,$49,27162,8);
 } else {
  $50 = $49 >> 3;
  $51 = $17;
  $52 = ((($51)) + 29|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = (27138 + ($54<<3)|0);
  _ec_enc_icdf($46,$50,$55,8);
  $56 = $6;
  $57 = $17;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58 << 24 >> 24;
  $60 = $59 & 7;
  _ec_enc_icdf($56,$60,27728,8);
 }
 $10 = 1;
 while(1) {
  $61 = $10;
  $62 = $5;
  $63 = ((($62)) + 4604|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61|0)<($64|0);
  $66 = $6;
  $67 = $17;
  if (!($65)) {
   break;
  }
  $68 = $10;
  $69 = (($67) + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  _ec_enc_icdf($66,$71,27162,8);
  $72 = $10;
  $73 = (($72) + 1)|0;
  $10 = $73;
 }
 $74 = ((($67)) + 8|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75 << 24 >> 24;
 $77 = $5;
 $78 = ((($77)) + 4724|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $17;
 $83 = ((($82)) + 29|0);
 $84 = HEAP8[$83>>0]|0;
 $85 = $84 << 24 >> 24;
 $86 = $85 >> 1;
 $87 = $5;
 $88 = ((($87)) + 4724|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP16[$89>>1]|0;
 $91 = $90 << 16 >> 16;
 $92 = Math_imul($86, $91)|0;
 $93 = (($81) + ($92)|0);
 _ec_enc_icdf($66,$76,$93,8);
 $94 = $5;
 $95 = ((($94)) + 4724|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $17;
 $98 = ((($97)) + 8|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99 << 24 >> 24;
 _silk_NLSF_unpack($15,$16,$96,$100);
 $10 = 0;
 while(1) {
  $101 = $10;
  $102 = $5;
  $103 = ((($102)) + 4724|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($104)) + 2|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 << 16 >> 16;
  $108 = ($101|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $17;
  $110 = ((($109)) + 8|0);
  $111 = $10;
  $112 = (($111) + 1)|0;
  $113 = (($110) + ($112)|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114 << 24 >> 24;
  $116 = ($115|0)>=(4);
  do {
   if ($116) {
    $117 = $6;
    $118 = $5;
    $119 = ((($118)) + 4724|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ((($120)) + 24|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $10;
    $124 = (($15) + ($123<<1)|0);
    $125 = HEAP16[$124>>1]|0;
    $126 = $125 << 16 >> 16;
    $127 = (($122) + ($126)|0);
    _ec_enc_icdf($117,8,$127,8);
    $128 = $6;
    $129 = $17;
    $130 = ((($129)) + 8|0);
    $131 = $10;
    $132 = (($131) + 1)|0;
    $133 = (($130) + ($132)|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134 << 24 >> 24;
    $136 = (($135) - 4)|0;
    _ec_enc_icdf($128,$136,27736,8);
   } else {
    $137 = $17;
    $138 = ((($137)) + 8|0);
    $139 = $10;
    $140 = (($139) + 1)|0;
    $141 = (($138) + ($140)|0);
    $142 = HEAP8[$141>>0]|0;
    $143 = $142 << 24 >> 24;
    $144 = ($143|0)<=(-4);
    $145 = $6;
    if ($144) {
     $146 = $5;
     $147 = ((($146)) + 4724|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ((($148)) + 24|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = $10;
     $152 = (($15) + ($151<<1)|0);
     $153 = HEAP16[$152>>1]|0;
     $154 = $153 << 16 >> 16;
     $155 = (($150) + ($154)|0);
     _ec_enc_icdf($145,0,$155,8);
     $156 = $6;
     $157 = $17;
     $158 = ((($157)) + 8|0);
     $159 = $10;
     $160 = (($159) + 1)|0;
     $161 = (($158) + ($160)|0);
     $162 = HEAP8[$161>>0]|0;
     $163 = $162 << 24 >> 24;
     $164 = (0 - ($163))|0;
     $165 = (($164) - 4)|0;
     _ec_enc_icdf($156,$165,27736,8);
     break;
    } else {
     $166 = $17;
     $167 = ((($166)) + 8|0);
     $168 = $10;
     $169 = (($168) + 1)|0;
     $170 = (($167) + ($169)|0);
     $171 = HEAP8[$170>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = (($172) + 4)|0;
     $174 = $5;
     $175 = ((($174)) + 4724|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = ((($176)) + 24|0);
     $178 = HEAP32[$177>>2]|0;
     $179 = $10;
     $180 = (($15) + ($179<<1)|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $181 << 16 >> 16;
     $183 = (($178) + ($182)|0);
     _ec_enc_icdf($145,$173,$183,8);
     break;
    }
   }
  } while(0);
  $184 = $10;
  $185 = (($184) + 1)|0;
  $10 = $185;
 }
 $186 = $5;
 $187 = ((($186)) + 4604|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)==(4);
 if ($189) {
  $190 = $6;
  $191 = $17;
  $192 = ((($191)) + 31|0);
  $193 = HEAP8[$192>>0]|0;
  $194 = $193 << 24 >> 24;
  _ec_enc_icdf($190,$194,27705,8);
 }
 $195 = $17;
 $196 = ((($195)) + 29|0);
 $197 = HEAP8[$196>>0]|0;
 $198 = $197 << 24 >> 24;
 $199 = ($198|0)==(2);
 if (!($199)) {
  $301 = $17;
  $302 = ((($301)) + 29|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303 << 24 >> 24;
  $305 = $5;
  $306 = ((($305)) + 5800|0);
  HEAP32[$306>>2] = $304;
  $307 = $6;
  $308 = $17;
  $309 = ((($308)) + 34|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $310 << 24 >> 24;
  _ec_enc_icdf($307,$311,27713,8);
  STACKTOP = sp;return;
 }
 $13 = 1;
 $200 = $9;
 $201 = ($200|0)==(2);
 if ($201) {
  $202 = $5;
  $203 = ((($202)) + 5800|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)==(2);
  if ($205) {
   $206 = $17;
   $207 = ((($206)) + 26|0);
   $208 = HEAP16[$207>>1]|0;
   $209 = $208 << 16 >> 16;
   $210 = $5;
   $211 = ((($210)) + 5804|0);
   $212 = HEAP16[$211>>1]|0;
   $213 = $212 << 16 >> 16;
   $214 = (($209) - ($213))|0;
   $14 = $214;
   $215 = $14;
   $216 = ($215|0)<(-8);
   $217 = $14;
   $218 = ($217|0)>(11);
   $or$cond3 = $216 | $218;
   if ($or$cond3) {
    $14 = 0;
   } else {
    $219 = $14;
    $220 = (($219) + 9)|0;
    $14 = $220;
    $13 = 0;
   }
   $221 = $6;
   $222 = $14;
   _ec_enc_icdf($221,$222,27775,8);
  }
 }
 $223 = $13;
 $224 = ($223|0)!=(0);
 if ($224) {
  $225 = $17;
  $226 = ((($225)) + 26|0);
  $227 = HEAP16[$226>>1]|0;
  $228 = $227 << 16 >> 16;
  $229 = $5;
  $230 = ((($229)) + 4600|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = $231 >> 1;
  $233 = (($228|0) / ($232|0))&-1;
  $18 = $233;
  $234 = $17;
  $235 = ((($234)) + 26|0);
  $236 = HEAP16[$235>>1]|0;
  $237 = $236 << 16 >> 16;
  $238 = $18;
  $239 = $238&65535;
  $240 = $239 << 16 >> 16;
  $241 = $5;
  $242 = ((($241)) + 4600|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $243 >> 1;
  $245 = $244&65535;
  $246 = $245 << 16 >> 16;
  $247 = Math_imul($240, $246)|0;
  $248 = (($237) - ($247))|0;
  $19 = $248;
  $249 = $6;
  $250 = $18;
  _ec_enc_icdf($249,$250,27743,8);
  $251 = $6;
  $252 = $19;
  $253 = $5;
  $254 = ((($253)) + 4716|0);
  $255 = HEAP32[$254>>2]|0;
  _ec_enc_icdf($251,$252,$255,8);
 }
 $256 = $17;
 $257 = ((($256)) + 26|0);
 $258 = HEAP16[$257>>1]|0;
 $259 = $5;
 $260 = ((($259)) + 5804|0);
 HEAP16[$260>>1] = $258;
 $261 = $6;
 $262 = $17;
 $263 = ((($262)) + 28|0);
 $264 = HEAP8[$263>>0]|0;
 $265 = $264 << 24 >> 24;
 $266 = $5;
 $267 = ((($266)) + 4720|0);
 $268 = HEAP32[$267>>2]|0;
 _ec_enc_icdf($261,$265,$268,8);
 $269 = $6;
 $270 = $17;
 $271 = ((($270)) + 32|0);
 $272 = HEAP8[$271>>0]|0;
 $273 = $272 << 24 >> 24;
 _ec_enc_icdf($269,$273,27203,8);
 $11 = 0;
 while(1) {
  $274 = $11;
  $275 = $5;
  $276 = ((($275)) + 4604|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ($274|0)<($277|0);
  if (!($278)) {
   break;
  }
  $279 = $6;
  $280 = $17;
  $281 = ((($280)) + 4|0);
  $282 = $11;
  $283 = (($281) + ($282)|0);
  $284 = HEAP8[$283>>0]|0;
  $285 = $284 << 24 >> 24;
  $286 = $17;
  $287 = ((($286)) + 32|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $288 << 24 >> 24;
  $290 = (16660 + ($289<<2)|0);
  $291 = HEAP32[$290>>2]|0;
  _ec_enc_icdf($279,$285,$291,8);
  $292 = $11;
  $293 = (($292) + 1)|0;
  $11 = $293;
 }
 $294 = $9;
 $295 = ($294|0)==(0);
 if (!($295)) {
  $301 = $17;
  $302 = ((($301)) + 29|0);
  $303 = HEAP8[$302>>0]|0;
  $304 = $303 << 24 >> 24;
  $305 = $5;
  $306 = ((($305)) + 5800|0);
  HEAP32[$306>>2] = $304;
  $307 = $6;
  $308 = $17;
  $309 = ((($308)) + 34|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $310 << 24 >> 24;
  _ec_enc_icdf($307,$311,27713,8);
  STACKTOP = sp;return;
 }
 $296 = $6;
 $297 = $17;
 $298 = ((($297)) + 33|0);
 $299 = HEAP8[$298>>0]|0;
 $300 = $299 << 24 >> 24;
 _ec_enc_icdf($296,$300,27696,8);
 $301 = $17;
 $302 = ((($301)) + 29|0);
 $303 = HEAP8[$302>>0]|0;
 $304 = $303 << 24 >> 24;
 $305 = $5;
 $306 = ((($305)) + 5800|0);
 HEAP32[$306>>2] = $304;
 $307 = $6;
 $308 = $17;
 $309 = ((($308)) + 34|0);
 $310 = HEAP8[$309>>0]|0;
 $311 = $310 << 24 >> 24;
 _ec_enc_icdf($307,$311,27713,8);
 STACKTOP = sp;return;
}
function _silk_encode_pulses($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul23 = 0, $$alloca_mul25 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $21 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = 0;
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;HEAP32[$21+16>>2]=0|0;HEAP32[$21+20>>2]=0|0;HEAP32[$21+24>>2]=0|0;HEAP32[$21+28>>2]=0|0;
 $27 = $9;
 $28 = $27 >> 4;
 $13 = $28;
 $29 = $13;
 $30 = $29<<4;
 $31 = $9;
 $32 = ($30|0)<($31|0);
 if ($32) {
  $33 = $13;
  $34 = (($33) + 1)|0;
  $13 = $34;
  $35 = $8;
  $36 = $9;
  $37 = (($35) + ($36)|0);
  dest=$37; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 }
 $38 = $13;
 $39 = $38<<4;
 $40 = (_llvm_stacksave()|0);
 $26 = $40;
 $$alloca_mul = $39<<2;
 $41 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $10 = 0;
 while(1) {
  $42 = $10;
  $43 = $13;
  $44 = $43<<4;
  $45 = ($42|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $8;
  $47 = $10;
  $48 = (($47) + 0)|0;
  $49 = (($46) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)>(0);
  $53 = $8;
  $54 = $10;
  $55 = (($54) + 0)|0;
  $56 = (($53) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = (0 - ($58))|0;
  $60 = $52 ? $58 : $59;
  $61 = $10;
  $62 = (($61) + 0)|0;
  $63 = (($41) + ($62<<2)|0);
  HEAP32[$63>>2] = $60;
  $64 = $8;
  $65 = $10;
  $66 = (($65) + 1)|0;
  $67 = (($64) + ($66)|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68 << 24 >> 24;
  $70 = ($69|0)>(0);
  $71 = $8;
  $72 = $10;
  $73 = (($72) + 1)|0;
  $74 = (($71) + ($73)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75 << 24 >> 24;
  $77 = (0 - ($76))|0;
  $78 = $70 ? $76 : $77;
  $79 = $10;
  $80 = (($79) + 1)|0;
  $81 = (($41) + ($80<<2)|0);
  HEAP32[$81>>2] = $78;
  $82 = $8;
  $83 = $10;
  $84 = (($83) + 2)|0;
  $85 = (($82) + ($84)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86 << 24 >> 24;
  $88 = ($87|0)>(0);
  $89 = $8;
  $90 = $10;
  $91 = (($90) + 2)|0;
  $92 = (($89) + ($91)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93 << 24 >> 24;
  $95 = (0 - ($94))|0;
  $96 = $88 ? $94 : $95;
  $97 = $10;
  $98 = (($97) + 2)|0;
  $99 = (($41) + ($98<<2)|0);
  HEAP32[$99>>2] = $96;
  $100 = $8;
  $101 = $10;
  $102 = (($101) + 3)|0;
  $103 = (($100) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104 << 24 >> 24;
  $106 = ($105|0)>(0);
  $107 = $8;
  $108 = $10;
  $109 = (($108) + 3)|0;
  $110 = (($107) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111 << 24 >> 24;
  $113 = (0 - ($112))|0;
  $114 = $106 ? $112 : $113;
  $115 = $10;
  $116 = (($115) + 3)|0;
  $117 = (($41) + ($116<<2)|0);
  HEAP32[$117>>2] = $114;
  $118 = $10;
  $119 = (($118) + 4)|0;
  $10 = $119;
 }
 $120 = $13;
 $$alloca_mul23 = $120<<2;
 $121 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul23)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul23)|0)+15)&-16)|0);;
 $122 = $13;
 $$alloca_mul25 = $122<<2;
 $123 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul25)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul25)|0)+15)&-16)|0);;
 $22 = $41;
 $10 = 0;
 while(1) {
  $124 = $10;
  $125 = $13;
  $126 = ($124|0)<($125|0);
  if (!($126)) {
   break;
  }
  $127 = $10;
  $128 = (($123) + ($127<<2)|0);
  HEAP32[$128>>2] = 0;
  L11: while(1) {
   $129 = $22;
   $130 = HEAP8[27856]|0;
   $131 = $130&255;
   $132 = (_combine_and_check($21,$129,$131,8)|0);
   $16 = $132;
   $133 = HEAP8[(27857)>>0]|0;
   $134 = $133&255;
   $135 = (_combine_and_check($21,$21,$134,4)|0);
   $136 = $16;
   $137 = (($136) + ($135))|0;
   $16 = $137;
   $138 = HEAP8[(27858)>>0]|0;
   $139 = $138&255;
   $140 = (_combine_and_check($21,$21,$139,2)|0);
   $141 = $16;
   $142 = (($141) + ($140))|0;
   $16 = $142;
   $143 = $10;
   $144 = (($121) + ($143<<2)|0);
   $145 = HEAP8[(27859)>>0]|0;
   $146 = $145&255;
   $147 = (_combine_and_check($144,$21,$146,1)|0);
   $148 = $16;
   $149 = (($148) + ($147))|0;
   $16 = $149;
   $150 = $16;
   $151 = ($150|0)!=(0);
   if (!($151)) {
    break;
   }
   $152 = $10;
   $153 = (($123) + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = (($154) + 1)|0;
   HEAP32[$153>>2] = $155;
   $11 = 0;
   while(1) {
    $156 = $11;
    $157 = ($156|0)<(16);
    if (!($157)) {
     continue L11;
    }
    $158 = $22;
    $159 = $11;
    $160 = (($158) + ($159<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $161 >> 1;
    $163 = $22;
    $164 = $11;
    $165 = (($163) + ($164<<2)|0);
    HEAP32[$165>>2] = $162;
    $166 = $11;
    $167 = (($166) + 1)|0;
    $11 = $167;
   }
  }
  $168 = $22;
  $169 = ((($168)) + 64|0);
  $22 = $169;
  $170 = $10;
  $171 = (($170) + 1)|0;
  $10 = $171;
 }
 $19 = 2147483647;
 $11 = 0;
 while(1) {
  $172 = $11;
  $173 = ($172|0)<(9);
  if (!($173)) {
   break;
  }
  $174 = $11;
  $175 = (28040 + (($174*18)|0)|0);
  $25 = $175;
  $176 = $6;
  $177 = $176 >> 1;
  $178 = (28220 + (($177*9)|0)|0);
  $179 = $11;
  $180 = (($178) + ($179)|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $20 = $182;
  $10 = 0;
  while(1) {
   $183 = $10;
   $184 = $13;
   $185 = ($183|0)<($184|0);
   if (!($185)) {
    break;
   }
   $186 = $10;
   $187 = (($123) + ($186<<2)|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)>(0);
   $190 = $25;
   if ($189) {
    $191 = ((($190)) + 17|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $194 = $20;
    $195 = (($194) + ($193))|0;
    $20 = $195;
   } else {
    $196 = $10;
    $197 = (($121) + ($196<<2)|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (($190) + ($198)|0);
    $200 = HEAP8[$199>>0]|0;
    $201 = $200&255;
    $202 = $20;
    $203 = (($202) + ($201))|0;
    $20 = $203;
   }
   $204 = $10;
   $205 = (($204) + 1)|0;
   $10 = $205;
  }
  $206 = $20;
  $207 = $19;
  $208 = ($206|0)<($207|0);
  if ($208) {
   $209 = $20;
   $19 = $209;
   $210 = $11;
   $17 = $210;
  }
  $211 = $11;
  $212 = (($211) + 1)|0;
  $11 = $212;
 }
 $213 = $5;
 $214 = $17;
 $215 = $6;
 $216 = $215 >> 1;
 $217 = (28202 + (($216*9)|0)|0);
 _ec_enc_icdf($213,$214,$217,8);
 $218 = $17;
 $219 = (27860 + (($218*18)|0)|0);
 $24 = $219;
 $10 = 0;
 while(1) {
  $220 = $10;
  $221 = $13;
  $222 = ($220|0)<($221|0);
  if (!($222)) {
   break;
  }
  $223 = $10;
  $224 = (($123) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = ($225|0)==(0);
  $227 = $5;
  if ($226) {
   $228 = $10;
   $229 = (($121) + ($228<<2)|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = $24;
   _ec_enc_icdf($227,$230,$231,8);
  } else {
   $232 = $24;
   _ec_enc_icdf($227,17,$232,8);
   $11 = 0;
   while(1) {
    $233 = $11;
    $234 = $10;
    $235 = (($123) + ($234<<2)|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) - 1)|0;
    $238 = ($233|0)<($237|0);
    $239 = $5;
    if (!($238)) {
     break;
    }
    _ec_enc_icdf($239,17,(28022),8);
    $240 = $11;
    $241 = (($240) + 1)|0;
    $11 = $241;
   }
   $242 = $10;
   $243 = (($121) + ($242<<2)|0);
   $244 = HEAP32[$243>>2]|0;
   _ec_enc_icdf($239,$244,(28022),8);
  }
  $245 = $10;
  $246 = (($245) + 1)|0;
  $10 = $246;
 }
 $10 = 0;
 while(1) {
  $247 = $10;
  $248 = $13;
  $249 = ($247|0)<($248|0);
  if (!($249)) {
   break;
  }
  $250 = $10;
  $251 = (($121) + ($250<<2)|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($252|0)>(0);
  if ($253) {
   $254 = $5;
   $255 = $10;
   $256 = $255<<4;
   $257 = (($41) + ($256<<2)|0);
   _silk_shell_encoder($254,$257);
  }
  $258 = $10;
  $259 = (($258) + 1)|0;
  $10 = $259;
 }
 $10 = 0;
 while(1) {
  $260 = $10;
  $261 = $13;
  $262 = ($260|0)<($261|0);
  if (!($262)) {
   break;
  }
  $263 = $10;
  $264 = (($123) + ($263<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = ($265|0)>(0);
  L56: do {
   if ($266) {
    $267 = $8;
    $268 = $10;
    $269 = $268<<4;
    $270 = (($267) + ($269)|0);
    $23 = $270;
    $271 = $10;
    $272 = (($123) + ($271<<2)|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273) - 1)|0;
    $15 = $274;
    $11 = 0;
    while(1) {
     $275 = $11;
     $276 = ($275|0)<(16);
     if (!($276)) {
      break L56;
     }
     $277 = $23;
     $278 = $11;
     $279 = (($277) + ($278)|0);
     $280 = HEAP8[$279>>0]|0;
     $281 = $280 << 24 >> 24;
     $282 = ($281|0)>(0);
     $283 = $23;
     $284 = $11;
     $285 = (($283) + ($284)|0);
     $286 = HEAP8[$285>>0]|0;
     $287 = $286 << 24 >> 24;
     $288 = (0 - ($287))|0;
     $289 = $282 ? $287 : $288;
     $290 = $289&255;
     $291 = $290 << 24 >> 24;
     $18 = $291;
     $292 = $15;
     $12 = $292;
     while(1) {
      $293 = $12;
      $294 = ($293|0)>(0);
      $295 = $18;
      if (!($294)) {
       break;
      }
      $296 = $12;
      $297 = $295 >> $296;
      $298 = $297 & 1;
      $14 = $298;
      $299 = $5;
      $300 = $14;
      _ec_enc_icdf($299,$300,27694,8);
      $301 = $12;
      $302 = (($301) + -1)|0;
      $12 = $302;
     }
     $303 = $295 & 1;
     $14 = $303;
     $304 = $5;
     $305 = $14;
     _ec_enc_icdf($304,$305,27694,8);
     $306 = $11;
     $307 = (($306) + 1)|0;
     $11 = $307;
    }
   }
  } while(0);
  $308 = $10;
  $309 = (($308) + 1)|0;
  $10 = $309;
 }
 $310 = $5;
 $311 = $8;
 $312 = $9;
 $313 = $6;
 $314 = $7;
 _silk_encode_signs($310,$311,$312,$313,$314,$121);
 $315 = $26;
 _llvm_stackrestore(($315|0));
 STACKTOP = sp;return;
}
function _combine_and_check($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $11 = $9;
  $12 = $8;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   label = 6;
   break;
  }
  $14 = $6;
  $15 = $9;
  $16 = $15<<1;
  $17 = (($14) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $6;
  $20 = $9;
  $21 = $20<<1;
  $22 = (($21) + 1)|0;
  $23 = (($19) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($18) + ($24))|0;
  $10 = $25;
  $26 = $10;
  $27 = $7;
  $28 = ($26|0)>($27|0);
  if ($28) {
   label = 4;
   break;
  }
  $29 = $10;
  $30 = $5;
  $31 = $9;
  $32 = (($30) + ($31<<2)|0);
  HEAP32[$32>>2] = $29;
  $33 = $9;
  $34 = (($33) + 1)|0;
  $9 = $34;
 }
 if ((label|0) == 4) {
  $4 = 1;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 6) {
  $4 = 0;
  $35 = $4;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _silk_shell_encoder($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 32|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 _combine_pulses($4,$8,8);
 _combine_pulses($5,$4,4);
 _combine_pulses($6,$5,2);
 _combine_pulses($7,$6,1);
 $9 = $2;
 $10 = HEAP32[$6>>2]|0;
 $11 = HEAP32[$7>>2]|0;
 _encode_split($9,$10,$11,28694);
 $12 = $2;
 $13 = HEAP32[$5>>2]|0;
 $14 = HEAP32[$6>>2]|0;
 _encode_split($12,$13,$14,28542);
 $15 = $2;
 $16 = HEAP32[$4>>2]|0;
 $17 = HEAP32[$5>>2]|0;
 _encode_split($15,$16,$17,28390);
 $18 = $2;
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$4>>2]|0;
 _encode_split($18,$20,$21,28238);
 $22 = $2;
 $23 = $3;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($4)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 _encode_split($22,$25,$27,28238);
 $28 = $2;
 $29 = ((($4)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($5)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 _encode_split($28,$30,$32,28390);
 $33 = $2;
 $34 = $3;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($4)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 _encode_split($33,$36,$38,28238);
 $39 = $2;
 $40 = $3;
 $41 = ((($40)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($4)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 _encode_split($39,$42,$44,28238);
 $45 = $2;
 $46 = ((($5)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($6)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 _encode_split($45,$47,$49,28542);
 $50 = $2;
 $51 = ((($4)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($5)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 _encode_split($50,$52,$54,28390);
 $55 = $2;
 $56 = $3;
 $57 = ((($56)) + 32|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($4)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 _encode_split($55,$58,$60,28238);
 $61 = $2;
 $62 = $3;
 $63 = ((($62)) + 40|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($4)) + 20|0);
 $66 = HEAP32[$65>>2]|0;
 _encode_split($61,$64,$66,28238);
 $67 = $2;
 $68 = ((($4)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($5)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 _encode_split($67,$69,$71,28390);
 $72 = $2;
 $73 = $3;
 $74 = ((($73)) + 48|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($4)) + 24|0);
 $77 = HEAP32[$76>>2]|0;
 _encode_split($72,$75,$77,28238);
 $78 = $2;
 $79 = $3;
 $80 = ((($79)) + 56|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($4)) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 _encode_split($78,$81,$83,28238);
 STACKTOP = sp;return;
}
function _combine_pulses($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $5;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = $6;
  $12 = $11<<1;
  $13 = (($10) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = $6;
  $17 = $16<<1;
  $18 = (($17) + 1)|0;
  $19 = (($15) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($14) + ($20))|0;
  $22 = $3;
  $23 = $6;
  $24 = (($22) + ($23<<2)|0);
  HEAP32[$24>>2] = $21;
  $25 = $6;
  $26 = (($25) + 1)|0;
  $6 = $26;
 }
 STACKTOP = sp;return;
}
function _encode_split($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ($8|0)>(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $4;
 $11 = $5;
 $12 = $7;
 $13 = $6;
 $14 = (28846 + ($13)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($12) + ($16)|0);
 _ec_enc_icdf($10,$11,$17,8);
 STACKTOP = sp;return;
}
function _silk_shell_decoder($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 40|0;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = ((($6)) + 2|0);
 $10 = $4;
 $11 = $5;
 _decode_split($6,$9,$10,$11,28694);
 $12 = ((($7)) + 2|0);
 $13 = $4;
 $14 = HEAP16[$6>>1]|0;
 $15 = $14 << 16 >> 16;
 _decode_split($7,$12,$13,$15,28542);
 $16 = ((($8)) + 2|0);
 $17 = $4;
 $18 = HEAP16[$7>>1]|0;
 $19 = $18 << 16 >> 16;
 _decode_split($8,$16,$17,$19,28390);
 $20 = $3;
 $21 = $3;
 $22 = ((($21)) + 2|0);
 $23 = $4;
 $24 = HEAP16[$8>>1]|0;
 $25 = $24 << 16 >> 16;
 _decode_split($20,$22,$23,$25,28238);
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = $3;
 $29 = ((($28)) + 6|0);
 $30 = $4;
 $31 = ((($8)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 _decode_split($27,$29,$30,$33,28238);
 $34 = ((($8)) + 4|0);
 $35 = ((($8)) + 6|0);
 $36 = $4;
 $37 = ((($7)) + 2|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 _decode_split($34,$35,$36,$39,28390);
 $40 = $3;
 $41 = ((($40)) + 8|0);
 $42 = $3;
 $43 = ((($42)) + 10|0);
 $44 = $4;
 $45 = ((($8)) + 4|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46 << 16 >> 16;
 _decode_split($41,$43,$44,$47,28238);
 $48 = $3;
 $49 = ((($48)) + 12|0);
 $50 = $3;
 $51 = ((($50)) + 14|0);
 $52 = $4;
 $53 = ((($8)) + 6|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54 << 16 >> 16;
 _decode_split($49,$51,$52,$55,28238);
 $56 = ((($7)) + 4|0);
 $57 = ((($7)) + 6|0);
 $58 = $4;
 $59 = ((($6)) + 2|0);
 $60 = HEAP16[$59>>1]|0;
 $61 = $60 << 16 >> 16;
 _decode_split($56,$57,$58,$61,28542);
 $62 = ((($8)) + 8|0);
 $63 = ((($8)) + 10|0);
 $64 = $4;
 $65 = ((($7)) + 4|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 _decode_split($62,$63,$64,$67,28390);
 $68 = $3;
 $69 = ((($68)) + 16|0);
 $70 = $3;
 $71 = ((($70)) + 18|0);
 $72 = $4;
 $73 = ((($8)) + 8|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74 << 16 >> 16;
 _decode_split($69,$71,$72,$75,28238);
 $76 = $3;
 $77 = ((($76)) + 20|0);
 $78 = $3;
 $79 = ((($78)) + 22|0);
 $80 = $4;
 $81 = ((($8)) + 10|0);
 $82 = HEAP16[$81>>1]|0;
 $83 = $82 << 16 >> 16;
 _decode_split($77,$79,$80,$83,28238);
 $84 = ((($8)) + 12|0);
 $85 = ((($8)) + 14|0);
 $86 = $4;
 $87 = ((($7)) + 6|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88 << 16 >> 16;
 _decode_split($84,$85,$86,$89,28390);
 $90 = $3;
 $91 = ((($90)) + 24|0);
 $92 = $3;
 $93 = ((($92)) + 26|0);
 $94 = $4;
 $95 = ((($8)) + 12|0);
 $96 = HEAP16[$95>>1]|0;
 $97 = $96 << 16 >> 16;
 _decode_split($91,$93,$94,$97,28238);
 $98 = $3;
 $99 = ((($98)) + 28|0);
 $100 = $3;
 $101 = ((($100)) + 30|0);
 $102 = $4;
 $103 = ((($8)) + 14|0);
 $104 = HEAP16[$103>>1]|0;
 $105 = $104 << 16 >> 16;
 _decode_split($99,$101,$102,$105,28238);
 STACKTOP = sp;return;
}
function _decode_split($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $8;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = $7;
  $13 = $9;
  $14 = $8;
  $15 = (28846 + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($13) + ($17)|0);
  $19 = (_ec_dec_icdf($12,$18,8)|0);
  $20 = $19&65535;
  $21 = $5;
  HEAP16[$21>>1] = $20;
  $22 = $8;
  $23 = $5;
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = (($22) - ($25))|0;
  $27 = $26&65535;
  $28 = $6;
  $$sink = $27;$$sink2 = $28;
  HEAP16[$$sink2>>1] = $$sink;
  STACKTOP = sp;return;
 } else {
  $29 = $5;
  HEAP16[$29>>1] = 0;
  $30 = $6;
  $$sink = 0;$$sink2 = $30;
  HEAP16[$$sink2>>1] = $$sink;
  STACKTOP = sp;return;
 }
}
function _silk_HP_variable_cutoff($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 4565|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)==(2);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = $6;
 $14 = ((($13)) + 4600|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*1000)|0;
 $17 = $16 << 16;
 $18 = $6;
 $19 = ((($18)) + 4568|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17|0) / ($20|0))&-1;
 $3 = $21;
 $22 = $3;
 $23 = (_silk_lin2log($22)|0);
 $24 = (($23) - 2048)|0;
 $4 = $24;
 $25 = $6;
 $26 = ((($25)) + 4728|0);
 $27 = HEAP32[$26>>2]|0;
 $2 = $27;
 $28 = $4;
 $29 = $2;
 $30 = (0 - ($29))|0;
 $31 = $30 << 2;
 $32 = $31 >> 16;
 $33 = $2;
 $34 = $33&65535;
 $35 = $34 << 16 >> 16;
 $36 = Math_imul($32, $35)|0;
 $37 = $2;
 $38 = (0 - ($37))|0;
 $39 = $38 << 2;
 $40 = $39 & 65535;
 $41 = $2;
 $42 = $41&65535;
 $43 = $42 << 16 >> 16;
 $44 = Math_imul($40, $43)|0;
 $45 = $44 >> 16;
 $46 = (($36) + ($45))|0;
 $47 = $46 >> 16;
 $48 = $4;
 $49 = (_silk_lin2log(3932160)|0);
 $50 = (($49) - 2048)|0;
 $51 = (($48) - ($50))|0;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($47, $53)|0;
 $55 = $2;
 $56 = (0 - ($55))|0;
 $57 = $56 << 2;
 $58 = $57 >> 16;
 $59 = $2;
 $60 = $59&65535;
 $61 = $60 << 16 >> 16;
 $62 = Math_imul($58, $61)|0;
 $63 = $2;
 $64 = (0 - ($63))|0;
 $65 = $64 << 2;
 $66 = $65 & 65535;
 $67 = $2;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $70 >> 16;
 $72 = (($62) + ($71))|0;
 $73 = $72 & 65535;
 $74 = $4;
 $75 = (_silk_lin2log(3932160)|0);
 $76 = (($75) - 2048)|0;
 $77 = (($74) - ($76))|0;
 $78 = $77&65535;
 $79 = $78 << 16 >> 16;
 $80 = Math_imul($73, $79)|0;
 $81 = $80 >> 16;
 $82 = (($54) + ($81))|0;
 $83 = (($28) + ($82))|0;
 $4 = $83;
 $84 = $4;
 $85 = $6;
 $86 = ((($85)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $87 >> 8;
 $89 = (($84) - ($88))|0;
 $5 = $89;
 $90 = $5;
 $91 = ($90|0)<(0);
 if ($91) {
  $92 = $5;
  $93 = ($92*3)|0;
  $5 = $93;
 }
 $94 = $5;
 $95 = ($94|0)>(51);
 if ($95) {
  $100 = 51;
 } else {
  $96 = $5;
  $97 = ($96|0)<(-51);
  $98 = $5;
  $99 = $97 ? -51 : $98;
  $100 = $99;
 }
 $5 = $100;
 $101 = $6;
 $102 = ((($101)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $6;
 $105 = ((($104)) + 4556|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106&65535;
 $108 = $107 << 16 >> 16;
 $109 = $5;
 $110 = $109&65535;
 $111 = $110 << 16 >> 16;
 $112 = Math_imul($108, $111)|0;
 $113 = $112 >> 16;
 $114 = ($113*6554)|0;
 $115 = $6;
 $116 = ((($115)) + 4556|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $117&65535;
 $119 = $118 << 16 >> 16;
 $120 = $5;
 $121 = $120&65535;
 $122 = $121 << 16 >> 16;
 $123 = Math_imul($119, $122)|0;
 $124 = $123 & 65535;
 $125 = ($124*6554)|0;
 $126 = $125 >> 16;
 $127 = (($114) + ($126))|0;
 $128 = (($103) + ($127))|0;
 $129 = $6;
 $130 = ((($129)) + 8|0);
 HEAP32[$130>>2] = $128;
 $131 = (_silk_lin2log(60)|0);
 $132 = $131 << 8;
 $133 = (_silk_lin2log(100)|0);
 $134 = $133 << 8;
 $135 = ($132|0)>($134|0);
 $136 = $6;
 $137 = ((($136)) + 8|0);
 $138 = HEAP32[$137>>2]|0;
 do {
  if ($135) {
   $139 = (_silk_lin2log(60)|0);
   $140 = $139 << 8;
   $141 = ($138|0)>($140|0);
   if ($141) {
    $142 = (_silk_lin2log(60)|0);
    $143 = $142 << 8;
    $173 = $143;
    break;
   }
   $144 = $6;
   $145 = ((($144)) + 8|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (_silk_lin2log(100)|0);
   $148 = $147 << 8;
   $149 = ($146|0)<($148|0);
   if ($149) {
    $150 = (_silk_lin2log(100)|0);
    $151 = $150 << 8;
    $173 = $151;
    break;
   } else {
    $152 = $6;
    $153 = ((($152)) + 8|0);
    $154 = HEAP32[$153>>2]|0;
    $173 = $154;
    break;
   }
  } else {
   $155 = (_silk_lin2log(100)|0);
   $156 = $155 << 8;
   $157 = ($138|0)>($156|0);
   if ($157) {
    $158 = (_silk_lin2log(100)|0);
    $159 = $158 << 8;
    $173 = $159;
    break;
   }
   $160 = $6;
   $161 = ((($160)) + 8|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (_silk_lin2log(60)|0);
   $164 = $163 << 8;
   $165 = ($162|0)<($164|0);
   if ($165) {
    $166 = (_silk_lin2log(60)|0);
    $167 = $166 << 8;
    $173 = $167;
    break;
   } else {
    $168 = $6;
    $169 = ((($168)) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $173 = $170;
    break;
   }
  }
 } while(0);
 $171 = $6;
 $172 = ((($171)) + 8|0);
 HEAP32[$172>>2] = $173;
 STACKTOP = sp;return;
}
function _silk_NLSF_unpack($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $6;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = $6;
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = Math_imul($14, $18)|0;
 $20 = (($19|0) / 2)&-1;
 $21 = (($13) + ($20)|0);
 $10 = $21;
 $8 = 0;
 while(1) {
  $22 = $8;
  $23 = $6;
  $24 = ((($23)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = ($22|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $10;
  $29 = ((($28)) + 1|0);
  $10 = $29;
  $30 = HEAP8[$28>>0]|0;
  $9 = $30;
  $31 = $9;
  $32 = $31&255;
  $33 = $32 >> 1;
  $34 = $33 & 7;
  $35 = $34&65535;
  $36 = $35 << 16 >> 16;
  $37 = ($36*9)|0;
  $38 = $37&65535;
  $39 = $4;
  $40 = $8;
  $41 = (($39) + ($40<<1)|0);
  HEAP16[$41>>1] = $38;
  $42 = $6;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $8;
  $46 = $9;
  $47 = $46&255;
  $48 = $47 & 1;
  $49 = $6;
  $50 = ((($49)) + 2|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = (($52) - 1)|0;
  $54 = Math_imul($48, $53)|0;
  $55 = (($45) + ($54))|0;
  $56 = (($44) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $5;
  $59 = $8;
  $60 = (($58) + ($59)|0);
  HEAP8[$60>>0] = $57;
  $61 = $9;
  $62 = $61&255;
  $63 = $62 >> 5;
  $64 = $63 & 7;
  $65 = $64&65535;
  $66 = $65 << 16 >> 16;
  $67 = ($66*9)|0;
  $68 = $67&65535;
  $69 = $4;
  $70 = $8;
  $71 = (($70) + 1)|0;
  $72 = (($69) + ($71<<1)|0);
  HEAP16[$72>>1] = $68;
  $73 = $6;
  $74 = ((($73)) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = $9;
  $78 = $77&255;
  $79 = $78 >> 4;
  $80 = $79 & 1;
  $81 = $6;
  $82 = ((($81)) + 2|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = (($84) - 1)|0;
  $86 = Math_imul($80, $85)|0;
  $87 = (($76) + ($86))|0;
  $88 = (($87) + 1)|0;
  $89 = (($75) + ($88)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $5;
  $92 = $8;
  $93 = (($92) + 1)|0;
  $94 = (($91) + ($93)|0);
  HEAP8[$94>>0] = $90;
  $95 = $8;
  $96 = (($95) + 2)|0;
  $8 = $96;
 }
 STACKTOP = sp;return;
}
function _silk_stereo_LR_to_MS($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$alloca_mul = 0, $$alloca_mul33 = 0, $$alloca_mul35 = 0, $$alloca_mul37 = 0, $$alloca_mul39 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $30 = sp + 48|0;
 $33 = sp + 36|0;
 $34 = sp + 32|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $43 = $12;
 $44 = ((($43)) + -4|0);
 $41 = $44;
 $45 = $21;
 $46 = (($45) + 2)|0;
 $47 = (_llvm_stacksave()|0);
 $42 = $47;
 $$alloca_mul = $46<<1;
 $48 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $22 = 0;
 while(1) {
  $49 = $22;
  $50 = $21;
  $51 = (($50) + 2)|0;
  $52 = ($49|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = $12;
  $54 = $22;
  $55 = (($54) - 2)|0;
  $56 = (($53) + ($55<<1)|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57 << 16 >> 16;
  $59 = $13;
  $60 = $22;
  $61 = (($60) - 2)|0;
  $62 = (($59) + ($61<<1)|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = (($58) + ($64))|0;
  $27 = $65;
  $66 = $12;
  $67 = $22;
  $68 = (($67) - 2)|0;
  $69 = (($66) + ($68<<1)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = $13;
  $73 = $22;
  $74 = (($73) - 2)|0;
  $75 = (($72) + ($74<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = (($71) - ($77))|0;
  $28 = $78;
  $79 = $27;
  $80 = $79 >> 1;
  $81 = $27;
  $82 = $81 & 1;
  $83 = (($80) + ($82))|0;
  $84 = $83&65535;
  $85 = $41;
  $86 = $22;
  $87 = (($85) + ($86<<1)|0);
  HEAP16[$87>>1] = $84;
  $88 = $28;
  $89 = $88 >> 1;
  $90 = $28;
  $91 = $90 & 1;
  $92 = (($89) + ($91))|0;
  $93 = ($92|0)>(32767);
  if ($93) {
   $106 = 32767;
  } else {
   $94 = $28;
   $95 = $94 >> 1;
   $96 = $28;
   $97 = $96 & 1;
   $98 = (($95) + ($97))|0;
   $99 = ($98|0)<(-32768);
   if ($99) {
    $106 = -32768;
   } else {
    $100 = $28;
    $101 = $100 >> 1;
    $102 = $28;
    $103 = $102 & 1;
    $104 = (($101) + ($103))|0;
    $106 = $104;
   }
  }
  $105 = $106&65535;
  $107 = $22;
  $108 = (($48) + ($107<<1)|0);
  HEAP16[$108>>1] = $105;
  $109 = $22;
  $110 = (($109) + 1)|0;
  $22 = $110;
 }
 $111 = $41;
 $112 = $11;
 $113 = ((($112)) + 4|0);
 ;HEAP16[$111>>1]=HEAP16[$113>>1]|0;HEAP16[$111+2>>1]=HEAP16[$113+2>>1]|0;
 $114 = $11;
 $115 = ((($114)) + 8|0);
 ;HEAP16[$48>>1]=HEAP16[$115>>1]|0;HEAP16[$48+2>>1]=HEAP16[$115+2>>1]|0;
 $116 = $11;
 $117 = ((($116)) + 4|0);
 $118 = $41;
 $119 = $21;
 $120 = (($118) + ($119<<1)|0);
 ;HEAP16[$117>>1]=HEAP16[$120>>1]|0;HEAP16[$117+2>>1]=HEAP16[$120+2>>1]|0;
 $121 = $11;
 $122 = ((($121)) + 8|0);
 $123 = $21;
 $124 = (($48) + ($123<<1)|0);
 ;HEAP16[$122>>1]=HEAP16[$124>>1]|0;HEAP16[$122+2>>1]=HEAP16[$124+2>>1]|0;
 $125 = $21;
 $$alloca_mul33 = $125<<1;
 $126 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul33)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul33)|0)+15)&-16)|0);;
 $127 = $21;
 $$alloca_mul35 = $127<<1;
 $128 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul35)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul35)|0)+15)&-16)|0);;
 $22 = 0;
 while(1) {
  $129 = $22;
  $130 = $21;
  $131 = ($129|0)<($130|0);
  if (!($131)) {
   break;
  }
  $132 = $41;
  $133 = $22;
  $134 = (($132) + ($133<<1)|0);
  $135 = HEAP16[$134>>1]|0;
  $136 = $135 << 16 >> 16;
  $137 = $41;
  $138 = $22;
  $139 = (($138) + 2)|0;
  $140 = (($137) + ($139<<1)|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = (($136) + ($142))|0;
  $144 = $41;
  $145 = $22;
  $146 = (($145) + 1)|0;
  $147 = (($144) + ($146<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = $149 << 1;
  $151 = (($143) + ($150))|0;
  $152 = $151 >> 1;
  $153 = (($152) + 1)|0;
  $154 = $153 >> 1;
  $27 = $154;
  $155 = $27;
  $156 = $155&65535;
  $157 = $22;
  $158 = (($126) + ($157<<1)|0);
  HEAP16[$158>>1] = $156;
  $159 = $41;
  $160 = $22;
  $161 = (($160) + 1)|0;
  $162 = (($159) + ($161<<1)|0);
  $163 = HEAP16[$162>>1]|0;
  $164 = $163 << 16 >> 16;
  $165 = $27;
  $166 = (($164) - ($165))|0;
  $167 = $166&65535;
  $168 = $22;
  $169 = (($128) + ($168<<1)|0);
  HEAP16[$169>>1] = $167;
  $170 = $22;
  $171 = (($170) + 1)|0;
  $22 = $171;
 }
 $172 = $21;
 $$alloca_mul37 = $172<<1;
 $173 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul37)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul37)|0)+15)&-16)|0);;
 $174 = $21;
 $$alloca_mul39 = $174<<1;
 $175 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul39)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul39)|0)+15)&-16)|0);;
 $22 = 0;
 while(1) {
  $176 = $22;
  $177 = $21;
  $178 = ($176|0)<($177|0);
  if (!($178)) {
   break;
  }
  $179 = $22;
  $180 = (($48) + ($179<<1)|0);
  $181 = HEAP16[$180>>1]|0;
  $182 = $181 << 16 >> 16;
  $183 = $22;
  $184 = (($183) + 2)|0;
  $185 = (($48) + ($184<<1)|0);
  $186 = HEAP16[$185>>1]|0;
  $187 = $186 << 16 >> 16;
  $188 = (($182) + ($187))|0;
  $189 = $22;
  $190 = (($189) + 1)|0;
  $191 = (($48) + ($190<<1)|0);
  $192 = HEAP16[$191>>1]|0;
  $193 = $192 << 16 >> 16;
  $194 = $193 << 1;
  $195 = (($188) + ($194))|0;
  $196 = $195 >> 1;
  $197 = (($196) + 1)|0;
  $198 = $197 >> 1;
  $27 = $198;
  $199 = $27;
  $200 = $199&65535;
  $201 = $22;
  $202 = (($173) + ($201<<1)|0);
  HEAP16[$202>>1] = $200;
  $203 = $22;
  $204 = (($203) + 1)|0;
  $205 = (($48) + ($204<<1)|0);
  $206 = HEAP16[$205>>1]|0;
  $207 = $206 << 16 >> 16;
  $208 = $27;
  $209 = (($207) - ($208))|0;
  $210 = $209&65535;
  $211 = $22;
  $212 = (($175) + ($211<<1)|0);
  HEAP16[$212>>1] = $210;
  $213 = $22;
  $214 = (($213) + 1)|0;
  $22 = $214;
 }
 $215 = $21;
 $216 = $20;
 $217 = ($216*10)|0;
 $218 = ($215|0)==($217|0);
 $219 = $218&1;
 $23 = $219;
 $220 = $23;
 $221 = ($220|0)!=(0);
 $222 = $221 ? 328 : 655;
 $29 = $222;
 $223 = $18;
 $224 = $223&65535;
 $225 = $224 << 16 >> 16;
 $226 = $18;
 $227 = $226&65535;
 $228 = $227 << 16 >> 16;
 $229 = Math_imul($225, $228)|0;
 $230 = $229 >> 16;
 $231 = $29;
 $232 = $231&65535;
 $233 = $232 << 16 >> 16;
 $234 = Math_imul($230, $233)|0;
 $235 = $18;
 $236 = $235&65535;
 $237 = $236 << 16 >> 16;
 $238 = $18;
 $239 = $238&65535;
 $240 = $239 << 16 >> 16;
 $241 = Math_imul($237, $240)|0;
 $242 = $241 & 65535;
 $243 = $29;
 $244 = $243&65535;
 $245 = $244 << 16 >> 16;
 $246 = Math_imul($242, $245)|0;
 $247 = $246 >> 16;
 $248 = (($234) + ($247))|0;
 $29 = $248;
 $249 = $11;
 $250 = ((($249)) + 12|0);
 $251 = $21;
 $252 = $29;
 $253 = (_silk_stereo_find_predictor($33,$126,$173,$250,$251,$252)|0);
 HEAP32[$30>>2] = $253;
 $254 = $11;
 $255 = ((($254)) + 12|0);
 $256 = ((($255)) + 8|0);
 $257 = $21;
 $258 = $29;
 $259 = (_silk_stereo_find_predictor($34,$128,$175,$256,$257,$258)|0);
 $260 = ((($30)) + 4|0);
 HEAP32[$260>>2] = $259;
 $261 = HEAP32[$34>>2]|0;
 $262 = HEAP32[$33>>2]|0;
 $263 = $262&65535;
 $264 = $263 << 16 >> 16;
 $265 = ($264*3)|0;
 $266 = (($261) + ($265))|0;
 $35 = $266;
 $267 = $35;
 $268 = ($267|0)<(65536);
 $269 = $35;
 $270 = $268 ? $269 : 65536;
 $35 = $270;
 $271 = $23;
 $272 = ($271|0)!=(0);
 $273 = $272 ? 1200 : 600;
 $274 = $17;
 $275 = (($274) - ($273))|0;
 $17 = $275;
 $276 = $17;
 $277 = ($276|0)<(1);
 $$ = $277 ? 1 : $275;
 $17 = $$;
 $278 = $20;
 $279 = $278&65535;
 $280 = $279 << 16 >> 16;
 $281 = ($280*900)|0;
 $282 = (2000 + ($281))|0;
 $37 = $282;
 $283 = $35;
 $284 = ($283*3)|0;
 $36 = $284;
 $285 = $17;
 $286 = $36;
 $287 = (851968 + ($286))|0;
 $288 = (_silk_DIV32_varQ($285,$287,19)|0);
 $289 = $16;
 HEAP32[$289>>2] = $288;
 $290 = $16;
 $291 = HEAP32[$290>>2]|0;
 $292 = $37;
 $293 = ($291|0)<($292|0);
 if ($293) {
  $294 = $37;
  $295 = $16;
  HEAP32[$295>>2] = $294;
  $296 = $17;
  $297 = $16;
  $298 = HEAP32[$297>>2]|0;
  $299 = (($296) - ($298))|0;
  $300 = $16;
  $301 = ((($300)) + 4|0);
  HEAP32[$301>>2] = $299;
  $302 = $16;
  $303 = ((($302)) + 4|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $304 << 1;
  $306 = $37;
  $307 = (($305) - ($306))|0;
  $308 = $36;
  $309 = (65536 + ($308))|0;
  $310 = $309 >> 16;
  $311 = $37;
  $312 = $311&65535;
  $313 = $312 << 16 >> 16;
  $314 = Math_imul($310, $313)|0;
  $315 = $36;
  $316 = (65536 + ($315))|0;
  $317 = $316 & 65535;
  $318 = $37;
  $319 = $318&65535;
  $320 = $319 << 16 >> 16;
  $321 = Math_imul($317, $320)|0;
  $322 = $321 >> 16;
  $323 = (($314) + ($322))|0;
  $324 = (_silk_DIV32_varQ($307,$323,16)|0);
  $38 = $324;
  $325 = $38;
  $326 = ($325|0)>(16384);
  if ($326) {
   $331 = 16384;
  } else {
   $327 = $38;
   $328 = ($327|0)<(0);
   $329 = $38;
   $330 = $328 ? 0 : $329;
   $331 = $330;
  }
  $38 = $331;
 } else {
  $332 = $17;
  $333 = $16;
  $334 = HEAP32[$333>>2]|0;
  $335 = (($332) - ($334))|0;
  $336 = $16;
  $337 = ((($336)) + 4|0);
  HEAP32[$337>>2] = $335;
  $38 = 16384;
 }
 $338 = $11;
 $339 = ((($338)) + 28|0);
 $340 = HEAP16[$339>>1]|0;
 $341 = $340 << 16 >> 16;
 $342 = $38;
 $343 = $11;
 $344 = ((($343)) + 28|0);
 $345 = HEAP16[$344>>1]|0;
 $346 = $345 << 16 >> 16;
 $347 = (($342) - ($346))|0;
 $348 = $347 >> 16;
 $349 = $29;
 $350 = $349&65535;
 $351 = $350 << 16 >> 16;
 $352 = Math_imul($348, $351)|0;
 $353 = $38;
 $354 = $11;
 $355 = ((($354)) + 28|0);
 $356 = HEAP16[$355>>1]|0;
 $357 = $356 << 16 >> 16;
 $358 = (($353) - ($357))|0;
 $359 = $358 & 65535;
 $360 = $29;
 $361 = $360&65535;
 $362 = $361 << 16 >> 16;
 $363 = Math_imul($359, $362)|0;
 $364 = $363 >> 16;
 $365 = (($352) + ($364))|0;
 $366 = (($341) + ($365))|0;
 $367 = $366&65535;
 $368 = $11;
 $369 = ((($368)) + 28|0);
 HEAP16[$369>>1] = $367;
 $370 = $15;
 HEAP8[$370>>0] = 0;
 $371 = $19;
 $372 = ($371|0)!=(0);
 L24: do {
  if ($372) {
   $38 = 0;
   HEAP32[$30>>2] = 0;
   $373 = ((($30)) + 4|0);
   HEAP32[$373>>2] = 0;
   $374 = $14;
   _silk_stereo_quant_pred($30,$374);
  } else {
   $375 = $11;
   $376 = ((($375)) + 30|0);
   $377 = HEAP16[$376>>1]|0;
   $378 = $377 << 16 >> 16;
   $379 = ($378|0)==(0);
   do {
    if ($379) {
     $380 = $17;
     $381 = $380<<3;
     $382 = $37;
     $383 = ($382*13)|0;
     $384 = ($381|0)<($383|0);
     if (!($384)) {
      $385 = $35;
      $386 = $385 >> 16;
      $387 = $11;
      $388 = ((($387)) + 28|0);
      $389 = HEAP16[$388>>1]|0;
      $390 = $389 << 16 >> 16;
      $391 = Math_imul($386, $390)|0;
      $392 = $35;
      $393 = $392 & 65535;
      $394 = $11;
      $395 = ((($394)) + 28|0);
      $396 = HEAP16[$395>>1]|0;
      $397 = $396 << 16 >> 16;
      $398 = Math_imul($393, $397)|0;
      $399 = $398 >> 16;
      $400 = (($391) + ($399))|0;
      $401 = ($400|0)<(819);
      if (!($401)) {
       break;
      }
     }
     $402 = $11;
     $403 = ((($402)) + 28|0);
     $404 = HEAP16[$403>>1]|0;
     $405 = $404 << 16 >> 16;
     $406 = HEAP32[$30>>2]|0;
     $407 = $406&65535;
     $408 = $407 << 16 >> 16;
     $409 = Math_imul($405, $408)|0;
     $410 = $409 >> 14;
     HEAP32[$30>>2] = $410;
     $411 = $11;
     $412 = ((($411)) + 28|0);
     $413 = HEAP16[$412>>1]|0;
     $414 = $413 << 16 >> 16;
     $415 = ((($30)) + 4|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = $416&65535;
     $418 = $417 << 16 >> 16;
     $419 = Math_imul($414, $418)|0;
     $420 = $419 >> 14;
     $421 = ((($30)) + 4|0);
     HEAP32[$421>>2] = $420;
     $422 = $14;
     _silk_stereo_quant_pred($30,$422);
     $38 = 0;
     HEAP32[$30>>2] = 0;
     $423 = ((($30)) + 4|0);
     HEAP32[$423>>2] = 0;
     $424 = $17;
     $425 = $16;
     HEAP32[$425>>2] = $424;
     $426 = $16;
     $427 = ((($426)) + 4|0);
     HEAP32[$427>>2] = 0;
     $428 = $15;
     HEAP8[$428>>0] = 1;
     break L24;
    }
   } while(0);
   $429 = $11;
   $430 = ((($429)) + 30|0);
   $431 = HEAP16[$430>>1]|0;
   $432 = $431 << 16 >> 16;
   $433 = ($432|0)!=(0);
   do {
    if ($433) {
     $434 = $17;
     $435 = $434<<3;
     $436 = $37;
     $437 = ($436*11)|0;
     $438 = ($435|0)<($437|0);
     if (!($438)) {
      $439 = $35;
      $440 = $439 >> 16;
      $441 = $11;
      $442 = ((($441)) + 28|0);
      $443 = HEAP16[$442>>1]|0;
      $444 = $443 << 16 >> 16;
      $445 = Math_imul($440, $444)|0;
      $446 = $35;
      $447 = $446 & 65535;
      $448 = $11;
      $449 = ((($448)) + 28|0);
      $450 = HEAP16[$449>>1]|0;
      $451 = $450 << 16 >> 16;
      $452 = Math_imul($447, $451)|0;
      $453 = $452 >> 16;
      $454 = (($445) + ($453))|0;
      $455 = ($454|0)<(328);
      if (!($455)) {
       break;
      }
     }
     $456 = $11;
     $457 = ((($456)) + 28|0);
     $458 = HEAP16[$457>>1]|0;
     $459 = $458 << 16 >> 16;
     $460 = HEAP32[$30>>2]|0;
     $461 = $460&65535;
     $462 = $461 << 16 >> 16;
     $463 = Math_imul($459, $462)|0;
     $464 = $463 >> 14;
     HEAP32[$30>>2] = $464;
     $465 = $11;
     $466 = ((($465)) + 28|0);
     $467 = HEAP16[$466>>1]|0;
     $468 = $467 << 16 >> 16;
     $469 = ((($30)) + 4|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = $470&65535;
     $472 = $471 << 16 >> 16;
     $473 = Math_imul($468, $472)|0;
     $474 = $473 >> 14;
     $475 = ((($30)) + 4|0);
     HEAP32[$475>>2] = $474;
     $476 = $14;
     _silk_stereo_quant_pred($30,$476);
     $38 = 0;
     HEAP32[$30>>2] = 0;
     $477 = ((($30)) + 4|0);
     HEAP32[$477>>2] = 0;
     break L24;
    }
   } while(0);
   $478 = $11;
   $479 = ((($478)) + 28|0);
   $480 = HEAP16[$479>>1]|0;
   $481 = $480 << 16 >> 16;
   $482 = ($481|0)>(15565);
   if ($482) {
    $483 = $14;
    _silk_stereo_quant_pred($30,$483);
    $38 = 16384;
    break;
   } else {
    $484 = $11;
    $485 = ((($484)) + 28|0);
    $486 = HEAP16[$485>>1]|0;
    $487 = $486 << 16 >> 16;
    $488 = HEAP32[$30>>2]|0;
    $489 = $488&65535;
    $490 = $489 << 16 >> 16;
    $491 = Math_imul($487, $490)|0;
    $492 = $491 >> 14;
    HEAP32[$30>>2] = $492;
    $493 = $11;
    $494 = ((($493)) + 28|0);
    $495 = HEAP16[$494>>1]|0;
    $496 = $495 << 16 >> 16;
    $497 = ((($30)) + 4|0);
    $498 = HEAP32[$497>>2]|0;
    $499 = $498&65535;
    $500 = $499 << 16 >> 16;
    $501 = Math_imul($496, $500)|0;
    $502 = $501 >> 14;
    $503 = ((($30)) + 4|0);
    HEAP32[$503>>2] = $502;
    $504 = $14;
    _silk_stereo_quant_pred($30,$504);
    $505 = $11;
    $506 = ((($505)) + 28|0);
    $507 = HEAP16[$506>>1]|0;
    $508 = $507 << 16 >> 16;
    $38 = $508;
    break;
   }
  }
 } while(0);
 $509 = $15;
 $510 = HEAP8[$509>>0]|0;
 $511 = $510 << 24 >> 24;
 $512 = ($511|0)==(1);
 do {
  if ($512) {
   $513 = $21;
   $514 = $20;
   $515 = $514<<3;
   $516 = (($513) - ($515))|0;
   $517 = $11;
   $518 = ((($517)) + 32|0);
   $519 = HEAP16[$518>>1]|0;
   $520 = $519 << 16 >> 16;
   $521 = (($520) + ($516))|0;
   $522 = $521&65535;
   HEAP16[$518>>1] = $522;
   $523 = $11;
   $524 = ((($523)) + 32|0);
   $525 = HEAP16[$524>>1]|0;
   $526 = $525 << 16 >> 16;
   $527 = $20;
   $528 = ($527*5)|0;
   $529 = ($526|0)<($528|0);
   if ($529) {
    $530 = $15;
    HEAP8[$530>>0] = 0;
    break;
   } else {
    $531 = $11;
    $532 = ((($531)) + 32|0);
    HEAP16[$532>>1] = 10000;
    break;
   }
  } else {
   $533 = $11;
   $534 = ((($533)) + 32|0);
   HEAP16[$534>>1] = 0;
  }
 } while(0);
 $535 = $15;
 $536 = HEAP8[$535>>0]|0;
 $537 = $536 << 24 >> 24;
 $538 = ($537|0)==(0);
 if ($538) {
  $539 = $16;
  $540 = ((($539)) + 4|0);
  $541 = HEAP32[$540>>2]|0;
  $542 = ($541|0)<(1);
  if ($542) {
   $543 = $16;
   $544 = ((($543)) + 4|0);
   HEAP32[$544>>2] = 1;
   $545 = $17;
   $546 = $16;
   $547 = ((($546)) + 4|0);
   $548 = HEAP32[$547>>2]|0;
   $549 = (($545) - ($548))|0;
   $550 = (_silk_max_int(1,$549)|0);
   $551 = $16;
   HEAP32[$551>>2] = $550;
  }
 }
 $552 = $11;
 $553 = HEAP16[$552>>1]|0;
 $554 = $553 << 16 >> 16;
 $555 = (0 - ($554))|0;
 $31 = $555;
 $556 = $11;
 $557 = ((($556)) + 2|0);
 $558 = HEAP16[$557>>1]|0;
 $559 = $558 << 16 >> 16;
 $560 = (0 - ($559))|0;
 $32 = $560;
 $561 = $11;
 $562 = ((($561)) + 30|0);
 $563 = HEAP16[$562>>1]|0;
 $564 = $563 << 16 >> 16;
 $565 = $564 << 10;
 $39 = $565;
 $566 = $20;
 $567 = $566<<3;
 $568 = (65536 / ($567|0))&-1;
 $24 = $568;
 $569 = HEAP32[$30>>2]|0;
 $570 = $11;
 $571 = HEAP16[$570>>1]|0;
 $572 = $571 << 16 >> 16;
 $573 = (($569) - ($572))|0;
 $574 = $573&65535;
 $575 = $574 << 16 >> 16;
 $576 = $24;
 $577 = $576&65535;
 $578 = $577 << 16 >> 16;
 $579 = Math_imul($575, $578)|0;
 $580 = $579 >> 15;
 $581 = (($580) + 1)|0;
 $582 = $581 >> 1;
 $583 = (0 - ($582))|0;
 $25 = $583;
 $584 = ((($30)) + 4|0);
 $585 = HEAP32[$584>>2]|0;
 $586 = $11;
 $587 = ((($586)) + 2|0);
 $588 = HEAP16[$587>>1]|0;
 $589 = $588 << 16 >> 16;
 $590 = (($585) - ($589))|0;
 $591 = $590&65535;
 $592 = $591 << 16 >> 16;
 $593 = $24;
 $594 = $593&65535;
 $595 = $594 << 16 >> 16;
 $596 = Math_imul($592, $595)|0;
 $597 = $596 >> 15;
 $598 = (($597) + 1)|0;
 $599 = $598 >> 1;
 $600 = (0 - ($599))|0;
 $26 = $600;
 $601 = $38;
 $602 = $11;
 $603 = ((($602)) + 30|0);
 $604 = HEAP16[$603>>1]|0;
 $605 = $604 << 16 >> 16;
 $606 = (($601) - ($605))|0;
 $607 = $606 >> 16;
 $608 = $24;
 $609 = $608&65535;
 $610 = $609 << 16 >> 16;
 $611 = Math_imul($607, $610)|0;
 $612 = $38;
 $613 = $11;
 $614 = ((($613)) + 30|0);
 $615 = HEAP16[$614>>1]|0;
 $616 = $615 << 16 >> 16;
 $617 = (($612) - ($616))|0;
 $618 = $617 & 65535;
 $619 = $24;
 $620 = $619&65535;
 $621 = $620 << 16 >> 16;
 $622 = Math_imul($618, $621)|0;
 $623 = $622 >> 16;
 $624 = (($611) + ($623))|0;
 $625 = $624 << 10;
 $40 = $625;
 $22 = 0;
 while(1) {
  $626 = $22;
  $627 = $20;
  $628 = $627<<3;
  $629 = ($626|0)<($628|0);
  if (!($629)) {
   break;
  }
  $630 = $25;
  $631 = $31;
  $632 = (($631) + ($630))|0;
  $31 = $632;
  $633 = $26;
  $634 = $32;
  $635 = (($634) + ($633))|0;
  $32 = $635;
  $636 = $40;
  $637 = $39;
  $638 = (($637) + ($636))|0;
  $39 = $638;
  $639 = $41;
  $640 = $22;
  $641 = (($639) + ($640<<1)|0);
  $642 = HEAP16[$641>>1]|0;
  $643 = $642 << 16 >> 16;
  $644 = $41;
  $645 = $22;
  $646 = (($645) + 2)|0;
  $647 = (($644) + ($646<<1)|0);
  $648 = HEAP16[$647>>1]|0;
  $649 = $648 << 16 >> 16;
  $650 = (($643) + ($649))|0;
  $651 = $41;
  $652 = $22;
  $653 = (($652) + 1)|0;
  $654 = (($651) + ($653<<1)|0);
  $655 = HEAP16[$654>>1]|0;
  $656 = $655 << 16 >> 16;
  $657 = $656 << 1;
  $658 = (($650) + ($657))|0;
  $659 = $658 << 9;
  $27 = $659;
  $660 = $39;
  $661 = $660 >> 16;
  $662 = $22;
  $663 = (($662) + 1)|0;
  $664 = (($48) + ($663<<1)|0);
  $665 = HEAP16[$664>>1]|0;
  $666 = $665 << 16 >> 16;
  $667 = Math_imul($661, $666)|0;
  $668 = $39;
  $669 = $668 & 65535;
  $670 = $22;
  $671 = (($670) + 1)|0;
  $672 = (($48) + ($671<<1)|0);
  $673 = HEAP16[$672>>1]|0;
  $674 = $673 << 16 >> 16;
  $675 = Math_imul($669, $674)|0;
  $676 = $675 >> 16;
  $677 = (($667) + ($676))|0;
  $678 = $27;
  $679 = $678 >> 16;
  $680 = $31;
  $681 = $680&65535;
  $682 = $681 << 16 >> 16;
  $683 = Math_imul($679, $682)|0;
  $684 = $27;
  $685 = $684 & 65535;
  $686 = $31;
  $687 = $686&65535;
  $688 = $687 << 16 >> 16;
  $689 = Math_imul($685, $688)|0;
  $690 = $689 >> 16;
  $691 = (($683) + ($690))|0;
  $692 = (($677) + ($691))|0;
  $27 = $692;
  $693 = $27;
  $694 = $41;
  $695 = $22;
  $696 = (($695) + 1)|0;
  $697 = (($694) + ($696<<1)|0);
  $698 = HEAP16[$697>>1]|0;
  $699 = $698 << 16 >> 16;
  $700 = $699 << 11;
  $701 = $700 >> 16;
  $702 = $32;
  $703 = $702&65535;
  $704 = $703 << 16 >> 16;
  $705 = Math_imul($701, $704)|0;
  $706 = $41;
  $707 = $22;
  $708 = (($707) + 1)|0;
  $709 = (($706) + ($708<<1)|0);
  $710 = HEAP16[$709>>1]|0;
  $711 = $710 << 16 >> 16;
  $712 = $711 << 11;
  $713 = $712 & 65535;
  $714 = $32;
  $715 = $714&65535;
  $716 = $715 << 16 >> 16;
  $717 = Math_imul($713, $716)|0;
  $718 = $717 >> 16;
  $719 = (($705) + ($718))|0;
  $720 = (($693) + ($719))|0;
  $27 = $720;
  $721 = $27;
  $722 = $721 >> 7;
  $723 = (($722) + 1)|0;
  $724 = $723 >> 1;
  $725 = ($724|0)>(32767);
  if ($725) {
   $736 = 32767;
  } else {
   $726 = $27;
   $727 = $726 >> 7;
   $728 = (($727) + 1)|0;
   $729 = $728 >> 1;
   $730 = ($729|0)<(-32768);
   if ($730) {
    $736 = -32768;
   } else {
    $731 = $27;
    $732 = $731 >> 7;
    $733 = (($732) + 1)|0;
    $734 = $733 >> 1;
    $736 = $734;
   }
  }
  $735 = $736&65535;
  $737 = $13;
  $738 = $22;
  $739 = (($738) - 1)|0;
  $740 = (($737) + ($739<<1)|0);
  HEAP16[$740>>1] = $735;
  $741 = $22;
  $742 = (($741) + 1)|0;
  $22 = $742;
 }
 $743 = HEAP32[$30>>2]|0;
 $744 = (0 - ($743))|0;
 $31 = $744;
 $745 = ((($30)) + 4|0);
 $746 = HEAP32[$745>>2]|0;
 $747 = (0 - ($746))|0;
 $32 = $747;
 $748 = $38;
 $749 = $748 << 10;
 $39 = $749;
 $750 = $20;
 $751 = $750<<3;
 $22 = $751;
 while(1) {
  $752 = $22;
  $753 = $21;
  $754 = ($752|0)<($753|0);
  if (!($754)) {
   break;
  }
  $755 = $41;
  $756 = $22;
  $757 = (($755) + ($756<<1)|0);
  $758 = HEAP16[$757>>1]|0;
  $759 = $758 << 16 >> 16;
  $760 = $41;
  $761 = $22;
  $762 = (($761) + 2)|0;
  $763 = (($760) + ($762<<1)|0);
  $764 = HEAP16[$763>>1]|0;
  $765 = $764 << 16 >> 16;
  $766 = (($759) + ($765))|0;
  $767 = $41;
  $768 = $22;
  $769 = (($768) + 1)|0;
  $770 = (($767) + ($769<<1)|0);
  $771 = HEAP16[$770>>1]|0;
  $772 = $771 << 16 >> 16;
  $773 = $772 << 1;
  $774 = (($766) + ($773))|0;
  $775 = $774 << 9;
  $27 = $775;
  $776 = $39;
  $777 = $776 >> 16;
  $778 = $22;
  $779 = (($778) + 1)|0;
  $780 = (($48) + ($779<<1)|0);
  $781 = HEAP16[$780>>1]|0;
  $782 = $781 << 16 >> 16;
  $783 = Math_imul($777, $782)|0;
  $784 = $39;
  $785 = $784 & 65535;
  $786 = $22;
  $787 = (($786) + 1)|0;
  $788 = (($48) + ($787<<1)|0);
  $789 = HEAP16[$788>>1]|0;
  $790 = $789 << 16 >> 16;
  $791 = Math_imul($785, $790)|0;
  $792 = $791 >> 16;
  $793 = (($783) + ($792))|0;
  $794 = $27;
  $795 = $794 >> 16;
  $796 = $31;
  $797 = $796&65535;
  $798 = $797 << 16 >> 16;
  $799 = Math_imul($795, $798)|0;
  $800 = $27;
  $801 = $800 & 65535;
  $802 = $31;
  $803 = $802&65535;
  $804 = $803 << 16 >> 16;
  $805 = Math_imul($801, $804)|0;
  $806 = $805 >> 16;
  $807 = (($799) + ($806))|0;
  $808 = (($793) + ($807))|0;
  $27 = $808;
  $809 = $27;
  $810 = $41;
  $811 = $22;
  $812 = (($811) + 1)|0;
  $813 = (($810) + ($812<<1)|0);
  $814 = HEAP16[$813>>1]|0;
  $815 = $814 << 16 >> 16;
  $816 = $815 << 11;
  $817 = $816 >> 16;
  $818 = $32;
  $819 = $818&65535;
  $820 = $819 << 16 >> 16;
  $821 = Math_imul($817, $820)|0;
  $822 = $41;
  $823 = $22;
  $824 = (($823) + 1)|0;
  $825 = (($822) + ($824<<1)|0);
  $826 = HEAP16[$825>>1]|0;
  $827 = $826 << 16 >> 16;
  $828 = $827 << 11;
  $829 = $828 & 65535;
  $830 = $32;
  $831 = $830&65535;
  $832 = $831 << 16 >> 16;
  $833 = Math_imul($829, $832)|0;
  $834 = $833 >> 16;
  $835 = (($821) + ($834))|0;
  $836 = (($809) + ($835))|0;
  $27 = $836;
  $837 = $27;
  $838 = $837 >> 7;
  $839 = (($838) + 1)|0;
  $840 = $839 >> 1;
  $841 = ($840|0)>(32767);
  if ($841) {
   $852 = 32767;
  } else {
   $842 = $27;
   $843 = $842 >> 7;
   $844 = (($843) + 1)|0;
   $845 = $844 >> 1;
   $846 = ($845|0)<(-32768);
   if ($846) {
    $852 = -32768;
   } else {
    $847 = $27;
    $848 = $847 >> 7;
    $849 = (($848) + 1)|0;
    $850 = $849 >> 1;
    $852 = $850;
   }
  }
  $851 = $852&65535;
  $853 = $13;
  $854 = $22;
  $855 = (($854) - 1)|0;
  $856 = (($853) + ($855<<1)|0);
  HEAP16[$856>>1] = $851;
  $857 = $22;
  $858 = (($857) + 1)|0;
  $22 = $858;
 }
 $859 = HEAP32[$30>>2]|0;
 $860 = $859&65535;
 $861 = $11;
 HEAP16[$861>>1] = $860;
 $862 = ((($30)) + 4|0);
 $863 = HEAP32[$862>>2]|0;
 $864 = $863&65535;
 $865 = $11;
 $866 = ((($865)) + 2|0);
 HEAP16[$866>>1] = $864;
 $867 = $38;
 $868 = $867&65535;
 $869 = $11;
 $870 = ((($869)) + 30|0);
 HEAP16[$870>>1] = $868;
 $871 = $42;
 _llvm_stackrestore(($871|0));
 STACKTOP = sp;return;
}
function _silk_DIV32_varQ($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)>(0);
 $16 = $4;
 $17 = (0 - ($16))|0;
 $18 = $15 ? $16 : $17;
 $19 = (_silk_CLZ32($18)|0);
 $20 = (($19) - 1)|0;
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = $21 << $22;
 $11 = $23;
 $24 = $5;
 $25 = ($24|0)>(0);
 $26 = $5;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $26 : $27;
 $29 = (_silk_CLZ32($28)|0);
 $30 = (($29) - 1)|0;
 $8 = $30;
 $31 = $5;
 $32 = $8;
 $33 = $31 << $32;
 $12 = $33;
 $34 = $12;
 $35 = $34 >> 16;
 $36 = (536870911 / ($35|0))&-1;
 $10 = $36;
 $37 = $11;
 $38 = $37 >> 16;
 $39 = $10;
 $40 = $39&65535;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($38, $41)|0;
 $43 = $11;
 $44 = $43 & 65535;
 $45 = $10;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $48 >> 16;
 $50 = (($42) + ($49))|0;
 $13 = $50;
 $51 = $11;
 $52 = $12;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = $13;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = tempRet0;
 $60 = (_bitshift64Ashr(($58|0),($59|0),32)|0);
 $61 = tempRet0;
 $62 = $60 << 3;
 $63 = (($51) - ($62))|0;
 $11 = $63;
 $64 = $13;
 $65 = $11;
 $66 = $65 >> 16;
 $67 = $10;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $11;
 $72 = $71 & 65535;
 $73 = $10;
 $74 = $73&65535;
 $75 = $74 << 16 >> 16;
 $76 = Math_imul($72, $75)|0;
 $77 = $76 >> 16;
 $78 = (($70) + ($77))|0;
 $79 = (($64) + ($78))|0;
 $13 = $79;
 $80 = $7;
 $81 = (29 + ($80))|0;
 $82 = $8;
 $83 = (($81) - ($82))|0;
 $84 = $6;
 $85 = (($83) - ($84))|0;
 $9 = $85;
 $86 = $9;
 $87 = ($86|0)<(0);
 $88 = $9;
 if (!($87)) {
  $130 = ($88|0)<(32);
  if ($130) {
   $131 = $13;
   $132 = $9;
   $133 = $131 >> $132;
   $3 = $133;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $3 = 0;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 }
 $89 = (0 - ($88))|0;
 $90 = -2147483648 >> $89;
 $91 = $9;
 $92 = (0 - ($91))|0;
 $93 = 2147483647 >> $92;
 $94 = ($90|0)>($93|0);
 $95 = $13;
 $96 = $9;
 $97 = (0 - ($96))|0;
 do {
  if ($94) {
   $98 = -2147483648 >> $97;
   $99 = ($95|0)>($98|0);
   if ($99) {
    $100 = $9;
    $101 = (0 - ($100))|0;
    $102 = -2147483648 >> $101;
    $129 = $102;
    break;
   }
   $103 = $13;
   $104 = $9;
   $105 = (0 - ($104))|0;
   $106 = 2147483647 >> $105;
   $107 = ($103|0)<($106|0);
   if ($107) {
    $108 = $9;
    $109 = (0 - ($108))|0;
    $110 = 2147483647 >> $109;
    $129 = $110;
    break;
   } else {
    $111 = $13;
    $129 = $111;
    break;
   }
  } else {
   $112 = 2147483647 >> $97;
   $113 = ($95|0)>($112|0);
   if ($113) {
    $114 = $9;
    $115 = (0 - ($114))|0;
    $116 = 2147483647 >> $115;
    $129 = $116;
    break;
   }
   $117 = $13;
   $118 = $9;
   $119 = (0 - ($118))|0;
   $120 = -2147483648 >> $119;
   $121 = ($117|0)<($120|0);
   if ($121) {
    $122 = $9;
    $123 = (0 - ($122))|0;
    $124 = -2147483648 >> $123;
    $129 = $124;
    break;
   } else {
    $125 = $13;
    $129 = $125;
    break;
   }
  }
 } while(0);
 $126 = $9;
 $127 = (0 - ($126))|0;
 $128 = $129 << $127;
 $3 = $128;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _silk_max_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_CLZ32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_stereo_MS_to_LR($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $7;
 $21 = $6;
 $22 = ((($21)) + 4|0);
 ;HEAP16[$20>>1]=HEAP16[$22>>1]|0;HEAP16[$20+2>>1]=HEAP16[$22+2>>1]|0;
 $23 = $8;
 $24 = $6;
 $25 = ((($24)) + 8|0);
 ;HEAP16[$23>>1]=HEAP16[$25>>1]|0;HEAP16[$23+2>>1]=HEAP16[$25+2>>1]|0;
 $26 = $6;
 $27 = ((($26)) + 4|0);
 $28 = $7;
 $29 = $11;
 $30 = (($28) + ($29<<1)|0);
 ;HEAP16[$27>>1]=HEAP16[$30>>1]|0;HEAP16[$27+2>>1]=HEAP16[$30+2>>1]|0;
 $31 = $6;
 $32 = ((($31)) + 8|0);
 $33 = $8;
 $34 = $11;
 $35 = (($33) + ($34<<1)|0);
 ;HEAP16[$32>>1]=HEAP16[$35>>1]|0;HEAP16[$32+2>>1]=HEAP16[$35+2>>1]|0;
 $36 = $6;
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 $18 = $38;
 $39 = $6;
 $40 = ((($39)) + 2|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $19 = $42;
 $43 = $10;
 $44 = $43<<3;
 $45 = (65536 / ($44|0))&-1;
 $13 = $45;
 $46 = $9;
 $47 = HEAP32[$46>>2]|0;
 $48 = $6;
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = (($47) - ($50))|0;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = $13;
 $55 = $54&65535;
 $56 = $55 << 16 >> 16;
 $57 = Math_imul($53, $56)|0;
 $58 = $57 >> 15;
 $59 = (($58) + 1)|0;
 $60 = $59 >> 1;
 $14 = $60;
 $61 = $9;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $6;
 $65 = ((($64)) + 2|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66 << 16 >> 16;
 $68 = (($63) - ($67))|0;
 $69 = $68&65535;
 $70 = $69 << 16 >> 16;
 $71 = $13;
 $72 = $71&65535;
 $73 = $72 << 16 >> 16;
 $74 = Math_imul($70, $73)|0;
 $75 = $74 >> 15;
 $76 = (($75) + 1)|0;
 $77 = $76 >> 1;
 $15 = $77;
 $12 = 0;
 while(1) {
  $78 = $12;
  $79 = $10;
  $80 = $79<<3;
  $81 = ($78|0)<($80|0);
  if (!($81)) {
   break;
  }
  $82 = $14;
  $83 = $18;
  $84 = (($83) + ($82))|0;
  $18 = $84;
  $85 = $15;
  $86 = $19;
  $87 = (($86) + ($85))|0;
  $19 = $87;
  $88 = $7;
  $89 = $12;
  $90 = (($88) + ($89<<1)|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91 << 16 >> 16;
  $93 = $7;
  $94 = $12;
  $95 = (($94) + 2)|0;
  $96 = (($93) + ($95<<1)|0);
  $97 = HEAP16[$96>>1]|0;
  $98 = $97 << 16 >> 16;
  $99 = (($92) + ($98))|0;
  $100 = $7;
  $101 = $12;
  $102 = (($101) + 1)|0;
  $103 = (($100) + ($102<<1)|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = $105 << 1;
  $107 = (($99) + ($106))|0;
  $108 = $107 << 9;
  $16 = $108;
  $109 = $8;
  $110 = $12;
  $111 = (($110) + 1)|0;
  $112 = (($109) + ($111<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113 << 16 >> 16;
  $115 = $114 << 8;
  $116 = $16;
  $117 = $116 >> 16;
  $118 = $18;
  $119 = $118&65535;
  $120 = $119 << 16 >> 16;
  $121 = Math_imul($117, $120)|0;
  $122 = $16;
  $123 = $122 & 65535;
  $124 = $18;
  $125 = $124&65535;
  $126 = $125 << 16 >> 16;
  $127 = Math_imul($123, $126)|0;
  $128 = $127 >> 16;
  $129 = (($121) + ($128))|0;
  $130 = (($115) + ($129))|0;
  $16 = $130;
  $131 = $16;
  $132 = $7;
  $133 = $12;
  $134 = (($133) + 1)|0;
  $135 = (($132) + ($134<<1)|0);
  $136 = HEAP16[$135>>1]|0;
  $137 = $136 << 16 >> 16;
  $138 = $137 << 11;
  $139 = $138 >> 16;
  $140 = $19;
  $141 = $140&65535;
  $142 = $141 << 16 >> 16;
  $143 = Math_imul($139, $142)|0;
  $144 = $7;
  $145 = $12;
  $146 = (($145) + 1)|0;
  $147 = (($144) + ($146<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = $149 << 11;
  $151 = $150 & 65535;
  $152 = $19;
  $153 = $152&65535;
  $154 = $153 << 16 >> 16;
  $155 = Math_imul($151, $154)|0;
  $156 = $155 >> 16;
  $157 = (($143) + ($156))|0;
  $158 = (($131) + ($157))|0;
  $16 = $158;
  $159 = $16;
  $160 = $159 >> 7;
  $161 = (($160) + 1)|0;
  $162 = $161 >> 1;
  $163 = ($162|0)>(32767);
  if ($163) {
   $174 = 32767;
  } else {
   $164 = $16;
   $165 = $164 >> 7;
   $166 = (($165) + 1)|0;
   $167 = $166 >> 1;
   $168 = ($167|0)<(-32768);
   if ($168) {
    $174 = -32768;
   } else {
    $169 = $16;
    $170 = $169 >> 7;
    $171 = (($170) + 1)|0;
    $172 = $171 >> 1;
    $174 = $172;
   }
  }
  $173 = $174&65535;
  $175 = $8;
  $176 = $12;
  $177 = (($176) + 1)|0;
  $178 = (($175) + ($177<<1)|0);
  HEAP16[$178>>1] = $173;
  $179 = $12;
  $180 = (($179) + 1)|0;
  $12 = $180;
 }
 $181 = $9;
 $182 = HEAP32[$181>>2]|0;
 $18 = $182;
 $183 = $9;
 $184 = ((($183)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $19 = $185;
 $186 = $10;
 $187 = $186<<3;
 $12 = $187;
 while(1) {
  $188 = $12;
  $189 = $11;
  $190 = ($188|0)<($189|0);
  if (!($190)) {
   break;
  }
  $191 = $7;
  $192 = $12;
  $193 = (($191) + ($192<<1)|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194 << 16 >> 16;
  $196 = $7;
  $197 = $12;
  $198 = (($197) + 2)|0;
  $199 = (($196) + ($198<<1)|0);
  $200 = HEAP16[$199>>1]|0;
  $201 = $200 << 16 >> 16;
  $202 = (($195) + ($201))|0;
  $203 = $7;
  $204 = $12;
  $205 = (($204) + 1)|0;
  $206 = (($203) + ($205<<1)|0);
  $207 = HEAP16[$206>>1]|0;
  $208 = $207 << 16 >> 16;
  $209 = $208 << 1;
  $210 = (($202) + ($209))|0;
  $211 = $210 << 9;
  $16 = $211;
  $212 = $8;
  $213 = $12;
  $214 = (($213) + 1)|0;
  $215 = (($212) + ($214<<1)|0);
  $216 = HEAP16[$215>>1]|0;
  $217 = $216 << 16 >> 16;
  $218 = $217 << 8;
  $219 = $16;
  $220 = $219 >> 16;
  $221 = $18;
  $222 = $221&65535;
  $223 = $222 << 16 >> 16;
  $224 = Math_imul($220, $223)|0;
  $225 = $16;
  $226 = $225 & 65535;
  $227 = $18;
  $228 = $227&65535;
  $229 = $228 << 16 >> 16;
  $230 = Math_imul($226, $229)|0;
  $231 = $230 >> 16;
  $232 = (($224) + ($231))|0;
  $233 = (($218) + ($232))|0;
  $16 = $233;
  $234 = $16;
  $235 = $7;
  $236 = $12;
  $237 = (($236) + 1)|0;
  $238 = (($235) + ($237<<1)|0);
  $239 = HEAP16[$238>>1]|0;
  $240 = $239 << 16 >> 16;
  $241 = $240 << 11;
  $242 = $241 >> 16;
  $243 = $19;
  $244 = $243&65535;
  $245 = $244 << 16 >> 16;
  $246 = Math_imul($242, $245)|0;
  $247 = $7;
  $248 = $12;
  $249 = (($248) + 1)|0;
  $250 = (($247) + ($249<<1)|0);
  $251 = HEAP16[$250>>1]|0;
  $252 = $251 << 16 >> 16;
  $253 = $252 << 11;
  $254 = $253 & 65535;
  $255 = $19;
  $256 = $255&65535;
  $257 = $256 << 16 >> 16;
  $258 = Math_imul($254, $257)|0;
  $259 = $258 >> 16;
  $260 = (($246) + ($259))|0;
  $261 = (($234) + ($260))|0;
  $16 = $261;
  $262 = $16;
  $263 = $262 >> 7;
  $264 = (($263) + 1)|0;
  $265 = $264 >> 1;
  $266 = ($265|0)>(32767);
  if ($266) {
   $277 = 32767;
  } else {
   $267 = $16;
   $268 = $267 >> 7;
   $269 = (($268) + 1)|0;
   $270 = $269 >> 1;
   $271 = ($270|0)<(-32768);
   if ($271) {
    $277 = -32768;
   } else {
    $272 = $16;
    $273 = $272 >> 7;
    $274 = (($273) + 1)|0;
    $275 = $274 >> 1;
    $277 = $275;
   }
  }
  $276 = $277&65535;
  $278 = $8;
  $279 = $12;
  $280 = (($279) + 1)|0;
  $281 = (($278) + ($280<<1)|0);
  HEAP16[$281>>1] = $276;
  $282 = $12;
  $283 = (($282) + 1)|0;
  $12 = $283;
 }
 $284 = $9;
 $285 = HEAP32[$284>>2]|0;
 $286 = $285&65535;
 $287 = $6;
 HEAP16[$287>>1] = $286;
 $288 = $9;
 $289 = ((($288)) + 4|0);
 $290 = HEAP32[$289>>2]|0;
 $291 = $290&65535;
 $292 = $6;
 $293 = ((($292)) + 2|0);
 HEAP16[$293>>1] = $291;
 $12 = 0;
 while(1) {
  $294 = $12;
  $295 = $11;
  $296 = ($294|0)<($295|0);
  if (!($296)) {
   break;
  }
  $297 = $7;
  $298 = $12;
  $299 = (($298) + 1)|0;
  $300 = (($297) + ($299<<1)|0);
  $301 = HEAP16[$300>>1]|0;
  $302 = $301 << 16 >> 16;
  $303 = $8;
  $304 = $12;
  $305 = (($304) + 1)|0;
  $306 = (($303) + ($305<<1)|0);
  $307 = HEAP16[$306>>1]|0;
  $308 = $307 << 16 >> 16;
  $309 = (($302) + ($308))|0;
  $16 = $309;
  $310 = $7;
  $311 = $12;
  $312 = (($311) + 1)|0;
  $313 = (($310) + ($312<<1)|0);
  $314 = HEAP16[$313>>1]|0;
  $315 = $314 << 16 >> 16;
  $316 = $8;
  $317 = $12;
  $318 = (($317) + 1)|0;
  $319 = (($316) + ($318<<1)|0);
  $320 = HEAP16[$319>>1]|0;
  $321 = $320 << 16 >> 16;
  $322 = (($315) - ($321))|0;
  $17 = $322;
  $323 = $16;
  $324 = ($323|0)>(32767);
  if ($324) {
   $330 = 32767;
  } else {
   $325 = $16;
   $326 = ($325|0)<(-32768);
   $327 = $16;
   $328 = $326 ? -32768 : $327;
   $330 = $328;
  }
  $329 = $330&65535;
  $331 = $7;
  $332 = $12;
  $333 = (($332) + 1)|0;
  $334 = (($331) + ($333<<1)|0);
  HEAP16[$334>>1] = $329;
  $335 = $17;
  $336 = ($335|0)>(32767);
  if ($336) {
   $342 = 32767;
  } else {
   $337 = $17;
   $338 = ($337|0)<(-32768);
   $339 = $17;
   $340 = $338 ? -32768 : $339;
   $342 = $340;
  }
  $341 = $342&65535;
  $343 = $8;
  $344 = $12;
  $345 = (($344) + 1)|0;
  $346 = (($343) + ($345<<1)|0);
  HEAP16[$346>>1] = $341;
  $347 = $12;
  $348 = (($347) + 1)|0;
  $12 = $348;
 }
 STACKTOP = sp;return;
}
function _check_control_input($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(8000);
 if ($6) {
  $7 = $2;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(12000);
  if ($10) {
   $11 = $2;
   $12 = ((($11)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(16000);
   if ($14) {
    $15 = $2;
    $16 = ((($15)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(24000);
    if ($18) {
     $19 = $2;
     $20 = ((($19)) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)!=(32000);
     if ($22) {
      $23 = $2;
      $24 = ((($23)) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)!=(44100);
      if ($26) {
       $27 = $2;
       $28 = ((($27)) + 8|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($29|0)!=(48000);
       if (!($30)) {
        label = 8;
       }
      } else {
       label = 8;
      }
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label|0) == 8) {
   $31 = $2;
   $32 = ((($31)) + 20|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(8000);
   if ($34) {
    $35 = $2;
    $36 = ((($35)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)!=(12000);
    if ($38) {
     $39 = $2;
     $40 = ((($39)) + 20|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)!=(16000);
     if ($42) {
      break;
     }
    }
   }
   $43 = $2;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(8000);
   if ($46) {
    $47 = $2;
    $48 = ((($47)) + 12|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(12000);
    if ($50) {
     $51 = $2;
     $52 = ((($51)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)!=(16000);
     if ($54) {
      break;
     }
    }
   }
   $55 = $2;
   $56 = ((($55)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)!=(8000);
   if ($58) {
    $59 = $2;
    $60 = ((($59)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)!=(12000);
    if ($62) {
     $63 = $2;
     $64 = ((($63)) + 16|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)!=(16000);
     if ($66) {
      break;
     }
    }
   }
   $67 = $2;
   $68 = ((($67)) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $2;
   $71 = ((($70)) + 20|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($69|0)>($72|0);
   if (!($73)) {
    $74 = $2;
    $75 = ((($74)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $2;
    $78 = ((($77)) + 20|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ($76|0)<($79|0);
    if (!($80)) {
     $81 = $2;
     $82 = ((($81)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $2;
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($83|0)>($86|0);
     if (!($87)) {
      $88 = $2;
      $89 = ((($88)) + 24|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)!=(10);
      if ($91) {
       $92 = $2;
       $93 = ((($92)) + 24|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($94|0)!=(20);
       if ($95) {
        $96 = $2;
        $97 = ((($96)) + 24|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($98|0)!=(40);
        if ($99) {
         $100 = $2;
         $101 = ((($100)) + 24|0);
         $102 = HEAP32[$101>>2]|0;
         $103 = ($102|0)!=(60);
         if ($103) {
          $1 = -103;
          $164 = $1;
          STACKTOP = sp;return ($164|0);
         }
        }
       }
      }
      $104 = $2;
      $105 = ((($104)) + 32|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)<(0);
      if (!($107)) {
       $108 = $2;
       $109 = ((($108)) + 32|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ($110|0)>(100);
       if (!($111)) {
        $112 = $2;
        $113 = ((($112)) + 44|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($114|0)<(0);
        if (!($115)) {
         $116 = $2;
         $117 = ((($116)) + 44|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($118|0)>(1);
         if (!($119)) {
          $120 = $2;
          $121 = ((($120)) + 48|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = ($122|0)<(0);
          if (!($123)) {
           $124 = $2;
           $125 = ((($124)) + 48|0);
           $126 = HEAP32[$125>>2]|0;
           $127 = ($126|0)>(1);
           if (!($127)) {
            $128 = $2;
            $129 = ((($128)) + 40|0);
            $130 = HEAP32[$129>>2]|0;
            $131 = ($130|0)<(0);
            do {
             if (!($131)) {
              $132 = $2;
              $133 = ((($132)) + 40|0);
              $134 = HEAP32[$133>>2]|0;
              $135 = ($134|0)>(1);
              if ($135) {
               break;
              }
              $136 = $2;
              $137 = HEAP32[$136>>2]|0;
              $138 = ($137|0)<(1);
              do {
               if (!($138)) {
                $139 = $2;
                $140 = HEAP32[$139>>2]|0;
                $141 = ($140|0)>(2);
                if ($141) {
                 break;
                }
                $142 = $2;
                $143 = ((($142)) + 4|0);
                $144 = HEAP32[$143>>2]|0;
                $145 = ($144|0)<(1);
                do {
                 if (!($145)) {
                  $146 = $2;
                  $147 = ((($146)) + 4|0);
                  $148 = HEAP32[$147>>2]|0;
                  $149 = ($148|0)>(2);
                  if ($149) {
                   break;
                  }
                  $150 = $2;
                  $151 = ((($150)) + 4|0);
                  $152 = HEAP32[$151>>2]|0;
                  $153 = $2;
                  $154 = HEAP32[$153>>2]|0;
                  $155 = ($152|0)>($154|0);
                  if ($155) {
                   $1 = -111;
                   $164 = $1;
                   STACKTOP = sp;return ($164|0);
                  }
                  $156 = $2;
                  $157 = ((($156)) + 36|0);
                  $158 = HEAP32[$157>>2]|0;
                  $159 = ($158|0)<(0);
                  do {
                   if (!($159)) {
                    $160 = $2;
                    $161 = ((($160)) + 36|0);
                    $162 = HEAP32[$161>>2]|0;
                    $163 = ($162|0)>(10);
                    if ($163) {
                     break;
                    }
                    $1 = 0;
                    $164 = $1;
                    STACKTOP = sp;return ($164|0);
                   }
                  } while(0);
                  $1 = -106;
                  $164 = $1;
                  STACKTOP = sp;return ($164|0);
                 }
                } while(0);
                $1 = -111;
                $164 = $1;
                STACKTOP = sp;return ($164|0);
               }
              } while(0);
              $1 = -111;
              $164 = $1;
              STACKTOP = sp;return ($164|0);
             }
            } while(0);
            $1 = -107;
            $164 = $1;
            STACKTOP = sp;return ($164|0);
           }
          }
          $1 = -109;
          $164 = $1;
          STACKTOP = sp;return ($164|0);
         }
        }
        $1 = -108;
        $164 = $1;
        STACKTOP = sp;return ($164|0);
       }
      }
      $1 = -105;
      $164 = $1;
      STACKTOP = sp;return ($164|0);
     }
    }
   }
  }
 } while(0);
 $1 = -102;
 $164 = $1;
 STACKTOP = sp;return ($164|0);
}
function _silk_control_SNR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $8 = $3;
 $9 = ($8|0)>(80000);
 if ($9) {
  $14 = 80000;
 } else {
  $10 = $3;
  $11 = ($10|0)<(5000);
  $12 = $3;
  $13 = $11 ? 5000 : $12;
  $14 = $13;
 }
 $3 = $14;
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 4632|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15|0)!=($18|0);
 if (!($19)) {
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $20 = $3;
 $21 = $2;
 $22 = ((($21)) + 4632|0);
 HEAP32[$22>>2] = $20;
 $23 = $2;
 $24 = ((($23)) + 4600|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(8);
 do {
  if ($26) {
   $7 = 16708;
  } else {
   $27 = $2;
   $28 = ((($27)) + 4600|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(12);
   if ($30) {
    $7 = 16740;
    break;
   } else {
    $7 = 16772;
    break;
   }
  }
 } while(0);
 $31 = $2;
 $32 = ((($31)) + 4604|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(2);
 if ($34) {
  $35 = $3;
  $36 = (($35) - 2200)|0;
  $3 = $36;
 }
 $4 = 1;
 while(1) {
  $37 = $4;
  $38 = ($37|0)<(8);
  if (!($38)) {
   label = 16;
   break;
  }
  $39 = $3;
  $40 = $7;
  $41 = $4;
  $42 = (($40) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($39|0)<=($43|0);
  if ($44) {
   break;
  }
  $85 = $4;
  $86 = (($85) + 1)|0;
  $4 = $86;
 }
 if ((label|0) == 16) {
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $45 = $3;
 $46 = $7;
 $47 = $4;
 $48 = (($47) - 1)|0;
 $49 = (($46) + ($48<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($45) - ($50))|0;
 $52 = $51 << 6;
 $53 = $7;
 $54 = $4;
 $55 = (($53) + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $7;
 $58 = $4;
 $59 = (($58) - 1)|0;
 $60 = (($57) + ($59<<2)|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($56) - ($61))|0;
 $63 = (($52|0) / ($62|0))&-1;
 $6 = $63;
 $64 = $4;
 $65 = (($64) - 1)|0;
 $66 = (24950 + ($65<<1)|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $69 = $68 << 6;
 $70 = $6;
 $71 = $4;
 $72 = (24950 + ($71<<1)|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73 << 16 >> 16;
 $75 = $4;
 $76 = (($75) - 1)|0;
 $77 = (24950 + ($76<<1)|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = $78 << 16 >> 16;
 $80 = (($74) - ($79))|0;
 $81 = Math_imul($70, $80)|0;
 $82 = (($69) + ($81))|0;
 $83 = $2;
 $84 = ((($83)) + 4748|0);
 HEAP32[$84>>2] = $82;
 $87 = $5;
 STACKTOP = sp;return ($87|0);
}
function _silk_init_encoder($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 _memset(($5|0),0,12240)|0;
 $6 = $3;
 $7 = $2;
 $8 = ((($7)) + 5124|0);
 HEAP32[$8>>2] = $6;
 $9 = (_silk_lin2log(3932160)|0);
 $10 = (($9) - 2048)|0;
 $11 = $10 << 8;
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAP32[$13>>2] = $11;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $2;
 $20 = ((($19)) + 4696|0);
 HEAP32[$20>>2] = 1;
 $21 = $2;
 $22 = ((($21)) + 32|0);
 $23 = (_silk_VAD_Init($22)|0);
 $24 = $4;
 $25 = (($24) + ($23))|0;
 $4 = $25;
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _silk_control_encoder($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 $15 = $8;
 $16 = ((($15)) + 44|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $7;
 $19 = ((($18)) + 6108|0);
 HEAP32[$19>>2] = $17;
 $20 = $8;
 $21 = ((($20)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $7;
 $24 = ((($23)) + 4708|0);
 HEAP32[$24>>2] = $22;
 $25 = $8;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = ((($28)) + 4580|0);
 HEAP32[$29>>2] = $27;
 $30 = $8;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $7;
 $34 = ((($33)) + 4588|0);
 HEAP32[$34>>2] = $32;
 $35 = $8;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $7;
 $39 = ((($38)) + 4592|0);
 HEAP32[$39>>2] = $37;
 $40 = $8;
 $41 = ((($40)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $7;
 $44 = ((($43)) + 4596|0);
 HEAP32[$44>>2] = $42;
 $45 = $8;
 $46 = ((($45)) + 40|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $7;
 $49 = ((($48)) + 6120|0);
 HEAP32[$49>>2] = $47;
 $50 = $8;
 $51 = HEAP32[$50>>2]|0;
 $52 = $7;
 $53 = ((($52)) + 5784|0);
 HEAP32[$53>>2] = $51;
 $54 = $8;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $7;
 $58 = ((($57)) + 5788|0);
 HEAP32[$58>>2] = $56;
 $59 = $10;
 $60 = $7;
 $61 = ((($60)) + 4560|0);
 HEAP32[$61>>2] = $59;
 $62 = $11;
 $63 = $7;
 $64 = ((($63)) + 5792|0);
 HEAP32[$64>>2] = $62;
 $65 = $7;
 $66 = ((($65)) + 4700|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0);
 if ($68) {
  $69 = $7;
  $70 = ((($69)) + 4712|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)==(0);
  if ($72) {
   $73 = $7;
   $74 = ((($73)) + 4580|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $7;
   $77 = ((($76)) + 4584|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($75|0)!=($78|0);
   if ($79) {
    $80 = $7;
    $81 = ((($80)) + 4600|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)>(0);
    if ($83) {
     $84 = $7;
     $85 = $7;
     $86 = ((($85)) + 4600|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (_silk_setup_resamplers($84,$87)|0);
     $89 = $14;
     $90 = (($89) + ($88))|0;
     $14 = $90;
    }
   }
   $91 = $14;
   $6 = $91;
   $131 = $6;
   STACKTOP = sp;return ($131|0);
  }
 }
 $92 = $7;
 $93 = $8;
 $94 = (_silk_control_audio_bandwidth($92,$93)|0);
 $13 = $94;
 $95 = $12;
 $96 = ($95|0)!=(0);
 if ($96) {
  $97 = $12;
  $13 = $97;
 }
 $98 = $7;
 $99 = $13;
 $100 = (_silk_setup_resamplers($98,$99)|0);
 $101 = $14;
 $102 = (($101) + ($100))|0;
 $14 = $102;
 $103 = $7;
 $104 = $13;
 $105 = $8;
 $106 = ((($105)) + 24|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = (_silk_setup_fs($103,$104,$107)|0);
 $109 = $14;
 $110 = (($109) + ($108))|0;
 $14 = $110;
 $111 = $7;
 $112 = $8;
 $113 = ((($112)) + 36|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (_silk_setup_complexity($111,$114)|0);
 $116 = $14;
 $117 = (($116) + ($115))|0;
 $14 = $117;
 $118 = $8;
 $119 = ((($118)) + 32|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $7;
 $122 = ((($121)) + 4640|0);
 HEAP32[$122>>2] = $120;
 $123 = $7;
 $124 = $9;
 $125 = (_silk_setup_LBRR($123,$124)|0);
 $126 = $14;
 $127 = (($126) + ($125))|0;
 $14 = $127;
 $128 = $7;
 $129 = ((($128)) + 4700|0);
 HEAP32[$129>>2] = 1;
 $130 = $14;
 $6 = $130;
 $131 = $6;
 STACKTOP = sp;return ($131|0);
}
function _silk_setup_resamplers($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $$alloca_mul10 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp;
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $11 = $2;
 $12 = ((($11)) + 4600|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = ($13|0)!=($14|0);
 if (!($15)) {
  $16 = $2;
  $17 = ((($16)) + 4584|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = ((($19)) + 4580|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($18|0)!=($21|0);
  if (!($22)) {
   $107 = $2;
   $108 = ((($107)) + 4580|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $2;
   $111 = ((($110)) + 4584|0);
   HEAP32[$111>>2] = $109;
   $112 = $4;
   STACKTOP = sp;return ($112|0);
  }
 }
 $23 = $2;
 $24 = ((($23)) + 4600|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 $27 = $2;
 if ($26) {
  $28 = ((($27)) + 5808|0);
  $29 = $2;
  $30 = ((($29)) + 4580|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $3;
  $33 = ($32*1000)|0;
  $34 = (_silk_resampler_init($28,$31,$33,1)|0);
  $35 = $4;
  $36 = (($35) + ($34))|0;
  $4 = $36;
  $107 = $2;
  $108 = ((($107)) + 4580|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $2;
  $111 = ((($110)) + 4584|0);
  HEAP32[$111>>2] = $109;
  $112 = $4;
  STACKTOP = sp;return ($112|0);
 } else {
  $37 = ((($27)) + 4604|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38*5)|0;
  $40 = $39 << 1;
  $41 = (($40) + 5)|0;
  $8 = $41;
  $42 = $8;
  $43 = $2;
  $44 = ((($43)) + 4600|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = Math_imul($42, $45)|0;
  $7 = $46;
  $47 = $8;
  $48 = $3;
  $49 = Math_imul($47, $48)|0;
  $5 = $49;
  $50 = $7;
  $51 = $5;
  $52 = ($50|0)>($51|0);
  $53 = $7;
  $54 = $5;
  $55 = $52 ? $53 : $54;
  $56 = (_llvm_stacksave()|0);
  $9 = $56;
  $$alloca_mul = $55<<1;
  $57 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $58 = $2;
  $59 = ((($58)) + 9356|0);
  $60 = $7;
  _silk_float2short_array($57,$59,$60);
  $61 = $2;
  $62 = ((($61)) + 4600|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $63&65535;
  $65 = $64 << 16 >> 16;
  $66 = ($65*1000)|0;
  $67 = $2;
  $68 = ((($67)) + 4580|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (_silk_resampler_init($10,$66,$69,0)|0);
  $71 = $4;
  $72 = (($71) + ($70))|0;
  $4 = $72;
  $73 = $8;
  $74 = $2;
  $75 = ((($74)) + 4580|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76|0) / 1000)&-1;
  $78 = Math_imul($73, $77)|0;
  $6 = $78;
  $79 = $6;
  $$alloca_mul10 = $79<<1;
  $80 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul10)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul10)|0)+15)&-16)|0);;
  $81 = $7;
  $82 = (_silk_resampler($10,$80,$57,$81)|0);
  $83 = $4;
  $84 = (($83) + ($82))|0;
  $4 = $84;
  $85 = $2;
  $86 = ((($85)) + 5808|0);
  $87 = $2;
  $88 = ((($87)) + 4580|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $3;
  $91 = $90&65535;
  $92 = $91 << 16 >> 16;
  $93 = ($92*1000)|0;
  $94 = (_silk_resampler_init($86,$89,$93,1)|0);
  $95 = $4;
  $96 = (($95) + ($94))|0;
  $4 = $96;
  $97 = $2;
  $98 = ((($97)) + 5808|0);
  $99 = $6;
  $100 = (_silk_resampler($98,$57,$80,$99)|0);
  $101 = $4;
  $102 = (($101) + ($100))|0;
  $4 = $102;
  $103 = $2;
  $104 = ((($103)) + 9356|0);
  $105 = $5;
  _silk_short2float_array($104,$57,$105);
  $106 = $9;
  _llvm_stackrestore(($106|0));
  $107 = $2;
  $108 = ((($107)) + 4580|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $2;
  $111 = ((($110)) + 4584|0);
  HEAP32[$111>>2] = $109;
  $112 = $4;
  STACKTOP = sp;return ($112|0);
 }
 return (0)|0;
}
function _silk_setup_fs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink11 = 0, $$sink12 = 0, $$sink15 = 0, $$sink16$sink = 0, $$sink19$sink = 0, $$sink22 = 0, $$sink6 = 0, $$sink6$sink = 0, $$sink7 = 0, $$sink8 = 0, $$sink8$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $silk_NLSF_CB_WB$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4636|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7|0)!=($10|0);
 if ($11) {
  $12 = $5;
  $13 = ($12|0)!=(10);
  $14 = $5;
  $15 = ($14|0)!=(20);
  $or$cond = $13 & $15;
  $16 = $5;
  $17 = ($16|0)!=(40);
  $or$cond3 = $or$cond & $17;
  $18 = $5;
  $19 = ($18|0)!=(60);
  $or$cond5 = $or$cond3 & $19;
  if ($or$cond5) {
   $6 = -103;
  }
  $20 = $5;
  $21 = ($20|0)<=(10);
  if ($21) {
   $22 = $3;
   $23 = ((($22)) + 5776|0);
   HEAP32[$23>>2] = 1;
   $24 = $5;
   $25 = ($24|0)==(10);
   $26 = $25 ? 2 : 1;
   $27 = $3;
   $28 = ((($27)) + 4604|0);
   HEAP32[$28>>2] = $26;
   $29 = $5;
   $30 = $29&65535;
   $31 = $30 << 16 >> 16;
   $32 = $4;
   $33 = $32&65535;
   $34 = $33 << 16 >> 16;
   $35 = Math_imul($31, $34)|0;
   $36 = $3;
   $37 = ((($36)) + 4608|0);
   HEAP32[$37>>2] = $35;
   $38 = $4;
   $39 = $38&65535;
   $40 = $39 << 16 >> 16;
   $41 = ($40*14)|0;
   $42 = $3;
   $43 = ((($42)) + 4572|0);
   HEAP32[$43>>2] = $41;
   $44 = $3;
   $45 = ((($44)) + 4600|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(8);
   $48 = $3;
   $49 = ((($48)) + 4720|0);
   $$sink = $47 ? 27853 : 27841;
   $$sink22 = $49;$$sink6$sink = $$sink;
  } else {
   $50 = $5;
   $51 = (($50|0) / 20)&-1;
   $52 = $3;
   $53 = ((($52)) + 5776|0);
   HEAP32[$53>>2] = $51;
   $54 = $3;
   $55 = ((($54)) + 4604|0);
   HEAP32[$55>>2] = 4;
   $56 = $4;
   $57 = $56&65535;
   $58 = $57 << 16 >> 16;
   $59 = ($58*20)|0;
   $60 = $3;
   $61 = ((($60)) + 4608|0);
   HEAP32[$61>>2] = $59;
   $62 = $4;
   $63 = $62&65535;
   $64 = $63 << 16 >> 16;
   $65 = ($64*24)|0;
   $66 = $3;
   $67 = ((($66)) + 4572|0);
   HEAP32[$67>>2] = $65;
   $68 = $3;
   $69 = ((($68)) + 4600|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(8);
   $72 = $3;
   $73 = ((($72)) + 4720|0);
   $$sink6 = $71 ? 27830 : 27796;
   $$sink22 = $73;$$sink6$sink = $$sink6;
  }
  HEAP32[$$sink22>>2] = $$sink6$sink;
  $74 = $5;
  $75 = $3;
  $76 = ((($75)) + 4636|0);
  HEAP32[$76>>2] = $74;
  $77 = $3;
  $78 = ((($77)) + 4632|0);
  HEAP32[$78>>2] = 0;
 }
 $79 = $3;
 $80 = ((($79)) + 4600|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = ($81|0)!=($82|0);
 if (!($83)) {
  $207 = $6;
  STACKTOP = sp;return ($207|0);
 }
 $84 = $3;
 $85 = ((($84)) + 7200|0);
 ;HEAP32[$85>>2]=0|0;HEAP32[$85+4>>2]=0|0;HEAP32[$85+8>>2]=0|0;HEAP32[$85+12>>2]=0|0;
 $86 = $3;
 $87 = ((($86)) + 7216|0);
 _memset(($87|0),0,2140)|0;
 $88 = $3;
 $89 = ((($88)) + 144|0);
 _memset(($89|0),0,4380)|0;
 $90 = $3;
 $91 = ((($90)) + 4524|0);
 ;HEAP32[$91>>2]=0|0;HEAP32[$91+4>>2]=0|0;HEAP32[$91+8>>2]=0|0;HEAP32[$91+12>>2]=0|0;HEAP32[$91+16>>2]=0|0;HEAP32[$91+20>>2]=0|0;HEAP32[$91+24>>2]=0|0;HEAP32[$91+28>>2]=0|0;
 $92 = $3;
 $93 = ((($92)) + 16|0);
 ;HEAP32[$93>>2]=0|0;HEAP32[$93+4>>2]=0|0;
 $94 = $3;
 $95 = ((($94)) + 5772|0);
 HEAP32[$95>>2] = 0;
 $96 = $3;
 $97 = ((($96)) + 5780|0);
 HEAP32[$97>>2] = 0;
 $98 = $3;
 $99 = ((($98)) + 4632|0);
 HEAP32[$99>>2] = 0;
 $100 = $3;
 $101 = ((($100)) + 4568|0);
 HEAP32[$101>>2] = 100;
 $102 = $3;
 $103 = ((($102)) + 4696|0);
 HEAP32[$103>>2] = 1;
 $104 = $3;
 $105 = ((($104)) + 7216|0);
 $106 = ((($105)) + 2136|0);
 HEAP32[$106>>2] = 100;
 $107 = $3;
 $108 = ((($107)) + 7200|0);
 HEAP8[$108>>0] = 10;
 $109 = $3;
 $110 = ((($109)) + 144|0);
 $111 = ((($110)) + 4356|0);
 HEAP32[$111>>2] = 100;
 $112 = $3;
 $113 = ((($112)) + 144|0);
 $114 = ((($113)) + 4372|0);
 HEAP32[$114>>2] = 65536;
 $115 = $3;
 $116 = ((($115)) + 4565|0);
 HEAP8[$116>>0] = 0;
 $117 = $4;
 $118 = $3;
 $119 = ((($118)) + 4600|0);
 HEAP32[$119>>2] = $117;
 $120 = $3;
 $121 = ((($120)) + 4600|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(8);
 $124 = $3;
 $125 = ((($124)) + 4604|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)==(4);
 $128 = $3;
 $129 = ((($128)) + 4720|0);
 $$sink8 = $127 ? 27796 : 27841;
 $$sink7 = $127 ? 27830 : 27853;
 $$sink8$sink = $123 ? $$sink7 : $$sink8;
 HEAP32[$129>>2] = $$sink8$sink;
 $130 = $3;
 $131 = ((($130)) + 4600|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)==(8);
 if ($133) {
  label = 11;
 } else {
  $134 = $3;
  $135 = ((($134)) + 4600|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)==(12);
  if ($137) {
   label = 11;
  } else {
   $141 = $3;
   $142 = ((($141)) + 4664|0);
   HEAP32[$142>>2] = 16;
   $143 = $3;
   $$sink11 = $143;$silk_NLSF_CB_WB$sink = 22252;
  }
 }
 if ((label|0) == 11) {
  $138 = $3;
  $139 = ((($138)) + 4664|0);
  HEAP32[$139>>2] = 10;
  $140 = $3;
  $$sink11 = $140;$silk_NLSF_CB_WB$sink = 22216;
 }
 $144 = ((($$sink11)) + 4724|0);
 HEAP32[$144>>2] = $silk_NLSF_CB_WB$sink;
 $145 = $4;
 $146 = ($145*5)|0;
 $147 = $3;
 $148 = ((($147)) + 4612|0);
 HEAP32[$148>>2] = $146;
 $149 = $3;
 $150 = ((($149)) + 4612|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $151&65535;
 $153 = $152 << 16 >> 16;
 $154 = $3;
 $155 = ((($154)) + 4604|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $156&65535;
 $158 = $157 << 16 >> 16;
 $159 = Math_imul($153, $158)|0;
 $160 = $3;
 $161 = ((($160)) + 4608|0);
 HEAP32[$161>>2] = $159;
 $162 = $4;
 $163 = $162&65535;
 $164 = $163 << 16 >> 16;
 $165 = ($164*20)|0;
 $166 = $3;
 $167 = ((($166)) + 4616|0);
 HEAP32[$167>>2] = $165;
 $168 = $4;
 $169 = $168&65535;
 $170 = $169 << 16 >> 16;
 $171 = $170<<1;
 $172 = $3;
 $173 = ((($172)) + 4620|0);
 HEAP32[$173>>2] = $171;
 $174 = $4;
 $175 = $174&65535;
 $176 = $175 << 16 >> 16;
 $177 = ($176*18)|0;
 $178 = $3;
 $179 = ((($178)) + 4576|0);
 HEAP32[$179>>2] = $177;
 $180 = $3;
 $181 = ((($180)) + 4604|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)==(4);
 $184 = $4;
 $185 = $184&65535;
 $186 = $185 << 16 >> 16;
 $187 = ($186*14)|0;
 $188 = $3;
 $189 = ($186*24)|0;
 $190 = $3;
 $$sink15 = $183 ? $190 : $188;
 $$sink12 = $183 ? $189 : $187;
 $191 = ((($$sink15)) + 4572|0);
 HEAP32[$191>>2] = $$sink12;
 $192 = $3;
 $193 = ((($192)) + 4600|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ($194|0)==(16);
 $196 = $3;
 do {
  if ($195) {
   $197 = ((($196)) + 4684|0);
   HEAP32[$197>>2] = 10;
   $198 = $3;
   $$sink16$sink = 27728;$$sink19$sink = $198;
  } else {
   $199 = ((($196)) + 4600|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)==(12);
   $202 = $3;
   $203 = ((($202)) + 4684|0);
   if ($201) {
    HEAP32[$203>>2] = 13;
    $204 = $3;
    $$sink16$sink = 27722;$$sink19$sink = $204;
    break;
   } else {
    HEAP32[$203>>2] = 15;
    $205 = $3;
    $$sink16$sink = 27713;$$sink19$sink = $205;
    break;
   }
  }
 } while(0);
 $206 = ((($$sink19$sink)) + 4716|0);
 HEAP32[$206>>2] = $$sink16$sink;
 $207 = $6;
 STACKTOP = sp;return ($207|0);
}
function _silk_setup_complexity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink$sink$sink$sink = 0, $$sink2$sink$sink$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $3;
 $6 = ($5|0)<(2);
 do {
  if ($6) {
   $7 = $2;
   $8 = ((($7)) + 4668|0);
   HEAP32[$8>>2] = 0;
   $9 = $2;
   $10 = ((($9)) + 4676|0);
   HEAP32[$10>>2] = 52429;
   $11 = $2;
   $12 = ((($11)) + 4672|0);
   HEAP32[$12>>2] = 6;
   $13 = $2;
   $14 = ((($13)) + 4660|0);
   HEAP32[$14>>2] = 8;
   $15 = $2;
   $16 = ((($15)) + 4600|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17*3)|0;
   $19 = $2;
   $20 = ((($19)) + 4624|0);
   HEAP32[$20>>2] = $18;
   $21 = $2;
   $22 = ((($21)) + 4652|0);
   HEAP32[$22>>2] = 1;
   $23 = $2;
   $24 = ((($23)) + 4656|0);
   HEAP32[$24>>2] = 0;
   $25 = $2;
   $26 = ((($25)) + 4680|0);
   HEAP32[$26>>2] = 1;
   $27 = $2;
   $28 = ((($27)) + 4692|0);
   HEAP32[$28>>2] = 2;
   $29 = $2;
   $$sink$sink$sink$sink = 0;$$sink2$sink$sink$sink = $29;
  } else {
   $30 = $3;
   $31 = ($30|0)<(4);
   if ($31) {
    $32 = $2;
    $33 = ((($32)) + 4668|0);
    HEAP32[$33>>2] = 1;
    $34 = $2;
    $35 = ((($34)) + 4676|0);
    HEAP32[$35>>2] = 49807;
    $36 = $2;
    $37 = ((($36)) + 4672|0);
    HEAP32[$37>>2] = 8;
    $38 = $2;
    $39 = ((($38)) + 4660|0);
    HEAP32[$39>>2] = 10;
    $40 = $2;
    $41 = ((($40)) + 4600|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42*5)|0;
    $44 = $2;
    $45 = ((($44)) + 4624|0);
    HEAP32[$45>>2] = $43;
    $46 = $2;
    $47 = ((($46)) + 4652|0);
    HEAP32[$47>>2] = 1;
    $48 = $2;
    $49 = ((($48)) + 4656|0);
    HEAP32[$49>>2] = 0;
    $50 = $2;
    $51 = ((($50)) + 4680|0);
    HEAP32[$51>>2] = 0;
    $52 = $2;
    $53 = ((($52)) + 4692|0);
    HEAP32[$53>>2] = 4;
    $54 = $2;
    $$sink$sink$sink$sink = 0;$$sink2$sink$sink$sink = $54;
    break;
   }
   $55 = $3;
   $56 = ($55|0)<(6);
   if ($56) {
    $57 = $2;
    $58 = ((($57)) + 4668|0);
    HEAP32[$58>>2] = 1;
    $59 = $2;
    $60 = ((($59)) + 4676|0);
    HEAP32[$60>>2] = 48497;
    $61 = $2;
    $62 = ((($61)) + 4672|0);
    HEAP32[$62>>2] = 10;
    $63 = $2;
    $64 = ((($63)) + 4660|0);
    HEAP32[$64>>2] = 12;
    $65 = $2;
    $66 = ((($65)) + 4600|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67*5)|0;
    $69 = $2;
    $70 = ((($69)) + 4624|0);
    HEAP32[$70>>2] = $68;
    $71 = $2;
    $72 = ((($71)) + 4652|0);
    HEAP32[$72>>2] = 2;
    $73 = $2;
    $74 = ((($73)) + 4656|0);
    HEAP32[$74>>2] = 1;
    $75 = $2;
    $76 = ((($75)) + 4680|0);
    HEAP32[$76>>2] = 0;
    $77 = $2;
    $78 = ((($77)) + 4692|0);
    HEAP32[$78>>2] = 8;
    $79 = $2;
    $80 = ((($79)) + 4600|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81*983)|0;
    $83 = $2;
    $$sink$sink$sink$sink = $82;$$sink2$sink$sink$sink = $83;
    break;
   }
   $84 = $3;
   $85 = ($84|0)<(8);
   $86 = $2;
   $87 = ((($86)) + 4668|0);
   if ($85) {
    HEAP32[$87>>2] = 1;
    $88 = $2;
    $89 = ((($88)) + 4676|0);
    HEAP32[$89>>2] = 47186;
    $90 = $2;
    $91 = ((($90)) + 4672|0);
    HEAP32[$91>>2] = 12;
    $92 = $2;
    $93 = ((($92)) + 4660|0);
    HEAP32[$93>>2] = 14;
    $94 = $2;
    $95 = ((($94)) + 4600|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96*5)|0;
    $98 = $2;
    $99 = ((($98)) + 4624|0);
    HEAP32[$99>>2] = $97;
    $100 = $2;
    $101 = ((($100)) + 4652|0);
    HEAP32[$101>>2] = 3;
    $102 = $2;
    $103 = ((($102)) + 4656|0);
    HEAP32[$103>>2] = 1;
    $104 = $2;
    $105 = ((($104)) + 4680|0);
    HEAP32[$105>>2] = 0;
    $106 = $2;
    $107 = ((($106)) + 4692|0);
    HEAP32[$107>>2] = 16;
    $108 = $2;
    $109 = ((($108)) + 4600|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110*983)|0;
    $112 = $2;
    $$sink$sink$sink$sink = $111;$$sink2$sink$sink$sink = $112;
    break;
   } else {
    HEAP32[$87>>2] = 2;
    $113 = $2;
    $114 = ((($113)) + 4676|0);
    HEAP32[$114>>2] = 45875;
    $115 = $2;
    $116 = ((($115)) + 4672|0);
    HEAP32[$116>>2] = 16;
    $117 = $2;
    $118 = ((($117)) + 4660|0);
    HEAP32[$118>>2] = 16;
    $119 = $2;
    $120 = ((($119)) + 4600|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121*5)|0;
    $123 = $2;
    $124 = ((($123)) + 4624|0);
    HEAP32[$124>>2] = $122;
    $125 = $2;
    $126 = ((($125)) + 4652|0);
    HEAP32[$126>>2] = 4;
    $127 = $2;
    $128 = ((($127)) + 4656|0);
    HEAP32[$128>>2] = 1;
    $129 = $2;
    $130 = ((($129)) + 4680|0);
    HEAP32[$130>>2] = 0;
    $131 = $2;
    $132 = ((($131)) + 4692|0);
    HEAP32[$132>>2] = 32;
    $133 = $2;
    $134 = ((($133)) + 4600|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135*983)|0;
    $137 = $2;
    $$sink$sink$sink$sink = $136;$$sink2$sink$sink$sink = $137;
    break;
   }
  }
 } while(0);
 $138 = ((($$sink2$sink$sink$sink)) + 4704|0);
 HEAP32[$138>>2] = $$sink$sink$sink$sink;
 $139 = $2;
 $140 = ((($139)) + 4672|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = $2;
 $143 = ((($142)) + 4664|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = (_silk_min_int($141,$144)|0);
 $146 = $2;
 $147 = ((($146)) + 4672|0);
 HEAP32[$147>>2] = $145;
 $148 = $2;
 $149 = ((($148)) + 4600|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150*5)|0;
 $152 = $2;
 $153 = ((($152)) + 4624|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = $154<<1;
 $156 = (($151) + ($155))|0;
 $157 = $2;
 $158 = ((($157)) + 4628|0);
 HEAP32[$158>>2] = $156;
 $159 = $3;
 $160 = $2;
 $161 = ((($160)) + 4648|0);
 HEAP32[$161>>2] = $159;
 $162 = $4;
 STACKTOP = sp;return ($162|0);
}
function _silk_setup_LBRR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $7 = $2;
 $8 = ((($7)) + 6124|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $2;
 $11 = ((($10)) + 6124|0);
 HEAP32[$11>>2] = 0;
 $12 = $2;
 $13 = ((($12)) + 6120|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 $16 = $2;
 $17 = ((($16)) + 4640|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(0);
 if (!($19)) {
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 $20 = $2;
 $21 = ((($20)) + 4600|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(8);
 do {
  if ($23) {
   $6 = 12000;
  } else {
   $24 = $2;
   $25 = ((($24)) + 4600|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(12);
   if ($27) {
    $6 = 14000;
    break;
   } else {
    $6 = 16000;
    break;
   }
  }
 } while(0);
 $28 = $6;
 $29 = $2;
 $30 = ((($29)) + 4640|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<(25);
 if ($32) {
  $33 = $2;
  $34 = ((($33)) + 4640|0);
  $35 = HEAP32[$34>>2]|0;
  $37 = $35;
 } else {
  $37 = 25;
 }
 $36 = (125 - ($37))|0;
 $38 = Math_imul($28, $36)|0;
 $39 = $38 >> 16;
 $40 = ($39*655)|0;
 $41 = $6;
 $42 = $2;
 $43 = ((($42)) + 4640|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)<(25);
 if ($45) {
  $46 = $2;
  $47 = ((($46)) + 4640|0);
  $48 = HEAP32[$47>>2]|0;
  $50 = $48;
 } else {
  $50 = 25;
 }
 $49 = (125 - ($50))|0;
 $51 = Math_imul($41, $49)|0;
 $52 = $51 & 65535;
 $53 = ($52*655)|0;
 $54 = $53 >> 16;
 $55 = (($40) + ($54))|0;
 $6 = $55;
 $56 = $3;
 $57 = $6;
 $58 = ($56|0)>($57|0);
 if (!($58)) {
  $79 = $5;
  STACKTOP = sp;return ($79|0);
 }
 $59 = $4;
 $60 = ($59|0)==(0);
 $61 = $2;
 if ($60) {
  $$sink = 7;$$sink2 = $61;
 } else {
  $62 = ((($61)) + 4640|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $63 >> 16;
  $65 = ($64*26214)|0;
  $66 = $2;
  $67 = ((($66)) + 4640|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $68 & 65535;
  $70 = ($69*26214)|0;
  $71 = $70 >> 16;
  $72 = (($65) + ($71))|0;
  $73 = (7 - ($72))|0;
  $74 = (_silk_max_int_227($73,2)|0);
  $75 = $2;
  $$sink = $74;$$sink2 = $75;
 }
 $76 = ((($$sink2)) + 6128|0);
 HEAP32[$76>>2] = $$sink;
 $77 = $2;
 $78 = ((($77)) + 6124|0);
 HEAP32[$78>>2] = 1;
 $79 = $5;
 STACKTOP = sp;return ($79|0);
}
function _silk_max_int_227($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_float2short_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = (($7) - 1)|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = (_lrintf($14)|0);
  $16 = ($15|0)>(32767);
  if ($16) {
   $29 = 32767;
  } else {
   $17 = $4;
   $18 = $6;
   $19 = (($17) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = (_lrintf($20)|0);
   $22 = ($21|0)<(-32768);
   if ($22) {
    $29 = -32768;
   } else {
    $23 = $4;
    $24 = $6;
    $25 = (($23) + ($24<<2)|0);
    $26 = +HEAPF32[$25>>2];
    $27 = (_lrintf($26)|0);
    $29 = $27;
   }
  }
  $28 = $29&65535;
  $30 = $3;
  $31 = $6;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = $28;
  $33 = $6;
  $34 = (($33) + -1)|0;
  $6 = $34;
 }
 STACKTOP = sp;return;
}
function _silk_short2float_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = (($7) - 1)|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (+($14<<16>>16));
  $16 = $3;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  HEAPF32[$18>>2] = $15;
  $19 = $6;
  $20 = (($19) + -1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return;
}
function _silk_lin2log($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 $1 = $0;
 $4 = $1;
 _silk_CLZ_FRAC($4,$2,$3);
 $5 = HEAP32[$2>>2]|0;
 $6 = (31 - ($5))|0;
 $7 = $6 << 7;
 $8 = HEAP32[$3>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = (128 - ($10))|0;
 $12 = Math_imul($9, $11)|0;
 $13 = $12 >> 16;
 $14 = ($13*179)|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = (128 - ($16))|0;
 $18 = Math_imul($15, $17)|0;
 $19 = $18 & 65535;
 $20 = ($19*179)|0;
 $21 = $20 >> 16;
 $22 = (($14) + ($21))|0;
 $23 = (($8) + ($22))|0;
 $24 = (($7) + ($23))|0;
 STACKTOP = sp;return ($24|0);
}
function _silk_CLZ_FRAC($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_230($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_230($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_log2lin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)<(0);
 if ($6) {
  $1 = 0;
  $73 = $1;
  STACKTOP = sp;return ($73|0);
 }
 $7 = $2;
 $8 = ($7|0)>=(3967);
 if ($8) {
  $1 = 2147483647;
  $73 = $1;
  STACKTOP = sp;return ($73|0);
 }
 $9 = $2;
 $10 = $9 >> 7;
 $11 = 1 << $10;
 $3 = $11;
 $12 = $2;
 $13 = $12 & 127;
 $4 = $13;
 $14 = $2;
 $15 = ($14|0)<(2048);
 $16 = $3;
 $17 = $3;
 if ($15) {
  $18 = $4;
  $19 = $4;
  $20 = $19&65535;
  $21 = $20 << 16 >> 16;
  $22 = $4;
  $23 = (128 - ($22))|0;
  $24 = $23&65535;
  $25 = $24 << 16 >> 16;
  $26 = Math_imul($21, $25)|0;
  $27 = $26 >> 16;
  $28 = Math_imul($27, -174)|0;
  $29 = $4;
  $30 = $29&65535;
  $31 = $30 << 16 >> 16;
  $32 = $4;
  $33 = (128 - ($32))|0;
  $34 = $33&65535;
  $35 = $34 << 16 >> 16;
  $36 = Math_imul($31, $35)|0;
  $37 = $36 & 65535;
  $38 = Math_imul($37, -174)|0;
  $39 = $38 >> 16;
  $40 = (($28) + ($39))|0;
  $41 = (($18) + ($40))|0;
  $42 = Math_imul($17, $41)|0;
  $43 = $42 >> 7;
  $44 = (($16) + ($43))|0;
  $3 = $44;
 } else {
  $45 = $17 >> 7;
  $46 = $4;
  $47 = $4;
  $48 = $47&65535;
  $49 = $48 << 16 >> 16;
  $50 = $4;
  $51 = (128 - ($50))|0;
  $52 = $51&65535;
  $53 = $52 << 16 >> 16;
  $54 = Math_imul($49, $53)|0;
  $55 = $54 >> 16;
  $56 = Math_imul($55, -174)|0;
  $57 = $4;
  $58 = $57&65535;
  $59 = $58 << 16 >> 16;
  $60 = $4;
  $61 = (128 - ($60))|0;
  $62 = $61&65535;
  $63 = $62 << 16 >> 16;
  $64 = Math_imul($59, $63)|0;
  $65 = $64 & 65535;
  $66 = Math_imul($65, -174)|0;
  $67 = $66 >> 16;
  $68 = (($56) + ($67))|0;
  $69 = (($46) + ($68))|0;
  $70 = Math_imul($45, $69)|0;
  $71 = (($16) + ($70))|0;
  $3 = $71;
 }
 $72 = $3;
 $1 = $72;
 $73 = $1;
 STACKTOP = sp;return ($73|0);
}
function _silk_resampler_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond25 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 _memset(($10|0),0,300)|0;
 $11 = $8;
 $12 = ($11|0)!=(0);
 $13 = $6;
 $14 = ($13|0)!=(8000);
 $15 = $6;
 $16 = ($15|0)!=(12000);
 $or$cond = $14 & $16;
 $17 = $6;
 $18 = ($17|0)!=(16000);
 $or$cond3 = $or$cond & $18;
 do {
  if ($12) {
   $19 = $6;
   $20 = ($19|0)!=(24000);
   $or$cond5 = $or$cond3 & $20;
   $21 = $6;
   $22 = ($21|0)!=(48000);
   $or$cond7 = $or$cond5 & $22;
   if (!($or$cond7)) {
    $23 = $7;
    $24 = ($23|0)!=(8000);
    $25 = $7;
    $26 = ($25|0)!=(12000);
    $or$cond9 = $24 & $26;
    $27 = $7;
    $28 = ($27|0)!=(16000);
    $or$cond11 = $or$cond9 & $28;
    if (!($or$cond11)) {
     $29 = $6;
     $30 = $29 >> 12;
     $31 = $6;
     $32 = ($31|0)>(16000);
     $33 = $32&1;
     $34 = (($30) - ($33))|0;
     $35 = $6;
     $36 = ($35|0)>(24000);
     $37 = $36&1;
     $38 = $34 >> $37;
     $39 = (($38) - 1)|0;
     $40 = (28905 + (($39*3)|0)|0);
     $41 = $7;
     $42 = $41 >> 12;
     $43 = $7;
     $44 = ($43|0)>(16000);
     $45 = $44&1;
     $46 = (($42) - ($45))|0;
     $47 = $7;
     $48 = ($47|0)>(24000);
     $49 = $48&1;
     $50 = $46 >> $49;
     $51 = (($50) - 1)|0;
     $52 = (($40) + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53 << 24 >> 24;
     $55 = $5;
     $$sink = $54;$$sink13 = $55;
     break;
    }
   }
   $4 = -1;
   $226 = $4;
   STACKTOP = sp;return ($226|0);
  } else {
   if (!($or$cond3)) {
    $56 = $7;
    $57 = ($56|0)!=(8000);
    $58 = $7;
    $59 = ($58|0)!=(12000);
    $or$cond19 = $57 & $59;
    $60 = $7;
    $61 = ($60|0)!=(16000);
    $or$cond21 = $or$cond19 & $61;
    $62 = $7;
    $63 = ($62|0)!=(24000);
    $or$cond23 = $or$cond21 & $63;
    $64 = $7;
    $65 = ($64|0)!=(48000);
    $or$cond25 = $or$cond23 & $65;
    if (!($or$cond25)) {
     $66 = $6;
     $67 = $66 >> 12;
     $68 = $6;
     $69 = ($68|0)>(16000);
     $70 = $69&1;
     $71 = (($67) - ($70))|0;
     $72 = $6;
     $73 = ($72|0)>(24000);
     $74 = $73&1;
     $75 = $71 >> $74;
     $76 = (($75) - 1)|0;
     $77 = (28920 + (($76*5)|0)|0);
     $78 = $7;
     $79 = $78 >> 12;
     $80 = $7;
     $81 = ($80|0)>(16000);
     $82 = $81&1;
     $83 = (($79) - ($82))|0;
     $84 = $7;
     $85 = ($84|0)>(24000);
     $86 = $85&1;
     $87 = $83 >> $86;
     $88 = (($87) - 1)|0;
     $89 = (($77) + ($88)|0);
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = $5;
     $$sink = $91;$$sink13 = $92;
     break;
    }
   }
   $4 = -1;
   $226 = $4;
   STACKTOP = sp;return ($226|0);
  }
 } while(0);
 $93 = ((($$sink13)) + 292|0);
 HEAP32[$93>>2] = $$sink;
 $94 = $6;
 $95 = (($94|0) / 1000)&-1;
 $96 = $5;
 $97 = ((($96)) + 284|0);
 HEAP32[$97>>2] = $95;
 $98 = $7;
 $99 = (($98|0) / 1000)&-1;
 $100 = $5;
 $101 = ((($100)) + 288|0);
 HEAP32[$101>>2] = $99;
 $102 = $5;
 $103 = ((($102)) + 284|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104*10)|0;
 $106 = $5;
 $107 = ((($106)) + 268|0);
 HEAP32[$107>>2] = $105;
 $9 = 0;
 $108 = $7;
 $109 = $6;
 $110 = ($108|0)>($109|0);
 $111 = $7;
 $112 = $6;
 do {
  if ($110) {
   $113 = $112<<1;
   $114 = ($111|0)==($113|0);
   $115 = $5;
   $116 = ((($115)) + 264|0);
   if ($114) {
    HEAP32[$116>>2] = 1;
    break;
   } else {
    HEAP32[$116>>2] = 2;
    $9 = 1;
    break;
   }
  } else {
   $117 = ($111|0)<($112|0);
   $118 = $5;
   $119 = ((($118)) + 264|0);
   if (!($117)) {
    HEAP32[$119>>2] = 0;
    break;
   }
   HEAP32[$119>>2] = 3;
   $120 = $7;
   $121 = $120<<2;
   $122 = $6;
   $123 = ($122*3)|0;
   $124 = ($121|0)==($123|0);
   if ($124) {
    $125 = $5;
    $126 = ((($125)) + 280|0);
    HEAP32[$126>>2] = 3;
    $127 = $5;
    $128 = ((($127)) + 276|0);
    HEAP32[$128>>2] = 18;
    $129 = $5;
    $130 = ((($129)) + 296|0);
    HEAP32[$130>>2] = 25024;
    break;
   }
   $131 = $7;
   $132 = ($131*3)|0;
   $133 = $6;
   $134 = $133<<1;
   $135 = ($132|0)==($134|0);
   if ($135) {
    $136 = $5;
    $137 = ((($136)) + 280|0);
    HEAP32[$137>>2] = 2;
    $138 = $5;
    $139 = ((($138)) + 276|0);
    HEAP32[$139>>2] = 18;
    $140 = $5;
    $141 = ((($140)) + 296|0);
    HEAP32[$141>>2] = 25082;
    break;
   }
   $142 = $7;
   $143 = $142<<1;
   $144 = $6;
   $145 = ($143|0)==($144|0);
   if ($145) {
    $146 = $5;
    $147 = ((($146)) + 280|0);
    HEAP32[$147>>2] = 1;
    $148 = $5;
    $149 = ((($148)) + 276|0);
    HEAP32[$149>>2] = 24;
    $150 = $5;
    $151 = ((($150)) + 296|0);
    HEAP32[$151>>2] = 25122;
    break;
   }
   $152 = $7;
   $153 = ($152*3)|0;
   $154 = $6;
   $155 = ($153|0)==($154|0);
   if ($155) {
    $156 = $5;
    $157 = ((($156)) + 280|0);
    HEAP32[$157>>2] = 1;
    $158 = $5;
    $159 = ((($158)) + 276|0);
    HEAP32[$159>>2] = 36;
    $160 = $5;
    $161 = ((($160)) + 296|0);
    HEAP32[$161>>2] = 25150;
    break;
   }
   $162 = $7;
   $163 = $162<<2;
   $164 = $6;
   $165 = ($163|0)==($164|0);
   if ($165) {
    $166 = $5;
    $167 = ((($166)) + 280|0);
    HEAP32[$167>>2] = 1;
    $168 = $5;
    $169 = ((($168)) + 276|0);
    HEAP32[$169>>2] = 36;
    $170 = $5;
    $171 = ((($170)) + 296|0);
    HEAP32[$171>>2] = 25190;
    break;
   }
   $172 = $7;
   $173 = ($172*6)|0;
   $174 = $6;
   $175 = ($173|0)==($174|0);
   if ($175) {
    $176 = $5;
    $177 = ((($176)) + 280|0);
    HEAP32[$177>>2] = 1;
    $178 = $5;
    $179 = ((($178)) + 276|0);
    HEAP32[$179>>2] = 36;
    $180 = $5;
    $181 = ((($180)) + 296|0);
    HEAP32[$181>>2] = 25230;
    break;
   }
   $4 = -1;
   $226 = $4;
   STACKTOP = sp;return ($226|0);
  }
 } while(0);
 $182 = $6;
 $183 = $9;
 $184 = (14 + ($183))|0;
 $185 = $182 << $184;
 $186 = $7;
 $187 = (($185|0) / ($186|0))&-1;
 $188 = $187 << 2;
 $189 = $5;
 $190 = ((($189)) + 272|0);
 HEAP32[$190>>2] = $188;
 while(1) {
  $191 = $5;
  $192 = ((($191)) + 272|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $193 >> 16;
  $195 = $7;
  $196 = $195&65535;
  $197 = $196 << 16 >> 16;
  $198 = Math_imul($194, $197)|0;
  $199 = $5;
  $200 = ((($199)) + 272|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $201 & 65535;
  $203 = $7;
  $204 = $203&65535;
  $205 = $204 << 16 >> 16;
  $206 = Math_imul($202, $205)|0;
  $207 = $206 >> 16;
  $208 = (($198) + ($207))|0;
  $209 = $5;
  $210 = ((($209)) + 272|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $7;
  $213 = $212 >> 15;
  $214 = (($213) + 1)|0;
  $215 = $214 >> 1;
  $216 = Math_imul($211, $215)|0;
  $217 = (($208) + ($216))|0;
  $218 = $6;
  $219 = $9;
  $220 = $218 << $219;
  $221 = ($217|0)<($220|0);
  if (!($221)) {
   break;
  }
  $222 = $5;
  $223 = ((($222)) + 272|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($224) + 1)|0;
  HEAP32[$223>>2] = $225;
 }
 $4 = 0;
 $226 = $4;
 STACKTOP = sp;return ($226|0);
}
function _silk_resampler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = ((($9)) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = ((($12)) + 292|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($11) - ($14))|0;
 $8 = $15;
 $16 = $4;
 $17 = ((($16)) + 168|0);
 $18 = $4;
 $19 = ((($18)) + 292|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20<<1)|0);
 $22 = $6;
 $23 = $8;
 $24 = $23<<1;
 _memcpy(($21|0),($22|0),($24|0))|0;
 $25 = $4;
 $26 = ((($25)) + 264|0);
 $27 = HEAP32[$26>>2]|0;
 switch ($27|0) {
 case 1:  {
  $28 = $4;
  $29 = $5;
  $30 = $4;
  $31 = ((($30)) + 168|0);
  $32 = $4;
  $33 = ((($32)) + 284|0);
  $34 = HEAP32[$33>>2]|0;
  _silk_resampler_private_up2_HQ_wrapper($28,$29,$31,$34);
  $35 = $4;
  $36 = $5;
  $37 = $4;
  $38 = ((($37)) + 288|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($36) + ($39<<1)|0);
  $41 = $6;
  $42 = $8;
  $43 = (($41) + ($42<<1)|0);
  $44 = $7;
  $45 = $4;
  $46 = ((($45)) + 284|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44) - ($47))|0;
  _silk_resampler_private_up2_HQ_wrapper($35,$40,$43,$48);
  break;
 }
 case 2:  {
  $49 = $4;
  $50 = $5;
  $51 = $4;
  $52 = ((($51)) + 168|0);
  $53 = $4;
  $54 = ((($53)) + 284|0);
  $55 = HEAP32[$54>>2]|0;
  _silk_resampler_private_IIR_FIR($49,$50,$52,$55);
  $56 = $4;
  $57 = $5;
  $58 = $4;
  $59 = ((($58)) + 288|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($57) + ($60<<1)|0);
  $62 = $6;
  $63 = $8;
  $64 = (($62) + ($63<<1)|0);
  $65 = $7;
  $66 = $4;
  $67 = ((($66)) + 284|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($65) - ($68))|0;
  _silk_resampler_private_IIR_FIR($56,$61,$64,$69);
  break;
 }
 case 3:  {
  $70 = $4;
  $71 = $5;
  $72 = $4;
  $73 = ((($72)) + 168|0);
  $74 = $4;
  $75 = ((($74)) + 284|0);
  $76 = HEAP32[$75>>2]|0;
  _silk_resampler_private_down_FIR($70,$71,$73,$76);
  $77 = $4;
  $78 = $5;
  $79 = $4;
  $80 = ((($79)) + 288|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($78) + ($81<<1)|0);
  $83 = $6;
  $84 = $8;
  $85 = (($83) + ($84<<1)|0);
  $86 = $7;
  $87 = $4;
  $88 = ((($87)) + 284|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($86) - ($89))|0;
  _silk_resampler_private_down_FIR($77,$82,$85,$90);
  break;
 }
 default: {
  $91 = $5;
  $92 = $4;
  $93 = ((($92)) + 168|0);
  $94 = $4;
  $95 = ((($94)) + 284|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96<<1;
  _memcpy(($91|0),($93|0),($97|0))|0;
  $98 = $5;
  $99 = $4;
  $100 = ((($99)) + 288|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) + ($101<<1)|0);
  $103 = $6;
  $104 = $8;
  $105 = (($103) + ($104<<1)|0);
  $106 = $7;
  $107 = $4;
  $108 = ((($107)) + 284|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = (($106) - ($109))|0;
  $111 = $110<<1;
  _memcpy(($102|0),($105|0),($111|0))|0;
 }
 }
 $112 = $4;
 $113 = ((($112)) + 168|0);
 $114 = $6;
 $115 = $7;
 $116 = $4;
 $117 = ((($116)) + 292|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($115) - ($118))|0;
 $120 = (($114) + ($119<<1)|0);
 $121 = $4;
 $122 = ((($121)) + 292|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $123<<1;
 _memcpy(($113|0),($120|0),($124|0))|0;
 STACKTOP = sp;return 0;
}
function _silk_resampler_private_down_FIR($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $4;
 $8 = $14;
 $15 = $8;
 $16 = ((($15)) + 268|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $8;
 $19 = ((($18)) + 276|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20))|0;
 $22 = (_llvm_stacksave()|0);
 $13 = $22;
 $$alloca_mul = $21<<2;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $24 = $8;
 $25 = ((($24)) + 24|0);
 $26 = $8;
 $27 = ((($26)) + 276|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28<<2;
 _memcpy(($23|0),($25|0),($29|0))|0;
 $30 = $8;
 $31 = ((($30)) + 296|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 4|0);
 $12 = $33;
 $34 = $8;
 $35 = ((($34)) + 272|0);
 $36 = HEAP32[$35>>2]|0;
 $11 = $36;
 while(1) {
  $37 = $7;
  $38 = $8;
  $39 = ((($38)) + 268|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if ($41) {
   $42 = $7;
   $46 = $42;
  } else {
   $43 = $8;
   $44 = ((($43)) + 268|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45;
  }
  $9 = $46;
  $47 = $8;
  $48 = $8;
  $49 = ((($48)) + 276|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($23) + ($50<<2)|0);
  $52 = $6;
  $53 = $8;
  $54 = ((($53)) + 296|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $9;
  _silk_resampler_private_AR2($47,$51,$52,$55,$56);
  $57 = $9;
  $58 = $57 << 16;
  $10 = $58;
  $59 = $5;
  $60 = $12;
  $61 = $8;
  $62 = ((($61)) + 276|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $8;
  $65 = ((($64)) + 280|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $10;
  $68 = $11;
  $69 = (_silk_resampler_private_down_FIR_INTERPOL($59,$23,$60,$63,$66,$67,$68)|0);
  $5 = $69;
  $70 = $9;
  $71 = $6;
  $72 = (($71) + ($70<<1)|0);
  $6 = $72;
  $73 = $9;
  $74 = $7;
  $75 = (($74) - ($73))|0;
  $7 = $75;
  $76 = $7;
  $77 = ($76|0)>(1);
  if (!($77)) {
   break;
  }
  $78 = $9;
  $79 = (($23) + ($78<<2)|0);
  $80 = $8;
  $81 = ((($80)) + 276|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82<<2;
  _memcpy(($23|0),($79|0),($83|0))|0;
 }
 $84 = $8;
 $85 = ((($84)) + 24|0);
 $86 = $9;
 $87 = (($23) + ($86<<2)|0);
 $88 = $8;
 $89 = ((($88)) + 276|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90<<2;
 _memcpy(($85|0),($87|0),($91|0))|0;
 $92 = $13;
 _llvm_stackrestore(($92|0));
 STACKTOP = sp;return;
}
function _silk_resampler_private_down_FIR_INTERPOL($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $19 = $10;
 switch ($19|0) {
 case 18:  {
  $14 = 0;
  while(1) {
   $20 = $14;
   $21 = $12;
   $22 = ($20|0)<($21|0);
   if (!($22)) {
    break;
   }
   $23 = $8;
   $24 = $14;
   $25 = $24 >> 16;
   $26 = (($23) + ($25<<2)|0);
   $16 = $26;
   $27 = $14;
   $28 = $27 & 65535;
   $29 = $28 >> 16;
   $30 = $11;
   $31 = $30&65535;
   $32 = $31 << 16 >> 16;
   $33 = Math_imul($29, $32)|0;
   $34 = $14;
   $35 = $34 & 65535;
   $36 = $35 & 65535;
   $37 = $11;
   $38 = $37&65535;
   $39 = $38 << 16 >> 16;
   $40 = Math_imul($36, $39)|0;
   $41 = $40 >> 16;
   $42 = (($33) + ($41))|0;
   $17 = $42;
   $43 = $9;
   $44 = $17;
   $45 = ($44*9)|0;
   $46 = (($43) + ($45<<1)|0);
   $18 = $46;
   $47 = $16;
   $48 = HEAP32[$47>>2]|0;
   $49 = $48 >> 16;
   $50 = $18;
   $51 = HEAP16[$50>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = Math_imul($49, $52)|0;
   $54 = $16;
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & 65535;
   $57 = $18;
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = Math_imul($56, $59)|0;
   $61 = $60 >> 16;
   $62 = (($53) + ($61))|0;
   $15 = $62;
   $63 = $15;
   $64 = $16;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 >> 16;
   $68 = $18;
   $69 = ((($68)) + 2|0);
   $70 = HEAP16[$69>>1]|0;
   $71 = $70 << 16 >> 16;
   $72 = Math_imul($67, $71)|0;
   $73 = $16;
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $75 & 65535;
   $77 = $18;
   $78 = ((($77)) + 2|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = Math_imul($76, $80)|0;
   $82 = $81 >> 16;
   $83 = (($72) + ($82))|0;
   $84 = (($63) + ($83))|0;
   $15 = $84;
   $85 = $15;
   $86 = $16;
   $87 = ((($86)) + 8|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 >> 16;
   $90 = $18;
   $91 = ((($90)) + 4|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = $92 << 16 >> 16;
   $94 = Math_imul($89, $93)|0;
   $95 = $16;
   $96 = ((($95)) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 & 65535;
   $99 = $18;
   $100 = ((($99)) + 4|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 << 16 >> 16;
   $103 = Math_imul($98, $102)|0;
   $104 = $103 >> 16;
   $105 = (($94) + ($104))|0;
   $106 = (($85) + ($105))|0;
   $15 = $106;
   $107 = $15;
   $108 = $16;
   $109 = ((($108)) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $110 >> 16;
   $112 = $18;
   $113 = ((($112)) + 6|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = $114 << 16 >> 16;
   $116 = Math_imul($111, $115)|0;
   $117 = $16;
   $118 = ((($117)) + 12|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & 65535;
   $121 = $18;
   $122 = ((($121)) + 6|0);
   $123 = HEAP16[$122>>1]|0;
   $124 = $123 << 16 >> 16;
   $125 = Math_imul($120, $124)|0;
   $126 = $125 >> 16;
   $127 = (($116) + ($126))|0;
   $128 = (($107) + ($127))|0;
   $15 = $128;
   $129 = $15;
   $130 = $16;
   $131 = ((($130)) + 16|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $132 >> 16;
   $134 = $18;
   $135 = ((($134)) + 8|0);
   $136 = HEAP16[$135>>1]|0;
   $137 = $136 << 16 >> 16;
   $138 = Math_imul($133, $137)|0;
   $139 = $16;
   $140 = ((($139)) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 & 65535;
   $143 = $18;
   $144 = ((($143)) + 8|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $147 = Math_imul($142, $146)|0;
   $148 = $147 >> 16;
   $149 = (($138) + ($148))|0;
   $150 = (($129) + ($149))|0;
   $15 = $150;
   $151 = $15;
   $152 = $16;
   $153 = ((($152)) + 20|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = $154 >> 16;
   $156 = $18;
   $157 = ((($156)) + 10|0);
   $158 = HEAP16[$157>>1]|0;
   $159 = $158 << 16 >> 16;
   $160 = Math_imul($155, $159)|0;
   $161 = $16;
   $162 = ((($161)) + 20|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 & 65535;
   $165 = $18;
   $166 = ((($165)) + 10|0);
   $167 = HEAP16[$166>>1]|0;
   $168 = $167 << 16 >> 16;
   $169 = Math_imul($164, $168)|0;
   $170 = $169 >> 16;
   $171 = (($160) + ($170))|0;
   $172 = (($151) + ($171))|0;
   $15 = $172;
   $173 = $15;
   $174 = $16;
   $175 = ((($174)) + 24|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 >> 16;
   $178 = $18;
   $179 = ((($178)) + 12|0);
   $180 = HEAP16[$179>>1]|0;
   $181 = $180 << 16 >> 16;
   $182 = Math_imul($177, $181)|0;
   $183 = $16;
   $184 = ((($183)) + 24|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = $185 & 65535;
   $187 = $18;
   $188 = ((($187)) + 12|0);
   $189 = HEAP16[$188>>1]|0;
   $190 = $189 << 16 >> 16;
   $191 = Math_imul($186, $190)|0;
   $192 = $191 >> 16;
   $193 = (($182) + ($192))|0;
   $194 = (($173) + ($193))|0;
   $15 = $194;
   $195 = $15;
   $196 = $16;
   $197 = ((($196)) + 28|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = $198 >> 16;
   $200 = $18;
   $201 = ((($200)) + 14|0);
   $202 = HEAP16[$201>>1]|0;
   $203 = $202 << 16 >> 16;
   $204 = Math_imul($199, $203)|0;
   $205 = $16;
   $206 = ((($205)) + 28|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $207 & 65535;
   $209 = $18;
   $210 = ((($209)) + 14|0);
   $211 = HEAP16[$210>>1]|0;
   $212 = $211 << 16 >> 16;
   $213 = Math_imul($208, $212)|0;
   $214 = $213 >> 16;
   $215 = (($204) + ($214))|0;
   $216 = (($195) + ($215))|0;
   $15 = $216;
   $217 = $15;
   $218 = $16;
   $219 = ((($218)) + 32|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = $220 >> 16;
   $222 = $18;
   $223 = ((($222)) + 16|0);
   $224 = HEAP16[$223>>1]|0;
   $225 = $224 << 16 >> 16;
   $226 = Math_imul($221, $225)|0;
   $227 = $16;
   $228 = ((($227)) + 32|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $229 & 65535;
   $231 = $18;
   $232 = ((($231)) + 16|0);
   $233 = HEAP16[$232>>1]|0;
   $234 = $233 << 16 >> 16;
   $235 = Math_imul($230, $234)|0;
   $236 = $235 >> 16;
   $237 = (($226) + ($236))|0;
   $238 = (($217) + ($237))|0;
   $15 = $238;
   $239 = $9;
   $240 = $11;
   $241 = (($240) - 1)|0;
   $242 = $17;
   $243 = (($241) - ($242))|0;
   $244 = ($243*9)|0;
   $245 = (($239) + ($244<<1)|0);
   $18 = $245;
   $246 = $15;
   $247 = $16;
   $248 = ((($247)) + 68|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = $249 >> 16;
   $251 = $18;
   $252 = HEAP16[$251>>1]|0;
   $253 = $252 << 16 >> 16;
   $254 = Math_imul($250, $253)|0;
   $255 = $16;
   $256 = ((($255)) + 68|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $257 & 65535;
   $259 = $18;
   $260 = HEAP16[$259>>1]|0;
   $261 = $260 << 16 >> 16;
   $262 = Math_imul($258, $261)|0;
   $263 = $262 >> 16;
   $264 = (($254) + ($263))|0;
   $265 = (($246) + ($264))|0;
   $15 = $265;
   $266 = $15;
   $267 = $16;
   $268 = ((($267)) + 64|0);
   $269 = HEAP32[$268>>2]|0;
   $270 = $269 >> 16;
   $271 = $18;
   $272 = ((($271)) + 2|0);
   $273 = HEAP16[$272>>1]|0;
   $274 = $273 << 16 >> 16;
   $275 = Math_imul($270, $274)|0;
   $276 = $16;
   $277 = ((($276)) + 64|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = $278 & 65535;
   $280 = $18;
   $281 = ((($280)) + 2|0);
   $282 = HEAP16[$281>>1]|0;
   $283 = $282 << 16 >> 16;
   $284 = Math_imul($279, $283)|0;
   $285 = $284 >> 16;
   $286 = (($275) + ($285))|0;
   $287 = (($266) + ($286))|0;
   $15 = $287;
   $288 = $15;
   $289 = $16;
   $290 = ((($289)) + 60|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = $291 >> 16;
   $293 = $18;
   $294 = ((($293)) + 4|0);
   $295 = HEAP16[$294>>1]|0;
   $296 = $295 << 16 >> 16;
   $297 = Math_imul($292, $296)|0;
   $298 = $16;
   $299 = ((($298)) + 60|0);
   $300 = HEAP32[$299>>2]|0;
   $301 = $300 & 65535;
   $302 = $18;
   $303 = ((($302)) + 4|0);
   $304 = HEAP16[$303>>1]|0;
   $305 = $304 << 16 >> 16;
   $306 = Math_imul($301, $305)|0;
   $307 = $306 >> 16;
   $308 = (($297) + ($307))|0;
   $309 = (($288) + ($308))|0;
   $15 = $309;
   $310 = $15;
   $311 = $16;
   $312 = ((($311)) + 56|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = $313 >> 16;
   $315 = $18;
   $316 = ((($315)) + 6|0);
   $317 = HEAP16[$316>>1]|0;
   $318 = $317 << 16 >> 16;
   $319 = Math_imul($314, $318)|0;
   $320 = $16;
   $321 = ((($320)) + 56|0);
   $322 = HEAP32[$321>>2]|0;
   $323 = $322 & 65535;
   $324 = $18;
   $325 = ((($324)) + 6|0);
   $326 = HEAP16[$325>>1]|0;
   $327 = $326 << 16 >> 16;
   $328 = Math_imul($323, $327)|0;
   $329 = $328 >> 16;
   $330 = (($319) + ($329))|0;
   $331 = (($310) + ($330))|0;
   $15 = $331;
   $332 = $15;
   $333 = $16;
   $334 = ((($333)) + 52|0);
   $335 = HEAP32[$334>>2]|0;
   $336 = $335 >> 16;
   $337 = $18;
   $338 = ((($337)) + 8|0);
   $339 = HEAP16[$338>>1]|0;
   $340 = $339 << 16 >> 16;
   $341 = Math_imul($336, $340)|0;
   $342 = $16;
   $343 = ((($342)) + 52|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = $344 & 65535;
   $346 = $18;
   $347 = ((($346)) + 8|0);
   $348 = HEAP16[$347>>1]|0;
   $349 = $348 << 16 >> 16;
   $350 = Math_imul($345, $349)|0;
   $351 = $350 >> 16;
   $352 = (($341) + ($351))|0;
   $353 = (($332) + ($352))|0;
   $15 = $353;
   $354 = $15;
   $355 = $16;
   $356 = ((($355)) + 48|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = $357 >> 16;
   $359 = $18;
   $360 = ((($359)) + 10|0);
   $361 = HEAP16[$360>>1]|0;
   $362 = $361 << 16 >> 16;
   $363 = Math_imul($358, $362)|0;
   $364 = $16;
   $365 = ((($364)) + 48|0);
   $366 = HEAP32[$365>>2]|0;
   $367 = $366 & 65535;
   $368 = $18;
   $369 = ((($368)) + 10|0);
   $370 = HEAP16[$369>>1]|0;
   $371 = $370 << 16 >> 16;
   $372 = Math_imul($367, $371)|0;
   $373 = $372 >> 16;
   $374 = (($363) + ($373))|0;
   $375 = (($354) + ($374))|0;
   $15 = $375;
   $376 = $15;
   $377 = $16;
   $378 = ((($377)) + 44|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = $379 >> 16;
   $381 = $18;
   $382 = ((($381)) + 12|0);
   $383 = HEAP16[$382>>1]|0;
   $384 = $383 << 16 >> 16;
   $385 = Math_imul($380, $384)|0;
   $386 = $16;
   $387 = ((($386)) + 44|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = $388 & 65535;
   $390 = $18;
   $391 = ((($390)) + 12|0);
   $392 = HEAP16[$391>>1]|0;
   $393 = $392 << 16 >> 16;
   $394 = Math_imul($389, $393)|0;
   $395 = $394 >> 16;
   $396 = (($385) + ($395))|0;
   $397 = (($376) + ($396))|0;
   $15 = $397;
   $398 = $15;
   $399 = $16;
   $400 = ((($399)) + 40|0);
   $401 = HEAP32[$400>>2]|0;
   $402 = $401 >> 16;
   $403 = $18;
   $404 = ((($403)) + 14|0);
   $405 = HEAP16[$404>>1]|0;
   $406 = $405 << 16 >> 16;
   $407 = Math_imul($402, $406)|0;
   $408 = $16;
   $409 = ((($408)) + 40|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = $410 & 65535;
   $412 = $18;
   $413 = ((($412)) + 14|0);
   $414 = HEAP16[$413>>1]|0;
   $415 = $414 << 16 >> 16;
   $416 = Math_imul($411, $415)|0;
   $417 = $416 >> 16;
   $418 = (($407) + ($417))|0;
   $419 = (($398) + ($418))|0;
   $15 = $419;
   $420 = $15;
   $421 = $16;
   $422 = ((($421)) + 36|0);
   $423 = HEAP32[$422>>2]|0;
   $424 = $423 >> 16;
   $425 = $18;
   $426 = ((($425)) + 16|0);
   $427 = HEAP16[$426>>1]|0;
   $428 = $427 << 16 >> 16;
   $429 = Math_imul($424, $428)|0;
   $430 = $16;
   $431 = ((($430)) + 36|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = $432 & 65535;
   $434 = $18;
   $435 = ((($434)) + 16|0);
   $436 = HEAP16[$435>>1]|0;
   $437 = $436 << 16 >> 16;
   $438 = Math_imul($433, $437)|0;
   $439 = $438 >> 16;
   $440 = (($429) + ($439))|0;
   $441 = (($420) + ($440))|0;
   $15 = $441;
   $442 = $15;
   $443 = $442 >> 5;
   $444 = (($443) + 1)|0;
   $445 = $444 >> 1;
   $446 = ($445|0)>(32767);
   if ($446) {
    $457 = 32767;
   } else {
    $447 = $15;
    $448 = $447 >> 5;
    $449 = (($448) + 1)|0;
    $450 = $449 >> 1;
    $451 = ($450|0)<(-32768);
    if ($451) {
     $457 = -32768;
    } else {
     $452 = $15;
     $453 = $452 >> 5;
     $454 = (($453) + 1)|0;
     $455 = $454 >> 1;
     $457 = $455;
    }
   }
   $456 = $457&65535;
   $458 = $7;
   $459 = ((($458)) + 2|0);
   $7 = $459;
   HEAP16[$458>>1] = $456;
   $460 = $13;
   $461 = $14;
   $462 = (($461) + ($460))|0;
   $14 = $462;
  }
  $1407 = $7;
  STACKTOP = sp;return ($1407|0);
  break;
 }
 case 24:  {
  $14 = 0;
  while(1) {
   $463 = $14;
   $464 = $12;
   $465 = ($463|0)<($464|0);
   if (!($465)) {
    break;
   }
   $466 = $8;
   $467 = $14;
   $468 = $467 >> 16;
   $469 = (($466) + ($468<<2)|0);
   $16 = $469;
   $470 = $16;
   $471 = HEAP32[$470>>2]|0;
   $472 = $16;
   $473 = ((($472)) + 92|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = (($471) + ($474))|0;
   $476 = $475 >> 16;
   $477 = $9;
   $478 = HEAP16[$477>>1]|0;
   $479 = $478 << 16 >> 16;
   $480 = Math_imul($476, $479)|0;
   $481 = $16;
   $482 = HEAP32[$481>>2]|0;
   $483 = $16;
   $484 = ((($483)) + 92|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = (($482) + ($485))|0;
   $487 = $486 & 65535;
   $488 = $9;
   $489 = HEAP16[$488>>1]|0;
   $490 = $489 << 16 >> 16;
   $491 = Math_imul($487, $490)|0;
   $492 = $491 >> 16;
   $493 = (($480) + ($492))|0;
   $15 = $493;
   $494 = $15;
   $495 = $16;
   $496 = ((($495)) + 4|0);
   $497 = HEAP32[$496>>2]|0;
   $498 = $16;
   $499 = ((($498)) + 88|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = (($497) + ($500))|0;
   $502 = $501 >> 16;
   $503 = $9;
   $504 = ((($503)) + 2|0);
   $505 = HEAP16[$504>>1]|0;
   $506 = $505 << 16 >> 16;
   $507 = Math_imul($502, $506)|0;
   $508 = $16;
   $509 = ((($508)) + 4|0);
   $510 = HEAP32[$509>>2]|0;
   $511 = $16;
   $512 = ((($511)) + 88|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = (($510) + ($513))|0;
   $515 = $514 & 65535;
   $516 = $9;
   $517 = ((($516)) + 2|0);
   $518 = HEAP16[$517>>1]|0;
   $519 = $518 << 16 >> 16;
   $520 = Math_imul($515, $519)|0;
   $521 = $520 >> 16;
   $522 = (($507) + ($521))|0;
   $523 = (($494) + ($522))|0;
   $15 = $523;
   $524 = $15;
   $525 = $16;
   $526 = ((($525)) + 8|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $16;
   $529 = ((($528)) + 84|0);
   $530 = HEAP32[$529>>2]|0;
   $531 = (($527) + ($530))|0;
   $532 = $531 >> 16;
   $533 = $9;
   $534 = ((($533)) + 4|0);
   $535 = HEAP16[$534>>1]|0;
   $536 = $535 << 16 >> 16;
   $537 = Math_imul($532, $536)|0;
   $538 = $16;
   $539 = ((($538)) + 8|0);
   $540 = HEAP32[$539>>2]|0;
   $541 = $16;
   $542 = ((($541)) + 84|0);
   $543 = HEAP32[$542>>2]|0;
   $544 = (($540) + ($543))|0;
   $545 = $544 & 65535;
   $546 = $9;
   $547 = ((($546)) + 4|0);
   $548 = HEAP16[$547>>1]|0;
   $549 = $548 << 16 >> 16;
   $550 = Math_imul($545, $549)|0;
   $551 = $550 >> 16;
   $552 = (($537) + ($551))|0;
   $553 = (($524) + ($552))|0;
   $15 = $553;
   $554 = $15;
   $555 = $16;
   $556 = ((($555)) + 12|0);
   $557 = HEAP32[$556>>2]|0;
   $558 = $16;
   $559 = ((($558)) + 80|0);
   $560 = HEAP32[$559>>2]|0;
   $561 = (($557) + ($560))|0;
   $562 = $561 >> 16;
   $563 = $9;
   $564 = ((($563)) + 6|0);
   $565 = HEAP16[$564>>1]|0;
   $566 = $565 << 16 >> 16;
   $567 = Math_imul($562, $566)|0;
   $568 = $16;
   $569 = ((($568)) + 12|0);
   $570 = HEAP32[$569>>2]|0;
   $571 = $16;
   $572 = ((($571)) + 80|0);
   $573 = HEAP32[$572>>2]|0;
   $574 = (($570) + ($573))|0;
   $575 = $574 & 65535;
   $576 = $9;
   $577 = ((($576)) + 6|0);
   $578 = HEAP16[$577>>1]|0;
   $579 = $578 << 16 >> 16;
   $580 = Math_imul($575, $579)|0;
   $581 = $580 >> 16;
   $582 = (($567) + ($581))|0;
   $583 = (($554) + ($582))|0;
   $15 = $583;
   $584 = $15;
   $585 = $16;
   $586 = ((($585)) + 16|0);
   $587 = HEAP32[$586>>2]|0;
   $588 = $16;
   $589 = ((($588)) + 76|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = (($587) + ($590))|0;
   $592 = $591 >> 16;
   $593 = $9;
   $594 = ((($593)) + 8|0);
   $595 = HEAP16[$594>>1]|0;
   $596 = $595 << 16 >> 16;
   $597 = Math_imul($592, $596)|0;
   $598 = $16;
   $599 = ((($598)) + 16|0);
   $600 = HEAP32[$599>>2]|0;
   $601 = $16;
   $602 = ((($601)) + 76|0);
   $603 = HEAP32[$602>>2]|0;
   $604 = (($600) + ($603))|0;
   $605 = $604 & 65535;
   $606 = $9;
   $607 = ((($606)) + 8|0);
   $608 = HEAP16[$607>>1]|0;
   $609 = $608 << 16 >> 16;
   $610 = Math_imul($605, $609)|0;
   $611 = $610 >> 16;
   $612 = (($597) + ($611))|0;
   $613 = (($584) + ($612))|0;
   $15 = $613;
   $614 = $15;
   $615 = $16;
   $616 = ((($615)) + 20|0);
   $617 = HEAP32[$616>>2]|0;
   $618 = $16;
   $619 = ((($618)) + 72|0);
   $620 = HEAP32[$619>>2]|0;
   $621 = (($617) + ($620))|0;
   $622 = $621 >> 16;
   $623 = $9;
   $624 = ((($623)) + 10|0);
   $625 = HEAP16[$624>>1]|0;
   $626 = $625 << 16 >> 16;
   $627 = Math_imul($622, $626)|0;
   $628 = $16;
   $629 = ((($628)) + 20|0);
   $630 = HEAP32[$629>>2]|0;
   $631 = $16;
   $632 = ((($631)) + 72|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = (($630) + ($633))|0;
   $635 = $634 & 65535;
   $636 = $9;
   $637 = ((($636)) + 10|0);
   $638 = HEAP16[$637>>1]|0;
   $639 = $638 << 16 >> 16;
   $640 = Math_imul($635, $639)|0;
   $641 = $640 >> 16;
   $642 = (($627) + ($641))|0;
   $643 = (($614) + ($642))|0;
   $15 = $643;
   $644 = $15;
   $645 = $16;
   $646 = ((($645)) + 24|0);
   $647 = HEAP32[$646>>2]|0;
   $648 = $16;
   $649 = ((($648)) + 68|0);
   $650 = HEAP32[$649>>2]|0;
   $651 = (($647) + ($650))|0;
   $652 = $651 >> 16;
   $653 = $9;
   $654 = ((($653)) + 12|0);
   $655 = HEAP16[$654>>1]|0;
   $656 = $655 << 16 >> 16;
   $657 = Math_imul($652, $656)|0;
   $658 = $16;
   $659 = ((($658)) + 24|0);
   $660 = HEAP32[$659>>2]|0;
   $661 = $16;
   $662 = ((($661)) + 68|0);
   $663 = HEAP32[$662>>2]|0;
   $664 = (($660) + ($663))|0;
   $665 = $664 & 65535;
   $666 = $9;
   $667 = ((($666)) + 12|0);
   $668 = HEAP16[$667>>1]|0;
   $669 = $668 << 16 >> 16;
   $670 = Math_imul($665, $669)|0;
   $671 = $670 >> 16;
   $672 = (($657) + ($671))|0;
   $673 = (($644) + ($672))|0;
   $15 = $673;
   $674 = $15;
   $675 = $16;
   $676 = ((($675)) + 28|0);
   $677 = HEAP32[$676>>2]|0;
   $678 = $16;
   $679 = ((($678)) + 64|0);
   $680 = HEAP32[$679>>2]|0;
   $681 = (($677) + ($680))|0;
   $682 = $681 >> 16;
   $683 = $9;
   $684 = ((($683)) + 14|0);
   $685 = HEAP16[$684>>1]|0;
   $686 = $685 << 16 >> 16;
   $687 = Math_imul($682, $686)|0;
   $688 = $16;
   $689 = ((($688)) + 28|0);
   $690 = HEAP32[$689>>2]|0;
   $691 = $16;
   $692 = ((($691)) + 64|0);
   $693 = HEAP32[$692>>2]|0;
   $694 = (($690) + ($693))|0;
   $695 = $694 & 65535;
   $696 = $9;
   $697 = ((($696)) + 14|0);
   $698 = HEAP16[$697>>1]|0;
   $699 = $698 << 16 >> 16;
   $700 = Math_imul($695, $699)|0;
   $701 = $700 >> 16;
   $702 = (($687) + ($701))|0;
   $703 = (($674) + ($702))|0;
   $15 = $703;
   $704 = $15;
   $705 = $16;
   $706 = ((($705)) + 32|0);
   $707 = HEAP32[$706>>2]|0;
   $708 = $16;
   $709 = ((($708)) + 60|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = (($707) + ($710))|0;
   $712 = $711 >> 16;
   $713 = $9;
   $714 = ((($713)) + 16|0);
   $715 = HEAP16[$714>>1]|0;
   $716 = $715 << 16 >> 16;
   $717 = Math_imul($712, $716)|0;
   $718 = $16;
   $719 = ((($718)) + 32|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = $16;
   $722 = ((($721)) + 60|0);
   $723 = HEAP32[$722>>2]|0;
   $724 = (($720) + ($723))|0;
   $725 = $724 & 65535;
   $726 = $9;
   $727 = ((($726)) + 16|0);
   $728 = HEAP16[$727>>1]|0;
   $729 = $728 << 16 >> 16;
   $730 = Math_imul($725, $729)|0;
   $731 = $730 >> 16;
   $732 = (($717) + ($731))|0;
   $733 = (($704) + ($732))|0;
   $15 = $733;
   $734 = $15;
   $735 = $16;
   $736 = ((($735)) + 36|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = $16;
   $739 = ((($738)) + 56|0);
   $740 = HEAP32[$739>>2]|0;
   $741 = (($737) + ($740))|0;
   $742 = $741 >> 16;
   $743 = $9;
   $744 = ((($743)) + 18|0);
   $745 = HEAP16[$744>>1]|0;
   $746 = $745 << 16 >> 16;
   $747 = Math_imul($742, $746)|0;
   $748 = $16;
   $749 = ((($748)) + 36|0);
   $750 = HEAP32[$749>>2]|0;
   $751 = $16;
   $752 = ((($751)) + 56|0);
   $753 = HEAP32[$752>>2]|0;
   $754 = (($750) + ($753))|0;
   $755 = $754 & 65535;
   $756 = $9;
   $757 = ((($756)) + 18|0);
   $758 = HEAP16[$757>>1]|0;
   $759 = $758 << 16 >> 16;
   $760 = Math_imul($755, $759)|0;
   $761 = $760 >> 16;
   $762 = (($747) + ($761))|0;
   $763 = (($734) + ($762))|0;
   $15 = $763;
   $764 = $15;
   $765 = $16;
   $766 = ((($765)) + 40|0);
   $767 = HEAP32[$766>>2]|0;
   $768 = $16;
   $769 = ((($768)) + 52|0);
   $770 = HEAP32[$769>>2]|0;
   $771 = (($767) + ($770))|0;
   $772 = $771 >> 16;
   $773 = $9;
   $774 = ((($773)) + 20|0);
   $775 = HEAP16[$774>>1]|0;
   $776 = $775 << 16 >> 16;
   $777 = Math_imul($772, $776)|0;
   $778 = $16;
   $779 = ((($778)) + 40|0);
   $780 = HEAP32[$779>>2]|0;
   $781 = $16;
   $782 = ((($781)) + 52|0);
   $783 = HEAP32[$782>>2]|0;
   $784 = (($780) + ($783))|0;
   $785 = $784 & 65535;
   $786 = $9;
   $787 = ((($786)) + 20|0);
   $788 = HEAP16[$787>>1]|0;
   $789 = $788 << 16 >> 16;
   $790 = Math_imul($785, $789)|0;
   $791 = $790 >> 16;
   $792 = (($777) + ($791))|0;
   $793 = (($764) + ($792))|0;
   $15 = $793;
   $794 = $15;
   $795 = $16;
   $796 = ((($795)) + 44|0);
   $797 = HEAP32[$796>>2]|0;
   $798 = $16;
   $799 = ((($798)) + 48|0);
   $800 = HEAP32[$799>>2]|0;
   $801 = (($797) + ($800))|0;
   $802 = $801 >> 16;
   $803 = $9;
   $804 = ((($803)) + 22|0);
   $805 = HEAP16[$804>>1]|0;
   $806 = $805 << 16 >> 16;
   $807 = Math_imul($802, $806)|0;
   $808 = $16;
   $809 = ((($808)) + 44|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = $16;
   $812 = ((($811)) + 48|0);
   $813 = HEAP32[$812>>2]|0;
   $814 = (($810) + ($813))|0;
   $815 = $814 & 65535;
   $816 = $9;
   $817 = ((($816)) + 22|0);
   $818 = HEAP16[$817>>1]|0;
   $819 = $818 << 16 >> 16;
   $820 = Math_imul($815, $819)|0;
   $821 = $820 >> 16;
   $822 = (($807) + ($821))|0;
   $823 = (($794) + ($822))|0;
   $15 = $823;
   $824 = $15;
   $825 = $824 >> 5;
   $826 = (($825) + 1)|0;
   $827 = $826 >> 1;
   $828 = ($827|0)>(32767);
   if ($828) {
    $839 = 32767;
   } else {
    $829 = $15;
    $830 = $829 >> 5;
    $831 = (($830) + 1)|0;
    $832 = $831 >> 1;
    $833 = ($832|0)<(-32768);
    if ($833) {
     $839 = -32768;
    } else {
     $834 = $15;
     $835 = $834 >> 5;
     $836 = (($835) + 1)|0;
     $837 = $836 >> 1;
     $839 = $837;
    }
   }
   $838 = $839&65535;
   $840 = $7;
   $841 = ((($840)) + 2|0);
   $7 = $841;
   HEAP16[$840>>1] = $838;
   $842 = $13;
   $843 = $14;
   $844 = (($843) + ($842))|0;
   $14 = $844;
  }
  $1407 = $7;
  STACKTOP = sp;return ($1407|0);
  break;
 }
 case 36:  {
  $14 = 0;
  while(1) {
   $845 = $14;
   $846 = $12;
   $847 = ($845|0)<($846|0);
   if (!($847)) {
    break;
   }
   $848 = $8;
   $849 = $14;
   $850 = $849 >> 16;
   $851 = (($848) + ($850<<2)|0);
   $16 = $851;
   $852 = $16;
   $853 = HEAP32[$852>>2]|0;
   $854 = $16;
   $855 = ((($854)) + 140|0);
   $856 = HEAP32[$855>>2]|0;
   $857 = (($853) + ($856))|0;
   $858 = $857 >> 16;
   $859 = $9;
   $860 = HEAP16[$859>>1]|0;
   $861 = $860 << 16 >> 16;
   $862 = Math_imul($858, $861)|0;
   $863 = $16;
   $864 = HEAP32[$863>>2]|0;
   $865 = $16;
   $866 = ((($865)) + 140|0);
   $867 = HEAP32[$866>>2]|0;
   $868 = (($864) + ($867))|0;
   $869 = $868 & 65535;
   $870 = $9;
   $871 = HEAP16[$870>>1]|0;
   $872 = $871 << 16 >> 16;
   $873 = Math_imul($869, $872)|0;
   $874 = $873 >> 16;
   $875 = (($862) + ($874))|0;
   $15 = $875;
   $876 = $15;
   $877 = $16;
   $878 = ((($877)) + 4|0);
   $879 = HEAP32[$878>>2]|0;
   $880 = $16;
   $881 = ((($880)) + 136|0);
   $882 = HEAP32[$881>>2]|0;
   $883 = (($879) + ($882))|0;
   $884 = $883 >> 16;
   $885 = $9;
   $886 = ((($885)) + 2|0);
   $887 = HEAP16[$886>>1]|0;
   $888 = $887 << 16 >> 16;
   $889 = Math_imul($884, $888)|0;
   $890 = $16;
   $891 = ((($890)) + 4|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = $16;
   $894 = ((($893)) + 136|0);
   $895 = HEAP32[$894>>2]|0;
   $896 = (($892) + ($895))|0;
   $897 = $896 & 65535;
   $898 = $9;
   $899 = ((($898)) + 2|0);
   $900 = HEAP16[$899>>1]|0;
   $901 = $900 << 16 >> 16;
   $902 = Math_imul($897, $901)|0;
   $903 = $902 >> 16;
   $904 = (($889) + ($903))|0;
   $905 = (($876) + ($904))|0;
   $15 = $905;
   $906 = $15;
   $907 = $16;
   $908 = ((($907)) + 8|0);
   $909 = HEAP32[$908>>2]|0;
   $910 = $16;
   $911 = ((($910)) + 132|0);
   $912 = HEAP32[$911>>2]|0;
   $913 = (($909) + ($912))|0;
   $914 = $913 >> 16;
   $915 = $9;
   $916 = ((($915)) + 4|0);
   $917 = HEAP16[$916>>1]|0;
   $918 = $917 << 16 >> 16;
   $919 = Math_imul($914, $918)|0;
   $920 = $16;
   $921 = ((($920)) + 8|0);
   $922 = HEAP32[$921>>2]|0;
   $923 = $16;
   $924 = ((($923)) + 132|0);
   $925 = HEAP32[$924>>2]|0;
   $926 = (($922) + ($925))|0;
   $927 = $926 & 65535;
   $928 = $9;
   $929 = ((($928)) + 4|0);
   $930 = HEAP16[$929>>1]|0;
   $931 = $930 << 16 >> 16;
   $932 = Math_imul($927, $931)|0;
   $933 = $932 >> 16;
   $934 = (($919) + ($933))|0;
   $935 = (($906) + ($934))|0;
   $15 = $935;
   $936 = $15;
   $937 = $16;
   $938 = ((($937)) + 12|0);
   $939 = HEAP32[$938>>2]|0;
   $940 = $16;
   $941 = ((($940)) + 128|0);
   $942 = HEAP32[$941>>2]|0;
   $943 = (($939) + ($942))|0;
   $944 = $943 >> 16;
   $945 = $9;
   $946 = ((($945)) + 6|0);
   $947 = HEAP16[$946>>1]|0;
   $948 = $947 << 16 >> 16;
   $949 = Math_imul($944, $948)|0;
   $950 = $16;
   $951 = ((($950)) + 12|0);
   $952 = HEAP32[$951>>2]|0;
   $953 = $16;
   $954 = ((($953)) + 128|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = (($952) + ($955))|0;
   $957 = $956 & 65535;
   $958 = $9;
   $959 = ((($958)) + 6|0);
   $960 = HEAP16[$959>>1]|0;
   $961 = $960 << 16 >> 16;
   $962 = Math_imul($957, $961)|0;
   $963 = $962 >> 16;
   $964 = (($949) + ($963))|0;
   $965 = (($936) + ($964))|0;
   $15 = $965;
   $966 = $15;
   $967 = $16;
   $968 = ((($967)) + 16|0);
   $969 = HEAP32[$968>>2]|0;
   $970 = $16;
   $971 = ((($970)) + 124|0);
   $972 = HEAP32[$971>>2]|0;
   $973 = (($969) + ($972))|0;
   $974 = $973 >> 16;
   $975 = $9;
   $976 = ((($975)) + 8|0);
   $977 = HEAP16[$976>>1]|0;
   $978 = $977 << 16 >> 16;
   $979 = Math_imul($974, $978)|0;
   $980 = $16;
   $981 = ((($980)) + 16|0);
   $982 = HEAP32[$981>>2]|0;
   $983 = $16;
   $984 = ((($983)) + 124|0);
   $985 = HEAP32[$984>>2]|0;
   $986 = (($982) + ($985))|0;
   $987 = $986 & 65535;
   $988 = $9;
   $989 = ((($988)) + 8|0);
   $990 = HEAP16[$989>>1]|0;
   $991 = $990 << 16 >> 16;
   $992 = Math_imul($987, $991)|0;
   $993 = $992 >> 16;
   $994 = (($979) + ($993))|0;
   $995 = (($966) + ($994))|0;
   $15 = $995;
   $996 = $15;
   $997 = $16;
   $998 = ((($997)) + 20|0);
   $999 = HEAP32[$998>>2]|0;
   $1000 = $16;
   $1001 = ((($1000)) + 120|0);
   $1002 = HEAP32[$1001>>2]|0;
   $1003 = (($999) + ($1002))|0;
   $1004 = $1003 >> 16;
   $1005 = $9;
   $1006 = ((($1005)) + 10|0);
   $1007 = HEAP16[$1006>>1]|0;
   $1008 = $1007 << 16 >> 16;
   $1009 = Math_imul($1004, $1008)|0;
   $1010 = $16;
   $1011 = ((($1010)) + 20|0);
   $1012 = HEAP32[$1011>>2]|0;
   $1013 = $16;
   $1014 = ((($1013)) + 120|0);
   $1015 = HEAP32[$1014>>2]|0;
   $1016 = (($1012) + ($1015))|0;
   $1017 = $1016 & 65535;
   $1018 = $9;
   $1019 = ((($1018)) + 10|0);
   $1020 = HEAP16[$1019>>1]|0;
   $1021 = $1020 << 16 >> 16;
   $1022 = Math_imul($1017, $1021)|0;
   $1023 = $1022 >> 16;
   $1024 = (($1009) + ($1023))|0;
   $1025 = (($996) + ($1024))|0;
   $15 = $1025;
   $1026 = $15;
   $1027 = $16;
   $1028 = ((($1027)) + 24|0);
   $1029 = HEAP32[$1028>>2]|0;
   $1030 = $16;
   $1031 = ((($1030)) + 116|0);
   $1032 = HEAP32[$1031>>2]|0;
   $1033 = (($1029) + ($1032))|0;
   $1034 = $1033 >> 16;
   $1035 = $9;
   $1036 = ((($1035)) + 12|0);
   $1037 = HEAP16[$1036>>1]|0;
   $1038 = $1037 << 16 >> 16;
   $1039 = Math_imul($1034, $1038)|0;
   $1040 = $16;
   $1041 = ((($1040)) + 24|0);
   $1042 = HEAP32[$1041>>2]|0;
   $1043 = $16;
   $1044 = ((($1043)) + 116|0);
   $1045 = HEAP32[$1044>>2]|0;
   $1046 = (($1042) + ($1045))|0;
   $1047 = $1046 & 65535;
   $1048 = $9;
   $1049 = ((($1048)) + 12|0);
   $1050 = HEAP16[$1049>>1]|0;
   $1051 = $1050 << 16 >> 16;
   $1052 = Math_imul($1047, $1051)|0;
   $1053 = $1052 >> 16;
   $1054 = (($1039) + ($1053))|0;
   $1055 = (($1026) + ($1054))|0;
   $15 = $1055;
   $1056 = $15;
   $1057 = $16;
   $1058 = ((($1057)) + 28|0);
   $1059 = HEAP32[$1058>>2]|0;
   $1060 = $16;
   $1061 = ((($1060)) + 112|0);
   $1062 = HEAP32[$1061>>2]|0;
   $1063 = (($1059) + ($1062))|0;
   $1064 = $1063 >> 16;
   $1065 = $9;
   $1066 = ((($1065)) + 14|0);
   $1067 = HEAP16[$1066>>1]|0;
   $1068 = $1067 << 16 >> 16;
   $1069 = Math_imul($1064, $1068)|0;
   $1070 = $16;
   $1071 = ((($1070)) + 28|0);
   $1072 = HEAP32[$1071>>2]|0;
   $1073 = $16;
   $1074 = ((($1073)) + 112|0);
   $1075 = HEAP32[$1074>>2]|0;
   $1076 = (($1072) + ($1075))|0;
   $1077 = $1076 & 65535;
   $1078 = $9;
   $1079 = ((($1078)) + 14|0);
   $1080 = HEAP16[$1079>>1]|0;
   $1081 = $1080 << 16 >> 16;
   $1082 = Math_imul($1077, $1081)|0;
   $1083 = $1082 >> 16;
   $1084 = (($1069) + ($1083))|0;
   $1085 = (($1056) + ($1084))|0;
   $15 = $1085;
   $1086 = $15;
   $1087 = $16;
   $1088 = ((($1087)) + 32|0);
   $1089 = HEAP32[$1088>>2]|0;
   $1090 = $16;
   $1091 = ((($1090)) + 108|0);
   $1092 = HEAP32[$1091>>2]|0;
   $1093 = (($1089) + ($1092))|0;
   $1094 = $1093 >> 16;
   $1095 = $9;
   $1096 = ((($1095)) + 16|0);
   $1097 = HEAP16[$1096>>1]|0;
   $1098 = $1097 << 16 >> 16;
   $1099 = Math_imul($1094, $1098)|0;
   $1100 = $16;
   $1101 = ((($1100)) + 32|0);
   $1102 = HEAP32[$1101>>2]|0;
   $1103 = $16;
   $1104 = ((($1103)) + 108|0);
   $1105 = HEAP32[$1104>>2]|0;
   $1106 = (($1102) + ($1105))|0;
   $1107 = $1106 & 65535;
   $1108 = $9;
   $1109 = ((($1108)) + 16|0);
   $1110 = HEAP16[$1109>>1]|0;
   $1111 = $1110 << 16 >> 16;
   $1112 = Math_imul($1107, $1111)|0;
   $1113 = $1112 >> 16;
   $1114 = (($1099) + ($1113))|0;
   $1115 = (($1086) + ($1114))|0;
   $15 = $1115;
   $1116 = $15;
   $1117 = $16;
   $1118 = ((($1117)) + 36|0);
   $1119 = HEAP32[$1118>>2]|0;
   $1120 = $16;
   $1121 = ((($1120)) + 104|0);
   $1122 = HEAP32[$1121>>2]|0;
   $1123 = (($1119) + ($1122))|0;
   $1124 = $1123 >> 16;
   $1125 = $9;
   $1126 = ((($1125)) + 18|0);
   $1127 = HEAP16[$1126>>1]|0;
   $1128 = $1127 << 16 >> 16;
   $1129 = Math_imul($1124, $1128)|0;
   $1130 = $16;
   $1131 = ((($1130)) + 36|0);
   $1132 = HEAP32[$1131>>2]|0;
   $1133 = $16;
   $1134 = ((($1133)) + 104|0);
   $1135 = HEAP32[$1134>>2]|0;
   $1136 = (($1132) + ($1135))|0;
   $1137 = $1136 & 65535;
   $1138 = $9;
   $1139 = ((($1138)) + 18|0);
   $1140 = HEAP16[$1139>>1]|0;
   $1141 = $1140 << 16 >> 16;
   $1142 = Math_imul($1137, $1141)|0;
   $1143 = $1142 >> 16;
   $1144 = (($1129) + ($1143))|0;
   $1145 = (($1116) + ($1144))|0;
   $15 = $1145;
   $1146 = $15;
   $1147 = $16;
   $1148 = ((($1147)) + 40|0);
   $1149 = HEAP32[$1148>>2]|0;
   $1150 = $16;
   $1151 = ((($1150)) + 100|0);
   $1152 = HEAP32[$1151>>2]|0;
   $1153 = (($1149) + ($1152))|0;
   $1154 = $1153 >> 16;
   $1155 = $9;
   $1156 = ((($1155)) + 20|0);
   $1157 = HEAP16[$1156>>1]|0;
   $1158 = $1157 << 16 >> 16;
   $1159 = Math_imul($1154, $1158)|0;
   $1160 = $16;
   $1161 = ((($1160)) + 40|0);
   $1162 = HEAP32[$1161>>2]|0;
   $1163 = $16;
   $1164 = ((($1163)) + 100|0);
   $1165 = HEAP32[$1164>>2]|0;
   $1166 = (($1162) + ($1165))|0;
   $1167 = $1166 & 65535;
   $1168 = $9;
   $1169 = ((($1168)) + 20|0);
   $1170 = HEAP16[$1169>>1]|0;
   $1171 = $1170 << 16 >> 16;
   $1172 = Math_imul($1167, $1171)|0;
   $1173 = $1172 >> 16;
   $1174 = (($1159) + ($1173))|0;
   $1175 = (($1146) + ($1174))|0;
   $15 = $1175;
   $1176 = $15;
   $1177 = $16;
   $1178 = ((($1177)) + 44|0);
   $1179 = HEAP32[$1178>>2]|0;
   $1180 = $16;
   $1181 = ((($1180)) + 96|0);
   $1182 = HEAP32[$1181>>2]|0;
   $1183 = (($1179) + ($1182))|0;
   $1184 = $1183 >> 16;
   $1185 = $9;
   $1186 = ((($1185)) + 22|0);
   $1187 = HEAP16[$1186>>1]|0;
   $1188 = $1187 << 16 >> 16;
   $1189 = Math_imul($1184, $1188)|0;
   $1190 = $16;
   $1191 = ((($1190)) + 44|0);
   $1192 = HEAP32[$1191>>2]|0;
   $1193 = $16;
   $1194 = ((($1193)) + 96|0);
   $1195 = HEAP32[$1194>>2]|0;
   $1196 = (($1192) + ($1195))|0;
   $1197 = $1196 & 65535;
   $1198 = $9;
   $1199 = ((($1198)) + 22|0);
   $1200 = HEAP16[$1199>>1]|0;
   $1201 = $1200 << 16 >> 16;
   $1202 = Math_imul($1197, $1201)|0;
   $1203 = $1202 >> 16;
   $1204 = (($1189) + ($1203))|0;
   $1205 = (($1176) + ($1204))|0;
   $15 = $1205;
   $1206 = $15;
   $1207 = $16;
   $1208 = ((($1207)) + 48|0);
   $1209 = HEAP32[$1208>>2]|0;
   $1210 = $16;
   $1211 = ((($1210)) + 92|0);
   $1212 = HEAP32[$1211>>2]|0;
   $1213 = (($1209) + ($1212))|0;
   $1214 = $1213 >> 16;
   $1215 = $9;
   $1216 = ((($1215)) + 24|0);
   $1217 = HEAP16[$1216>>1]|0;
   $1218 = $1217 << 16 >> 16;
   $1219 = Math_imul($1214, $1218)|0;
   $1220 = $16;
   $1221 = ((($1220)) + 48|0);
   $1222 = HEAP32[$1221>>2]|0;
   $1223 = $16;
   $1224 = ((($1223)) + 92|0);
   $1225 = HEAP32[$1224>>2]|0;
   $1226 = (($1222) + ($1225))|0;
   $1227 = $1226 & 65535;
   $1228 = $9;
   $1229 = ((($1228)) + 24|0);
   $1230 = HEAP16[$1229>>1]|0;
   $1231 = $1230 << 16 >> 16;
   $1232 = Math_imul($1227, $1231)|0;
   $1233 = $1232 >> 16;
   $1234 = (($1219) + ($1233))|0;
   $1235 = (($1206) + ($1234))|0;
   $15 = $1235;
   $1236 = $15;
   $1237 = $16;
   $1238 = ((($1237)) + 52|0);
   $1239 = HEAP32[$1238>>2]|0;
   $1240 = $16;
   $1241 = ((($1240)) + 88|0);
   $1242 = HEAP32[$1241>>2]|0;
   $1243 = (($1239) + ($1242))|0;
   $1244 = $1243 >> 16;
   $1245 = $9;
   $1246 = ((($1245)) + 26|0);
   $1247 = HEAP16[$1246>>1]|0;
   $1248 = $1247 << 16 >> 16;
   $1249 = Math_imul($1244, $1248)|0;
   $1250 = $16;
   $1251 = ((($1250)) + 52|0);
   $1252 = HEAP32[$1251>>2]|0;
   $1253 = $16;
   $1254 = ((($1253)) + 88|0);
   $1255 = HEAP32[$1254>>2]|0;
   $1256 = (($1252) + ($1255))|0;
   $1257 = $1256 & 65535;
   $1258 = $9;
   $1259 = ((($1258)) + 26|0);
   $1260 = HEAP16[$1259>>1]|0;
   $1261 = $1260 << 16 >> 16;
   $1262 = Math_imul($1257, $1261)|0;
   $1263 = $1262 >> 16;
   $1264 = (($1249) + ($1263))|0;
   $1265 = (($1236) + ($1264))|0;
   $15 = $1265;
   $1266 = $15;
   $1267 = $16;
   $1268 = ((($1267)) + 56|0);
   $1269 = HEAP32[$1268>>2]|0;
   $1270 = $16;
   $1271 = ((($1270)) + 84|0);
   $1272 = HEAP32[$1271>>2]|0;
   $1273 = (($1269) + ($1272))|0;
   $1274 = $1273 >> 16;
   $1275 = $9;
   $1276 = ((($1275)) + 28|0);
   $1277 = HEAP16[$1276>>1]|0;
   $1278 = $1277 << 16 >> 16;
   $1279 = Math_imul($1274, $1278)|0;
   $1280 = $16;
   $1281 = ((($1280)) + 56|0);
   $1282 = HEAP32[$1281>>2]|0;
   $1283 = $16;
   $1284 = ((($1283)) + 84|0);
   $1285 = HEAP32[$1284>>2]|0;
   $1286 = (($1282) + ($1285))|0;
   $1287 = $1286 & 65535;
   $1288 = $9;
   $1289 = ((($1288)) + 28|0);
   $1290 = HEAP16[$1289>>1]|0;
   $1291 = $1290 << 16 >> 16;
   $1292 = Math_imul($1287, $1291)|0;
   $1293 = $1292 >> 16;
   $1294 = (($1279) + ($1293))|0;
   $1295 = (($1266) + ($1294))|0;
   $15 = $1295;
   $1296 = $15;
   $1297 = $16;
   $1298 = ((($1297)) + 60|0);
   $1299 = HEAP32[$1298>>2]|0;
   $1300 = $16;
   $1301 = ((($1300)) + 80|0);
   $1302 = HEAP32[$1301>>2]|0;
   $1303 = (($1299) + ($1302))|0;
   $1304 = $1303 >> 16;
   $1305 = $9;
   $1306 = ((($1305)) + 30|0);
   $1307 = HEAP16[$1306>>1]|0;
   $1308 = $1307 << 16 >> 16;
   $1309 = Math_imul($1304, $1308)|0;
   $1310 = $16;
   $1311 = ((($1310)) + 60|0);
   $1312 = HEAP32[$1311>>2]|0;
   $1313 = $16;
   $1314 = ((($1313)) + 80|0);
   $1315 = HEAP32[$1314>>2]|0;
   $1316 = (($1312) + ($1315))|0;
   $1317 = $1316 & 65535;
   $1318 = $9;
   $1319 = ((($1318)) + 30|0);
   $1320 = HEAP16[$1319>>1]|0;
   $1321 = $1320 << 16 >> 16;
   $1322 = Math_imul($1317, $1321)|0;
   $1323 = $1322 >> 16;
   $1324 = (($1309) + ($1323))|0;
   $1325 = (($1296) + ($1324))|0;
   $15 = $1325;
   $1326 = $15;
   $1327 = $16;
   $1328 = ((($1327)) + 64|0);
   $1329 = HEAP32[$1328>>2]|0;
   $1330 = $16;
   $1331 = ((($1330)) + 76|0);
   $1332 = HEAP32[$1331>>2]|0;
   $1333 = (($1329) + ($1332))|0;
   $1334 = $1333 >> 16;
   $1335 = $9;
   $1336 = ((($1335)) + 32|0);
   $1337 = HEAP16[$1336>>1]|0;
   $1338 = $1337 << 16 >> 16;
   $1339 = Math_imul($1334, $1338)|0;
   $1340 = $16;
   $1341 = ((($1340)) + 64|0);
   $1342 = HEAP32[$1341>>2]|0;
   $1343 = $16;
   $1344 = ((($1343)) + 76|0);
   $1345 = HEAP32[$1344>>2]|0;
   $1346 = (($1342) + ($1345))|0;
   $1347 = $1346 & 65535;
   $1348 = $9;
   $1349 = ((($1348)) + 32|0);
   $1350 = HEAP16[$1349>>1]|0;
   $1351 = $1350 << 16 >> 16;
   $1352 = Math_imul($1347, $1351)|0;
   $1353 = $1352 >> 16;
   $1354 = (($1339) + ($1353))|0;
   $1355 = (($1326) + ($1354))|0;
   $15 = $1355;
   $1356 = $15;
   $1357 = $16;
   $1358 = ((($1357)) + 68|0);
   $1359 = HEAP32[$1358>>2]|0;
   $1360 = $16;
   $1361 = ((($1360)) + 72|0);
   $1362 = HEAP32[$1361>>2]|0;
   $1363 = (($1359) + ($1362))|0;
   $1364 = $1363 >> 16;
   $1365 = $9;
   $1366 = ((($1365)) + 34|0);
   $1367 = HEAP16[$1366>>1]|0;
   $1368 = $1367 << 16 >> 16;
   $1369 = Math_imul($1364, $1368)|0;
   $1370 = $16;
   $1371 = ((($1370)) + 68|0);
   $1372 = HEAP32[$1371>>2]|0;
   $1373 = $16;
   $1374 = ((($1373)) + 72|0);
   $1375 = HEAP32[$1374>>2]|0;
   $1376 = (($1372) + ($1375))|0;
   $1377 = $1376 & 65535;
   $1378 = $9;
   $1379 = ((($1378)) + 34|0);
   $1380 = HEAP16[$1379>>1]|0;
   $1381 = $1380 << 16 >> 16;
   $1382 = Math_imul($1377, $1381)|0;
   $1383 = $1382 >> 16;
   $1384 = (($1369) + ($1383))|0;
   $1385 = (($1356) + ($1384))|0;
   $15 = $1385;
   $1386 = $15;
   $1387 = $1386 >> 5;
   $1388 = (($1387) + 1)|0;
   $1389 = $1388 >> 1;
   $1390 = ($1389|0)>(32767);
   if ($1390) {
    $1401 = 32767;
   } else {
    $1391 = $15;
    $1392 = $1391 >> 5;
    $1393 = (($1392) + 1)|0;
    $1394 = $1393 >> 1;
    $1395 = ($1394|0)<(-32768);
    if ($1395) {
     $1401 = -32768;
    } else {
     $1396 = $15;
     $1397 = $1396 >> 5;
     $1398 = (($1397) + 1)|0;
     $1399 = $1398 >> 1;
     $1401 = $1399;
    }
   }
   $1400 = $1401&65535;
   $1402 = $7;
   $1403 = ((($1402)) + 2|0);
   $7 = $1403;
   HEAP16[$1402>>1] = $1400;
   $1404 = $13;
   $1405 = $14;
   $1406 = (($1405) + ($1404))|0;
   $14 = $1406;
  }
  $1407 = $7;
  STACKTOP = sp;return ($1407|0);
  break;
 }
 default: {
  $1407 = $7;
  STACKTOP = sp;return ($1407|0);
 }
 }
 return (0)|0;
}
function _silk_resampler_private_IIR_FIR($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $8 = $13;
 $14 = $8;
 $15 = ((($14)) + 268|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16<<1;
 $18 = (($17) + 8)|0;
 $19 = (_llvm_stacksave()|0);
 $12 = $19;
 $$alloca_mul = $18<<1;
 $20 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $21 = $8;
 $22 = ((($21)) + 24|0);
 ;HEAP16[$20>>1]=HEAP16[$22>>1]|0;HEAP16[$20+2>>1]=HEAP16[$22+2>>1]|0;HEAP16[$20+4>>1]=HEAP16[$22+4>>1]|0;HEAP16[$20+6>>1]=HEAP16[$22+6>>1]|0;HEAP16[$20+8>>1]=HEAP16[$22+8>>1]|0;HEAP16[$20+10>>1]=HEAP16[$22+10>>1]|0;HEAP16[$20+12>>1]=HEAP16[$22+12>>1]|0;HEAP16[$20+14>>1]=HEAP16[$22+14>>1]|0;
 $23 = $8;
 $24 = ((($23)) + 272|0);
 $25 = HEAP32[$24>>2]|0;
 $11 = $25;
 while(1) {
  $26 = $7;
  $27 = $8;
  $28 = ((($27)) + 268|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<($29|0);
  if ($30) {
   $31 = $7;
   $35 = $31;
  } else {
   $32 = $8;
   $33 = ((($32)) + 268|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34;
  }
  $9 = $35;
  $36 = $8;
  $37 = ((($20)) + 16|0);
  $38 = $6;
  $39 = $9;
  _silk_resampler_private_up2_HQ($36,$37,$38,$39);
  $40 = $9;
  $41 = $40 << 17;
  $10 = $41;
  $42 = $5;
  $43 = $10;
  $44 = $11;
  $45 = (_silk_resampler_private_IIR_FIR_INTERPOL($42,$20,$43,$44)|0);
  $5 = $45;
  $46 = $9;
  $47 = $6;
  $48 = (($47) + ($46<<1)|0);
  $6 = $48;
  $49 = $9;
  $50 = $7;
  $51 = (($50) - ($49))|0;
  $7 = $51;
  $52 = $7;
  $53 = ($52|0)>(0);
  if (!($53)) {
   break;
  }
  $54 = $9;
  $55 = $54 << 1;
  $56 = (($20) + ($55<<1)|0);
  ;HEAP16[$20>>1]=HEAP16[$56>>1]|0;HEAP16[$20+2>>1]=HEAP16[$56+2>>1]|0;HEAP16[$20+4>>1]=HEAP16[$56+4>>1]|0;HEAP16[$20+6>>1]=HEAP16[$56+6>>1]|0;HEAP16[$20+8>>1]=HEAP16[$56+8>>1]|0;HEAP16[$20+10>>1]=HEAP16[$56+10>>1]|0;HEAP16[$20+12>>1]=HEAP16[$56+12>>1]|0;HEAP16[$20+14>>1]=HEAP16[$56+14>>1]|0;
 }
 $57 = $8;
 $58 = ((($57)) + 24|0);
 $59 = $9;
 $60 = $59 << 1;
 $61 = (($20) + ($60<<1)|0);
 ;HEAP16[$58>>1]=HEAP16[$61>>1]|0;HEAP16[$58+2>>1]=HEAP16[$61+2>>1]|0;HEAP16[$58+4>>1]=HEAP16[$61+4>>1]|0;HEAP16[$58+6>>1]=HEAP16[$61+6>>1]|0;HEAP16[$58+8>>1]=HEAP16[$61+8>>1]|0;HEAP16[$58+10>>1]=HEAP16[$61+10>>1]|0;HEAP16[$58+12>>1]=HEAP16[$61+12>>1]|0;HEAP16[$58+14>>1]=HEAP16[$61+14>>1]|0;
 $62 = $12;
 _llvm_stackrestore(($62|0));
 STACKTOP = sp;return;
}
function _silk_resampler_private_IIR_FIR_INTERPOL($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $12 = $8;
  $13 = $6;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $8;
  $16 = $15 & 65535;
  $17 = $16 >> 16;
  $18 = ($17*12)|0;
  $19 = $8;
  $20 = $19 & 65535;
  $21 = $20 & 65535;
  $22 = ($21*12)|0;
  $23 = $22 >> 16;
  $24 = (($18) + ($23))|0;
  $11 = $24;
  $25 = $5;
  $26 = $8;
  $27 = $26 >> 16;
  $28 = (($25) + ($27<<1)|0);
  $10 = $28;
  $29 = $10;
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = $11;
  $33 = (25282 + ($32<<3)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = Math_imul($31, $35)|0;
  $9 = $36;
  $37 = $9;
  $38 = $10;
  $39 = ((($38)) + 2|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = $11;
  $43 = (25282 + ($42<<3)|0);
  $44 = ((($43)) + 2|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = Math_imul($41, $46)|0;
  $48 = (($37) + ($47))|0;
  $9 = $48;
  $49 = $9;
  $50 = $10;
  $51 = ((($50)) + 4|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = $11;
  $55 = (25282 + ($54<<3)|0);
  $56 = ((($55)) + 4|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57 << 16 >> 16;
  $59 = Math_imul($53, $58)|0;
  $60 = (($49) + ($59))|0;
  $9 = $60;
  $61 = $9;
  $62 = $10;
  $63 = ((($62)) + 6|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $11;
  $67 = (25282 + ($66<<3)|0);
  $68 = ((($67)) + 6|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = Math_imul($65, $70)|0;
  $72 = (($61) + ($71))|0;
  $9 = $72;
  $73 = $9;
  $74 = $10;
  $75 = ((($74)) + 8|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = $11;
  $79 = (11 - ($78))|0;
  $80 = (25282 + ($79<<3)|0);
  $81 = ((($80)) + 6|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = Math_imul($77, $83)|0;
  $85 = (($73) + ($84))|0;
  $9 = $85;
  $86 = $9;
  $87 = $10;
  $88 = ((($87)) + 10|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = $89 << 16 >> 16;
  $91 = $11;
  $92 = (11 - ($91))|0;
  $93 = (25282 + ($92<<3)|0);
  $94 = ((($93)) + 4|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = $95 << 16 >> 16;
  $97 = Math_imul($90, $96)|0;
  $98 = (($86) + ($97))|0;
  $9 = $98;
  $99 = $9;
  $100 = $10;
  $101 = ((($100)) + 12|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = $11;
  $105 = (11 - ($104))|0;
  $106 = (25282 + ($105<<3)|0);
  $107 = ((($106)) + 2|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = Math_imul($103, $109)|0;
  $111 = (($99) + ($110))|0;
  $9 = $111;
  $112 = $9;
  $113 = $10;
  $114 = ((($113)) + 14|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115 << 16 >> 16;
  $117 = $11;
  $118 = (11 - ($117))|0;
  $119 = (25282 + ($118<<3)|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = Math_imul($116, $121)|0;
  $123 = (($112) + ($122))|0;
  $9 = $123;
  $124 = $9;
  $125 = $124 >> 14;
  $126 = (($125) + 1)|0;
  $127 = $126 >> 1;
  $128 = ($127|0)>(32767);
  if ($128) {
   $139 = 32767;
  } else {
   $129 = $9;
   $130 = $129 >> 14;
   $131 = (($130) + 1)|0;
   $132 = $131 >> 1;
   $133 = ($132|0)<(-32768);
   if ($133) {
    $139 = -32768;
   } else {
    $134 = $9;
    $135 = $134 >> 14;
    $136 = (($135) + 1)|0;
    $137 = $136 >> 1;
    $139 = $137;
   }
  }
  $138 = $139&65535;
  $140 = $4;
  $141 = ((($140)) + 2|0);
  $4 = $141;
  HEAP16[$140>>1] = $138;
  $142 = $7;
  $143 = $8;
  $144 = (($143) + ($142))|0;
  $8 = $144;
 }
 $145 = $4;
 STACKTOP = sp;return ($145|0);
}
function _silk_resampler_private_up2_HQ($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $14 = $8;
  $15 = $7;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $6;
  $18 = $8;
  $19 = (($17) + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = $21 << 10;
  $9 = $22;
  $23 = $9;
  $24 = $4;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) - ($25))|0;
  $12 = $26;
  $27 = $12;
  $28 = $27 >> 16;
  $29 = HEAP16[12506]|0;
  $30 = $29 << 16 >> 16;
  $31 = Math_imul($28, $30)|0;
  $32 = $12;
  $33 = $32 & 65535;
  $34 = HEAP16[12506]|0;
  $35 = $34 << 16 >> 16;
  $36 = Math_imul($33, $35)|0;
  $37 = $36 >> 16;
  $38 = (($31) + ($37))|0;
  $13 = $38;
  $39 = $4;
  $40 = HEAP32[$39>>2]|0;
  $41 = $13;
  $42 = (($40) + ($41))|0;
  $10 = $42;
  $43 = $9;
  $44 = $13;
  $45 = (($43) + ($44))|0;
  $46 = $4;
  HEAP32[$46>>2] = $45;
  $47 = $10;
  $48 = $4;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($47) - ($50))|0;
  $12 = $51;
  $52 = $12;
  $53 = $52 >> 16;
  $54 = HEAP16[(25014)>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = Math_imul($53, $55)|0;
  $57 = $12;
  $58 = $57 & 65535;
  $59 = HEAP16[(25014)>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = Math_imul($58, $60)|0;
  $62 = $61 >> 16;
  $63 = (($56) + ($62))|0;
  $13 = $63;
  $64 = $4;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $13;
  $68 = (($66) + ($67))|0;
  $11 = $68;
  $69 = $10;
  $70 = $13;
  $71 = (($69) + ($70))|0;
  $72 = $4;
  $73 = ((($72)) + 4|0);
  HEAP32[$73>>2] = $71;
  $74 = $11;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($74) - ($77))|0;
  $12 = $78;
  $79 = $12;
  $80 = $12;
  $81 = $80 >> 16;
  $82 = HEAP16[(25016)>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = Math_imul($81, $83)|0;
  $85 = $12;
  $86 = $85 & 65535;
  $87 = HEAP16[(25016)>>1]|0;
  $88 = $87 << 16 >> 16;
  $89 = Math_imul($86, $88)|0;
  $90 = $89 >> 16;
  $91 = (($84) + ($90))|0;
  $92 = (($79) + ($91))|0;
  $13 = $92;
  $93 = $4;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $13;
  $97 = (($95) + ($96))|0;
  $10 = $97;
  $98 = $11;
  $99 = $13;
  $100 = (($98) + ($99))|0;
  $101 = $4;
  $102 = ((($101)) + 8|0);
  HEAP32[$102>>2] = $100;
  $103 = $10;
  $104 = $103 >> 9;
  $105 = (($104) + 1)|0;
  $106 = $105 >> 1;
  $107 = ($106|0)>(32767);
  if ($107) {
   $118 = 32767;
  } else {
   $108 = $10;
   $109 = $108 >> 9;
   $110 = (($109) + 1)|0;
   $111 = $110 >> 1;
   $112 = ($111|0)<(-32768);
   if ($112) {
    $118 = -32768;
   } else {
    $113 = $10;
    $114 = $113 >> 9;
    $115 = (($114) + 1)|0;
    $116 = $115 >> 1;
    $118 = $116;
   }
  }
  $117 = $118&65535;
  $119 = $5;
  $120 = $8;
  $121 = $120<<1;
  $122 = (($119) + ($121<<1)|0);
  HEAP16[$122>>1] = $117;
  $123 = $9;
  $124 = $4;
  $125 = ((($124)) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($123) - ($126))|0;
  $12 = $127;
  $128 = $12;
  $129 = $128 >> 16;
  $130 = HEAP16[12509]|0;
  $131 = $130 << 16 >> 16;
  $132 = Math_imul($129, $131)|0;
  $133 = $12;
  $134 = $133 & 65535;
  $135 = HEAP16[12509]|0;
  $136 = $135 << 16 >> 16;
  $137 = Math_imul($134, $136)|0;
  $138 = $137 >> 16;
  $139 = (($132) + ($138))|0;
  $13 = $139;
  $140 = $4;
  $141 = ((($140)) + 12|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $13;
  $144 = (($142) + ($143))|0;
  $10 = $144;
  $145 = $9;
  $146 = $13;
  $147 = (($145) + ($146))|0;
  $148 = $4;
  $149 = ((($148)) + 12|0);
  HEAP32[$149>>2] = $147;
  $150 = $10;
  $151 = $4;
  $152 = ((($151)) + 16|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (($150) - ($153))|0;
  $12 = $154;
  $155 = $12;
  $156 = $155 >> 16;
  $157 = HEAP16[(25020)>>1]|0;
  $158 = $157 << 16 >> 16;
  $159 = Math_imul($156, $158)|0;
  $160 = $12;
  $161 = $160 & 65535;
  $162 = HEAP16[(25020)>>1]|0;
  $163 = $162 << 16 >> 16;
  $164 = Math_imul($161, $163)|0;
  $165 = $164 >> 16;
  $166 = (($159) + ($165))|0;
  $13 = $166;
  $167 = $4;
  $168 = ((($167)) + 16|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $13;
  $171 = (($169) + ($170))|0;
  $11 = $171;
  $172 = $10;
  $173 = $13;
  $174 = (($172) + ($173))|0;
  $175 = $4;
  $176 = ((($175)) + 16|0);
  HEAP32[$176>>2] = $174;
  $177 = $11;
  $178 = $4;
  $179 = ((($178)) + 20|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($177) - ($180))|0;
  $12 = $181;
  $182 = $12;
  $183 = $12;
  $184 = $183 >> 16;
  $185 = HEAP16[(25022)>>1]|0;
  $186 = $185 << 16 >> 16;
  $187 = Math_imul($184, $186)|0;
  $188 = $12;
  $189 = $188 & 65535;
  $190 = HEAP16[(25022)>>1]|0;
  $191 = $190 << 16 >> 16;
  $192 = Math_imul($189, $191)|0;
  $193 = $192 >> 16;
  $194 = (($187) + ($193))|0;
  $195 = (($182) + ($194))|0;
  $13 = $195;
  $196 = $4;
  $197 = ((($196)) + 20|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $13;
  $200 = (($198) + ($199))|0;
  $10 = $200;
  $201 = $11;
  $202 = $13;
  $203 = (($201) + ($202))|0;
  $204 = $4;
  $205 = ((($204)) + 20|0);
  HEAP32[$205>>2] = $203;
  $206 = $10;
  $207 = $206 >> 9;
  $208 = (($207) + 1)|0;
  $209 = $208 >> 1;
  $210 = ($209|0)>(32767);
  if ($210) {
   $221 = 32767;
  } else {
   $211 = $10;
   $212 = $211 >> 9;
   $213 = (($212) + 1)|0;
   $214 = $213 >> 1;
   $215 = ($214|0)<(-32768);
   if ($215) {
    $221 = -32768;
   } else {
    $216 = $10;
    $217 = $216 >> 9;
    $218 = (($217) + 1)|0;
    $219 = $218 >> 1;
    $221 = $219;
   }
  }
  $220 = $221&65535;
  $222 = $5;
  $223 = $8;
  $224 = $223<<1;
  $225 = (($224) + 1)|0;
  $226 = (($222) + ($225<<1)|0);
  HEAP16[$226>>1] = $220;
  $227 = $8;
  $228 = (($227) + 1)|0;
  $8 = $228;
 }
 STACKTOP = sp;return;
}
function _silk_resampler_private_up2_HQ_wrapper($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $8 = $9;
 $10 = $8;
 $11 = $5;
 $12 = $6;
 $13 = $7;
 _silk_resampler_private_up2_HQ($10,$11,$12,$13);
 STACKTOP = sp;return;
}
function _silk_stereo_decode_pred($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = (_ec_dec_icdf($8,27657,8)|0);
 $4 = $9;
 $10 = $4;
 $11 = (($10|0) / 5)&-1;
 $12 = ((($5)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = $4;
 $14 = ((($5)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15*5)|0;
 $17 = (($13) - ($16))|0;
 $18 = ((($5)) + 12|0);
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = $17;
 $4 = 0;
 while(1) {
  $20 = $4;
  $21 = ($20|0)<(2);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = (_ec_dec_icdf($22,27710,8)|0);
  $24 = $4;
  $25 = (($5) + (($24*12)|0)|0);
  HEAP32[$25>>2] = $23;
  $26 = $2;
  $27 = (_ec_dec_icdf($26,27717,8)|0);
  $28 = $4;
  $29 = (($5) + (($28*12)|0)|0);
  $30 = ((($29)) + 4|0);
  HEAP32[$30>>2] = $27;
  $31 = $4;
  $32 = (($31) + 1)|0;
  $4 = $32;
 }
 $4 = 0;
 while(1) {
  $33 = $4;
  $34 = ($33|0)<(2);
  if (!($34)) {
   break;
  }
  $35 = $4;
  $36 = (($5) + (($35*12)|0)|0);
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38*3)|0;
  $40 = $4;
  $41 = (($5) + (($40*12)|0)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + ($39))|0;
  HEAP32[$41>>2] = $43;
  $44 = $4;
  $45 = (($5) + (($44*12)|0)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (24966 + ($46<<1)|0);
  $48 = HEAP16[$47>>1]|0;
  $49 = $48 << 16 >> 16;
  $6 = $49;
  $50 = $4;
  $51 = (($5) + (($50*12)|0)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  $54 = (24966 + ($53<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = $6;
  $58 = (($56) - ($57))|0;
  $59 = $58 >> 16;
  $60 = ($59*6554)|0;
  $61 = $4;
  $62 = (($5) + (($61*12)|0)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + 1)|0;
  $65 = (24966 + ($64<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = $6;
  $69 = (($67) - ($68))|0;
  $70 = $69 & 65535;
  $71 = ($70*6554)|0;
  $72 = $71 >> 16;
  $73 = (($60) + ($72))|0;
  $7 = $73;
  $74 = $6;
  $75 = $7;
  $76 = $75&65535;
  $77 = $76 << 16 >> 16;
  $78 = $4;
  $79 = (($5) + (($78*12)|0)|0);
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81<<1;
  $83 = (($82) + 1)|0;
  $84 = $83&65535;
  $85 = $84 << 16 >> 16;
  $86 = Math_imul($77, $85)|0;
  $87 = (($74) + ($86))|0;
  $88 = $3;
  $89 = $4;
  $90 = (($88) + ($89<<2)|0);
  HEAP32[$90>>2] = $87;
  $91 = $4;
  $92 = (($91) + 1)|0;
  $4 = $92;
 }
 $93 = $3;
 $94 = ((($93)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $3;
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) - ($95))|0;
 HEAP32[$96>>2] = $98;
 STACKTOP = sp;return;
}
function _silk_stereo_decode_mid_only($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_ec_dec_icdf($4,27682,8)|0);
 $6 = $3;
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function _silk_stereo_encode_pred($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 << 24 >> 24;
 $9 = ($8*5)|0;
 $10 = $3;
 $11 = ((($10)) + 3|0);
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = (($9) + ($14))|0;
 $4 = $15;
 $16 = $2;
 $17 = $4;
 _ec_enc_icdf($16,$17,27657,8);
 $4 = 0;
 while(1) {
  $18 = $4;
  $19 = ($18|0)<(2);
  if (!($19)) {
   break;
  }
  $20 = $2;
  $21 = $3;
  $22 = $4;
  $23 = (($21) + (($22*3)|0)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  _ec_enc_icdf($20,$25,27710,8);
  $26 = $2;
  $27 = $3;
  $28 = $4;
  $29 = (($27) + (($28*3)|0)|0);
  $30 = ((($29)) + 1|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  _ec_enc_icdf($26,$32,27717,8);
  $33 = $4;
  $34 = (($33) + 1)|0;
  $4 = $34;
 }
 STACKTOP = sp;return;
}
function _silk_stereo_encode_mid_only($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $5 << 24 >> 24;
 _ec_enc_icdf($4,$6,27682,8);
 STACKTOP = sp;return;
}
function _silk_stereo_find_predictor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp + 24|0;
 $14 = sp + 20|0;
 $15 = sp + 16|0;
 $16 = sp + 12|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $7;
 $21 = $10;
 _silk_sum_sqr_shift($15,$13,$20,$21);
 $22 = $8;
 $23 = $10;
 _silk_sum_sqr_shift($16,$14,$22,$23);
 $24 = HEAP32[$13>>2]|0;
 $25 = HEAP32[$14>>2]|0;
 $26 = (_silk_max_int_269($24,$25)|0);
 $12 = $26;
 $27 = $12;
 $28 = $12;
 $29 = $28 & 1;
 $30 = (($27) + ($29))|0;
 $12 = $30;
 $31 = HEAP32[$16>>2]|0;
 $32 = $12;
 $33 = HEAP32[$14>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = $31 >> $34;
 HEAP32[$16>>2] = $35;
 $36 = HEAP32[$15>>2]|0;
 $37 = $12;
 $38 = HEAP32[$13>>2]|0;
 $39 = (($37) - ($38))|0;
 $40 = $36 >> $39;
 HEAP32[$15>>2] = $40;
 $41 = HEAP32[$15>>2]|0;
 $42 = (_silk_max_int_269($41,1)|0);
 HEAP32[$15>>2] = $42;
 $43 = $7;
 $44 = $8;
 $45 = $12;
 $46 = $10;
 $47 = (_silk_inner_prod_aligned_scale($43,$44,$45,$46)|0);
 $17 = $47;
 $48 = $17;
 $49 = HEAP32[$15>>2]|0;
 $50 = (_silk_DIV32_varQ_270($48,$49,13)|0);
 $18 = $50;
 $51 = $18;
 $52 = ($51|0)>(16384);
 if ($52) {
  $57 = 16384;
 } else {
  $53 = $18;
  $54 = ($53|0)<(-16384);
  $55 = $18;
  $56 = $54 ? -16384 : $55;
  $57 = $56;
 }
 $18 = $57;
 $58 = $18;
 $59 = $58 >> 16;
 $60 = $18;
 $61 = $60&65535;
 $62 = $61 << 16 >> 16;
 $63 = Math_imul($59, $62)|0;
 $64 = $18;
 $65 = $64 & 65535;
 $66 = $18;
 $67 = $66&65535;
 $68 = $67 << 16 >> 16;
 $69 = Math_imul($65, $68)|0;
 $70 = $69 >> 16;
 $71 = (($63) + ($70))|0;
 $19 = $71;
 $72 = $11;
 $73 = $19;
 $74 = ($73|0)>(0);
 $75 = $19;
 $76 = (0 - ($75))|0;
 $77 = $74 ? $75 : $76;
 $78 = (_silk_max_int_269($72,$77)|0);
 $11 = $78;
 $79 = $12;
 $80 = $79 >> 1;
 $12 = $80;
 $81 = $9;
 $82 = HEAP32[$81>>2]|0;
 $83 = HEAP32[$15>>2]|0;
 $84 = (_silk_SQRT_APPROX($83)|0);
 $85 = $12;
 $86 = $84 << $85;
 $87 = $9;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($86) - ($88))|0;
 $90 = $89 >> 16;
 $91 = $11;
 $92 = $91&65535;
 $93 = $92 << 16 >> 16;
 $94 = Math_imul($90, $93)|0;
 $95 = HEAP32[$15>>2]|0;
 $96 = (_silk_SQRT_APPROX($95)|0);
 $97 = $12;
 $98 = $96 << $97;
 $99 = $9;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) - ($100))|0;
 $102 = $101 & 65535;
 $103 = $11;
 $104 = $103&65535;
 $105 = $104 << 16 >> 16;
 $106 = Math_imul($102, $105)|0;
 $107 = $106 >> 16;
 $108 = (($94) + ($107))|0;
 $109 = (($82) + ($108))|0;
 $110 = $9;
 HEAP32[$110>>2] = $109;
 $111 = HEAP32[$16>>2]|0;
 $112 = $17;
 $113 = $112 >> 16;
 $114 = $18;
 $115 = $114&65535;
 $116 = $115 << 16 >> 16;
 $117 = Math_imul($113, $116)|0;
 $118 = $17;
 $119 = $118 & 65535;
 $120 = $18;
 $121 = $120&65535;
 $122 = $121 << 16 >> 16;
 $123 = Math_imul($119, $122)|0;
 $124 = $123 >> 16;
 $125 = (($117) + ($124))|0;
 $126 = $125 << 4;
 $127 = (($111) - ($126))|0;
 HEAP32[$16>>2] = $127;
 $128 = HEAP32[$16>>2]|0;
 $129 = HEAP32[$15>>2]|0;
 $130 = $129 >> 16;
 $131 = $19;
 $132 = $131&65535;
 $133 = $132 << 16 >> 16;
 $134 = Math_imul($130, $133)|0;
 $135 = HEAP32[$15>>2]|0;
 $136 = $135 & 65535;
 $137 = $19;
 $138 = $137&65535;
 $139 = $138 << 16 >> 16;
 $140 = Math_imul($136, $139)|0;
 $141 = $140 >> 16;
 $142 = (($134) + ($141))|0;
 $143 = $142 << 6;
 $144 = (($128) + ($143))|0;
 HEAP32[$16>>2] = $144;
 $145 = $9;
 $146 = ((($145)) + 4|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = HEAP32[$16>>2]|0;
 $149 = (_silk_SQRT_APPROX($148)|0);
 $150 = $12;
 $151 = $149 << $150;
 $152 = $9;
 $153 = ((($152)) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = (($151) - ($154))|0;
 $156 = $155 >> 16;
 $157 = $11;
 $158 = $157&65535;
 $159 = $158 << 16 >> 16;
 $160 = Math_imul($156, $159)|0;
 $161 = HEAP32[$16>>2]|0;
 $162 = (_silk_SQRT_APPROX($161)|0);
 $163 = $12;
 $164 = $162 << $163;
 $165 = $9;
 $166 = ((($165)) + 4|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($164) - ($167))|0;
 $169 = $168 & 65535;
 $170 = $11;
 $171 = $170&65535;
 $172 = $171 << 16 >> 16;
 $173 = Math_imul($169, $172)|0;
 $174 = $173 >> 16;
 $175 = (($160) + ($174))|0;
 $176 = (($147) + ($175))|0;
 $177 = $9;
 $178 = ((($177)) + 4|0);
 HEAP32[$178>>2] = $176;
 $179 = $9;
 $180 = ((($179)) + 4|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $9;
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)>(1);
 if ($184) {
  $185 = $9;
  $186 = HEAP32[$185>>2]|0;
  $187 = $186;
 } else {
  $187 = 1;
 }
 $188 = (_silk_DIV32_varQ_270($181,$187,14)|0);
 $189 = $6;
 HEAP32[$189>>2] = $188;
 $190 = $6;
 $191 = HEAP32[$190>>2]|0;
 $192 = ($191|0)>(32767);
 if ($192) {
  $199 = 32767;
  $198 = $6;
  HEAP32[$198>>2] = $199;
  $200 = $18;
  STACKTOP = sp;return ($200|0);
 }
 $193 = $6;
 $194 = HEAP32[$193>>2]|0;
 $195 = ($194|0)<(0);
 if ($195) {
  $199 = 0;
  $198 = $6;
  HEAP32[$198>>2] = $199;
  $200 = $18;
  STACKTOP = sp;return ($200|0);
 }
 $196 = $6;
 $197 = HEAP32[$196>>2]|0;
 $199 = $197;
 $198 = $6;
 HEAP32[$198>>2] = $199;
 $200 = $18;
 STACKTOP = sp;return ($200|0);
}
function _silk_max_int_269($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_DIV32_varQ_270($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)>(0);
 $16 = $4;
 $17 = (0 - ($16))|0;
 $18 = $15 ? $16 : $17;
 $19 = (_silk_CLZ32_272($18)|0);
 $20 = (($19) - 1)|0;
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = $21 << $22;
 $11 = $23;
 $24 = $5;
 $25 = ($24|0)>(0);
 $26 = $5;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $26 : $27;
 $29 = (_silk_CLZ32_272($28)|0);
 $30 = (($29) - 1)|0;
 $8 = $30;
 $31 = $5;
 $32 = $8;
 $33 = $31 << $32;
 $12 = $33;
 $34 = $12;
 $35 = $34 >> 16;
 $36 = (536870911 / ($35|0))&-1;
 $10 = $36;
 $37 = $11;
 $38 = $37 >> 16;
 $39 = $10;
 $40 = $39&65535;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($38, $41)|0;
 $43 = $11;
 $44 = $43 & 65535;
 $45 = $10;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $48 >> 16;
 $50 = (($42) + ($49))|0;
 $13 = $50;
 $51 = $11;
 $52 = $12;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = $13;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = tempRet0;
 $60 = (_bitshift64Ashr(($58|0),($59|0),32)|0);
 $61 = tempRet0;
 $62 = $60 << 3;
 $63 = (($51) - ($62))|0;
 $11 = $63;
 $64 = $13;
 $65 = $11;
 $66 = $65 >> 16;
 $67 = $10;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $11;
 $72 = $71 & 65535;
 $73 = $10;
 $74 = $73&65535;
 $75 = $74 << 16 >> 16;
 $76 = Math_imul($72, $75)|0;
 $77 = $76 >> 16;
 $78 = (($70) + ($77))|0;
 $79 = (($64) + ($78))|0;
 $13 = $79;
 $80 = $7;
 $81 = (29 + ($80))|0;
 $82 = $8;
 $83 = (($81) - ($82))|0;
 $84 = $6;
 $85 = (($83) - ($84))|0;
 $9 = $85;
 $86 = $9;
 $87 = ($86|0)<(0);
 $88 = $9;
 if (!($87)) {
  $130 = ($88|0)<(32);
  if ($130) {
   $131 = $13;
   $132 = $9;
   $133 = $131 >> $132;
   $3 = $133;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $3 = 0;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 }
 $89 = (0 - ($88))|0;
 $90 = -2147483648 >> $89;
 $91 = $9;
 $92 = (0 - ($91))|0;
 $93 = 2147483647 >> $92;
 $94 = ($90|0)>($93|0);
 $95 = $13;
 $96 = $9;
 $97 = (0 - ($96))|0;
 do {
  if ($94) {
   $98 = -2147483648 >> $97;
   $99 = ($95|0)>($98|0);
   if ($99) {
    $100 = $9;
    $101 = (0 - ($100))|0;
    $102 = -2147483648 >> $101;
    $129 = $102;
    break;
   }
   $103 = $13;
   $104 = $9;
   $105 = (0 - ($104))|0;
   $106 = 2147483647 >> $105;
   $107 = ($103|0)<($106|0);
   if ($107) {
    $108 = $9;
    $109 = (0 - ($108))|0;
    $110 = 2147483647 >> $109;
    $129 = $110;
    break;
   } else {
    $111 = $13;
    $129 = $111;
    break;
   }
  } else {
   $112 = 2147483647 >> $97;
   $113 = ($95|0)>($112|0);
   if ($113) {
    $114 = $9;
    $115 = (0 - ($114))|0;
    $116 = 2147483647 >> $115;
    $129 = $116;
    break;
   }
   $117 = $13;
   $118 = $9;
   $119 = (0 - ($118))|0;
   $120 = -2147483648 >> $119;
   $121 = ($117|0)<($120|0);
   if ($121) {
    $122 = $9;
    $123 = (0 - ($122))|0;
    $124 = -2147483648 >> $123;
    $129 = $124;
    break;
   } else {
    $125 = $13;
    $129 = $125;
    break;
   }
  }
 } while(0);
 $126 = $9;
 $127 = (0 - ($126))|0;
 $128 = $129 << $127;
 $3 = $128;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _silk_SQRT_APPROX($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_271($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CLZ_FRAC_271($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_272($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_273($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_272($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32_273($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_stereo_quant_pred($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $12 = 0;
 $6 = 0;
 while(1) {
  $13 = $6;
  $14 = ($13|0)<(2);
  if (!($14)) {
   break;
  }
  $10 = 2147483647;
  $4 = 0;
  L4: while(1) {
   $15 = $4;
   $16 = ($15|0)<(15);
   if (!($16)) {
    break;
   }
   $17 = $4;
   $18 = (24966 + ($17<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19 << 16 >> 16;
   $7 = $20;
   $21 = $4;
   $22 = (($21) + 1)|0;
   $23 = (24966 + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = $7;
   $27 = (($25) - ($26))|0;
   $28 = $27 >> 16;
   $29 = ($28*6554)|0;
   $30 = $4;
   $31 = (($30) + 1)|0;
   $32 = (24966 + ($31<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = $7;
   $36 = (($34) - ($35))|0;
   $37 = $36 & 65535;
   $38 = ($37*6554)|0;
   $39 = $38 >> 16;
   $40 = (($29) + ($39))|0;
   $8 = $40;
   $5 = 0;
   while(1) {
    $41 = $5;
    $42 = ($41|0)<(5);
    if (!($42)) {
     break;
    }
    $43 = $7;
    $44 = $8;
    $45 = $44&65535;
    $46 = $45 << 16 >> 16;
    $47 = $5;
    $48 = $47<<1;
    $49 = (($48) + 1)|0;
    $50 = $49&65535;
    $51 = $50 << 16 >> 16;
    $52 = Math_imul($46, $51)|0;
    $53 = (($43) + ($52))|0;
    $9 = $53;
    $54 = $2;
    $55 = $6;
    $56 = (($54) + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $9;
    $59 = (($57) - ($58))|0;
    $60 = ($59|0)>(0);
    $61 = $2;
    $62 = $6;
    $63 = (($61) + ($62<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $9;
    $66 = (($64) - ($65))|0;
    $67 = (0 - ($66))|0;
    $68 = $60 ? $66 : $67;
    $11 = $68;
    $69 = $11;
    $70 = $10;
    $71 = ($69|0)<($70|0);
    if (!($71)) {
     break L4;
    }
    $72 = $11;
    $10 = $72;
    $73 = $9;
    $12 = $73;
    $74 = $4;
    $75 = $74&255;
    $76 = $3;
    $77 = $6;
    $78 = (($76) + (($77*3)|0)|0);
    HEAP8[$78>>0] = $75;
    $79 = $5;
    $80 = $79&255;
    $81 = $3;
    $82 = $6;
    $83 = (($81) + (($82*3)|0)|0);
    $84 = ((($83)) + 1|0);
    HEAP8[$84>>0] = $80;
    $85 = $5;
    $86 = (($85) + 1)|0;
    $5 = $86;
   }
   $87 = $4;
   $88 = (($87) + 1)|0;
   $4 = $88;
  }
  $89 = $3;
  $90 = $6;
  $91 = (($89) + (($90*3)|0)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 << 24 >> 24;
  $94 = (($93|0) / 3)&-1;
  $95 = $94&255;
  $96 = $3;
  $97 = $6;
  $98 = (($96) + (($97*3)|0)|0);
  $99 = ((($98)) + 2|0);
  HEAP8[$99>>0] = $95;
  $100 = $3;
  $101 = $6;
  $102 = (($100) + (($101*3)|0)|0);
  $103 = ((($102)) + 2|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104 << 24 >> 24;
  $106 = ($105*3)|0;
  $107 = $3;
  $108 = $6;
  $109 = (($107) + (($108*3)|0)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110 << 24 >> 24;
  $112 = (($111) - ($106))|0;
  $113 = $112&255;
  HEAP8[$109>>0] = $113;
  $114 = $12;
  $115 = $2;
  $116 = $6;
  $117 = (($115) + ($116<<2)|0);
  HEAP32[$117>>2] = $114;
  $118 = $6;
  $119 = (($118) + 1)|0;
  $6 = $119;
 }
 $120 = $2;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $2;
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) - ($122))|0;
 HEAP32[$123>>2] = $125;
 STACKTOP = sp;return;
}
function _silk_encode_do_VAD_FLP($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink2 = 0, $$sink6 = 0, $$sink8 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = ((($3)) + 5128|0);
 $5 = ((($4)) + 2|0);
 (_silk_VAD_GetSA_Q8_c($2,$5)|0);
 $6 = $1;
 $7 = ((($6)) + 4556|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(13);
 $10 = $1;
 if (!($9)) {
  $32 = ((($10)) + 6116|0);
  HEAP32[$32>>2] = 0;
  $33 = $1;
  $34 = ((($33)) + 6112|0);
  HEAP32[$34>>2] = 0;
  $35 = $1;
  $36 = ((($35)) + 4768|0);
  $37 = ((($36)) + 29|0);
  HEAP8[$37>>0] = 1;
  $38 = $1;
  $39 = ((($38)) + 4752|0);
  $40 = $1;
  $$sink = 1;$$sink2 = $39;$$sink6 = $40;
  $41 = ((($$sink6)) + 5780|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($$sink2) + ($42)|0);
  HEAP8[$43>>0] = $$sink;
  STACKTOP = sp;return;
 }
 $11 = ((($10)) + 4768|0);
 $12 = ((($11)) + 29|0);
 HEAP8[$12>>0] = 0;
 $13 = $1;
 $14 = ((($13)) + 6116|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 $17 = $1;
 $18 = ((($17)) + 6116|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)<(10);
 $21 = $1;
 if ($20) {
  $$sink8 = $21;
  label = 5;
 } else {
  $22 = ((($21)) + 6116|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)>(30);
  if ($24) {
   $25 = $1;
   $26 = ((($25)) + 6116|0);
   HEAP32[$26>>2] = 10;
   $27 = $1;
   $$sink8 = $27;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $28 = ((($$sink8)) + 6112|0);
  HEAP32[$28>>2] = 0;
 }
 $29 = $1;
 $30 = ((($29)) + 4752|0);
 $31 = $1;
 $$sink = 0;$$sink2 = $30;$$sink6 = $31;
 $41 = ((($$sink6)) + 5780|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($$sink2) + ($42)|0);
 HEAP8[$43>>0] = $$sink;
 STACKTOP = sp;return;
}
function _silk_encode_frame_FLP($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 15152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(15152|0);
 $13 = sp + 12920|0;
 $22 = sp + 11608|0;
 $23 = sp + 8920|0;
 $24 = sp + 8872|0;
 $25 = sp + 8824|0;
 $26 = sp + 4444|0;
 $27 = sp + 64|0;
 $41 = sp + 8|0;
 $42 = sp + 13864|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $19 = 0;
 $33 = 0;
 $32 = 0;
 $31 = 0;
 $30 = 0;
 $40 = 0;
 $44 = $7;
 $45 = ((($44)) + 4644|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 $48 = $46 & 3;
 $49 = $48&255;
 $50 = $7;
 $51 = ((($50)) + 4768|0);
 $52 = ((($51)) + 34|0);
 HEAP8[$52>>0] = $49;
 $53 = $7;
 $54 = ((($53)) + 9356|0);
 $55 = $7;
 $56 = ((($55)) + 4616|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($54) + ($57<<2)|0);
 $20 = $58;
 $59 = $7;
 $60 = ((($59)) + 4616|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($23) + ($61<<2)|0);
 $21 = $62;
 $63 = $7;
 $64 = ((($63)) + 16|0);
 $65 = $7;
 $66 = ((($65)) + 5128|0);
 $67 = ((($66)) + 2|0);
 $68 = $7;
 $69 = ((($68)) + 4608|0);
 $70 = HEAP32[$69>>2]|0;
 _silk_LP_variable_cutoff($64,$67,$70);
 $71 = $20;
 $72 = $7;
 $73 = ((($72)) + 4600|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74*5)|0;
 $76 = (($71) + ($75<<2)|0);
 $77 = $7;
 $78 = ((($77)) + 5128|0);
 $79 = ((($78)) + 2|0);
 $80 = $7;
 $81 = ((($80)) + 4608|0);
 $82 = HEAP32[$81>>2]|0;
 _silk_short2float_array_280($76,$79,$82);
 $14 = 0;
 while(1) {
  $83 = $14;
  $84 = ($83|0)<(8);
  if (!($84)) {
   break;
  }
  $85 = $14;
  $86 = $85 & 2;
  $87 = (1 - ($86))|0;
  $88 = (+($87|0));
  $89 = $88 * 9.9999999747524271E-7;
  $90 = $20;
  $91 = $7;
  $92 = ((($91)) + 4600|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93*5)|0;
  $95 = $14;
  $96 = $7;
  $97 = ((($96)) + 4608|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 >> 3;
  $100 = Math_imul($95, $99)|0;
  $101 = (($94) + ($100))|0;
  $102 = (($90) + ($101<<2)|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $103 + $89;
  HEAPF32[$102>>2] = $104;
  $105 = $14;
  $106 = (($105) + 1)|0;
  $14 = $106;
 }
 $107 = $7;
 $108 = ((($107)) + 4712|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0);
 L5: do {
  if (!($110)) {
   $111 = $7;
   $112 = $20;
   $113 = $7;
   $114 = ((($113)) + 5124|0);
   $115 = HEAP32[$114>>2]|0;
   _silk_find_pitch_lags_FLP($111,$13,$23,$112,$115);
   $116 = $7;
   $117 = $21;
   $118 = $20;
   _silk_noise_shape_analysis_FLP($116,$13,$117,$118);
   $119 = $7;
   $120 = $20;
   $121 = $10;
   _silk_find_pred_coefs_FLP($119,$13,$23,$120,$121);
   $122 = $7;
   $123 = $10;
   _silk_process_gains_FLP($122,$13,$123);
   $124 = $7;
   $125 = $20;
   _silk_prefilter_FLP($124,$13,$22,$125);
   $126 = $7;
   $127 = $10;
   _silk_LBRR_encode_FLP($126,$13,$22,$127);
   $16 = 6;
   $37 = 256;
   $18 = 0;
   $17 = 0;
   $128 = $7;
   $129 = ((($128)) + 4768|0);
   $130 = $7;
   $131 = ((($130)) + 4604|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (_silk_gains_ID($129,$132)|0);
   $34 = $133;
   $35 = -1;
   $36 = -1;
   $134 = $9;
   dest=$24; src=$134; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $135 = $7;
   $136 = ((($135)) + 144|0);
   _memcpy(($26|0),($136|0),4380)|0;
   $137 = $7;
   $138 = ((($137)) + 4768|0);
   $139 = ((($138)) + 34|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140 << 24 >> 24;
   $28 = $141;
   $142 = $7;
   $143 = ((($142)) + 5804|0);
   $144 = HEAP16[$143>>1]|0;
   $38 = $144;
   $145 = $7;
   $146 = ((($145)) + 5800|0);
   $147 = HEAP32[$146>>2]|0;
   $39 = $147;
   $15 = 0;
   while(1) {
    $148 = $34;
    $149 = $35;
    $150 = ($148|0)==($149|0);
    do {
     if ($150) {
      $151 = $30;
      $29 = $151;
     } else {
      $152 = $34;
      $153 = $36;
      $154 = ($152|0)==($153|0);
      if ($154) {
       $155 = $31;
       $29 = $155;
       break;
      }
      $156 = $15;
      $157 = ($156|0)>(0);
      if ($157) {
       $158 = $9;
       dest=$158; src=$24; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $159 = $7;
       $160 = ((($159)) + 144|0);
       _memcpy(($160|0),($26|0),4380)|0;
       $161 = $28;
       $162 = $161&255;
       $163 = $7;
       $164 = ((($163)) + 4768|0);
       $165 = ((($164)) + 34|0);
       HEAP8[$165>>0] = $162;
       $166 = $38;
       $167 = $7;
       $168 = ((($167)) + 5804|0);
       HEAP16[$168>>1] = $166;
       $169 = $39;
       $170 = $7;
       $171 = ((($170)) + 5800|0);
       HEAP32[$171>>2] = $169;
      }
      $172 = $7;
      $173 = $7;
      $174 = ((($173)) + 4768|0);
      $175 = $7;
      $176 = ((($175)) + 144|0);
      $177 = $7;
      $178 = ((($177)) + 4804|0);
      _silk_NSQ_wrapper_FLP($172,$13,$174,$176,$178,$22);
      $179 = $7;
      $180 = $9;
      $181 = $7;
      $182 = ((($181)) + 5780|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = $10;
      _silk_encode_indices($179,$180,$183,0,$184);
      $185 = $9;
      $186 = $7;
      $187 = ((($186)) + 4768|0);
      $188 = ((($187)) + 29|0);
      $189 = HEAP8[$188>>0]|0;
      $190 = $189 << 24 >> 24;
      $191 = $7;
      $192 = ((($191)) + 4768|0);
      $193 = ((($192)) + 30|0);
      $194 = HEAP8[$193>>0]|0;
      $195 = $194 << 24 >> 24;
      $196 = $7;
      $197 = ((($196)) + 4804|0);
      $198 = $7;
      $199 = ((($198)) + 4608|0);
      $200 = HEAP32[$199>>2]|0;
      _silk_encode_pulses($185,$190,$195,$197,$200);
      $201 = $9;
      $202 = (_ec_tell_281($201)|0);
      $29 = $202;
      $203 = $12;
      $204 = ($203|0)==(0);
      $205 = $15;
      $206 = ($205|0)==(0);
      $or$cond = $204 & $206;
      if ($or$cond) {
       $207 = $29;
       $208 = $11;
       $209 = ($207|0)<=($208|0);
       if ($209) {
        break L5;
       }
      }
     }
    } while(0);
    $210 = $15;
    $211 = $16;
    $212 = ($210|0)==($211|0);
    if ($212) {
     break;
    }
    $231 = $29;
    $232 = $11;
    $233 = ($231|0)>($232|0);
    do {
     if ($233) {
      $234 = $18;
      $235 = ($234|0)==(0);
      $236 = $15;
      $237 = ($236|0)>=(2);
      $or$cond3 = $235 & $237;
      if ($or$cond3) {
       $238 = ((($13)) + 852|0);
       $239 = +HEAPF32[$238>>2];
       $240 = $239 * 1.5;
       HEAPF32[$238>>2] = $240;
       $17 = 0;
       $36 = -1;
       break;
      } else {
       $17 = 1;
       $241 = $29;
       $31 = $241;
       $242 = $37;
       $243 = $242 << 16 >> 16;
       $33 = $243;
       $244 = $34;
       $36 = $244;
       break;
      }
     } else {
      $245 = $29;
      $246 = $11;
      $247 = (($246) - 5)|0;
      $248 = ($245|0)<($247|0);
      if (!($248)) {
       break L5;
      }
      $18 = 1;
      $249 = $29;
      $30 = $249;
      $250 = $37;
      $251 = $250 << 16 >> 16;
      $32 = $251;
      $252 = $34;
      $253 = $35;
      $254 = ($252|0)!=($253|0);
      if ($254) {
       $255 = $34;
       $35 = $255;
       $256 = $9;
       dest=$25; src=$256; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $257 = $9;
       $258 = HEAP32[$257>>2]|0;
       $259 = $9;
       $260 = ((($259)) + 24|0);
       $261 = HEAP32[$260>>2]|0;
       _memcpy(($42|0),($258|0),($261|0))|0;
       $262 = $7;
       $263 = ((($262)) + 144|0);
       _memcpy(($27|0),($263|0),4380)|0;
       $264 = $7;
       $265 = ((($264)) + 7200|0);
       $266 = HEAP8[$265>>0]|0;
       $40 = $266;
      }
     }
    } while(0);
    $267 = $18;
    $268 = $17;
    $269 = $267 & $268;
    $270 = ($269|0)==(0);
    do {
     if ($270) {
      $271 = $29;
      $272 = $11;
      $273 = (($271) - ($272))|0;
      $274 = $273 << 7;
      $275 = $7;
      $276 = ((($275)) + 4608|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = (($274|0) / ($277|0))&-1;
      $279 = (($278) + 2048)|0;
      $280 = (_silk_log2lin($279)|0);
      $43 = $280;
      $281 = $43;
      $282 = (_silk_min_32($281,131072)|0);
      $43 = $282;
      $283 = $29;
      $284 = $11;
      $285 = ($283|0)>($284|0);
      if ($285) {
       $286 = $43;
       $287 = (_silk_max_32($286,85197)|0);
       $43 = $287;
      }
      $288 = $43;
      $289 = $288 >> 16;
      $290 = $37;
      $291 = $290 << 16 >> 16;
      $292 = Math_imul($289, $291)|0;
      $293 = $43;
      $294 = $293 & 65535;
      $295 = $37;
      $296 = $295 << 16 >> 16;
      $297 = Math_imul($294, $296)|0;
      $298 = $297 >> 16;
      $299 = (($292) + ($298))|0;
      $300 = $299&65535;
      $37 = $300;
     } else {
      $301 = $32;
      $302 = $33;
      $303 = $32;
      $304 = (($302) - ($303))|0;
      $305 = $11;
      $306 = $30;
      $307 = (($305) - ($306))|0;
      $308 = Math_imul($304, $307)|0;
      $309 = $31;
      $310 = $30;
      $311 = (($309) - ($310))|0;
      $312 = (($308|0) / ($311|0))&-1;
      $313 = (($301) + ($312))|0;
      $314 = $313&65535;
      $37 = $314;
      $315 = $37;
      $316 = $315 << 16 >> 16;
      $317 = $32;
      $318 = $33;
      $319 = $32;
      $320 = (($318) - ($319))|0;
      $321 = $320 >> 2;
      $322 = (($317) + ($321))|0;
      $323 = ($316|0)>($322|0);
      if ($323) {
       $324 = $32;
       $325 = $33;
       $326 = $32;
       $327 = (($325) - ($326))|0;
       $328 = $327 >> 2;
       $329 = (($324) + ($328))|0;
       $330 = $329&65535;
       $37 = $330;
       break;
      }
      $331 = $37;
      $332 = $331 << 16 >> 16;
      $333 = $33;
      $334 = $33;
      $335 = $32;
      $336 = (($334) - ($335))|0;
      $337 = $336 >> 2;
      $338 = (($333) - ($337))|0;
      $339 = ($332|0)<($338|0);
      if ($339) {
       $340 = $33;
       $341 = $33;
       $342 = $32;
       $343 = (($341) - ($342))|0;
       $344 = $343 >> 2;
       $345 = (($340) - ($344))|0;
       $346 = $345&65535;
       $37 = $346;
      }
     }
    } while(0);
    $14 = 0;
    while(1) {
     $347 = $14;
     $348 = $7;
     $349 = ((($348)) + 4604|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = ($347|0)<($350|0);
     if (!($351)) {
      break;
     }
     $352 = ((($13)) + 892|0);
     $353 = $14;
     $354 = (($352) + ($353<<2)|0);
     $355 = HEAP32[$354>>2]|0;
     $356 = $355 >> 16;
     $357 = $37;
     $358 = $357 << 16 >> 16;
     $359 = Math_imul($356, $358)|0;
     $360 = ((($13)) + 892|0);
     $361 = $14;
     $362 = (($360) + ($361<<2)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = $363 & 65535;
     $365 = $37;
     $366 = $365 << 16 >> 16;
     $367 = Math_imul($364, $366)|0;
     $368 = $367 >> 16;
     $369 = (($359) + ($368))|0;
     $370 = ($369|0)>(8388607);
     if ($370) {
      $409 = 8388607;
     } else {
      $371 = ((($13)) + 892|0);
      $372 = $14;
      $373 = (($371) + ($372<<2)|0);
      $374 = HEAP32[$373>>2]|0;
      $375 = $374 >> 16;
      $376 = $37;
      $377 = $376 << 16 >> 16;
      $378 = Math_imul($375, $377)|0;
      $379 = ((($13)) + 892|0);
      $380 = $14;
      $381 = (($379) + ($380<<2)|0);
      $382 = HEAP32[$381>>2]|0;
      $383 = $382 & 65535;
      $384 = $37;
      $385 = $384 << 16 >> 16;
      $386 = Math_imul($383, $385)|0;
      $387 = $386 >> 16;
      $388 = (($378) + ($387))|0;
      $389 = ($388|0)<(-8388608);
      if ($389) {
       $409 = -8388608;
      } else {
       $390 = ((($13)) + 892|0);
       $391 = $14;
       $392 = (($390) + ($391<<2)|0);
       $393 = HEAP32[$392>>2]|0;
       $394 = $393 >> 16;
       $395 = $37;
       $396 = $395 << 16 >> 16;
       $397 = Math_imul($394, $396)|0;
       $398 = ((($13)) + 892|0);
       $399 = $14;
       $400 = (($398) + ($399<<2)|0);
       $401 = HEAP32[$400>>2]|0;
       $402 = $401 & 65535;
       $403 = $37;
       $404 = $403 << 16 >> 16;
       $405 = Math_imul($402, $404)|0;
       $406 = $405 >> 16;
       $407 = (($397) + ($406))|0;
       $409 = $407;
      }
     }
     $408 = $409 << 8;
     $410 = $14;
     $411 = (($41) + ($410<<2)|0);
     HEAP32[$411>>2] = $408;
     $412 = $14;
     $413 = (($412) + 1)|0;
     $14 = $413;
    }
    $414 = ((($13)) + 908|0);
    $415 = HEAP8[$414>>0]|0;
    $416 = $7;
    $417 = ((($416)) + 7200|0);
    HEAP8[$417>>0] = $415;
    $418 = $7;
    $419 = ((($418)) + 4768|0);
    $420 = $7;
    $421 = ((($420)) + 7200|0);
    $422 = $10;
    $423 = ($422|0)==(2);
    $424 = $423&1;
    $425 = $7;
    $426 = ((($425)) + 4604|0);
    $427 = HEAP32[$426>>2]|0;
    _silk_gains_quant($419,$41,$421,$424,$427);
    $428 = $7;
    $429 = ((($428)) + 4768|0);
    $430 = $7;
    $431 = ((($430)) + 4604|0);
    $432 = HEAP32[$431>>2]|0;
    $433 = (_silk_gains_ID($429,$432)|0);
    $34 = $433;
    $14 = 0;
    while(1) {
     $434 = $14;
     $435 = $7;
     $436 = ((($435)) + 4604|0);
     $437 = HEAP32[$436>>2]|0;
     $438 = ($434|0)<($437|0);
     if (!($438)) {
      break;
     }
     $439 = $14;
     $440 = (($41) + ($439<<2)|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = (+($441|0));
     $443 = $442 / 65536.0;
     $444 = $14;
     $445 = (($13) + ($444<<2)|0);
     HEAPF32[$445>>2] = $443;
     $446 = $14;
     $447 = (($446) + 1)|0;
     $14 = $447;
    }
    $448 = $15;
    $449 = (($448) + 1)|0;
    $15 = $449;
   }
   $213 = $18;
   $214 = ($213|0)!=(0);
   if ($214) {
    $215 = $34;
    $216 = $35;
    $217 = ($215|0)==($216|0);
    if (!($217)) {
     $218 = $29;
     $219 = $11;
     $220 = ($218|0)>($219|0);
     if (!($220)) {
      break;
     }
    }
    $221 = $9;
    dest=$221; src=$25; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $222 = $9;
    $223 = HEAP32[$222>>2]|0;
    $224 = ((($25)) + 24|0);
    $225 = HEAP32[$224>>2]|0;
    _memcpy(($223|0),($42|0),($225|0))|0;
    $226 = $7;
    $227 = ((($226)) + 144|0);
    _memcpy(($227|0),($27|0),4380)|0;
    $228 = $40;
    $229 = $7;
    $230 = ((($229)) + 7200|0);
    HEAP8[$230>>0] = $228;
   }
  }
 } while(0);
 $450 = $7;
 $451 = ((($450)) + 9356|0);
 $452 = $7;
 $453 = ((($452)) + 9356|0);
 $454 = $7;
 $455 = ((($454)) + 4608|0);
 $456 = HEAP32[$455>>2]|0;
 $457 = (($453) + ($456<<2)|0);
 $458 = $7;
 $459 = ((($458)) + 4616|0);
 $460 = HEAP32[$459>>2]|0;
 $461 = $7;
 $462 = ((($461)) + 4600|0);
 $463 = HEAP32[$462>>2]|0;
 $464 = ($463*5)|0;
 $465 = (($460) + ($464))|0;
 $466 = $465<<2;
 _memmove(($451|0),($457|0),($466|0))|0;
 $467 = $7;
 $468 = ((($467)) + 4712|0);
 $469 = HEAP32[$468>>2]|0;
 $470 = ($469|0)!=(0);
 if ($470) {
  $471 = $8;
  HEAP32[$471>>2] = 0;
  $472 = $19;
  $6 = $472;
  $496 = $6;
  STACKTOP = sp;return ($496|0);
 } else {
  $473 = ((($13)) + 228|0);
  $474 = $7;
  $475 = ((($474)) + 4604|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (($476) - 1)|0;
  $478 = (($473) + ($477<<2)|0);
  $479 = HEAP32[$478>>2]|0;
  $480 = $7;
  $481 = ((($480)) + 4568|0);
  HEAP32[$481>>2] = $479;
  $482 = $7;
  $483 = ((($482)) + 4768|0);
  $484 = ((($483)) + 29|0);
  $485 = HEAP8[$484>>0]|0;
  $486 = $7;
  $487 = ((($486)) + 4565|0);
  HEAP8[$487>>0] = $485;
  $488 = $7;
  $489 = ((($488)) + 4696|0);
  HEAP32[$489>>2] = 0;
  $490 = $9;
  $491 = (_ec_tell_281($490)|0);
  $492 = (($491) + 7)|0;
  $493 = $492 >> 3;
  $494 = $8;
  HEAP32[$494>>2] = $493;
  $495 = $19;
  $6 = $495;
  $496 = $6;
  STACKTOP = sp;return ($496|0);
 }
 return (0)|0;
}
function _silk_short2float_array_280($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = (($7) - 1)|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (+($14<<16>>16));
  $16 = $3;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  HEAPF32[$18>>2] = $15;
  $19 = $6;
  $20 = (($19) + -1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return;
}
function _silk_LBRR_encode_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4448|0);
 $9 = sp + 4400|0;
 $10 = sp + 4384|0;
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = ((($13)) + 6132|0);
 $15 = $4;
 $16 = ((($15)) + 5780|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + (($17*36)|0)|0);
 $11 = $18;
 $19 = $4;
 $20 = ((($19)) + 6124|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $4;
 $24 = ((($23)) + 4556|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)>(77);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $4;
 $28 = ((($27)) + 4756|0);
 $29 = $4;
 $30 = ((($29)) + 5780|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) + ($31<<2)|0);
 HEAP32[$32>>2] = 1;
 $33 = $4;
 $34 = ((($33)) + 144|0);
 _memcpy(($12|0),($34|0),4380)|0;
 $35 = $11;
 $36 = $4;
 $37 = ((($36)) + 4768|0);
 dest=$35; src=$37; stop=dest+36|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $38 = $5;
 $39 = $4;
 $40 = ((($39)) + 4604|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41<<2;
 _memcpy(($10|0),($38|0),($42|0))|0;
 $43 = $4;
 $44 = ((($43)) + 5780|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  label = 5;
 } else {
  $47 = $4;
  $48 = ((($47)) + 4756|0);
  $49 = $4;
  $50 = ((($49)) + 5780|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) - 1)|0;
  $53 = (($48) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  if ($55) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $56 = $4;
  $57 = ((($56)) + 7200|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $4;
  $60 = ((($59)) + 4564|0);
  HEAP8[$60>>0] = $58;
  $61 = $4;
  $62 = ((($61)) + 6128|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $11;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = (($66) + ($63))|0;
  $68 = $67&255;
  HEAP8[$64>>0] = $68;
  $69 = $11;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = (_silk_min_int_282($71,63)|0);
  $73 = $72&255;
  $74 = $11;
  HEAP8[$74>>0] = $73;
 }
 $75 = $11;
 $76 = $4;
 $77 = ((($76)) + 4564|0);
 $78 = $7;
 $79 = ($78|0)==(2);
 $80 = $79&1;
 $81 = $4;
 $82 = ((($81)) + 4604|0);
 $83 = HEAP32[$82>>2]|0;
 _silk_gains_dequant($9,$75,$77,$80,$83);
 $8 = 0;
 while(1) {
  $84 = $8;
  $85 = $4;
  $86 = ((($85)) + 4604|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($84|0)<($87|0);
  if (!($88)) {
   break;
  }
  $89 = $8;
  $90 = (($9) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (+($91|0));
  $93 = $92 * 1.52587890625E-5;
  $94 = $5;
  $95 = $8;
  $96 = (($94) + ($95<<2)|0);
  HEAPF32[$96>>2] = $93;
  $97 = $8;
  $98 = (($97) + 1)|0;
  $8 = $98;
 }
 $99 = $4;
 $100 = $5;
 $101 = $11;
 $102 = $4;
 $103 = ((($102)) + 6240|0);
 $104 = $4;
 $105 = ((($104)) + 5780|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($103) + (($106*320)|0)|0);
 $108 = $6;
 _silk_NSQ_wrapper_FLP($99,$100,$101,$12,$107,$108);
 $109 = $5;
 $110 = $4;
 $111 = ((($110)) + 4604|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112<<2;
 _memcpy(($109|0),($10|0),($113|0))|0;
 STACKTOP = sp;return;
}
function _ec_tell_281($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (Math_clz32(($7|0))|0);
 $9 = (32 - ($8))|0;
 $10 = (($4) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _silk_min_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_max_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int_282($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_find_pitch_lags_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1792|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1792|0);
 $15 = sp + 1672|0;
 $16 = sp + 1608|0;
 $17 = sp + 1544|0;
 $18 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $20 = $5;
 $21 = ((($20)) + 4620|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = ((($23)) + 4608|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25))|0;
 $27 = $5;
 $28 = ((($27)) + 4616|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) + ($29))|0;
 $10 = $30;
 $31 = $8;
 $32 = $5;
 $33 = ((($32)) + 4616|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (0 - ($34))|0;
 $36 = (($31) + ($35<<2)|0);
 $14 = $36;
 $37 = $14;
 $38 = $10;
 $39 = (($37) + ($38<<2)|0);
 $40 = $5;
 $41 = ((($40)) + 4572|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($42))|0;
 $44 = (($39) + ($43<<2)|0);
 $13 = $44;
 $19 = $18;
 $45 = $19;
 $46 = $13;
 $47 = $5;
 $48 = ((($47)) + 4620|0);
 $49 = HEAP32[$48>>2]|0;
 _silk_apply_sine_window_FLP($45,$46,1,$49);
 $50 = $5;
 $51 = ((($50)) + 4620|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $19;
 $54 = (($53) + ($52<<2)|0);
 $19 = $54;
 $55 = $5;
 $56 = ((($55)) + 4620|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $13;
 $59 = (($58) + ($57<<2)|0);
 $13 = $59;
 $60 = $19;
 $61 = $13;
 $62 = $5;
 $63 = ((($62)) + 4572|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $5;
 $66 = ((($65)) + 4620|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 << 1;
 $69 = (($64) - ($68))|0;
 $70 = $69<<2;
 _memcpy(($60|0),($61|0),($70|0))|0;
 $71 = $5;
 $72 = ((($71)) + 4572|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $5;
 $75 = ((($74)) + 4620|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76 << 1;
 $78 = (($73) - ($77))|0;
 $79 = $19;
 $80 = (($79) + ($78<<2)|0);
 $19 = $80;
 $81 = $5;
 $82 = ((($81)) + 4572|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $5;
 $85 = ((($84)) + 4620|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86 << 1;
 $88 = (($83) - ($87))|0;
 $89 = $13;
 $90 = (($89) + ($88<<2)|0);
 $13 = $90;
 $91 = $19;
 $92 = $13;
 $93 = $5;
 $94 = ((($93)) + 4620|0);
 $95 = HEAP32[$94>>2]|0;
 _silk_apply_sine_window_FLP($91,$92,2,$95);
 $96 = $5;
 $97 = ((($96)) + 4572|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $5;
 $100 = ((($99)) + 4672|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 1)|0;
 _silk_autocorrelation_FLP($15,$18,$98,$102);
 $103 = +HEAPF32[$15>>2];
 $104 = $103 * 0.0010000000474974513;
 $105 = $104 + 1.0;
 $106 = +HEAPF32[$15>>2];
 $107 = $106 + $105;
 HEAPF32[$15>>2] = $107;
 $108 = $5;
 $109 = ((($108)) + 4672|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (+_silk_schur_FLP($17,$15,$110));
 $12 = $111;
 $112 = +HEAPF32[$15>>2];
 $113 = $12;
 $114 = $113 > 1.0;
 $115 = $12;
 $116 = $114 ? $115 : 1.0;
 $117 = $112 / $116;
 $118 = $6;
 $119 = ((($118)) + 868|0);
 HEAPF32[$119>>2] = $117;
 $120 = $5;
 $121 = ((($120)) + 4672|0);
 $122 = HEAP32[$121>>2]|0;
 _silk_k2a_FLP($16,$17,$122);
 $123 = $5;
 $124 = ((($123)) + 4672|0);
 $125 = HEAP32[$124>>2]|0;
 _silk_bwexpander_FLP($16,$125,0.99000000953674316);
 $126 = $7;
 $127 = $14;
 $128 = $10;
 $129 = $5;
 $130 = ((($129)) + 4672|0);
 $131 = HEAP32[$130>>2]|0;
 _silk_LPC_analysis_filter_FLP($126,$16,$127,$128,$131);
 $132 = $5;
 $133 = ((($132)) + 4768|0);
 $134 = ((($133)) + 29|0);
 $135 = HEAP8[$134>>0]|0;
 $136 = $135 << 24 >> 24;
 $137 = ($136|0)!=(0);
 if ($137) {
  $138 = $5;
  $139 = ((($138)) + 4696|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)==(0);
  if ($141) {
   $11 = 0.60000002384185791;
   $142 = $5;
   $143 = ((($142)) + 4672|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (+($144|0));
   $146 = 0.0040000001899898052 * $145;
   $147 = $11;
   $148 = $147 - $146;
   $11 = $148;
   $149 = $5;
   $150 = ((($149)) + 4556|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (+($151|0));
   $153 = 0.10000000149011612 * $152;
   $154 = $153 * 0.00390625;
   $155 = $11;
   $156 = $155 - $154;
   $11 = $156;
   $157 = $5;
   $158 = ((($157)) + 4565|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = $160 >> 1;
   $162 = (+($161|0));
   $163 = 0.15000000596046448 * $162;
   $164 = $11;
   $165 = $164 - $163;
   $11 = $165;
   $166 = $5;
   $167 = ((($166)) + 4744|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (+($168|0));
   $170 = 0.10000000149011612 * $169;
   $171 = $170 * 3.0517578125E-5;
   $172 = $11;
   $173 = $172 - $171;
   $11 = $173;
   $174 = $7;
   $175 = $6;
   $176 = ((($175)) + 228|0);
   $177 = $5;
   $178 = ((($177)) + 4768|0);
   $179 = ((($178)) + 26|0);
   $180 = $5;
   $181 = ((($180)) + 4768|0);
   $182 = ((($181)) + 28|0);
   $183 = $5;
   $184 = ((($183)) + 12236|0);
   $185 = $5;
   $186 = ((($185)) + 4568|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $5;
   $189 = ((($188)) + 4676|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (+($190|0));
   $192 = $191 / 65536.0;
   $193 = $11;
   $194 = $5;
   $195 = ((($194)) + 4600|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $5;
   $198 = ((($197)) + 4668|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $5;
   $201 = ((($200)) + 4604|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = $9;
   $204 = (_silk_pitch_analysis_core_FLP($174,$176,$179,$182,$184,$187,$192,$193,$196,$199,$202,$203)|0);
   $205 = ($204|0)==(0);
   $206 = $5;
   $207 = ((($206)) + 4768|0);
   $208 = ((($207)) + 29|0);
   $$sink = $205 ? 2 : 1;
   HEAP8[$208>>0] = $$sink;
   STACKTOP = sp;return;
  }
 }
 $209 = $6;
 $210 = ((($209)) + 228|0);
 ;HEAP32[$210>>2]=0|0;HEAP32[$210+4>>2]=0|0;HEAP32[$210+8>>2]=0|0;HEAP32[$210+12>>2]=0|0;
 $211 = $5;
 $212 = ((($211)) + 4768|0);
 $213 = ((($212)) + 26|0);
 HEAP16[$213>>1] = 0;
 $214 = $5;
 $215 = ((($214)) + 4768|0);
 $216 = ((($215)) + 28|0);
 HEAP8[$216>>0] = 0;
 $217 = $5;
 $218 = ((($217)) + 12236|0);
 HEAPF32[$218>>2] = 0.0;
 STACKTOP = sp;return;
}
function _silk_find_pred_coefs_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2048|0);
 $11 = sp + 1584|0;
 $12 = sp + 1568|0;
 $13 = sp + 1552|0;
 $14 = sp + 2008|0;
 $17 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $19 = $10;
  $20 = $5;
  $21 = ((($20)) + 4604|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $6;
  $25 = $10;
  $26 = (($24) + ($25<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = 1.0 / $27;
  $29 = $10;
  $30 = (($12) + ($29<<2)|0);
  HEAPF32[$30>>2] = $28;
  $31 = $10;
  $32 = (($12) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $10;
  $35 = (($12) + ($34<<2)|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $10;
  $39 = (($13) + ($38<<2)|0);
  HEAPF32[$39>>2] = $37;
  $40 = $10;
  $41 = (($40) + 1)|0;
  $10 = $41;
 }
 $42 = $5;
 $43 = ((($42)) + 4768|0);
 $44 = ((($43)) + 29|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45 << 24 >> 24;
 $47 = ($46|0)==(2);
 if ($47) {
  $48 = $6;
  $49 = ((($48)) + 144|0);
  $50 = $6;
  $51 = ((($50)) + 872|0);
  $52 = $7;
  $53 = $6;
  $54 = ((($53)) + 228|0);
  $55 = $5;
  $56 = ((($55)) + 4612|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = ((($58)) + 4604|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = ((($61)) + 4616|0);
  $63 = HEAP32[$62>>2]|0;
  _silk_find_LTP_FLP($49,$11,$51,$52,$54,$13,$57,$60,$63);
  $64 = $6;
  $65 = ((($64)) + 144|0);
  $66 = $5;
  $67 = ((($66)) + 4768|0);
  $68 = ((($67)) + 4|0);
  $69 = $5;
  $70 = ((($69)) + 4768|0);
  $71 = ((($70)) + 32|0);
  $72 = $5;
  $73 = ((($72)) + 4688|0);
  $74 = $5;
  $75 = ((($74)) + 4684|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $5;
  $78 = ((($77)) + 4680|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $5;
  $81 = ((($80)) + 4604|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $5;
  $84 = ((($83)) + 5124|0);
  $85 = HEAP32[$84>>2]|0;
  _silk_quant_LTP_gains_FLP($65,$68,$71,$73,$11,$76,$79,$82,$85);
  $86 = $5;
  $87 = $6;
  $88 = $9;
  _silk_LTP_scale_ctrl_FLP($86,$87,$88);
  $89 = $8;
  $90 = $5;
  $91 = ((($90)) + 4664|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (0 - ($92))|0;
  $94 = (($89) + ($93<<2)|0);
  $95 = $6;
  $96 = ((($95)) + 144|0);
  $97 = $6;
  $98 = ((($97)) + 228|0);
  $99 = $5;
  $100 = ((($99)) + 4612|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $5;
  $103 = ((($102)) + 4604|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $5;
  $106 = ((($105)) + 4664|0);
  $107 = HEAP32[$106>>2]|0;
  _silk_LTP_analysis_filter_FLP($17,$94,$96,$98,$12,$101,$104,$107);
 } else {
  $108 = $8;
  $109 = $5;
  $110 = ((($109)) + 4664|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (0 - ($111))|0;
  $113 = (($108) + ($112<<2)|0);
  $15 = $113;
  $16 = $17;
  $10 = 0;
  while(1) {
   $114 = $10;
   $115 = $5;
   $116 = ((($115)) + 4604|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($114|0)<($117|0);
   if (!($118)) {
    break;
   }
   $119 = $16;
   $120 = $15;
   $121 = $10;
   $122 = (($12) + ($121<<2)|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $5;
   $125 = ((($124)) + 4612|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $5;
   $128 = ((($127)) + 4664|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($126) + ($129))|0;
   _silk_scale_copy_vector_FLP($119,$120,$123,$130);
   $131 = $5;
   $132 = ((($131)) + 4612|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $5;
   $135 = ((($134)) + 4664|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) + ($136))|0;
   $138 = $16;
   $139 = (($138) + ($137<<2)|0);
   $16 = $139;
   $140 = $5;
   $141 = ((($140)) + 4612|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $15;
   $144 = (($143) + ($142<<2)|0);
   $15 = $144;
   $145 = $10;
   $146 = (($145) + 1)|0;
   $10 = $146;
  }
  $147 = $6;
  $148 = ((($147)) + 144|0);
  $149 = $5;
  $150 = ((($149)) + 4604|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($151*5)|0;
  $153 = $152<<2;
  _memset(($148|0),0,($153|0))|0;
  $154 = $6;
  $155 = ((($154)) + 872|0);
  HEAPF32[$155>>2] = 0.0;
  $156 = $5;
  $157 = ((($156)) + 4688|0);
  HEAP32[$157>>2] = 0;
 }
 $158 = $5;
 $159 = ((($158)) + 4696|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0);
 if ($161) {
  $18 = 0.0099999997764825821;
  $177 = $5;
  $178 = $18;
  _silk_find_LPC_FLP($177,$14,$17,$178);
  $179 = $5;
  $180 = $6;
  $181 = ((($180)) + 16|0);
  $182 = $5;
  $183 = ((($182)) + 4524|0);
  _silk_process_NLSFs_FLP($179,$181,$14,$183);
  $184 = $6;
  $185 = ((($184)) + 876|0);
  $186 = $6;
  $187 = ((($186)) + 16|0);
  $188 = $6;
  $189 = $5;
  $190 = ((($189)) + 4612|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $5;
  $193 = ((($192)) + 4604|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $5;
  $196 = ((($195)) + 4664|0);
  $197 = HEAP32[$196>>2]|0;
  _silk_residual_energy_FLP($185,$17,$187,$188,$191,$194,$197);
  $198 = $5;
  $199 = ((($198)) + 4524|0);
  dest=$199; src=$14; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  $162 = $6;
  $163 = ((($162)) + 872|0);
  $164 = +HEAPF32[$163>>2];
  $165 = $164 / 3.0;
  $166 = $165;
  $167 = (+Math_pow(2.0,(+$166)));
  $168 = $167;
  $169 = $168 / 1.0E+4;
  $18 = $169;
  $170 = $6;
  $171 = ((($170)) + 860|0);
  $172 = +HEAPF32[$171>>2];
  $173 = 0.75 * $172;
  $174 = 0.25 + $173;
  $175 = $18;
  $176 = $175 / $174;
  $18 = $176;
  $177 = $5;
  $178 = $18;
  _silk_find_LPC_FLP($177,$14,$17,$178);
  $179 = $5;
  $180 = $6;
  $181 = ((($180)) + 16|0);
  $182 = $5;
  $183 = ((($182)) + 4524|0);
  _silk_process_NLSFs_FLP($179,$181,$14,$183);
  $184 = $6;
  $185 = ((($184)) + 876|0);
  $186 = $6;
  $187 = ((($186)) + 16|0);
  $188 = $6;
  $189 = $5;
  $190 = ((($189)) + 4612|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $5;
  $193 = ((($192)) + 4604|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = $5;
  $196 = ((($195)) + 4664|0);
  $197 = HEAP32[$196>>2]|0;
  _silk_residual_energy_FLP($185,$17,$187,$188,$191,$194,$197);
  $198 = $5;
  $199 = ((($198)) + 4524|0);
  dest=$199; src=$14; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function _silk_LPC_analysis_filter_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $9;
 switch ($10|0) {
 case 6:  {
  $11 = $5;
  $12 = $6;
  $13 = $7;
  $14 = $8;
  _silk_LPC_analysis_filter6_FLP($11,$12,$13,$14);
  break;
 }
 case 8:  {
  $15 = $5;
  $16 = $6;
  $17 = $7;
  $18 = $8;
  _silk_LPC_analysis_filter8_FLP($15,$16,$17,$18);
  break;
 }
 case 10:  {
  $19 = $5;
  $20 = $6;
  $21 = $7;
  $22 = $8;
  _silk_LPC_analysis_filter10_FLP($19,$20,$21,$22);
  break;
 }
 case 12:  {
  $23 = $5;
  $24 = $6;
  $25 = $7;
  $26 = $8;
  _silk_LPC_analysis_filter12_FLP($23,$24,$25,$26);
  break;
 }
 case 16:  {
  $27 = $5;
  $28 = $6;
  $29 = $7;
  $30 = $8;
  _silk_LPC_analysis_filter16_FLP($27,$28,$29,$30);
  break;
 }
 default: {
 }
 }
 $31 = $5;
 $32 = $9;
 $33 = $32<<2;
 _memset(($31|0),0,($33|0))|0;
 STACKTOP = sp;return;
}
function _silk_LPC_analysis_filter6_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 6;
 while(1) {
  $11 = $8;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = (($14) + ($16<<2)|0);
  $10 = $17;
  $18 = $10;
  $19 = +HEAPF32[$18>>2];
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $10;
  $24 = ((($23)) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $22 + $29;
  $31 = $10;
  $32 = ((($31)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $5;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $30 + $37;
  $39 = $10;
  $40 = ((($39)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $5;
  $43 = ((($42)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 * $44;
  $46 = $38 + $45;
  $47 = $10;
  $48 = ((($47)) + -16|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $46 + $53;
  $55 = $10;
  $56 = ((($55)) + -20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $5;
  $59 = ((($58)) + 20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $57 * $60;
  $62 = $54 + $61;
  $9 = $62;
  $63 = $10;
  $64 = ((($63)) + 4|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $9;
  $67 = $65 - $66;
  $68 = $4;
  $69 = $8;
  $70 = (($68) + ($69<<2)|0);
  HEAPF32[$70>>2] = $67;
  $71 = $8;
  $72 = (($71) + 1)|0;
  $8 = $72;
 }
 STACKTOP = sp;return;
}
function _silk_LPC_analysis_filter8_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 8;
 while(1) {
  $11 = $8;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = (($14) + ($16<<2)|0);
  $10 = $17;
  $18 = $10;
  $19 = +HEAPF32[$18>>2];
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $10;
  $24 = ((($23)) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $22 + $29;
  $31 = $10;
  $32 = ((($31)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $5;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $30 + $37;
  $39 = $10;
  $40 = ((($39)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $5;
  $43 = ((($42)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 * $44;
  $46 = $38 + $45;
  $47 = $10;
  $48 = ((($47)) + -16|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $46 + $53;
  $55 = $10;
  $56 = ((($55)) + -20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $5;
  $59 = ((($58)) + 20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $57 * $60;
  $62 = $54 + $61;
  $63 = $10;
  $64 = ((($63)) + -24|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $5;
  $67 = ((($66)) + 24|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $65 * $68;
  $70 = $62 + $69;
  $71 = $10;
  $72 = ((($71)) + -28|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $5;
  $75 = ((($74)) + 28|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $73 * $76;
  $78 = $70 + $77;
  $9 = $78;
  $79 = $10;
  $80 = ((($79)) + 4|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $9;
  $83 = $81 - $82;
  $84 = $4;
  $85 = $8;
  $86 = (($84) + ($85<<2)|0);
  HEAPF32[$86>>2] = $83;
  $87 = $8;
  $88 = (($87) + 1)|0;
  $8 = $88;
 }
 STACKTOP = sp;return;
}
function _silk_LPC_analysis_filter10_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 10;
 while(1) {
  $11 = $8;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = (($14) + ($16<<2)|0);
  $10 = $17;
  $18 = $10;
  $19 = +HEAPF32[$18>>2];
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $10;
  $24 = ((($23)) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $22 + $29;
  $31 = $10;
  $32 = ((($31)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $5;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $30 + $37;
  $39 = $10;
  $40 = ((($39)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $5;
  $43 = ((($42)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 * $44;
  $46 = $38 + $45;
  $47 = $10;
  $48 = ((($47)) + -16|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $46 + $53;
  $55 = $10;
  $56 = ((($55)) + -20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $5;
  $59 = ((($58)) + 20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $57 * $60;
  $62 = $54 + $61;
  $63 = $10;
  $64 = ((($63)) + -24|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $5;
  $67 = ((($66)) + 24|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $65 * $68;
  $70 = $62 + $69;
  $71 = $10;
  $72 = ((($71)) + -28|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $5;
  $75 = ((($74)) + 28|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $73 * $76;
  $78 = $70 + $77;
  $79 = $10;
  $80 = ((($79)) + -32|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $81 * $84;
  $86 = $78 + $85;
  $87 = $10;
  $88 = ((($87)) + -36|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $5;
  $91 = ((($90)) + 36|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $89 * $92;
  $94 = $86 + $93;
  $9 = $94;
  $95 = $10;
  $96 = ((($95)) + 4|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $9;
  $99 = $97 - $98;
  $100 = $4;
  $101 = $8;
  $102 = (($100) + ($101<<2)|0);
  HEAPF32[$102>>2] = $99;
  $103 = $8;
  $104 = (($103) + 1)|0;
  $8 = $104;
 }
 STACKTOP = sp;return;
}
function _silk_LPC_analysis_filter12_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 12;
 while(1) {
  $11 = $8;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = (($14) + ($16<<2)|0);
  $10 = $17;
  $18 = $10;
  $19 = +HEAPF32[$18>>2];
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $10;
  $24 = ((($23)) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $22 + $29;
  $31 = $10;
  $32 = ((($31)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $5;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $30 + $37;
  $39 = $10;
  $40 = ((($39)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $5;
  $43 = ((($42)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 * $44;
  $46 = $38 + $45;
  $47 = $10;
  $48 = ((($47)) + -16|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $46 + $53;
  $55 = $10;
  $56 = ((($55)) + -20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $5;
  $59 = ((($58)) + 20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $57 * $60;
  $62 = $54 + $61;
  $63 = $10;
  $64 = ((($63)) + -24|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $5;
  $67 = ((($66)) + 24|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $65 * $68;
  $70 = $62 + $69;
  $71 = $10;
  $72 = ((($71)) + -28|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $5;
  $75 = ((($74)) + 28|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $73 * $76;
  $78 = $70 + $77;
  $79 = $10;
  $80 = ((($79)) + -32|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $81 * $84;
  $86 = $78 + $85;
  $87 = $10;
  $88 = ((($87)) + -36|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $5;
  $91 = ((($90)) + 36|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $89 * $92;
  $94 = $86 + $93;
  $95 = $10;
  $96 = ((($95)) + -40|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $5;
  $99 = ((($98)) + 40|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $97 * $100;
  $102 = $94 + $101;
  $103 = $10;
  $104 = ((($103)) + -44|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $5;
  $107 = ((($106)) + 44|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $105 * $108;
  $110 = $102 + $109;
  $9 = $110;
  $111 = $10;
  $112 = ((($111)) + 4|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $9;
  $115 = $113 - $114;
  $116 = $4;
  $117 = $8;
  $118 = (($116) + ($117<<2)|0);
  HEAPF32[$118>>2] = $115;
  $119 = $8;
  $120 = (($119) + 1)|0;
  $8 = $120;
 }
 STACKTOP = sp;return;
}
function _silk_LPC_analysis_filter16_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0;
 var $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0;
 var $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0;
 var $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 16;
 while(1) {
  $11 = $8;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $8;
  $16 = (($15) - 1)|0;
  $17 = (($14) + ($16<<2)|0);
  $10 = $17;
  $18 = $10;
  $19 = +HEAPF32[$18>>2];
  $20 = $5;
  $21 = +HEAPF32[$20>>2];
  $22 = $19 * $21;
  $23 = $10;
  $24 = ((($23)) + -4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $25 * $28;
  $30 = $22 + $29;
  $31 = $10;
  $32 = ((($31)) + -8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $5;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $33 * $36;
  $38 = $30 + $37;
  $39 = $10;
  $40 = ((($39)) + -12|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $5;
  $43 = ((($42)) + 12|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $41 * $44;
  $46 = $38 + $45;
  $47 = $10;
  $48 = ((($47)) + -16|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 16|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $49 * $52;
  $54 = $46 + $53;
  $55 = $10;
  $56 = ((($55)) + -20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $5;
  $59 = ((($58)) + 20|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $57 * $60;
  $62 = $54 + $61;
  $63 = $10;
  $64 = ((($63)) + -24|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $5;
  $67 = ((($66)) + 24|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $65 * $68;
  $70 = $62 + $69;
  $71 = $10;
  $72 = ((($71)) + -28|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $5;
  $75 = ((($74)) + 28|0);
  $76 = +HEAPF32[$75>>2];
  $77 = $73 * $76;
  $78 = $70 + $77;
  $79 = $10;
  $80 = ((($79)) + -32|0);
  $81 = +HEAPF32[$80>>2];
  $82 = $5;
  $83 = ((($82)) + 32|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $81 * $84;
  $86 = $78 + $85;
  $87 = $10;
  $88 = ((($87)) + -36|0);
  $89 = +HEAPF32[$88>>2];
  $90 = $5;
  $91 = ((($90)) + 36|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $89 * $92;
  $94 = $86 + $93;
  $95 = $10;
  $96 = ((($95)) + -40|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $5;
  $99 = ((($98)) + 40|0);
  $100 = +HEAPF32[$99>>2];
  $101 = $97 * $100;
  $102 = $94 + $101;
  $103 = $10;
  $104 = ((($103)) + -44|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $5;
  $107 = ((($106)) + 44|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $105 * $108;
  $110 = $102 + $109;
  $111 = $10;
  $112 = ((($111)) + -48|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $5;
  $115 = ((($114)) + 48|0);
  $116 = +HEAPF32[$115>>2];
  $117 = $113 * $116;
  $118 = $110 + $117;
  $119 = $10;
  $120 = ((($119)) + -52|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $5;
  $123 = ((($122)) + 52|0);
  $124 = +HEAPF32[$123>>2];
  $125 = $121 * $124;
  $126 = $118 + $125;
  $127 = $10;
  $128 = ((($127)) + -56|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $5;
  $131 = ((($130)) + 56|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $129 * $132;
  $134 = $126 + $133;
  $135 = $10;
  $136 = ((($135)) + -60|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $5;
  $139 = ((($138)) + 60|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $137 * $140;
  $142 = $134 + $141;
  $9 = $142;
  $143 = $10;
  $144 = ((($143)) + 4|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $9;
  $147 = $145 - $146;
  $148 = $4;
  $149 = $8;
  $150 = (($148) + ($149<<2)|0);
  HEAPF32[$150>>2] = $147;
  $151 = $8;
  $152 = (($151) + 1)|0;
  $8 = $152;
 }
 STACKTOP = sp;return;
}
function _silk_LTP_analysis_filter_FLP($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp + 20|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $24 = $9;
 $16 = $24;
 $25 = $8;
 $19 = $25;
 $21 = 0;
 while(1) {
  $26 = $21;
  $27 = $14;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $16;
  $30 = $11;
  $31 = $21;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (0 - ($33))|0;
  $35 = (($29) + ($34<<2)|0);
  $17 = $35;
  $36 = $12;
  $37 = $21;
  $38 = (($36) + ($37<<2)|0);
  $39 = +HEAPF32[$38>>2];
  $20 = $39;
  $22 = 0;
  while(1) {
   $40 = $22;
   $41 = ($40|0)<(5);
   if (!($41)) {
    break;
   }
   $42 = $10;
   $43 = $21;
   $44 = ($43*5)|0;
   $45 = $22;
   $46 = (($44) + ($45))|0;
   $47 = (($42) + ($46<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = $22;
   $50 = (($18) + ($49<<2)|0);
   HEAPF32[$50>>2] = $48;
   $51 = $22;
   $52 = (($51) + 1)|0;
   $22 = $52;
  }
  $22 = 0;
  while(1) {
   $53 = $22;
   $54 = $13;
   $55 = $15;
   $56 = (($54) + ($55))|0;
   $57 = ($53|0)<($56|0);
   if (!($57)) {
    break;
   }
   $58 = $16;
   $59 = $22;
   $60 = (($58) + ($59<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $19;
   $63 = $22;
   $64 = (($62) + ($63<<2)|0);
   HEAPF32[$64>>2] = $61;
   $23 = 0;
   while(1) {
    $65 = $23;
    $66 = ($65|0)<(5);
    if (!($66)) {
     break;
    }
    $67 = $23;
    $68 = (($18) + ($67<<2)|0);
    $69 = +HEAPF32[$68>>2];
    $70 = $17;
    $71 = $23;
    $72 = (2 - ($71))|0;
    $73 = (($70) + ($72<<2)|0);
    $74 = +HEAPF32[$73>>2];
    $75 = $69 * $74;
    $76 = $19;
    $77 = $22;
    $78 = (($76) + ($77<<2)|0);
    $79 = +HEAPF32[$78>>2];
    $80 = $79 - $75;
    HEAPF32[$78>>2] = $80;
    $81 = $23;
    $82 = (($81) + 1)|0;
    $23 = $82;
   }
   $83 = $20;
   $84 = $19;
   $85 = $22;
   $86 = (($84) + ($85<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $87 * $83;
   HEAPF32[$86>>2] = $88;
   $89 = $17;
   $90 = ((($89)) + 4|0);
   $17 = $90;
   $91 = $22;
   $92 = (($91) + 1)|0;
   $22 = $92;
  }
  $93 = $13;
  $94 = $15;
  $95 = (($93) + ($94))|0;
  $96 = $19;
  $97 = (($96) + ($95<<2)|0);
  $19 = $97;
  $98 = $13;
  $99 = $16;
  $100 = (($99) + ($98<<2)|0);
  $16 = $100;
  $101 = $21;
  $102 = (($101) + 1)|0;
  $21 = $102;
 }
 STACKTOP = sp;return;
}
function _silk_LTP_scale_ctrl_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = ($7|0)==(0);
 $9 = $3;
 if ($8) {
  $10 = ((($9)) + 4640|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = ((($12)) + 5776|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($11) + ($14))|0;
  $6 = $15;
  $16 = $6;
  $17 = (+($16|0));
  $18 = $4;
  $19 = ((($18)) + 872|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $17 * $20;
  $22 = $21 * 0.10000000149011612;
  $23 = $22 > 2.0;
  if ($23) {
   $40 = 2.0;
  } else {
   $24 = $6;
   $25 = (+($24|0));
   $26 = $4;
   $27 = ((($26)) + 872|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $25 * $28;
   $30 = $29 * 0.10000000149011612;
   $31 = $30 < 0.0;
   if ($31) {
    $40 = 0.0;
   } else {
    $32 = $6;
    $33 = (+($32|0));
    $34 = $4;
    $35 = ((($34)) + 872|0);
    $36 = +HEAPF32[$35>>2];
    $37 = $33 * $36;
    $38 = $37 * 0.10000000149011612;
    $40 = $38;
   }
  }
  $39 = (~~(($40)));
  $41 = $3;
  $$sink = $39;$$sink3 = $41;
 } else {
  $$sink = 0;$$sink3 = $9;
 }
 $42 = ((($$sink3)) + 4768|0);
 $43 = ((($42)) + 33|0);
 HEAP8[$43>>0] = $$sink;
 $44 = $3;
 $45 = ((($44)) + 4768|0);
 $46 = ((($45)) + 33|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 << 24 >> 24;
 $49 = (25006 + ($48<<1)|0);
 $50 = HEAP16[$49>>1]|0;
 $51 = (+($50<<16>>16));
 $52 = $51 / 16384.0;
 $53 = $4;
 $54 = ((($53)) + 224|0);
 HEAPF32[$54>>2] = $52;
 STACKTOP = sp;return;
}
function _silk_noise_shape_analysis_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0;
 var $19 = 0.0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0;
 var $208 = 0.0, $209 = 0.0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0;
 var $299 = 0.0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0.0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0.0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0.0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0.0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0;
 var $515 = 0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0.0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0.0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0;
 var $551 = 0, $552 = 0, $553 = 0.0, $554 = 0.0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0.0, $560 = 0.0, $561 = 0.0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0.0, $570 = 0.0, $571 = 0.0, $572 = 0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0.0, $577 = 0.0, $578 = 0.0, $579 = 0.0, $58 = 0.0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0.0, $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0.0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0.0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0.0, $602 = 0.0, $603 = 0, $604 = 0;
 var $605 = 0.0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0.0, $610 = 0.0, $611 = 0, $612 = 0, $613 = 0.0, $614 = 0.0, $615 = 0.0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0.0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0.0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0.0, $631 = 0.0, $632 = 0.0, $633 = 0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0, $638 = 0, $639 = 0.0, $64 = 0.0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1152|0);
 $28 = sp + 88|0;
 $29 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $35 = $4;
 $36 = ((($35)) + 7200|0);
 $8 = $36;
 $37 = $7;
 $38 = $4;
 $39 = ((($38)) + 4624|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (0 - ($40))|0;
 $42 = (($37) + ($41<<2)|0);
 $30 = $42;
 $43 = $4;
 $44 = ((($43)) + 4748|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (+($45|0));
 $47 = $46 * 0.0078125;
 $11 = $47;
 $48 = $4;
 $49 = ((($48)) + 4728|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $4;
 $52 = ((($51)) + 4728|0);
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($50) + ($54))|0;
 $56 = (+($55|0));
 $57 = 0.5 * $56;
 $58 = $57 * 3.0517578125E-5;
 $59 = $5;
 $60 = ((($59)) + 856|0);
 HEAPF32[$60>>2] = $58;
 $61 = $11;
 $62 = $61 - 20.0;
 $63 = 0.25 * $62;
 $64 = (+_silk_sigmoid($63));
 $65 = $5;
 $66 = ((($65)) + 860|0);
 HEAPF32[$66>>2] = $64;
 $67 = $4;
 $68 = ((($67)) + 4708|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)==(0);
 if ($70) {
  $71 = $4;
  $72 = ((($71)) + 4556|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (+($73|0));
  $75 = $74 * 0.00390625;
  $76 = 1.0 - $75;
  $26 = $76;
  $77 = $5;
  $78 = ((($77)) + 860|0);
  $79 = +HEAPF32[$78>>2];
  $80 = 2.0 * $79;
  $81 = $5;
  $82 = ((($81)) + 856|0);
  $83 = +HEAPF32[$82>>2];
  $84 = 0.5 * $83;
  $85 = 0.5 + $84;
  $86 = $80 * $85;
  $87 = $26;
  $88 = $86 * $87;
  $89 = $26;
  $90 = $88 * $89;
  $91 = $11;
  $92 = $91 - $90;
  $11 = $92;
 }
 $93 = $4;
 $94 = ((($93)) + 4768|0);
 $95 = ((($94)) + 29|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96 << 24 >> 24;
 $98 = ($97|0)==(2);
 $99 = $4;
 if ($98) {
  $100 = ((($99)) + 12236|0);
  $101 = +HEAPF32[$100>>2];
  $102 = 2.0 * $101;
  $103 = $11;
  $104 = $103 + $102;
  $11 = $104;
 } else {
  $105 = ((($99)) + 4748|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (+($106|0));
  $108 = -0.40000000596046448 * $107;
  $109 = $108 * 0.0078125;
  $110 = $109 + 6.0;
  $111 = $5;
  $112 = ((($111)) + 856|0);
  $113 = +HEAPF32[$112>>2];
  $114 = 1.0 - $113;
  $115 = $110 * $114;
  $116 = $11;
  $117 = $116 + $115;
  $11 = $117;
 }
 $118 = $4;
 $119 = ((($118)) + 4768|0);
 $120 = ((($119)) + 29|0);
 $121 = HEAP8[$120>>0]|0;
 $122 = $121 << 24 >> 24;
 $123 = ($122|0)==(2);
 $124 = $4;
 if ($123) {
  $125 = ((($124)) + 4768|0);
  $126 = ((($125)) + 30|0);
  HEAP8[$126>>0] = 0;
  $127 = $5;
  $128 = ((($127)) + 864|0);
  HEAPF32[$128>>2] = 0.0;
 } else {
  $129 = ((($124)) + 4600|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130<<1;
  $10 = $131;
  $19 = 0.0;
  $18 = 0.0;
  $132 = $6;
  $31 = $132;
  $9 = 0;
  while(1) {
   $133 = $9;
   $134 = $4;
   $135 = ((($134)) + 4604|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136&65535;
   $138 = $137 << 16 >> 16;
   $139 = ($138*5)|0;
   $140 = (($139|0) / 2)&-1;
   $141 = ($133|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = $10;
   $143 = (+($142|0));
   $144 = $31;
   $145 = $10;
   $146 = (+_silk_energy_FLP($144,$145));
   $147 = $146;
   $148 = $143 + $147;
   $15 = $148;
   $149 = $15;
   $150 = $149;
   $151 = (+_silk_log2($150));
   $17 = $151;
   $152 = $9;
   $153 = ($152|0)>(0);
   if ($153) {
    $154 = $17;
    $155 = $18;
    $156 = $154 - $155;
    $157 = $156;
    $158 = (+Math_abs((+$157)));
    $159 = $158;
    $160 = $19;
    $161 = $160 + $159;
    $19 = $161;
   }
   $162 = $17;
   $18 = $162;
   $163 = $10;
   $164 = $31;
   $165 = (($164) + ($163<<2)|0);
   $31 = $165;
   $166 = $9;
   $167 = (($166) + 1)|0;
   $9 = $167;
  }
  $168 = $19;
  $169 = $168 - 5.0;
  $170 = 0.40000000596046448 * $169;
  $171 = (+_silk_sigmoid($170));
  $172 = $5;
  $173 = ((($172)) + 864|0);
  HEAPF32[$173>>2] = $171;
  $174 = $5;
  $175 = ((($174)) + 864|0);
  $176 = +HEAPF32[$175>>2];
  $177 = $176 > 0.75;
  $178 = $4;
  $179 = ((($178)) + 4768|0);
  $180 = ((($179)) + 30|0);
  $$sink = $177 ? 0 : 1;
  HEAP8[$180>>0] = $$sink;
  $181 = $5;
  $182 = ((($181)) + 864|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $183 - 0.5;
  $185 = 2.0 * $184;
  $186 = $11;
  $187 = $186 + $185;
  $11 = $187;
 }
 $188 = $5;
 $189 = ((($188)) + 868|0);
 $190 = +HEAPF32[$189>>2];
 $191 = 0.0010000000474974513 * $190;
 $25 = $191;
 $192 = $25;
 $193 = $25;
 $194 = $192 * $193;
 $195 = 1.0 + $194;
 $196 = 0.94999998807907104 / $195;
 $22 = $196;
 $21 = $196;
 $197 = $5;
 $198 = ((($197)) + 860|0);
 $199 = +HEAPF32[$198>>2];
 $200 = 0.75 * $199;
 $201 = 1.0 - $200;
 $202 = 0.0099999997764825821 * $201;
 $20 = $202;
 $203 = $20;
 $204 = $21;
 $205 = $204 - $203;
 $21 = $205;
 $206 = $20;
 $207 = $22;
 $208 = $207 + $206;
 $22 = $208;
 $209 = $22;
 $210 = $21;
 $211 = $210 / $209;
 $21 = $211;
 $212 = $4;
 $213 = ((($212)) + 4704|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)>(0);
 if ($215) {
  $216 = $4;
  $217 = ((($216)) + 4704|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (+($218|0));
  $220 = $219 / 65536.0;
  $221 = $5;
  $222 = ((($221)) + 860|0);
  $223 = +HEAPF32[$222>>2];
  $224 = 0.0099999997764825821 * $223;
  $225 = $220 + $224;
  $27 = $225;
 } else {
  $27 = 0.0;
 }
 $9 = 0;
 while(1) {
  $226 = $9;
  $227 = $4;
  $228 = ((($227)) + 4604|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($226|0)<($229|0);
  if (!($230)) {
   break;
  }
  $231 = $4;
  $232 = ((($231)) + 4600|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = ($233*3)|0;
  $34 = $234;
  $235 = $4;
  $236 = ((($235)) + 4628|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $34;
  $239 = (($237) - ($238))|0;
  $240 = (($239|0) / 2)&-1;
  $33 = $240;
  $241 = $30;
  $242 = $33;
  _silk_apply_sine_window_FLP($28,$241,1,$242);
  $243 = $33;
  $32 = $243;
  $244 = $32;
  $245 = (($28) + ($244<<2)|0);
  $246 = $30;
  $247 = $32;
  $248 = (($246) + ($247<<2)|0);
  $249 = $34;
  $250 = $249<<2;
  _memcpy(($245|0),($248|0),($250|0))|0;
  $251 = $34;
  $252 = $32;
  $253 = (($252) + ($251))|0;
  $32 = $253;
  $254 = $32;
  $255 = (($28) + ($254<<2)|0);
  $256 = $30;
  $257 = $32;
  $258 = (($256) + ($257<<2)|0);
  $259 = $33;
  _silk_apply_sine_window_FLP($255,$258,2,$259);
  $260 = $4;
  $261 = ((($260)) + 4612|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = $30;
  $264 = (($263) + ($262<<2)|0);
  $30 = $264;
  $265 = $4;
  $266 = ((($265)) + 4704|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = ($267|0)>(0);
  if ($268) {
   $269 = $27;
   $270 = $4;
   $271 = ((($270)) + 4628|0);
   $272 = HEAP32[$271>>2]|0;
   $273 = $4;
   $274 = ((($273)) + 4660|0);
   $275 = HEAP32[$274>>2]|0;
   _silk_warped_autocorrelation_FLP($29,$28,$269,$272,$275);
  } else {
   $276 = $4;
   $277 = ((($276)) + 4628|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = $4;
   $280 = ((($279)) + 4660|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = (($281) + 1)|0;
   _silk_autocorrelation_FLP($29,$28,$278,$282);
  }
  $283 = +HEAPF32[$29>>2];
  $284 = $283 * 4.9999998736893758E-5;
  $285 = +HEAPF32[$29>>2];
  $286 = $285 + $284;
  HEAPF32[$29>>2] = $286;
  $287 = $5;
  $288 = ((($287)) + 500|0);
  $289 = $9;
  $290 = $289<<4;
  $291 = (($288) + ($290<<2)|0);
  $292 = $4;
  $293 = ((($292)) + 4660|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (+_silk_levinsondurbin_FLP($291,$29,$294));
  $15 = $295;
  $296 = $15;
  $297 = $296;
  $298 = (+Math_sqrt((+$297)));
  $299 = $298;
  $300 = $5;
  $301 = $9;
  $302 = (($300) + ($301<<2)|0);
  HEAPF32[$302>>2] = $299;
  $303 = $4;
  $304 = ((($303)) + 4704|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = ($305|0)>(0);
  if ($306) {
   $307 = $5;
   $308 = ((($307)) + 500|0);
   $309 = $9;
   $310 = $309<<4;
   $311 = (($308) + ($310<<2)|0);
   $312 = $27;
   $313 = $4;
   $314 = ((($313)) + 4660|0);
   $315 = HEAP32[$314>>2]|0;
   $316 = (+_warped_gain($311,$312,$315));
   $317 = $5;
   $318 = $9;
   $319 = (($317) + ($318<<2)|0);
   $320 = +HEAPF32[$319>>2];
   $321 = $320 * $316;
   HEAPF32[$319>>2] = $321;
  }
  $322 = $5;
  $323 = ((($322)) + 500|0);
  $324 = $9;
  $325 = $324<<4;
  $326 = (($323) + ($325<<2)|0);
  $327 = $4;
  $328 = ((($327)) + 4660|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = $22;
  _silk_bwexpander_FLP($326,$329,$330);
  $331 = $5;
  $332 = ((($331)) + 244|0);
  $333 = $9;
  $334 = $333<<4;
  $335 = (($332) + ($334<<2)|0);
  $336 = $5;
  $337 = ((($336)) + 500|0);
  $338 = $9;
  $339 = $338<<4;
  $340 = (($337) + ($339<<2)|0);
  $341 = $4;
  $342 = ((($341)) + 4660|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $343<<2;
  _memcpy(($335|0),($340|0),($344|0))|0;
  $345 = $5;
  $346 = ((($345)) + 244|0);
  $347 = $9;
  $348 = $347<<4;
  $349 = (($346) + ($348<<2)|0);
  $350 = $4;
  $351 = ((($350)) + 4660|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = $21;
  _silk_bwexpander_FLP($349,$352,$353);
  $354 = $5;
  $355 = ((($354)) + 500|0);
  $356 = $9;
  $357 = $356<<4;
  $358 = (($355) + ($357<<2)|0);
  $359 = $4;
  $360 = ((($359)) + 4660|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = (+_silk_LPC_inverse_pred_gain_FLP($358,$361));
  $16 = $362;
  $363 = $5;
  $364 = ((($363)) + 244|0);
  $365 = $9;
  $366 = $365<<4;
  $367 = (($364) + ($366<<2)|0);
  $368 = $4;
  $369 = ((($368)) + 4660|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (+_silk_LPC_inverse_pred_gain_FLP($367,$370));
  $15 = $371;
  $372 = $16;
  $373 = $15;
  $374 = $372 / $373;
  $375 = 1.0 - $374;
  $376 = 0.69999998807907104 * $375;
  $377 = 1.0 - $376;
  $378 = $5;
  $379 = ((($378)) + 788|0);
  $380 = $9;
  $381 = (($379) + ($380<<2)|0);
  HEAPF32[$381>>2] = $377;
  $382 = $5;
  $383 = ((($382)) + 500|0);
  $384 = $9;
  $385 = $384<<4;
  $386 = (($383) + ($385<<2)|0);
  $387 = $5;
  $388 = ((($387)) + 244|0);
  $389 = $9;
  $390 = $389<<4;
  $391 = (($388) + ($390<<2)|0);
  $392 = $27;
  $393 = $4;
  $394 = ((($393)) + 4660|0);
  $395 = HEAP32[$394>>2]|0;
  _warped_true2monic_coefs($386,$391,$392,3.999000072479248,$395);
  $396 = $9;
  $397 = (($396) + 1)|0;
  $9 = $397;
 }
 $398 = $11;
 $399 = -0.15999999642372131 * $398;
 $400 = $399;
 $401 = (+Math_pow(2.0,(+$400)));
 $402 = $401;
 $23 = $402;
 $403 = (+Math_pow(2.0,0.31999999284744263));
 $404 = $403;
 $24 = $404;
 $9 = 0;
 while(1) {
  $405 = $9;
  $406 = $4;
  $407 = ((($406)) + 4604|0);
  $408 = HEAP32[$407>>2]|0;
  $409 = ($405|0)<($408|0);
  if (!($409)) {
   break;
  }
  $410 = $23;
  $411 = $5;
  $412 = $9;
  $413 = (($411) + ($412<<2)|0);
  $414 = +HEAPF32[$413>>2];
  $415 = $414 * $410;
  HEAPF32[$413>>2] = $415;
  $416 = $24;
  $417 = $5;
  $418 = $9;
  $419 = (($417) + ($418<<2)|0);
  $420 = +HEAPF32[$419>>2];
  $421 = $420 + $416;
  HEAPF32[$419>>2] = $421;
  $422 = $9;
  $423 = (($422) + 1)|0;
  $9 = $423;
 }
 $424 = $5;
 $425 = ((($424)) + 860|0);
 $426 = +HEAPF32[$425>>2];
 $427 = $426 * 0.10000000149011612;
 $428 = 1.0499999523162842 + $427;
 $23 = $428;
 $9 = 0;
 while(1) {
  $429 = $9;
  $430 = $4;
  $431 = ((($430)) + 4604|0);
  $432 = HEAP32[$431>>2]|0;
  $433 = ($429|0)<($432|0);
  if (!($433)) {
   break;
  }
  $434 = $23;
  $435 = $5;
  $436 = ((($435)) + 788|0);
  $437 = $9;
  $438 = (($436) + ($437<<2)|0);
  $439 = +HEAPF32[$438>>2];
  $440 = $439 * $434;
  HEAPF32[$438>>2] = $440;
  $441 = $9;
  $442 = (($441) + 1)|0;
  $9 = $442;
 }
 $443 = $4;
 $444 = ((($443)) + 4728|0);
 $445 = HEAP32[$444>>2]|0;
 $446 = (+($445|0));
 $447 = $446 * 3.0517578125E-5;
 $448 = $447 - 1.0;
 $449 = 0.5 * $448;
 $450 = 1.0 + $449;
 $451 = 4.0 * $450;
 $25 = $451;
 $452 = $4;
 $453 = ((($452)) + 4556|0);
 $454 = HEAP32[$453>>2]|0;
 $455 = (+($454|0));
 $456 = $455 * 0.00390625;
 $457 = $25;
 $458 = $457 * $456;
 $25 = $458;
 $459 = $4;
 $460 = ((($459)) + 4768|0);
 $461 = ((($460)) + 29|0);
 $462 = HEAP8[$461>>0]|0;
 $463 = $462 << 24 >> 24;
 $464 = ($463|0)==(2);
 if ($464) {
  $9 = 0;
  while(1) {
   $465 = $9;
   $466 = $4;
   $467 = ((($466)) + 4604|0);
   $468 = HEAP32[$467>>2]|0;
   $469 = ($465|0)<($468|0);
   $470 = $4;
   if (!($469)) {
    break;
   }
   $471 = ((($470)) + 4600|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = (+($472|0));
   $474 = 0.20000000298023224 / $473;
   $475 = $5;
   $476 = ((($475)) + 228|0);
   $477 = $9;
   $478 = (($476) + ($477<<2)|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = (+($479|0));
   $481 = 3.0 / $480;
   $482 = $474 + $481;
   $26 = $482;
   $483 = $26;
   $484 = -1.0 + $483;
   $485 = $5;
   $486 = ((($485)) + 756|0);
   $487 = $9;
   $488 = (($486) + ($487<<2)|0);
   HEAPF32[$488>>2] = $484;
   $489 = $26;
   $490 = 1.0 - $489;
   $491 = $26;
   $492 = $25;
   $493 = $491 * $492;
   $494 = $490 - $493;
   $495 = $5;
   $496 = ((($495)) + 772|0);
   $497 = $9;
   $498 = (($496) + ($497<<2)|0);
   HEAPF32[$498>>2] = $494;
   $499 = $9;
   $500 = (($499) + 1)|0;
   $9 = $500;
  }
  $501 = ((($470)) + 4556|0);
  $502 = HEAP32[$501>>2]|0;
  $503 = (+($502|0));
  $504 = 0.26249998807907104 * $503;
  $505 = $504 * 0.00390625;
  $506 = -0.25 - $505;
  $14 = $506;
 } else {
  $507 = $4;
  $508 = ((($507)) + 4600|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = (+($509|0));
  $511 = 1.2999999523162842 / $510;
  $26 = $511;
  $512 = $26;
  $513 = -1.0 + $512;
  $514 = $5;
  $515 = ((($514)) + 756|0);
  HEAPF32[$515>>2] = $513;
  $516 = $26;
  $517 = 1.0 - $516;
  $518 = $26;
  $519 = $25;
  $520 = $518 * $519;
  $521 = $520 * 0.60000002384185791;
  $522 = $517 - $521;
  $523 = $5;
  $524 = ((($523)) + 772|0);
  HEAPF32[$524>>2] = $522;
  $9 = 1;
  while(1) {
   $525 = $9;
   $526 = $4;
   $527 = ((($526)) + 4604|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = ($525|0)<($528|0);
   if (!($529)) {
    break;
   }
   $530 = $5;
   $531 = ((($530)) + 756|0);
   $532 = +HEAPF32[$531>>2];
   $533 = $5;
   $534 = ((($533)) + 756|0);
   $535 = $9;
   $536 = (($534) + ($535<<2)|0);
   HEAPF32[$536>>2] = $532;
   $537 = $5;
   $538 = ((($537)) + 772|0);
   $539 = +HEAPF32[$538>>2];
   $540 = $5;
   $541 = ((($540)) + 772|0);
   $542 = $9;
   $543 = (($541) + ($542<<2)|0);
   HEAPF32[$543>>2] = $539;
   $544 = $9;
   $545 = (($544) + 1)|0;
   $9 = $545;
  }
  $14 = -0.25;
 }
 $546 = $5;
 $547 = ((($546)) + 860|0);
 $548 = +HEAPF32[$547>>2];
 $549 = 1.0 - $548;
 $550 = 0.10000000149011612 * $549;
 $551 = $4;
 $552 = ((($551)) + 12236|0);
 $553 = +HEAPF32[$552>>2];
 $554 = $550 * $553;
 $12 = $554;
 $555 = $5;
 $556 = ((($555)) + 856|0);
 $557 = +HEAPF32[$556>>2];
 $558 = 1.0 - $557;
 $559 = 0.10000000149011612 * $558;
 $560 = $12;
 $561 = $560 + $559;
 $12 = $561;
 $562 = $4;
 $563 = ((($562)) + 4768|0);
 $564 = ((($563)) + 29|0);
 $565 = HEAP8[$564>>0]|0;
 $566 = $565 << 24 >> 24;
 $567 = ($566|0)==(2);
 if ($567) {
  $13 = 0.30000001192092896;
  $568 = $5;
  $569 = ((($568)) + 860|0);
  $570 = +HEAPF32[$569>>2];
  $571 = 1.0 - $570;
  $572 = $5;
  $573 = ((($572)) + 856|0);
  $574 = +HEAPF32[$573>>2];
  $575 = $571 * $574;
  $576 = 1.0 - $575;
  $577 = 0.20000000298023224 * $576;
  $578 = $13;
  $579 = $578 + $577;
  $13 = $579;
  $580 = $4;
  $581 = ((($580)) + 12236|0);
  $582 = +HEAPF32[$581>>2];
  $583 = $582;
  $584 = (+Math_sqrt((+$583)));
  $585 = $584;
  $586 = $13;
  $587 = $586 * $585;
  $13 = $587;
 } else {
  $13 = 0.0;
 }
 $9 = 0;
 while(1) {
  $588 = $9;
  $589 = $4;
  $590 = ((($589)) + 4604|0);
  $591 = HEAP32[$590>>2]|0;
  $592 = ($588|0)<($591|0);
  if (!($592)) {
   break;
  }
  $593 = $12;
  $594 = $8;
  $595 = ((($594)) + 4|0);
  $596 = +HEAPF32[$595>>2];
  $597 = $593 - $596;
  $598 = 0.40000000596046448 * $597;
  $599 = $8;
  $600 = ((($599)) + 4|0);
  $601 = +HEAPF32[$600>>2];
  $602 = $601 + $598;
  HEAPF32[$600>>2] = $602;
  $603 = $8;
  $604 = ((($603)) + 4|0);
  $605 = +HEAPF32[$604>>2];
  $606 = $5;
  $607 = ((($606)) + 804|0);
  $608 = $9;
  $609 = (($607) + ($608<<2)|0);
  HEAPF32[$609>>2] = $605;
  $610 = $13;
  $611 = $8;
  $612 = ((($611)) + 8|0);
  $613 = +HEAPF32[$612>>2];
  $614 = $610 - $613;
  $615 = 0.40000000596046448 * $614;
  $616 = $8;
  $617 = ((($616)) + 8|0);
  $618 = +HEAPF32[$617>>2];
  $619 = $618 + $615;
  HEAPF32[$617>>2] = $619;
  $620 = $8;
  $621 = ((($620)) + 8|0);
  $622 = +HEAPF32[$621>>2];
  $623 = $5;
  $624 = ((($623)) + 836|0);
  $625 = $9;
  $626 = (($624) + ($625<<2)|0);
  HEAPF32[$626>>2] = $622;
  $627 = $14;
  $628 = $8;
  $629 = ((($628)) + 12|0);
  $630 = +HEAPF32[$629>>2];
  $631 = $627 - $630;
  $632 = 0.40000000596046448 * $631;
  $633 = $8;
  $634 = ((($633)) + 12|0);
  $635 = +HEAPF32[$634>>2];
  $636 = $635 + $632;
  HEAPF32[$634>>2] = $636;
  $637 = $8;
  $638 = ((($637)) + 12|0);
  $639 = +HEAPF32[$638>>2];
  $640 = $5;
  $641 = ((($640)) + 820|0);
  $642 = $9;
  $643 = (($641) + ($642<<2)|0);
  HEAPF32[$643>>2] = $639;
  $644 = $9;
  $645 = (($644) + 1)|0;
  $9 = $645;
 }
 STACKTOP = sp;return;
}
function _silk_sigmoid($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = - $2;
 $4 = $3;
 $5 = (+Math_exp((+$4)));
 $6 = 1.0 + $5;
 $7 = 1.0 / $6;
 $8 = $7;
 STACKTOP = sp;return (+$8);
}
function _silk_log2($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_log10($2));
 $4 = 3.32192809488736 * $3;
 $5 = $4;
 STACKTOP = sp;return (+$5);
}
function _warped_gain($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = - $8;
 $4 = $9;
 $10 = $3;
 $11 = $5;
 $12 = (($11) - 1)|0;
 $13 = (($10) + ($12<<2)|0);
 $14 = +HEAPF32[$13>>2];
 $7 = $14;
 $15 = $5;
 $16 = (($15) - 2)|0;
 $6 = $16;
 while(1) {
  $17 = $6;
  $18 = ($17|0)>=(0);
  $19 = $4;
  $20 = $7;
  $21 = $19 * $20;
  if (!($18)) {
   break;
  }
  $22 = $3;
  $23 = $6;
  $24 = (($22) + ($23<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $21 + $25;
  $7 = $26;
  $27 = $6;
  $28 = (($27) + -1)|0;
  $6 = $28;
 }
 $29 = 1.0 - $21;
 $30 = 1.0 / $29;
 STACKTOP = sp;return (+$30);
}
function _warped_true2monic_coefs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$sink2 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0;
 var $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0.0;
 var $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0;
 var $262 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = 0;
 $18 = $9;
 $19 = (($18) - 1)|0;
 $10 = $19;
 while(1) {
  $20 = $10;
  $21 = ($20|0)>(0);
  $22 = $7;
  if (!($21)) {
   break;
  }
  $23 = $5;
  $24 = $10;
  $25 = (($23) + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $22 * $26;
  $28 = $5;
  $29 = $10;
  $30 = (($29) - 1)|0;
  $31 = (($28) + ($30<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 - $27;
  HEAPF32[$31>>2] = $33;
  $34 = $7;
  $35 = $6;
  $36 = $10;
  $37 = (($35) + ($36<<2)|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $34 * $38;
  $40 = $6;
  $41 = $10;
  $42 = (($41) - 1)|0;
  $43 = (($40) + ($42<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 - $39;
  HEAPF32[$43>>2] = $45;
  $46 = $10;
  $47 = (($46) + -1)|0;
  $10 = $47;
 }
 $48 = $7;
 $49 = $22 * $48;
 $50 = 1.0 - $49;
 $51 = $7;
 $52 = $5;
 $53 = +HEAPF32[$52>>2];
 $54 = $51 * $53;
 $55 = 1.0 + $54;
 $56 = $50 / $55;
 $16 = $56;
 $57 = $7;
 $58 = $7;
 $59 = $57 * $58;
 $60 = 1.0 - $59;
 $61 = $7;
 $62 = $6;
 $63 = +HEAPF32[$62>>2];
 $64 = $61 * $63;
 $65 = 1.0 + $64;
 $66 = $60 / $65;
 $17 = $66;
 $10 = 0;
 while(1) {
  $67 = $10;
  $68 = $9;
  $69 = ($67|0)<($68|0);
  if (!($69)) {
   break;
  }
  $70 = $16;
  $71 = $5;
  $72 = $10;
  $73 = (($71) + ($72<<2)|0);
  $74 = +HEAPF32[$73>>2];
  $75 = $74 * $70;
  HEAPF32[$73>>2] = $75;
  $76 = $17;
  $77 = $6;
  $78 = $10;
  $79 = (($77) + ($78<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $80 * $76;
  HEAPF32[$79>>2] = $81;
  $82 = $10;
  $83 = (($82) + 1)|0;
  $10 = $83;
 }
 $11 = 0;
 while(1) {
  $84 = $11;
  $85 = ($84|0)<(10);
  if (!($85)) {
   label = 31;
   break;
  }
  $14 = -1.0;
  $10 = 0;
  while(1) {
   $86 = $10;
   $87 = $9;
   $88 = ($86|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $5;
   $90 = $10;
   $91 = (($89) + ($90<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $92;
   $94 = (+Math_abs((+$93)));
   $95 = $94;
   $96 = $6;
   $97 = $10;
   $98 = (($96) + ($97<<2)|0);
   $99 = +HEAPF32[$98>>2];
   $100 = $99;
   $101 = (+Math_abs((+$100)));
   $102 = $101;
   $103 = $95 > $102;
   if ($103) {
    $104 = $5;
    $105 = $10;
    $106 = (($104) + ($105<<2)|0);
    $$sink2 = $106;
   } else {
    $107 = $6;
    $108 = $10;
    $109 = (($107) + ($108<<2)|0);
    $$sink2 = $109;
   }
   $110 = +HEAPF32[$$sink2>>2];
   $111 = $110;
   $112 = (+Math_abs((+$111)));
   $113 = $112;
   $13 = $113;
   $114 = $13;
   $115 = $14;
   $116 = $114 > $115;
   if ($116) {
    $117 = $13;
    $14 = $117;
    $118 = $10;
    $12 = $118;
   }
   $119 = $10;
   $120 = (($119) + 1)|0;
   $10 = $120;
  }
  $121 = $14;
  $122 = $8;
  $123 = $121 <= $122;
  if ($123) {
   label = 31;
   break;
  }
  $10 = 1;
  while(1) {
   $124 = $10;
   $125 = $9;
   $126 = ($124|0)<($125|0);
   if (!($126)) {
    break;
   }
   $127 = $7;
   $128 = $5;
   $129 = $10;
   $130 = (($128) + ($129<<2)|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $127 * $131;
   $133 = $5;
   $134 = $10;
   $135 = (($134) - 1)|0;
   $136 = (($133) + ($135<<2)|0);
   $137 = +HEAPF32[$136>>2];
   $138 = $137 + $132;
   HEAPF32[$136>>2] = $138;
   $139 = $7;
   $140 = $6;
   $141 = $10;
   $142 = (($140) + ($141<<2)|0);
   $143 = +HEAPF32[$142>>2];
   $144 = $139 * $143;
   $145 = $6;
   $146 = $10;
   $147 = (($146) - 1)|0;
   $148 = (($145) + ($147<<2)|0);
   $149 = +HEAPF32[$148>>2];
   $150 = $149 + $144;
   HEAPF32[$148>>2] = $150;
   $151 = $10;
   $152 = (($151) + 1)|0;
   $10 = $152;
  }
  $153 = $16;
  $154 = 1.0 / $153;
  $16 = $154;
  $155 = $17;
  $156 = 1.0 / $155;
  $17 = $156;
  $10 = 0;
  while(1) {
   $157 = $10;
   $158 = $9;
   $159 = ($157|0)<($158|0);
   if (!($159)) {
    break;
   }
   $160 = $16;
   $161 = $5;
   $162 = $10;
   $163 = (($161) + ($162<<2)|0);
   $164 = +HEAPF32[$163>>2];
   $165 = $164 * $160;
   HEAPF32[$163>>2] = $165;
   $166 = $17;
   $167 = $6;
   $168 = $10;
   $169 = (($167) + ($168<<2)|0);
   $170 = +HEAPF32[$169>>2];
   $171 = $170 * $166;
   HEAPF32[$169>>2] = $171;
   $172 = $10;
   $173 = (($172) + 1)|0;
   $10 = $173;
  }
  $174 = $11;
  $175 = (+($174|0));
  $176 = 0.10000000149011612 * $175;
  $177 = 0.80000001192092896 + $176;
  $178 = $14;
  $179 = $8;
  $180 = $178 - $179;
  $181 = $177 * $180;
  $182 = $14;
  $183 = $12;
  $184 = (($183) + 1)|0;
  $185 = (+($184|0));
  $186 = $182 * $185;
  $187 = $181 / $186;
  $188 = 0.99000000953674316 - $187;
  $15 = $188;
  $189 = $5;
  $190 = $9;
  $191 = $15;
  _silk_bwexpander_FLP($189,$190,$191);
  $192 = $6;
  $193 = $9;
  $194 = $15;
  _silk_bwexpander_FLP($192,$193,$194);
  $195 = $9;
  $196 = (($195) - 1)|0;
  $10 = $196;
  while(1) {
   $197 = $10;
   $198 = ($197|0)>(0);
   $199 = $7;
   if (!($198)) {
    break;
   }
   $200 = $5;
   $201 = $10;
   $202 = (($200) + ($201<<2)|0);
   $203 = +HEAPF32[$202>>2];
   $204 = $199 * $203;
   $205 = $5;
   $206 = $10;
   $207 = (($206) - 1)|0;
   $208 = (($205) + ($207<<2)|0);
   $209 = +HEAPF32[$208>>2];
   $210 = $209 - $204;
   HEAPF32[$208>>2] = $210;
   $211 = $7;
   $212 = $6;
   $213 = $10;
   $214 = (($212) + ($213<<2)|0);
   $215 = +HEAPF32[$214>>2];
   $216 = $211 * $215;
   $217 = $6;
   $218 = $10;
   $219 = (($218) - 1)|0;
   $220 = (($217) + ($219<<2)|0);
   $221 = +HEAPF32[$220>>2];
   $222 = $221 - $216;
   HEAPF32[$220>>2] = $222;
   $223 = $10;
   $224 = (($223) + -1)|0;
   $10 = $224;
  }
  $225 = $7;
  $226 = $199 * $225;
  $227 = 1.0 - $226;
  $228 = $7;
  $229 = $5;
  $230 = +HEAPF32[$229>>2];
  $231 = $228 * $230;
  $232 = 1.0 + $231;
  $233 = $227 / $232;
  $16 = $233;
  $234 = $7;
  $235 = $7;
  $236 = $234 * $235;
  $237 = 1.0 - $236;
  $238 = $7;
  $239 = $6;
  $240 = +HEAPF32[$239>>2];
  $241 = $238 * $240;
  $242 = 1.0 + $241;
  $243 = $237 / $242;
  $17 = $243;
  $10 = 0;
  while(1) {
   $244 = $10;
   $245 = $9;
   $246 = ($244|0)<($245|0);
   if (!($246)) {
    break;
   }
   $247 = $16;
   $248 = $5;
   $249 = $10;
   $250 = (($248) + ($249<<2)|0);
   $251 = +HEAPF32[$250>>2];
   $252 = $251 * $247;
   HEAPF32[$250>>2] = $252;
   $253 = $17;
   $254 = $6;
   $255 = $10;
   $256 = (($254) + ($255<<2)|0);
   $257 = +HEAPF32[$256>>2];
   $258 = $257 * $253;
   HEAPF32[$256>>2] = $258;
   $259 = $10;
   $260 = (($259) + 1)|0;
   $10 = $260;
  }
  $261 = $11;
  $262 = (($261) + 1)|0;
  $11 = $262;
 }
 if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
}
function _silk_prefilter_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $16 = sp + 408|0;
 $20 = sp + 384|0;
 $21 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $22 = $4;
 $23 = ((($22)) + 7216|0);
 $8 = $23;
 $24 = $7;
 $18 = $24;
 $25 = $6;
 $19 = $25;
 $26 = $8;
 $27 = ((($26)) + 2136|0);
 $28 = HEAP32[$27>>2]|0;
 $11 = $28;
 $10 = 0;
 while(1) {
  $29 = $10;
  $30 = $4;
  $31 = ((($30)) + 4604|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $4;
  $35 = ((($34)) + 4768|0);
  $36 = ((($35)) + 29|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)==(2);
  if ($39) {
   $40 = $5;
   $41 = ((($40)) + 228|0);
   $42 = $10;
   $43 = (($41) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $11 = $44;
  }
  $45 = $5;
  $46 = ((($45)) + 836|0);
  $47 = $10;
  $48 = (($46) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $5;
  $51 = ((($50)) + 804|0);
  $52 = $10;
  $53 = (($51) + ($52<<2)|0);
  $54 = +HEAPF32[$53>>2];
  $55 = 1.0 - $54;
  $56 = $49 * $55;
  $12 = $56;
  $57 = $12;
  $58 = 0.25 * $57;
  HEAPF32[$20>>2] = $58;
  $59 = $12;
  $60 = 0.4999847412109375 * $59;
  $61 = ((($20)) + 4|0);
  HEAPF32[$61>>2] = $60;
  $62 = $12;
  $63 = 0.25 * $62;
  $64 = ((($20)) + 8|0);
  HEAPF32[$64>>2] = $63;
  $65 = $5;
  $66 = ((($65)) + 820|0);
  $67 = $10;
  $68 = (($66) + ($67<<2)|0);
  $69 = +HEAPF32[$68>>2];
  $13 = $69;
  $70 = $5;
  $71 = ((($70)) + 756|0);
  $72 = $10;
  $73 = (($71) + ($72<<2)|0);
  $74 = +HEAPF32[$73>>2];
  $14 = $74;
  $75 = $5;
  $76 = ((($75)) + 772|0);
  $77 = $10;
  $78 = (($76) + ($77<<2)|0);
  $79 = +HEAPF32[$78>>2];
  $15 = $79;
  $80 = $5;
  $81 = ((($80)) + 244|0);
  $82 = $10;
  $83 = $82<<4;
  $84 = (($81) + ($83<<2)|0);
  $17 = $84;
  $85 = $8;
  $86 = ((($85)) + 2048|0);
  $87 = $17;
  $88 = $18;
  $89 = $4;
  $90 = ((($89)) + 4704|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (+($91|0));
  $93 = $92 / 65536.0;
  $94 = $4;
  $95 = ((($94)) + 4612|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $4;
  $98 = ((($97)) + 4660|0);
  $99 = HEAP32[$98>>2]|0;
  _silk_warped_LPC_analysis_filter_FLP($86,$21,$87,$88,$93,$96,$99);
  $100 = $5;
  $101 = ((($100)) + 788|0);
  $102 = $10;
  $103 = (($101) + ($102<<2)|0);
  $104 = +HEAPF32[$103>>2];
  HEAPF32[$16>>2] = $104;
  $105 = $5;
  $106 = ((($105)) + 788|0);
  $107 = $10;
  $108 = (($106) + ($107<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $110 = - $109;
  $111 = $5;
  $112 = ((($111)) + 804|0);
  $113 = $10;
  $114 = (($112) + ($113<<2)|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $12;
  $117 = $115 * $116;
  $118 = $117 + 0.05000000074505806;
  $119 = $5;
  $120 = ((($119)) + 860|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $121 * 0.10000000149011612;
  $123 = $118 + $122;
  $124 = $110 * $123;
  $125 = ((($16)) + 4|0);
  HEAPF32[$125>>2] = $124;
  $126 = +HEAPF32[$16>>2];
  $127 = +HEAPF32[$21>>2];
  $128 = $126 * $127;
  $129 = ((($16)) + 4|0);
  $130 = +HEAPF32[$129>>2];
  $131 = $8;
  $132 = ((($131)) + 2128|0);
  $133 = +HEAPF32[$132>>2];
  $134 = $130 * $133;
  $135 = $128 + $134;
  $136 = $19;
  HEAPF32[$136>>2] = $135;
  $9 = 1;
  while(1) {
   $137 = $9;
   $138 = $4;
   $139 = ((($138)) + 4612|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ($137|0)<($140|0);
   if (!($141)) {
    break;
   }
   $142 = +HEAPF32[$16>>2];
   $143 = $9;
   $144 = (($21) + ($143<<2)|0);
   $145 = +HEAPF32[$144>>2];
   $146 = $142 * $145;
   $147 = ((($16)) + 4|0);
   $148 = +HEAPF32[$147>>2];
   $149 = $9;
   $150 = (($149) - 1)|0;
   $151 = (($21) + ($150<<2)|0);
   $152 = +HEAPF32[$151>>2];
   $153 = $148 * $152;
   $154 = $146 + $153;
   $155 = $19;
   $156 = $9;
   $157 = (($155) + ($156<<2)|0);
   HEAPF32[$157>>2] = $154;
   $158 = $9;
   $159 = (($158) + 1)|0;
   $9 = $159;
  }
  $160 = $4;
  $161 = ((($160)) + 4612|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) - 1)|0;
  $164 = (($21) + ($163<<2)|0);
  $165 = +HEAPF32[$164>>2];
  $166 = $8;
  $167 = ((($166)) + 2128|0);
  HEAPF32[$167>>2] = $165;
  $168 = $8;
  $169 = $19;
  $170 = $19;
  $171 = $13;
  $172 = $14;
  $173 = $15;
  $174 = $11;
  $175 = $4;
  $176 = ((($175)) + 4612|0);
  $177 = HEAP32[$176>>2]|0;
  _silk_prefilt_FLP($168,$169,$170,$20,$171,$172,$173,$174,$177);
  $178 = $4;
  $179 = ((($178)) + 4612|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $18;
  $182 = (($181) + ($180<<2)|0);
  $18 = $182;
  $183 = $4;
  $184 = ((($183)) + 4612|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $19;
  $187 = (($186) + ($185<<2)|0);
  $19 = $187;
  $188 = $10;
  $189 = (($188) + 1)|0;
  $10 = $189;
 }
 $190 = $5;
 $191 = ((($190)) + 228|0);
 $192 = $4;
 $193 = ((($192)) + 4604|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = (($194) - 1)|0;
 $196 = (($191) + ($195<<2)|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = $8;
 $199 = ((($198)) + 2136|0);
 HEAP32[$199>>2] = $197;
 STACKTOP = sp;return;
}
function _silk_warped_LPC_analysis_filter_FLP($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = 0;
 while(1) {
  $19 = $14;
  $20 = $12;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $7;
  $23 = +HEAPF32[$22>>2];
  $24 = $11;
  $25 = $7;
  $26 = ((($25)) + 4|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $24 * $27;
  $29 = $23 + $28;
  $18 = $29;
  $30 = $10;
  $31 = $14;
  $32 = (($30) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $7;
  HEAPF32[$34>>2] = $33;
  $35 = $7;
  $36 = ((($35)) + 4|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $11;
  $39 = $7;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $18;
  $43 = $41 - $42;
  $44 = $38 * $43;
  $45 = $37 + $44;
  $17 = $45;
  $46 = $18;
  $47 = $7;
  $48 = ((($47)) + 4|0);
  HEAPF32[$48>>2] = $46;
  $49 = $9;
  $50 = +HEAPF32[$49>>2];
  $51 = $18;
  $52 = $50 * $51;
  $16 = $52;
  $15 = 2;
  while(1) {
   $53 = $15;
   $54 = $13;
   $55 = ($53|0)<($54|0);
   if (!($55)) {
    break;
   }
   $56 = $7;
   $57 = $15;
   $58 = (($56) + ($57<<2)|0);
   $59 = +HEAPF32[$58>>2];
   $60 = $11;
   $61 = $7;
   $62 = $15;
   $63 = (($62) + 1)|0;
   $64 = (($61) + ($63<<2)|0);
   $65 = +HEAPF32[$64>>2];
   $66 = $17;
   $67 = $65 - $66;
   $68 = $60 * $67;
   $69 = $59 + $68;
   $18 = $69;
   $70 = $17;
   $71 = $7;
   $72 = $15;
   $73 = (($71) + ($72<<2)|0);
   HEAPF32[$73>>2] = $70;
   $74 = $9;
   $75 = $15;
   $76 = (($75) - 1)|0;
   $77 = (($74) + ($76<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $17;
   $80 = $78 * $79;
   $81 = $16;
   $82 = $81 + $80;
   $16 = $82;
   $83 = $7;
   $84 = $15;
   $85 = (($84) + 1)|0;
   $86 = (($83) + ($85<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $11;
   $89 = $7;
   $90 = $15;
   $91 = (($90) + 2)|0;
   $92 = (($89) + ($91<<2)|0);
   $93 = +HEAPF32[$92>>2];
   $94 = $18;
   $95 = $93 - $94;
   $96 = $88 * $95;
   $97 = $87 + $96;
   $17 = $97;
   $98 = $18;
   $99 = $7;
   $100 = $15;
   $101 = (($100) + 1)|0;
   $102 = (($99) + ($101<<2)|0);
   HEAPF32[$102>>2] = $98;
   $103 = $9;
   $104 = $15;
   $105 = (($103) + ($104<<2)|0);
   $106 = +HEAPF32[$105>>2];
   $107 = $18;
   $108 = $106 * $107;
   $109 = $16;
   $110 = $109 + $108;
   $16 = $110;
   $111 = $15;
   $112 = (($111) + 2)|0;
   $15 = $112;
  }
  $113 = $17;
  $114 = $7;
  $115 = $13;
  $116 = (($114) + ($115<<2)|0);
  HEAPF32[$116>>2] = $113;
  $117 = $9;
  $118 = $13;
  $119 = (($118) - 1)|0;
  $120 = (($117) + ($119<<2)|0);
  $121 = +HEAPF32[$120>>2];
  $122 = $17;
  $123 = $121 * $122;
  $124 = $16;
  $125 = $124 + $123;
  $16 = $125;
  $126 = $10;
  $127 = $14;
  $128 = (($126) + ($127<<2)|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $16;
  $131 = $129 - $130;
  $132 = $8;
  $133 = $14;
  $134 = (($132) + ($133<<2)|0);
  HEAPF32[$134>>2] = $131;
  $135 = $14;
  $136 = (($135) + 1)|0;
  $14 = $136;
 }
 STACKTOP = sp;return;
}
function _silk_prefilt_FLP($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $27 = $9;
 $26 = $27;
 $28 = $9;
 $29 = ((($28)) + 2116|0);
 $30 = HEAP32[$29>>2]|0;
 $20 = $30;
 $31 = $9;
 $32 = ((($31)) + 2120|0);
 $33 = +HEAPF32[$32>>2];
 $24 = $33;
 $34 = $9;
 $35 = ((($34)) + 2124|0);
 $36 = +HEAPF32[$35>>2];
 $25 = $36;
 $18 = 0;
 while(1) {
  $37 = $18;
  $38 = $17;
  $39 = ($37|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $16;
  $41 = ($40|0)>(0);
  if ($41) {
   $42 = $16;
   $43 = $20;
   $44 = (($42) + ($43))|0;
   $19 = $44;
   $45 = $26;
   $46 = $19;
   $47 = (($46) - 1)|0;
   $48 = (($47) - 1)|0;
   $49 = $48 & 511;
   $50 = (($45) + ($49<<2)|0);
   $51 = +HEAPF32[$50>>2];
   $52 = $12;
   $53 = +HEAPF32[$52>>2];
   $54 = $51 * $53;
   $23 = $54;
   $55 = $26;
   $56 = $19;
   $57 = (($56) - 1)|0;
   $58 = $57 & 511;
   $59 = (($55) + ($58<<2)|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $12;
   $62 = ((($61)) + 4|0);
   $63 = +HEAPF32[$62>>2];
   $64 = $60 * $63;
   $65 = $23;
   $66 = $65 + $64;
   $23 = $66;
   $67 = $26;
   $68 = $19;
   $69 = (($68) - 1)|0;
   $70 = (($69) + 1)|0;
   $71 = $70 & 511;
   $72 = (($67) + ($71<<2)|0);
   $73 = +HEAPF32[$72>>2];
   $74 = $12;
   $75 = ((($74)) + 8|0);
   $76 = +HEAPF32[$75>>2];
   $77 = $73 * $76;
   $78 = $23;
   $79 = $78 + $77;
   $23 = $79;
  } else {
   $23 = 0.0;
  }
  $80 = $24;
  $81 = $13;
  $82 = $80 * $81;
  $21 = $82;
  $83 = $24;
  $84 = $15;
  $85 = $83 * $84;
  $86 = $25;
  $87 = $14;
  $88 = $86 * $87;
  $89 = $85 + $88;
  $22 = $89;
  $90 = $10;
  $91 = $18;
  $92 = (($90) + ($91<<2)|0);
  $93 = +HEAPF32[$92>>2];
  $94 = $21;
  $95 = $93 - $94;
  $24 = $95;
  $96 = $24;
  $97 = $22;
  $98 = $96 - $97;
  $25 = $98;
  $99 = $20;
  $100 = (($99) - 1)|0;
  $101 = $100 & 511;
  $20 = $101;
  $102 = $25;
  $103 = $26;
  $104 = $20;
  $105 = (($103) + ($104<<2)|0);
  HEAPF32[$105>>2] = $102;
  $106 = $25;
  $107 = $23;
  $108 = $106 - $107;
  $109 = $11;
  $110 = $18;
  $111 = (($109) + ($110<<2)|0);
  HEAPF32[$111>>2] = $108;
  $112 = $18;
  $113 = (($112) + 1)|0;
  $18 = $113;
 }
 $114 = $24;
 $115 = $9;
 $116 = ((($115)) + 2120|0);
 HEAPF32[$116>>2] = $114;
 $117 = $25;
 $118 = $9;
 $119 = ((($118)) + 2124|0);
 HEAPF32[$119>>2] = $117;
 $120 = $20;
 $121 = $9;
 $122 = ((($121)) + 2116|0);
 HEAP32[$122>>2] = $120;
 STACKTOP = sp;return;
}
function _silk_process_gains_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $14 = ((($13)) + 7200|0);
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 4768|0);
 $17 = ((($16)) + 29|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = ($19|0)==(2);
 L1: do {
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 872|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $23 - 12.0;
   $25 = 0.25 * $24;
   $26 = (+_silk_sigmoid_299($25));
   $27 = 0.5 * $26;
   $28 = 1.0 - $27;
   $9 = $28;
   $7 = 0;
   while(1) {
    $29 = $7;
    $30 = $3;
    $31 = ((($30)) + 4604|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($29|0)<($32|0);
    if (!($33)) {
     break L1;
    }
    $34 = $9;
    $35 = $4;
    $36 = $7;
    $37 = (($35) + ($36<<2)|0);
    $38 = +HEAPF32[$37>>2];
    $39 = $38 * $34;
    HEAPF32[$37>>2] = $39;
    $40 = $7;
    $41 = (($40) + 1)|0;
    $7 = $41;
   }
  }
 } while(0);
 $42 = $3;
 $43 = ((($42)) + 4748|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (+($44|0));
 $46 = $45 * 0.0078125;
 $47 = 21.0 - $46;
 $48 = 0.33000001311302185 * $47;
 $49 = $48;
 $50 = (+Math_pow(2.0,(+$49)));
 $51 = $3;
 $52 = ((($51)) + 4612|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (+($53|0));
 $55 = $50 / $54;
 $56 = $55;
 $10 = $56;
 $7 = 0;
 while(1) {
  $57 = $7;
  $58 = $3;
  $59 = ((($58)) + 4604|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($57|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $4;
  $63 = $7;
  $64 = (($62) + ($63<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $11 = $65;
  $66 = $11;
  $67 = $11;
  $68 = $66 * $67;
  $69 = $4;
  $70 = ((($69)) + 876|0);
  $71 = $7;
  $72 = (($70) + ($71<<2)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $10;
  $75 = $73 * $74;
  $76 = $68 + $75;
  $77 = $76;
  $78 = (+Math_sqrt((+$77)));
  $79 = $78;
  $11 = $79;
  $80 = $11;
  $81 = $80 < 32767.0;
  $82 = $11;
  $83 = $81 ? $82 : 32767.0;
  $84 = $4;
  $85 = $7;
  $86 = (($84) + ($85<<2)|0);
  HEAPF32[$86>>2] = $83;
  $87 = $7;
  $88 = (($87) + 1)|0;
  $7 = $88;
 }
 $7 = 0;
 while(1) {
  $89 = $7;
  $90 = $3;
  $91 = ((($90)) + 4604|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($89|0)<($92|0);
  $94 = $4;
  if (!($93)) {
   break;
  }
  $95 = $7;
  $96 = (($94) + ($95<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $97 * 65536.0;
  $99 = (~~(($98)));
  $100 = $7;
  $101 = (($8) + ($100<<2)|0);
  HEAP32[$101>>2] = $99;
  $102 = $7;
  $103 = (($102) + 1)|0;
  $7 = $103;
 }
 $104 = ((($94)) + 892|0);
 $105 = $3;
 $106 = ((($105)) + 4604|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $107<<2;
 _memcpy(($104|0),($8|0),($108|0))|0;
 $109 = $6;
 $110 = HEAP8[$109>>0]|0;
 $111 = $4;
 $112 = ((($111)) + 908|0);
 HEAP8[$112>>0] = $110;
 $113 = $3;
 $114 = ((($113)) + 4768|0);
 $115 = $6;
 $116 = $5;
 $117 = ($116|0)==(2);
 $118 = $117&1;
 $119 = $3;
 $120 = ((($119)) + 4604|0);
 $121 = HEAP32[$120>>2]|0;
 _silk_gains_quant($114,$8,$115,$118,$121);
 $7 = 0;
 while(1) {
  $122 = $7;
  $123 = $3;
  $124 = ((($123)) + 4604|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($122|0)<($125|0);
  if (!($126)) {
   break;
  }
  $127 = $7;
  $128 = (($8) + ($127<<2)|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (+($129|0));
  $131 = $130 / 65536.0;
  $132 = $4;
  $133 = $7;
  $134 = (($132) + ($133<<2)|0);
  HEAPF32[$134>>2] = $131;
  $135 = $7;
  $136 = (($135) + 1)|0;
  $7 = $136;
 }
 $137 = $3;
 $138 = ((($137)) + 4768|0);
 $139 = ((($138)) + 29|0);
 $140 = HEAP8[$139>>0]|0;
 $141 = $140 << 24 >> 24;
 $142 = ($141|0)==(2);
 if ($142) {
  $143 = $4;
  $144 = ((($143)) + 872|0);
  $145 = +HEAPF32[$144>>2];
  $146 = $3;
  $147 = ((($146)) + 4744|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (+($148|0));
  $150 = $149 * 3.0517578125E-5;
  $151 = $145 + $150;
  $152 = $151 > 1.0;
  $153 = $3;
  $154 = ((($153)) + 4768|0);
  $155 = ((($154)) + 30|0);
  $$sink = $152 ? 0 : 1;
  HEAP8[$155>>0] = $$sink;
 }
 $156 = $3;
 $157 = ((($156)) + 4768|0);
 $158 = ((($157)) + 29|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159 << 24 >> 24;
 $161 = $160 >> 1;
 $162 = (24998 + ($161<<2)|0);
 $163 = $3;
 $164 = ((($163)) + 4768|0);
 $165 = ((($164)) + 30|0);
 $166 = HEAP8[$165>>0]|0;
 $167 = $166 << 24 >> 24;
 $168 = (($162) + ($167<<1)|0);
 $169 = HEAP16[$168>>1]|0;
 $170 = $169 << 16 >> 16;
 $171 = (+($170|0));
 $172 = $171 / 1024.0;
 $12 = $172;
 $173 = $3;
 $174 = ((($173)) + 4652|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = (+($175|0));
 $177 = -0.05000000074505806 * $176;
 $178 = 1.2000000476837158 + $177;
 $179 = $3;
 $180 = ((($179)) + 4556|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = (+($181|0));
 $183 = -0.20000000298023224 * $182;
 $184 = $183 * 0.00390625;
 $185 = $178 + $184;
 $186 = $4;
 $187 = ((($186)) + 856|0);
 $188 = +HEAPF32[$187>>2];
 $189 = -0.10000000149011612 * $188;
 $190 = $185 + $189;
 $191 = $4;
 $192 = ((($191)) + 860|0);
 $193 = +HEAPF32[$192>>2];
 $194 = -0.20000000298023224 * $193;
 $195 = $190 + $194;
 $196 = $12;
 $197 = 0.80000001192092896 * $196;
 $198 = $195 + $197;
 $199 = $4;
 $200 = ((($199)) + 852|0);
 HEAPF32[$200>>2] = $198;
 STACKTOP = sp;return;
}
function _silk_sigmoid_299($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = - $2;
 $4 = $3;
 $5 = (+Math_exp((+$4)));
 $6 = 1.0 + $5;
 $7 = 1.0 / $6;
 $8 = $7;
 STACKTOP = sp;return (+$8);
}
function _silk_residual_energy_covar_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = 0.0;
 $16 = $6;
 $17 = +HEAPF32[$16>>2];
 $18 = $6;
 $19 = $9;
 $20 = $9;
 $21 = Math_imul($19, $20)|0;
 $22 = (($21) - 1)|0;
 $23 = (($18) + ($22<<2)|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $17 + $24;
 $26 = 9.9999999392252903E-9 * $25;
 $15 = $26;
 $12 = 0;
 while(1) {
  $27 = $12;
  $28 = ($27|0)<(10);
  if (!($28)) {
   break;
  }
  $29 = $8;
  $14 = $29;
  $13 = 0.0;
  $10 = 0;
  while(1) {
   $30 = $10;
   $31 = $9;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    break;
   }
   $33 = $7;
   $34 = $10;
   $35 = (($33) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $5;
   $38 = $10;
   $39 = (($37) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $36 * $40;
   $42 = $13;
   $43 = $42 + $41;
   $13 = $43;
   $44 = $10;
   $45 = (($44) + 1)|0;
   $10 = $45;
  }
  $46 = $13;
  $47 = 2.0 * $46;
  $48 = $14;
  $49 = $48 - $47;
  $14 = $49;
  $10 = 0;
  while(1) {
   $50 = $10;
   $51 = $9;
   $52 = ($50|0)<($51|0);
   if (!($52)) {
    break;
   }
   $13 = 0.0;
   $53 = $10;
   $54 = (($53) + 1)|0;
   $11 = $54;
   while(1) {
    $55 = $11;
    $56 = $9;
    $57 = ($55|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $6;
    $59 = $10;
    $60 = $9;
    $61 = $11;
    $62 = Math_imul($60, $61)|0;
    $63 = (($59) + ($62))|0;
    $64 = (($58) + ($63<<2)|0);
    $65 = +HEAPF32[$64>>2];
    $66 = $5;
    $67 = $11;
    $68 = (($66) + ($67<<2)|0);
    $69 = +HEAPF32[$68>>2];
    $70 = $65 * $69;
    $71 = $13;
    $72 = $71 + $70;
    $13 = $72;
    $73 = $11;
    $74 = (($73) + 1)|0;
    $11 = $74;
   }
   $75 = $5;
   $76 = $10;
   $77 = (($75) + ($76<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $13;
   $80 = 2.0 * $79;
   $81 = $6;
   $82 = $10;
   $83 = $9;
   $84 = $10;
   $85 = Math_imul($83, $84)|0;
   $86 = (($82) + ($85))|0;
   $87 = (($81) + ($86<<2)|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $5;
   $90 = $10;
   $91 = (($89) + ($90<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $88 * $92;
   $94 = $80 + $93;
   $95 = $78 * $94;
   $96 = $14;
   $97 = $96 + $95;
   $14 = $97;
   $98 = $10;
   $99 = (($98) + 1)|0;
   $10 = $99;
  }
  $100 = $14;
  $101 = $100 > 0.0;
  if ($101) {
   break;
  }
  $10 = 0;
  while(1) {
   $102 = $10;
   $103 = $9;
   $104 = ($102|0)<($103|0);
   $105 = $15;
   if (!($104)) {
    break;
   }
   $106 = $6;
   $107 = $10;
   $108 = $9;
   $109 = $10;
   $110 = Math_imul($108, $109)|0;
   $111 = (($107) + ($110))|0;
   $112 = (($106) + ($111<<2)|0);
   $113 = +HEAPF32[$112>>2];
   $114 = $113 + $105;
   HEAPF32[$112>>2] = $114;
   $115 = $10;
   $116 = (($115) + 1)|0;
   $10 = $116;
  }
  $117 = $105 * 2.0;
  $15 = $117;
  $118 = $12;
  $119 = (($118) + 1)|0;
  $12 = $119;
 }
 $120 = $12;
 $121 = ($120|0)==(10);
 if (!($121)) {
  $122 = $14;
  STACKTOP = sp;return (+$122);
 }
 $14 = 1.0;
 $122 = $14;
 STACKTOP = sp;return (+$122);
}
function _silk_residual_energy_FLP($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(816|0);
 $16 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $17 = $13;
 $18 = (($16) + ($17<<2)|0);
 $15 = $18;
 $19 = $13;
 $20 = $11;
 $21 = (($19) + ($20))|0;
 $14 = $21;
 $22 = $9;
 $23 = $8;
 $24 = $14;
 $25 = 0;
 $26 = (($23) + ($25<<2)|0);
 $27 = $14;
 $28 = $27<<1;
 $29 = $13;
 _silk_LPC_analysis_filter_FLP($16,$22,$26,$28,$29);
 $30 = $10;
 $31 = +HEAPF32[$30>>2];
 $32 = $10;
 $33 = +HEAPF32[$32>>2];
 $34 = $31 * $33;
 $35 = $34;
 $36 = $15;
 $37 = $14;
 $38 = 0;
 $39 = (($36) + ($38<<2)|0);
 $40 = $11;
 $41 = (+_silk_energy_FLP($39,$40));
 $42 = $35 * $41;
 $43 = $42;
 $44 = $7;
 HEAPF32[$44>>2] = $43;
 $45 = $10;
 $46 = ((($45)) + 4|0);
 $47 = +HEAPF32[$46>>2];
 $48 = $10;
 $49 = ((($48)) + 4|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $47 * $50;
 $52 = $51;
 $53 = $15;
 $54 = $14;
 $55 = $54;
 $56 = (($53) + ($55<<2)|0);
 $57 = $11;
 $58 = (+_silk_energy_FLP($56,$57));
 $59 = $52 * $58;
 $60 = $59;
 $61 = $7;
 $62 = ((($61)) + 4|0);
 HEAPF32[$62>>2] = $60;
 $63 = $12;
 $64 = ($63|0)==(4);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = $9;
 $66 = ((($65)) + 64|0);
 $67 = $8;
 $68 = $14;
 $69 = $68<<1;
 $70 = (($67) + ($69<<2)|0);
 $71 = $14;
 $72 = $71<<1;
 $73 = $13;
 _silk_LPC_analysis_filter_FLP($16,$66,$70,$72,$73);
 $74 = $10;
 $75 = ((($74)) + 8|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $10;
 $78 = ((($77)) + 8|0);
 $79 = +HEAPF32[$78>>2];
 $80 = $76 * $79;
 $81 = $80;
 $82 = $15;
 $83 = $14;
 $84 = 0;
 $85 = (($82) + ($84<<2)|0);
 $86 = $11;
 $87 = (+_silk_energy_FLP($85,$86));
 $88 = $81 * $87;
 $89 = $88;
 $90 = $7;
 $91 = ((($90)) + 8|0);
 HEAPF32[$91>>2] = $89;
 $92 = $10;
 $93 = ((($92)) + 12|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $10;
 $96 = ((($95)) + 12|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $94 * $97;
 $99 = $98;
 $100 = $15;
 $101 = $14;
 $102 = $101;
 $103 = (($100) + ($102<<2)|0);
 $104 = $11;
 $105 = (+_silk_energy_FLP($103,$104));
 $106 = $99 * $105;
 $107 = $106;
 $108 = $7;
 $109 = ((($108)) + 12|0);
 HEAPF32[$109>>2] = $107;
 STACKTOP = sp;return;
}
function _silk_warped_autocorrelation_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0;
 var $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $14 = sp + 136|0;
 $15 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _memset(($14|0),0,136)|0;
 _memset(($15|0),0,136)|0;
 $10 = 0;
 while(1) {
  $16 = $10;
  $17 = $8;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $10;
  $21 = (($19) + ($20<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $12 = $23;
  $11 = 0;
  while(1) {
   $24 = $11;
   $25 = $9;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $11;
   $28 = (($14) + ($27<<3)|0);
   $29 = +HEAPF64[$28>>3];
   $30 = $7;
   $31 = $30;
   $32 = $11;
   $33 = (($32) + 1)|0;
   $34 = (($14) + ($33<<3)|0);
   $35 = +HEAPF64[$34>>3];
   $36 = $12;
   $37 = $35 - $36;
   $38 = $31 * $37;
   $39 = $29 + $38;
   $13 = $39;
   $40 = $12;
   $41 = $11;
   $42 = (($14) + ($41<<3)|0);
   HEAPF64[$42>>3] = $40;
   $43 = +HEAPF64[$14>>3];
   $44 = $12;
   $45 = $43 * $44;
   $46 = $11;
   $47 = (($15) + ($46<<3)|0);
   $48 = +HEAPF64[$47>>3];
   $49 = $48 + $45;
   HEAPF64[$47>>3] = $49;
   $50 = $11;
   $51 = (($50) + 1)|0;
   $52 = (($14) + ($51<<3)|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $7;
   $55 = $54;
   $56 = $11;
   $57 = (($56) + 2)|0;
   $58 = (($14) + ($57<<3)|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $13;
   $61 = $59 - $60;
   $62 = $55 * $61;
   $63 = $53 + $62;
   $12 = $63;
   $64 = $13;
   $65 = $11;
   $66 = (($65) + 1)|0;
   $67 = (($14) + ($66<<3)|0);
   HEAPF64[$67>>3] = $64;
   $68 = +HEAPF64[$14>>3];
   $69 = $13;
   $70 = $68 * $69;
   $71 = $11;
   $72 = (($71) + 1)|0;
   $73 = (($15) + ($72<<3)|0);
   $74 = +HEAPF64[$73>>3];
   $75 = $74 + $70;
   HEAPF64[$73>>3] = $75;
   $76 = $11;
   $77 = (($76) + 2)|0;
   $11 = $77;
  }
  $78 = $12;
  $79 = $9;
  $80 = (($14) + ($79<<3)|0);
  HEAPF64[$80>>3] = $78;
  $81 = +HEAPF64[$14>>3];
  $82 = $12;
  $83 = $81 * $82;
  $84 = $9;
  $85 = (($15) + ($84<<3)|0);
  $86 = +HEAPF64[$85>>3];
  $87 = $86 + $83;
  HEAPF64[$85>>3] = $87;
  $88 = $10;
  $89 = (($88) + 1)|0;
  $10 = $89;
 }
 $11 = 0;
 while(1) {
  $90 = $11;
  $91 = $9;
  $92 = (($91) + 1)|0;
  $93 = ($90|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $11;
  $95 = (($15) + ($94<<3)|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $96;
  $98 = $5;
  $99 = $11;
  $100 = (($98) + ($99<<2)|0);
  HEAPF32[$100>>2] = $97;
  $101 = $11;
  $102 = (($101) + 1)|0;
  $11 = $102;
 }
 STACKTOP = sp;return;
}
function _silk_A2NLSF_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14 * 65536.0;
  $16 = (_silk_float2int($15)|0);
  $17 = $6;
  $18 = (($7) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 $21 = $3;
 $22 = $5;
 _silk_A2NLSF($21,$7,$22);
 STACKTOP = sp;return;
}
function _silk_float2int($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_lrintf($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _silk_NLSF2A_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $5;
 _silk_NLSF2A($7,$8,$9);
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $5;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = (($7) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = (+($15<<16>>16));
  $17 = $16 * 2.44140625E-4;
  $18 = $3;
  $19 = $6;
  $20 = (($18) + ($19<<2)|0);
  HEAPF32[$20>>2] = $17;
  $21 = $6;
  $22 = (($21) + 1)|0;
  $6 = $22;
 }
 STACKTOP = sp;return;
}
function _silk_process_NLSFs_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $4;
 $12 = $6;
 $13 = $7;
 _silk_process_NLSFs($11,$10,$12,$13);
 $9 = 0;
 while(1) {
  $14 = $9;
  $15 = ($14|0)<(2);
  if (!($15)) {
   break;
  }
  $8 = 0;
  while(1) {
   $16 = $8;
   $17 = $4;
   $18 = ((($17)) + 4664|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16|0)<($19|0);
   $21 = $9;
   if (!($20)) {
    break;
   }
   $22 = (($10) + ($21<<5)|0);
   $23 = $8;
   $24 = (($22) + ($23<<1)|0);
   $25 = HEAP16[$24>>1]|0;
   $26 = (+($25<<16>>16));
   $27 = $26 * 2.44140625E-4;
   $28 = $5;
   $29 = $9;
   $30 = (($28) + ($29<<6)|0);
   $31 = $8;
   $32 = (($30) + ($31<<2)|0);
   HEAPF32[$32>>2] = $27;
   $33 = $8;
   $34 = (($33) + 1)|0;
   $8 = $34;
  }
  $35 = (($21) + 1)|0;
  $9 = $35;
 }
 STACKTOP = sp;return;
}
function _silk_NSQ_wrapper_FLP($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1632|0);
 $14 = sp + 80|0;
 $15 = sp + 64|0;
 $16 = sp + 1560|0;
 $17 = sp + 1520|0;
 $19 = sp + 1392|0;
 $20 = sp + 40|0;
 $22 = sp + 16|0;
 $23 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $24 = $12;
  $25 = $6;
  $26 = ((($25)) + 4604|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)<($27|0);
  if (!($28)) {
   break;
  }
  $13 = 0;
  while(1) {
   $29 = $13;
   $30 = $6;
   $31 = ((($30)) + 4660|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29|0)<($32|0);
   if (!($33)) {
    break;
   }
   $34 = $7;
   $35 = ((($34)) + 500|0);
   $36 = $12;
   $37 = $36<<4;
   $38 = $13;
   $39 = (($37) + ($38))|0;
   $40 = (($35) + ($39<<2)|0);
   $41 = +HEAPF32[$40>>2];
   $42 = $41 * 8192.0;
   $43 = (_silk_float2int($42)|0);
   $44 = $43&65535;
   $45 = $12;
   $46 = $45<<4;
   $47 = $13;
   $48 = (($46) + ($47))|0;
   $49 = (($19) + ($48<<1)|0);
   HEAP16[$49>>1] = $44;
   $50 = $13;
   $51 = (($50) + 1)|0;
   $13 = $51;
  }
  $52 = $12;
  $53 = (($52) + 1)|0;
  $12 = $53;
 }
 $12 = 0;
 while(1) {
  $54 = $12;
  $55 = $6;
  $56 = ((($55)) + 4604|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($54|0)<($57|0);
  $59 = $7;
  if (!($58)) {
   break;
  }
  $60 = ((($59)) + 772|0);
  $61 = $12;
  $62 = (($60) + ($61<<2)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $63 * 16384.0;
  $65 = (_silk_float2int($64)|0);
  $66 = $65 << 16;
  $67 = $7;
  $68 = ((($67)) + 756|0);
  $69 = $12;
  $70 = (($68) + ($69<<2)|0);
  $71 = +HEAPF32[$70>>2];
  $72 = $71 * 16384.0;
  $73 = (_silk_float2int($72)|0);
  $74 = $73&65535;
  $75 = $74&65535;
  $76 = $66 | $75;
  $77 = $12;
  $78 = (($20) + ($77<<2)|0);
  HEAP32[$78>>2] = $76;
  $79 = $7;
  $80 = ((($79)) + 820|0);
  $81 = $12;
  $82 = (($80) + ($81<<2)|0);
  $83 = +HEAPF32[$82>>2];
  $84 = $83 * 16384.0;
  $85 = (_silk_float2int($84)|0);
  $86 = $12;
  $87 = (($22) + ($86<<2)|0);
  HEAP32[$87>>2] = $85;
  $88 = $7;
  $89 = ((($88)) + 836|0);
  $90 = $12;
  $91 = (($89) + ($90<<2)|0);
  $92 = +HEAPF32[$91>>2];
  $93 = $92 * 16384.0;
  $94 = (_silk_float2int($93)|0);
  $95 = $12;
  $96 = (($23) + ($95<<2)|0);
  HEAP32[$96>>2] = $94;
  $97 = $12;
  $98 = (($97) + 1)|0;
  $12 = $98;
 }
 $99 = ((($59)) + 852|0);
 $100 = +HEAPF32[$99>>2];
 $101 = $100 * 1024.0;
 $102 = (_silk_float2int($101)|0);
 $21 = $102;
 $12 = 0;
 while(1) {
  $103 = $12;
  $104 = $6;
  $105 = ((($104)) + 4604|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106*5)|0;
  $108 = ($103|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $7;
  $110 = ((($109)) + 144|0);
  $111 = $12;
  $112 = (($110) + ($111<<2)|0);
  $113 = +HEAPF32[$112>>2];
  $114 = $113 * 16384.0;
  $115 = (_silk_float2int($114)|0);
  $116 = $115&65535;
  $117 = $12;
  $118 = (($17) + ($117<<1)|0);
  HEAP16[$118>>1] = $116;
  $119 = $12;
  $120 = (($119) + 1)|0;
  $12 = $120;
 }
 $13 = 0;
 while(1) {
  $121 = $13;
  $122 = ($121|0)<(2);
  $12 = 0;
  if (!($122)) {
   break;
  }
  while(1) {
   $123 = $12;
   $124 = $6;
   $125 = ((($124)) + 4664|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($123|0)<($126|0);
   if (!($127)) {
    break;
   }
   $128 = $7;
   $129 = ((($128)) + 16|0);
   $130 = $13;
   $131 = (($129) + ($130<<6)|0);
   $132 = $12;
   $133 = (($131) + ($132<<2)|0);
   $134 = +HEAPF32[$133>>2];
   $135 = $134 * 4096.0;
   $136 = (_silk_float2int($135)|0);
   $137 = $136&65535;
   $138 = $13;
   $139 = (($16) + ($138<<5)|0);
   $140 = $12;
   $141 = (($139) + ($140<<1)|0);
   HEAP16[$141>>1] = $137;
   $142 = $12;
   $143 = (($142) + 1)|0;
   $12 = $143;
  }
  $144 = $13;
  $145 = (($144) + 1)|0;
  $13 = $145;
 }
 while(1) {
  $146 = $12;
  $147 = $6;
  $148 = ((($147)) + 4604|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = ($146|0)<($149|0);
  if (!($150)) {
   break;
  }
  $151 = $7;
  $152 = $12;
  $153 = (($151) + ($152<<2)|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $154 * 65536.0;
  $156 = (_silk_float2int($155)|0);
  $157 = $12;
  $158 = (($15) + ($157<<2)|0);
  HEAP32[$158>>2] = $156;
  $159 = $12;
  $160 = (($159) + 1)|0;
  $12 = $160;
 }
 $161 = $8;
 $162 = ((($161)) + 29|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163 << 24 >> 24;
 $165 = ($164|0)==(2);
 if ($165) {
  $166 = $8;
  $167 = ((($166)) + 33|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = (25006 + ($169<<1)|0);
  $171 = HEAP16[$170>>1]|0;
  $172 = $171 << 16 >> 16;
  $18 = $172;
 } else {
  $18 = 0;
 }
 $12 = 0;
 while(1) {
  $173 = $12;
  $174 = $6;
  $175 = ((($174)) + 4608|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($173|0)<($176|0);
  if (!($177)) {
   break;
  }
  $178 = $11;
  $179 = $12;
  $180 = (($178) + ($179<<2)|0);
  $181 = +HEAPF32[$180>>2];
  $182 = 8.0 * $181;
  $183 = (_silk_float2int($182)|0);
  $184 = $12;
  $185 = (($14) + ($184<<2)|0);
  HEAP32[$185>>2] = $183;
  $186 = $12;
  $187 = (($186) + 1)|0;
  $12 = $187;
 }
 $188 = $6;
 $189 = ((($188)) + 4652|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)>(1);
 if (!($191)) {
  $192 = $6;
  $193 = ((($192)) + 4704|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = ($194|0)>(0);
  if (!($195)) {
   $204 = $6;
   $205 = $9;
   $206 = $8;
   $207 = $10;
   $208 = $7;
   $209 = ((($208)) + 228|0);
   $210 = $21;
   $211 = $18;
   _silk_NSQ_c($204,$205,$206,$14,$207,$16,$17,$19,$23,$22,$20,$15,$209,$210,$211);
   STACKTOP = sp;return;
  }
 }
 $196 = $6;
 $197 = $9;
 $198 = $8;
 $199 = $10;
 $200 = $7;
 $201 = ((($200)) + 228|0);
 $202 = $21;
 $203 = $18;
 _silk_NSQ_del_dec_c($196,$197,$198,$14,$199,$16,$17,$19,$23,$22,$20,$15,$201,$202,$203);
 STACKTOP = sp;return;
}
function _silk_quant_LTP_gains_FLP($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $19 = sp + 440|0;
 $20 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = 0;
 while(1) {
  $21 = $18;
  $22 = $16;
  $23 = ($22*5)|0;
  $24 = ($21|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $9;
  $26 = $18;
  $27 = (($25) + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 * 16384.0;
  $30 = (_silk_float2int($29)|0);
  $31 = $30&65535;
  $32 = $18;
  $33 = (($19) + ($32<<1)|0);
  HEAP16[$33>>1] = $31;
  $34 = $18;
  $35 = (($34) + 1)|0;
  $18 = $35;
 }
 $18 = 0;
 while(1) {
  $36 = $18;
  $37 = $16;
  $38 = ($37*5)|0;
  $39 = ($38*5)|0;
  $40 = ($36|0)<($39|0);
  if (!($40)) {
   break;
  }
  $41 = $13;
  $42 = $18;
  $43 = (($41) + ($42<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44 * 262144.0;
  $46 = (_silk_float2int($45)|0);
  $47 = $18;
  $48 = (($20) + ($47<<2)|0);
  HEAP32[$48>>2] = $46;
  $49 = $18;
  $50 = (($49) + 1)|0;
  $18 = $50;
 }
 $51 = $10;
 $52 = $11;
 $53 = $12;
 $54 = $14;
 $55 = $15;
 $56 = $16;
 $57 = $17;
 _silk_quant_LTP_gains($19,$51,$52,$53,$20,$54,$55,$56,$57);
 $18 = 0;
 while(1) {
  $58 = $18;
  $59 = $16;
  $60 = ($59*5)|0;
  $61 = ($58|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $18;
  $63 = (($19) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = (+($64<<16>>16));
  $66 = $65 * 6.103515625E-5;
  $67 = $9;
  $68 = $18;
  $69 = (($67) + ($68<<2)|0);
  HEAPF32[$69>>2] = $66;
  $70 = $18;
  $71 = (($70) + 1)|0;
  $18 = $71;
 }
 STACKTOP = sp;return;
}
function _silk_autocorrelation_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $7;
 $10 = $6;
 $11 = ($9|0)>($10|0);
 if ($11) {
  $12 = $6;
  $7 = $12;
 }
 $8 = 0;
 while(1) {
  $13 = $8;
  $14 = $7;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $5;
  $18 = $8;
  $19 = (($17) + ($18<<2)|0);
  $20 = $6;
  $21 = $8;
  $22 = (($20) - ($21))|0;
  $23 = (+_silk_inner_product_FLP($16,$19,$22));
  $24 = $23;
  $25 = $4;
  $26 = $8;
  $27 = (($25) + ($26<<2)|0);
  HEAPF32[$27>>2] = $24;
  $28 = $8;
  $29 = (($28) + 1)|0;
  $8 = $29;
 }
 STACKTOP = sp;return;
}
function _silk_bwexpander_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $7 = $8;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $4;
  $11 = (($10) - 1)|0;
  $12 = ($9|0)<($11|0);
  $13 = $7;
  $14 = $3;
  if (!($12)) {
   break;
  }
  $15 = $6;
  $16 = (($14) + ($15<<2)|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $17 * $13;
  HEAPF32[$16>>2] = $18;
  $19 = $5;
  $20 = $7;
  $21 = $20 * $19;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 $24 = $4;
 $25 = (($24) - 1)|0;
 $26 = (($14) + ($25<<2)|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $27 * $13;
 HEAPF32[$26>>2] = $28;
 STACKTOP = sp;return;
}
function _silk_energy_FLP($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = 0.0;
 $7 = $3;
 $8 = $7 & 65532;
 $5 = $8;
 $4 = 0;
 while(1) {
  $9 = $4;
  $10 = $5;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = $4;
  $14 = (($13) + 0)|0;
  $15 = (($12) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = $16;
  $18 = $2;
  $19 = $4;
  $20 = (($19) + 0)|0;
  $21 = (($18) + ($20<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $24 = $17 * $23;
  $25 = $2;
  $26 = $4;
  $27 = (($26) + 1)|0;
  $28 = (($25) + ($27<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $29;
  $31 = $2;
  $32 = $4;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = $35;
  $37 = $30 * $36;
  $38 = $24 + $37;
  $39 = $2;
  $40 = $4;
  $41 = (($40) + 2)|0;
  $42 = (($39) + ($41<<2)|0);
  $43 = +HEAPF32[$42>>2];
  $44 = $43;
  $45 = $2;
  $46 = $4;
  $47 = (($46) + 2)|0;
  $48 = (($45) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49;
  $51 = $44 * $50;
  $52 = $38 + $51;
  $53 = $2;
  $54 = $4;
  $55 = (($54) + 3)|0;
  $56 = (($53) + ($55<<2)|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $57;
  $59 = $2;
  $60 = $4;
  $61 = (($60) + 3)|0;
  $62 = (($59) + ($61<<2)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $63;
  $65 = $58 * $64;
  $66 = $52 + $65;
  $67 = $6;
  $68 = $67 + $66;
  $6 = $68;
  $69 = $4;
  $70 = (($69) + 4)|0;
  $4 = $70;
 }
 while(1) {
  $71 = $4;
  $72 = $3;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $2;
  $75 = $4;
  $76 = (($74) + ($75<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $77;
  $79 = $2;
  $80 = $4;
  $81 = (($79) + ($80<<2)|0);
  $82 = +HEAPF32[$81>>2];
  $83 = $82;
  $84 = $78 * $83;
  $85 = $6;
  $86 = $85 + $84;
  $6 = $86;
  $87 = $4;
  $88 = (($87) + 1)|0;
  $4 = $88;
 }
 $89 = $6;
 STACKTOP = sp;return (+$89);
}
function _silk_inner_product_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0.0;
 $9 = $5;
 $10 = $9 & 65532;
 $7 = $10;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $6;
  $16 = (($15) + 0)|0;
  $17 = (($14) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $18;
  $20 = $4;
  $21 = $6;
  $22 = (($21) + 0)|0;
  $23 = (($20) + ($22<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = $19 * $25;
  $27 = $3;
  $28 = $6;
  $29 = (($28) + 1)|0;
  $30 = (($27) + ($29<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $31;
  $33 = $4;
  $34 = $6;
  $35 = (($34) + 1)|0;
  $36 = (($33) + ($35<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37;
  $39 = $32 * $38;
  $40 = $26 + $39;
  $41 = $3;
  $42 = $6;
  $43 = (($42) + 2)|0;
  $44 = (($41) + ($43<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $45;
  $47 = $4;
  $48 = $6;
  $49 = (($48) + 2)|0;
  $50 = (($47) + ($49<<2)|0);
  $51 = +HEAPF32[$50>>2];
  $52 = $51;
  $53 = $46 * $52;
  $54 = $40 + $53;
  $55 = $3;
  $56 = $6;
  $57 = (($56) + 3)|0;
  $58 = (($55) + ($57<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59;
  $61 = $4;
  $62 = $6;
  $63 = (($62) + 3)|0;
  $64 = (($61) + ($63<<2)|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $65;
  $67 = $60 * $66;
  $68 = $54 + $67;
  $69 = $8;
  $70 = $69 + $68;
  $8 = $70;
  $71 = $6;
  $72 = (($71) + 4)|0;
  $6 = $72;
 }
 while(1) {
  $73 = $6;
  $74 = $5;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $3;
  $77 = $6;
  $78 = (($76) + ($77<<2)|0);
  $79 = +HEAPF32[$78>>2];
  $80 = $79;
  $81 = $4;
  $82 = $6;
  $83 = (($81) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $85 = $84;
  $86 = $80 * $85;
  $87 = $8;
  $88 = $87 + $86;
  $8 = $88;
  $89 = $6;
  $90 = (($89) + 1)|0;
  $6 = $90;
 }
 $91 = $8;
 STACKTOP = sp;return (+$91);
}
function _silk_k2a_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $5;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $7 = 0;
  while(1) {
   $12 = $7;
   $13 = $6;
   $14 = ($12|0)<($13|0);
   if (!($14)) {
    break;
   }
   $15 = $3;
   $16 = $7;
   $17 = (($15) + ($16<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $7;
   $20 = (($8) + ($19<<2)|0);
   HEAPF32[$20>>2] = $18;
   $21 = $7;
   $22 = (($21) + 1)|0;
   $7 = $22;
  }
  $7 = 0;
  while(1) {
   $23 = $7;
   $24 = $6;
   $25 = ($23|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $6;
   $27 = $7;
   $28 = (($26) - ($27))|0;
   $29 = (($28) - 1)|0;
   $30 = (($8) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $4;
   $33 = $6;
   $34 = (($32) + ($33<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $31 * $35;
   $37 = $3;
   $38 = $7;
   $39 = (($37) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $40 + $36;
   HEAPF32[$39>>2] = $41;
   $42 = $7;
   $43 = (($42) + 1)|0;
   $7 = $43;
  }
  $44 = $4;
  $45 = $6;
  $46 = (($44) + ($45<<2)|0);
  $47 = +HEAPF32[$46>>2];
  $48 = - $47;
  $49 = $3;
  $50 = $6;
  $51 = (($49) + ($50<<2)|0);
  HEAPF32[$51>>2] = $48;
  $52 = $6;
  $53 = (($52) + 1)|0;
  $6 = $53;
 }
 STACKTOP = sp;return;
}
function _silk_levinsondurbin_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $15 = $4;
 $16 = +HEAPF32[$15>>2];
 $17 = 9.999999960041972E-13 * $16;
 $18 = $17 + 9.9999997171806853E-10;
 $9 = $18;
 $19 = $4;
 $20 = +HEAPF32[$19>>2];
 $10 = $20;
 $21 = $9;
 $22 = $10;
 $23 = $21 > $22;
 $24 = $9;
 $25 = $10;
 $26 = $23 ? $24 : $25;
 $10 = $26;
 $27 = $4;
 $28 = ((($27)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $10;
 $31 = $29 / $30;
 $32 = $3;
 HEAPF32[$32>>2] = $31;
 $33 = $3;
 $34 = +HEAPF32[$33>>2];
 $35 = $4;
 $36 = ((($35)) + 4|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $34 * $37;
 $39 = $10;
 $40 = $39 - $38;
 $10 = $40;
 $41 = $9;
 $42 = $10;
 $43 = $41 > $42;
 $44 = $9;
 $45 = $10;
 $46 = $43 ? $44 : $45;
 $10 = $46;
 $8 = 1;
 while(1) {
  $47 = $8;
  $48 = $5;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $4;
  $51 = $8;
  $52 = (($51) + 1)|0;
  $53 = (($50) + ($52<<2)|0);
  $54 = +HEAPF32[$53>>2];
  $11 = $54;
  $6 = 0;
  while(1) {
   $55 = $6;
   $56 = $8;
   $57 = ($55|0)<($56|0);
   if (!($57)) {
    break;
   }
   $58 = $3;
   $59 = $6;
   $60 = (($58) + ($59<<2)|0);
   $61 = +HEAPF32[$60>>2];
   $62 = $4;
   $63 = $8;
   $64 = $6;
   $65 = (($63) - ($64))|0;
   $66 = (($62) + ($65<<2)|0);
   $67 = +HEAPF32[$66>>2];
   $68 = $61 * $67;
   $69 = $11;
   $70 = $69 - $68;
   $11 = $70;
   $71 = $6;
   $72 = (($71) + 1)|0;
   $6 = $72;
  }
  $73 = $11;
  $74 = $10;
  $75 = $73 / $74;
  $12 = $75;
  $76 = $12;
  $77 = $11;
  $78 = $76 * $77;
  $79 = $10;
  $80 = $79 - $78;
  $10 = $80;
  $81 = $9;
  $82 = $10;
  $83 = $81 > $82;
  $84 = $9;
  $85 = $10;
  $86 = $83 ? $84 : $85;
  $10 = $86;
  $87 = $8;
  $88 = $87 >> 1;
  $7 = $88;
  $6 = 0;
  while(1) {
   $89 = $6;
   $90 = $7;
   $91 = ($89|0)<($90|0);
   if (!($91)) {
    break;
   }
   $92 = $3;
   $93 = $6;
   $94 = (($92) + ($93<<2)|0);
   $95 = +HEAPF32[$94>>2];
   $13 = $95;
   $96 = $3;
   $97 = $8;
   $98 = $6;
   $99 = (($97) - ($98))|0;
   $100 = (($99) - 1)|0;
   $101 = (($96) + ($100<<2)|0);
   $102 = +HEAPF32[$101>>2];
   $14 = $102;
   $103 = $12;
   $104 = $13;
   $105 = $103 * $104;
   $106 = $3;
   $107 = $8;
   $108 = $6;
   $109 = (($107) - ($108))|0;
   $110 = (($109) - 1)|0;
   $111 = (($106) + ($110<<2)|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $112 - $105;
   HEAPF32[$111>>2] = $113;
   $114 = $12;
   $115 = $14;
   $116 = $114 * $115;
   $117 = $3;
   $118 = $6;
   $119 = (($117) + ($118<<2)|0);
   $120 = +HEAPF32[$119>>2];
   $121 = $120 - $116;
   HEAPF32[$119>>2] = $121;
   $122 = $6;
   $123 = (($122) + 1)|0;
   $6 = $123;
  }
  $124 = $8;
  $125 = $124 & 1;
  $126 = ($125|0)!=(0);
  if ($126) {
   $127 = $12;
   $128 = $3;
   $129 = $7;
   $130 = (($128) + ($129<<2)|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $127 * $131;
   $133 = $3;
   $134 = $7;
   $135 = (($133) + ($134<<2)|0);
   $136 = +HEAPF32[$135>>2];
   $137 = $136 - $132;
   HEAPF32[$135>>2] = $137;
  }
  $138 = $12;
  $139 = $3;
  $140 = $8;
  $141 = (($139) + ($140<<2)|0);
  HEAPF32[$141>>2] = $138;
  $142 = $8;
  $143 = (($142) + 1)|0;
  $8 = $143;
 }
 $144 = $10;
 STACKTOP = sp;return (+$144);
}
function _silk_LPC_inverse_pred_gain_FLP($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $11 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $14 = $4;
 $15 = $14 & 1;
 $16 = (($11) + ($15<<6)|0);
 $13 = $16;
 $17 = $13;
 $18 = $3;
 $19 = $4;
 $20 = $19<<2;
 _memcpy(($17|0),($18|0),($20|0))|0;
 $7 = 1.0;
 $21 = $4;
 $22 = (($21) - 1)|0;
 $5 = $22;
 while(1) {
  $23 = $5;
  $24 = ($23|0)>(0);
  $25 = $13;
  if (!($24)) {
   break;
  }
  $26 = $5;
  $27 = (($25) + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $29 = - $28;
  $30 = $29;
  $8 = $30;
  $31 = $8;
  $32 = $31 > 0.99989998340606689;
  $33 = $8;
  $34 = $33 < -0.99989998340606689;
  $or$cond = $32 | $34;
  if ($or$cond) {
   label = 4;
   break;
  }
  $35 = $8;
  $36 = $8;
  $37 = $35 * $36;
  $38 = 1.0 - $37;
  $9 = $38;
  $39 = $9;
  $40 = 1.0 / $39;
  $10 = $40;
  $41 = $9;
  $42 = $7;
  $43 = $42 * $41;
  $7 = $43;
  $44 = $13;
  $12 = $44;
  $45 = $5;
  $46 = $45 & 1;
  $47 = (($11) + ($46<<6)|0);
  $13 = $47;
  $6 = 0;
  while(1) {
   $48 = $6;
   $49 = $5;
   $50 = ($48|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = $12;
   $52 = $6;
   $53 = (($51) + ($52<<2)|0);
   $54 = +HEAPF32[$53>>2];
   $55 = $54;
   $56 = $12;
   $57 = $5;
   $58 = $6;
   $59 = (($57) - ($58))|0;
   $60 = (($59) - 1)|0;
   $61 = (($56) + ($60<<2)|0);
   $62 = +HEAPF32[$61>>2];
   $63 = $62;
   $64 = $8;
   $65 = $63 * $64;
   $66 = $55 - $65;
   $67 = $10;
   $68 = $66 * $67;
   $69 = $68;
   $70 = $13;
   $71 = $6;
   $72 = (($70) + ($71<<2)|0);
   HEAPF32[$72>>2] = $69;
   $73 = $6;
   $74 = (($73) + 1)|0;
   $6 = $74;
  }
  $75 = $5;
  $76 = (($75) + -1)|0;
  $5 = $76;
 }
 if ((label|0) == 4) {
  $2 = 0.0;
  $93 = $2;
  STACKTOP = sp;return (+$93);
 }
 $77 = +HEAPF32[$25>>2];
 $78 = - $77;
 $79 = $78;
 $8 = $79;
 $80 = $8;
 $81 = $80 > 0.99989998340606689;
 $82 = $8;
 $83 = $82 < -0.99989998340606689;
 $or$cond3 = $81 | $83;
 if ($or$cond3) {
  $2 = 0.0;
  $93 = $2;
  STACKTOP = sp;return (+$93);
 } else {
  $84 = $8;
  $85 = $8;
  $86 = $84 * $85;
  $87 = 1.0 - $86;
  $9 = $87;
  $88 = $9;
  $89 = $7;
  $90 = $89 * $88;
  $7 = $90;
  $91 = $7;
  $92 = $91;
  $2 = $92;
  $93 = $2;
  STACKTOP = sp;return (+$93);
 }
 return +(0.0);
}
function _silk_pitch_analysis_core_FLP($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 $7 = +$7;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$sink = 0.0, $$sink1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0.0, $242 = 0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0.0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0.0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0.0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0, $528 = 0.0, $529 = 0, $53 = 0.0, $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0.0, $535 = 0.0;
 var $536 = 0.0, $537 = 0, $538 = 0.0, $539 = 0.0, $54 = 0, $540 = 0.0, $541 = 0.0, $542 = 0.0, $543 = 0, $544 = 0, $545 = 0.0, $546 = 0.0, $547 = 0.0, $548 = 0.0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0, $552 = 0.0, $553 = 0.0;
 var $554 = 0, $555 = 0.0, $556 = 0.0, $557 = 0.0, $558 = 0.0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0.0, $565 = 0.0, $566 = 0, $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0, $571 = 0.0;
 var $572 = 0, $573 = 0.0, $574 = 0.0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0, $586 = 0, $587 = 0.0, $588 = 0.0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0.0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0.0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0.0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0.0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0.0, $697 = 0.0, $698 = 0.0, $699 = 0;
 var $70 = 0, $700 = 0, $701 = 0.0, $702 = 0, $703 = 0.0, $704 = 0.0, $705 = 0.0, $706 = 0.0, $707 = 0.0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0.0, $713 = 0.0, $714 = 0.0, $715 = 0.0, $716 = 0.0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0.0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 13936|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(13936|0);
 $29 = sp + 9072|0;
 $30 = sp + 8432|0;
 $31 = sp + 13288|0;
 $32 = sp + 12968|0;
 $33 = sp + 8408|0;
 $36 = sp + 6016|0;
 $37 = sp + 5756|0;
 $38 = sp + 5712|0;
 $45 = sp + 5608|0;
 $46 = sp + 12664|0;
 $64 = sp + 2816|0;
 $65 = sp + 96|0;
 $81 = sp + 11384|0;
 $82 = sp + 10424|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $83 = $23;
 $84 = ($83*5)|0;
 $85 = (20 + ($84))|0;
 $86 = $21;
 $87 = Math_imul($85, $86)|0;
 $67 = $87;
 $88 = $23;
 $89 = ($88*5)|0;
 $90 = (20 + ($89))|0;
 $91 = $90<<2;
 $69 = $91;
 $92 = $23;
 $93 = ($92*5)|0;
 $94 = (20 + ($93))|0;
 $95 = $94<<3;
 $68 = $95;
 $96 = $21;
 $97 = ($96*5)|0;
 $70 = $97;
 $72 = 20;
 $71 = 40;
 $98 = $21;
 $99 = $98<<1;
 $73 = $99;
 $75 = 8;
 $74 = 16;
 $100 = $21;
 $101 = ($100*18)|0;
 $102 = (($101) - 1)|0;
 $76 = $102;
 $78 = 72;
 $77 = 143;
 $103 = $21;
 $104 = ($103|0)==(16);
 do {
  if ($104) {
   $105 = $13;
   $106 = $67;
   _silk_float2short_array_326($81,$105,$106);
   ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
   $107 = $67;
   _silk_resampler_down2($33,$31,$81,$107);
   $108 = $68;
   _silk_short2float_array_327($29,$31,$108);
  } else {
   $109 = $21;
   $110 = ($109|0)==(12);
   if ($110) {
    $111 = $13;
    $112 = $67;
    _silk_float2short_array_326($82,$111,$112);
    ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;
    $113 = $67;
    _silk_resampler_down2_3($33,$31,$82,$113);
    $114 = $68;
    _silk_short2float_array_327($29,$31,$114);
    break;
   } else {
    $115 = $13;
    $116 = $68;
    _silk_float2short_array_326($31,$115,$116);
    break;
   }
  }
 } while(0);
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;
 $117 = $68;
 _silk_resampler_down2($33,$32,$31,$117);
 $118 = $69;
 _silk_short2float_array_327($30,$32,$118);
 $119 = $69;
 $120 = (($119) - 1)|0;
 $25 = $120;
 while(1) {
  $121 = $25;
  $122 = ($121|0)>(0);
  if (!($122)) {
   break;
  }
  $123 = $25;
  $124 = (($123) - 1)|0;
  $125 = (($30) + ($124<<2)|0);
  $126 = +HEAPF32[$125>>2];
  $127 = $25;
  $128 = (($30) + ($127<<2)|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $129 + $126;
  HEAPF32[$128>>2] = $130;
  $131 = $25;
  $132 = (($131) + -1)|0;
  $25 = $132;
 }
 $133 = $23;
 $134 = $133<<2;
 $135 = ($134*149)|0;
 _memset(($36|0),0,($135|0))|0;
 $136 = $72;
 $137 = $136 << 2;
 $138 = (($30) + ($137<<2)|0);
 $39 = $138;
 $26 = 0;
 while(1) {
  $139 = $26;
  $140 = $23;
  $141 = $140 >> 1;
  $142 = ($139|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $39;
  $144 = $75;
  $145 = (0 - ($144))|0;
  $146 = (($143) + ($145<<2)|0);
  $40 = $146;
  $147 = $39;
  $148 = $39;
  $149 = $78;
  $150 = (0 - ($149))|0;
  $151 = (($148) + ($150<<2)|0);
  $152 = $71;
  $153 = $78;
  $154 = $75;
  $155 = (($153) - ($154))|0;
  $156 = (($155) + 1)|0;
  $157 = $24;
  _celt_pitch_xcorr($147,$151,$37,$152,$156,$157);
  $158 = $78;
  $159 = $75;
  $160 = (($158) - ($159))|0;
  $161 = (($37) + ($160<<2)|0);
  $162 = +HEAPF32[$161>>2];
  $163 = $162;
  $41 = $163;
  $164 = $39;
  $165 = $71;
  $166 = (+_silk_energy_FLP($164,$165));
  $167 = $40;
  $168 = $71;
  $169 = (+_silk_energy_FLP($167,$168));
  $170 = $166 + $169;
  $171 = $71;
  $172 = (+($171|0));
  $173 = $172 * 4000.0;
  $174 = $173;
  $175 = $170 + $174;
  $42 = $175;
  $176 = $41;
  $177 = 2.0 * $176;
  $178 = $42;
  $179 = $177 / $178;
  $180 = $179;
  $181 = $75;
  $182 = (($36) + ($181<<2)|0);
  $183 = +HEAPF32[$182>>2];
  $184 = $183 + $180;
  HEAPF32[$182>>2] = $184;
  $185 = $75;
  $186 = (($185) + 1)|0;
  $27 = $186;
  while(1) {
   $187 = $27;
   $188 = $78;
   $189 = ($187|0)<=($188|0);
   if (!($189)) {
    break;
   }
   $190 = $40;
   $191 = ((($190)) + -4|0);
   $40 = $191;
   $192 = $78;
   $193 = $27;
   $194 = (($192) - ($193))|0;
   $195 = (($37) + ($194<<2)|0);
   $196 = +HEAPF32[$195>>2];
   $197 = $196;
   $41 = $197;
   $198 = $40;
   $199 = +HEAPF32[$198>>2];
   $200 = $199;
   $201 = $40;
   $202 = +HEAPF32[$201>>2];
   $203 = $202;
   $204 = $200 * $203;
   $205 = $40;
   $206 = $71;
   $207 = (($205) + ($206<<2)|0);
   $208 = +HEAPF32[$207>>2];
   $209 = $208;
   $210 = $40;
   $211 = $71;
   $212 = (($210) + ($211<<2)|0);
   $213 = +HEAPF32[$212>>2];
   $214 = $213;
   $215 = $209 * $214;
   $216 = $204 - $215;
   $217 = $42;
   $218 = $217 + $216;
   $42 = $218;
   $219 = $41;
   $220 = 2.0 * $219;
   $221 = $42;
   $222 = $220 / $221;
   $223 = $222;
   $224 = $27;
   $225 = (($36) + ($224<<2)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $226 + $223;
   HEAPF32[$225>>2] = $227;
   $228 = $27;
   $229 = (($228) + 1)|0;
   $27 = $229;
  }
  $230 = $71;
  $231 = $39;
  $232 = (($231) + ($230<<2)|0);
  $39 = $232;
  $233 = $26;
  $234 = (($233) + 1)|0;
  $26 = $234;
 }
 $235 = $78;
 $25 = $235;
 while(1) {
  $236 = $25;
  $237 = $75;
  $238 = ($236|0)>=($237|0);
  if (!($238)) {
   break;
  }
  $239 = $25;
  $240 = (($36) + ($239<<2)|0);
  $241 = +HEAPF32[$240>>2];
  $242 = $25;
  $243 = (+($242|0));
  $244 = $241 * $243;
  $245 = $244 / 4096.0;
  $246 = $25;
  $247 = (($36) + ($246<<2)|0);
  $248 = +HEAPF32[$247>>2];
  $249 = $248 - $245;
  HEAPF32[$247>>2] = $249;
  $250 = $25;
  $251 = (($250) + -1)|0;
  $25 = $251;
 }
 $252 = $22;
 $253 = $252<<1;
 $254 = (4 + ($253))|0;
 $47 = $254;
 $255 = $75;
 $256 = (($36) + ($255<<2)|0);
 $257 = $78;
 $258 = $75;
 $259 = (($257) - ($258))|0;
 $260 = (($259) + 1)|0;
 $261 = $47;
 _silk_insertion_sort_decreasing_FLP($256,$45,$260,$261);
 $262 = $75;
 $263 = (($36) + ($262<<2)|0);
 $264 = +HEAPF32[$263>>2];
 $49 = $264;
 $265 = $49;
 $266 = $265 < 0.20000000298023224;
 if ($266) {
  $267 = $14;
  $268 = $23;
  $269 = $268<<2;
  _memset(($267|0),0,($269|0))|0;
  $270 = $17;
  HEAPF32[$270>>2] = 0.0;
  $271 = $15;
  HEAP16[$271>>1] = 0;
  $272 = $16;
  HEAP8[$272>>0] = 0;
  $12 = 1;
  $865 = $12;
  STACKTOP = sp;return ($865|0);
 }
 $273 = $19;
 $274 = $49;
 $275 = $273 * $274;
 $34 = $275;
 $25 = 0;
 while(1) {
  $276 = $25;
  $277 = $47;
  $278 = ($276|0)<($277|0);
  if (!($278)) {
   break;
  }
  $279 = $75;
  $280 = $25;
  $281 = (($279) + ($280))|0;
  $282 = (($36) + ($281<<2)|0);
  $283 = +HEAPF32[$282>>2];
  $284 = $34;
  $285 = $283 > $284;
  $286 = $25;
  if (!($285)) {
   label = 24;
   break;
  }
  $287 = (($45) + ($286<<2)|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $75;
  $290 = (($288) + ($289))|0;
  $291 = $290 << 1;
  $292 = $25;
  $293 = (($45) + ($292<<2)|0);
  HEAP32[$293>>2] = $291;
  $294 = $25;
  $295 = (($294) + 1)|0;
  $25 = $295;
 }
 if ((label|0) == 24) {
  $47 = $286;
 }
 $296 = $74;
 $297 = (($296) - 5)|0;
 $25 = $297;
 while(1) {
  $298 = $25;
  $299 = $77;
  $300 = (($299) + 5)|0;
  $301 = ($298|0)<($300|0);
  if (!($301)) {
   break;
  }
  $302 = $25;
  $303 = (($46) + ($302<<1)|0);
  HEAP16[$303>>1] = 0;
  $304 = $25;
  $305 = (($304) + 1)|0;
  $25 = $305;
 }
 $25 = 0;
 while(1) {
  $306 = $25;
  $307 = $47;
  $308 = ($306|0)<($307|0);
  if (!($308)) {
   break;
  }
  $309 = $25;
  $310 = (($45) + ($309<<2)|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = (($46) + ($311<<1)|0);
  HEAP16[$312>>1] = 1;
  $313 = $25;
  $314 = (($313) + 1)|0;
  $25 = $314;
 }
 $315 = $77;
 $316 = (($315) + 3)|0;
 $25 = $316;
 while(1) {
  $317 = $25;
  $318 = $74;
  $319 = ($317|0)>=($318|0);
  if (!($319)) {
   break;
  }
  $320 = $25;
  $321 = (($320) - 1)|0;
  $322 = (($46) + ($321<<1)|0);
  $323 = HEAP16[$322>>1]|0;
  $324 = $323 << 16 >> 16;
  $325 = $25;
  $326 = (($325) - 2)|0;
  $327 = (($46) + ($326<<1)|0);
  $328 = HEAP16[$327>>1]|0;
  $329 = $328 << 16 >> 16;
  $330 = (($324) + ($329))|0;
  $331 = $25;
  $332 = (($46) + ($331<<1)|0);
  $333 = HEAP16[$332>>1]|0;
  $334 = $333 << 16 >> 16;
  $335 = (($334) + ($330))|0;
  $336 = $335&65535;
  HEAP16[$332>>1] = $336;
  $337 = $25;
  $338 = (($337) + -1)|0;
  $25 = $338;
 }
 $47 = 0;
 $339 = $74;
 $25 = $339;
 while(1) {
  $340 = $25;
  $341 = $77;
  $342 = (($341) + 1)|0;
  $343 = ($340|0)<($342|0);
  if (!($343)) {
   break;
  }
  $344 = $25;
  $345 = (($344) + 1)|0;
  $346 = (($46) + ($345<<1)|0);
  $347 = HEAP16[$346>>1]|0;
  $348 = $347 << 16 >> 16;
  $349 = ($348|0)>(0);
  if ($349) {
   $350 = $25;
   $351 = $47;
   $352 = (($45) + ($351<<2)|0);
   HEAP32[$352>>2] = $350;
   $353 = $47;
   $354 = (($353) + 1)|0;
   $47 = $354;
  }
  $355 = $25;
  $356 = (($355) + 1)|0;
  $25 = $356;
 }
 $357 = $77;
 $358 = (($357) + 3)|0;
 $25 = $358;
 while(1) {
  $359 = $25;
  $360 = $74;
  $361 = ($359|0)>=($360|0);
  if (!($361)) {
   break;
  }
  $362 = $25;
  $363 = (($362) - 1)|0;
  $364 = (($46) + ($363<<1)|0);
  $365 = HEAP16[$364>>1]|0;
  $366 = $365 << 16 >> 16;
  $367 = $25;
  $368 = (($367) - 2)|0;
  $369 = (($46) + ($368<<1)|0);
  $370 = HEAP16[$369>>1]|0;
  $371 = $370 << 16 >> 16;
  $372 = (($366) + ($371))|0;
  $373 = $25;
  $374 = (($373) - 3)|0;
  $375 = (($46) + ($374<<1)|0);
  $376 = HEAP16[$375>>1]|0;
  $377 = $376 << 16 >> 16;
  $378 = (($372) + ($377))|0;
  $379 = $25;
  $380 = (($46) + ($379<<1)|0);
  $381 = HEAP16[$380>>1]|0;
  $382 = $381 << 16 >> 16;
  $383 = (($382) + ($378))|0;
  $384 = $383&65535;
  HEAP16[$380>>1] = $384;
  $385 = $25;
  $386 = (($385) + -1)|0;
  $25 = $386;
 }
 $48 = 0;
 $387 = $74;
 $25 = $387;
 while(1) {
  $388 = $25;
  $389 = $77;
  $390 = (($389) + 4)|0;
  $391 = ($388|0)<($390|0);
  if (!($391)) {
   break;
  }
  $392 = $25;
  $393 = (($46) + ($392<<1)|0);
  $394 = HEAP16[$393>>1]|0;
  $395 = $394 << 16 >> 16;
  $396 = ($395|0)>(0);
  if ($396) {
   $397 = $25;
   $398 = (($397) - 2)|0;
   $399 = $398&65535;
   $400 = $48;
   $401 = (($46) + ($400<<1)|0);
   HEAP16[$401>>1] = $399;
   $402 = $48;
   $403 = (($402) + 1)|0;
   $48 = $403;
  }
  $404 = $25;
  $405 = (($404) + 1)|0;
  $25 = $405;
 }
 _memset(($36|0),0,2384)|0;
 $406 = $21;
 $407 = ($406|0)==(8);
 if ($407) {
  $408 = $13;
  $409 = ((($408)) + 640|0);
  $39 = $409;
 } else {
  $410 = ((($29)) + 640|0);
  $39 = $410;
 }
 $26 = 0;
 while(1) {
  $411 = $26;
  $412 = $23;
  $413 = ($411|0)<($412|0);
  if (!($413)) {
   break;
  }
  $414 = $39;
  $415 = $71;
  $416 = (+_silk_energy_FLP($414,$415));
  $417 = $416 + 1.0;
  $44 = $417;
  $28 = 0;
  while(1) {
   $418 = $28;
   $419 = $48;
   $420 = ($418|0)<($419|0);
   if (!($420)) {
    break;
   }
   $421 = $28;
   $422 = (($46) + ($421<<1)|0);
   $423 = HEAP16[$422>>1]|0;
   $424 = $423 << 16 >> 16;
   $27 = $424;
   $425 = $39;
   $426 = $27;
   $427 = (0 - ($426))|0;
   $428 = (($425) + ($427<<2)|0);
   $40 = $428;
   $429 = $40;
   $430 = $39;
   $431 = $71;
   $432 = (+_silk_inner_product_FLP($429,$430,$431));
   $41 = $432;
   $433 = $41;
   $434 = $433 > 0.0;
   if ($434) {
    $435 = $40;
    $436 = $71;
    $437 = (+_silk_energy_FLP($435,$436));
    $43 = $437;
    $438 = $41;
    $439 = 2.0 * $438;
    $440 = $43;
    $441 = $44;
    $442 = $440 + $441;
    $443 = $439 / $442;
    $444 = $443;
    $445 = $26;
    $446 = (($36) + (($445*596)|0)|0);
    $447 = $27;
    $448 = (($446) + ($447<<2)|0);
    $$sink = $444;$$sink1 = $448;
   } else {
    $449 = $26;
    $450 = (($36) + (($449*596)|0)|0);
    $451 = $27;
    $452 = (($450) + ($451<<2)|0);
    $$sink = 0.0;$$sink1 = $452;
   }
   HEAPF32[$$sink1>>2] = $$sink;
   $453 = $28;
   $454 = (($453) + 1)|0;
   $28 = $454;
  }
  $455 = $71;
  $456 = $39;
  $457 = (($456) + ($455<<2)|0);
  $39 = $457;
  $458 = $26;
  $459 = (($458) + 1)|0;
  $26 = $459;
 }
 $50 = 0.0;
 $51 = -1000.0;
 $54 = 0;
 $56 = -1;
 $460 = $18;
 $461 = ($460|0)>(0);
 if ($461) {
  $462 = $21;
  $463 = ($462|0)==(12);
  if ($463) {
   $464 = $18;
   $465 = $464 << 1;
   $466 = (($465|0) / 3)&-1;
   $18 = $466;
  } else {
   $467 = $21;
   $468 = ($467|0)==(16);
   if ($468) {
    $469 = $18;
    $470 = $469 >> 1;
    $18 = $470;
   }
  }
  $471 = $18;
  $472 = (+($471|0));
  $473 = $472;
  $474 = (+_silk_log2_328($473));
  $62 = $474;
 } else {
  $62 = 0.0;
 }
 $475 = $23;
 $476 = ($475|0)==(4);
 do {
  if ($476) {
   $60 = 11;
   $80 = 30771;
   $477 = $21;
   $478 = ($477|0)==(8);
   $479 = $22;
   $480 = ($479|0)>(0);
   $or$cond = $478 & $480;
   if ($or$cond) {
    $79 = 11;
    break;
   } else {
    $79 = 3;
    break;
   }
  } else {
   $60 = 3;
   $80 = 30737;
   $79 = 3;
  }
 } while(0);
 $26 = 0;
 while(1) {
  $481 = $26;
  $482 = $47;
  $483 = ($481|0)<($482|0);
  if (!($483)) {
   break;
  }
  $484 = $26;
  $485 = (($45) + ($484<<2)|0);
  $486 = HEAP32[$485>>2]|0;
  $27 = $486;
  $28 = 0;
  while(1) {
   $487 = $28;
   $488 = $79;
   $489 = ($487|0)<($488|0);
   if (!($489)) {
    break;
   }
   $490 = $28;
   $491 = (($38) + ($490<<2)|0);
   HEAPF32[$491>>2] = 0.0;
   $25 = 0;
   while(1) {
    $492 = $25;
    $493 = $23;
    $494 = ($492|0)<($493|0);
    if (!($494)) {
     break;
    }
    $495 = $25;
    $496 = (($36) + (($495*596)|0)|0);
    $497 = $27;
    $498 = $80;
    $499 = $25;
    $500 = $60;
    $501 = Math_imul($499, $500)|0;
    $502 = $28;
    $503 = (($501) + ($502))|0;
    $504 = (($498) + ($503)|0);
    $505 = HEAP8[$504>>0]|0;
    $506 = $505 << 24 >> 24;
    $507 = (($497) + ($506))|0;
    $508 = (($496) + ($507<<2)|0);
    $509 = +HEAPF32[$508>>2];
    $510 = $28;
    $511 = (($38) + ($510<<2)|0);
    $512 = +HEAPF32[$511>>2];
    $513 = $512 + $509;
    HEAPF32[$511>>2] = $513;
    $514 = $25;
    $515 = (($514) + 1)|0;
    $25 = $515;
   }
   $516 = $28;
   $517 = (($516) + 1)|0;
   $28 = $517;
  }
  $53 = -1000.0;
  $55 = 0;
  $25 = 0;
  while(1) {
   $518 = $25;
   $519 = $79;
   $520 = ($518|0)<($519|0);
   if (!($520)) {
    break;
   }
   $521 = $25;
   $522 = (($38) + ($521<<2)|0);
   $523 = +HEAPF32[$522>>2];
   $524 = $53;
   $525 = $523 > $524;
   if ($525) {
    $526 = $25;
    $527 = (($38) + ($526<<2)|0);
    $528 = +HEAPF32[$527>>2];
    $53 = $528;
    $529 = $25;
    $55 = $529;
   }
   $530 = $25;
   $531 = (($530) + 1)|0;
   $25 = $531;
  }
  $532 = $27;
  $533 = (+($532|0));
  $534 = $533;
  $535 = (+_silk_log2_328($534));
  $61 = $535;
  $536 = $53;
  $537 = $23;
  $538 = (+($537|0));
  $539 = 0.20000000298023224 * $538;
  $540 = $61;
  $541 = $539 * $540;
  $542 = $536 - $541;
  $52 = $542;
  $543 = $18;
  $544 = ($543|0)>(0);
  if ($544) {
   $545 = $61;
   $546 = $62;
   $547 = $545 - $546;
   $63 = $547;
   $548 = $63;
   $549 = $63;
   $550 = $549 * $548;
   $63 = $550;
   $551 = $23;
   $552 = (+($551|0));
   $553 = 0.20000000298023224 * $552;
   $554 = $17;
   $555 = +HEAPF32[$554>>2];
   $556 = $553 * $555;
   $557 = $63;
   $558 = $556 * $557;
   $559 = $63;
   $560 = $559 + 0.5;
   $561 = $558 / $560;
   $562 = $52;
   $563 = $562 - $561;
   $52 = $563;
  }
  $564 = $52;
  $565 = $51;
  $566 = $564 > $565;
  if ($566) {
   $567 = $53;
   $568 = $23;
   $569 = (+($568|0));
   $570 = $20;
   $571 = $569 * $570;
   $572 = $567 > $571;
   if ($572) {
    $573 = $52;
    $51 = $573;
    $574 = $53;
    $50 = $574;
    $575 = $27;
    $56 = $575;
    $576 = $55;
    $54 = $576;
   }
  }
  $577 = $26;
  $578 = (($577) + 1)|0;
  $26 = $578;
 }
 $579 = $56;
 $580 = ($579|0)==(-1);
 if ($580) {
  $581 = $14;
  ;HEAP32[$581>>2]=0|0;HEAP32[$581+4>>2]=0|0;HEAP32[$581+8>>2]=0|0;HEAP32[$581+12>>2]=0|0;
  $582 = $17;
  HEAPF32[$582>>2] = 0.0;
  $583 = $15;
  HEAP16[$583>>1] = 0;
  $584 = $16;
  HEAP8[$584>>0] = 0;
  $12 = 1;
  $865 = $12;
  STACKTOP = sp;return ($865|0);
 }
 $585 = $50;
 $586 = $23;
 $587 = (+($586|0));
 $588 = $585 / $587;
 $589 = $17;
 HEAPF32[$589>>2] = $588;
 $590 = $21;
 $591 = ($590|0)>(8);
 if ($591) {
  $592 = $21;
  $593 = ($592|0)==(12);
  $594 = $56;
  if ($593) {
   $595 = $594&65535;
   $596 = $595 << 16 >> 16;
   $597 = ($596*3)|0;
   $598 = $597 >> 1;
   $599 = $56;
   $600 = $599&65535;
   $601 = $600 << 16 >> 16;
   $602 = ($601*3)|0;
   $603 = $602 & 1;
   $604 = (($598) + ($603))|0;
   $56 = $604;
  } else {
   $605 = $594 << 1;
   $56 = $605;
  }
  $606 = $73;
  $607 = $76;
  $608 = ($606|0)>($607|0);
  $609 = $56;
  do {
   if ($608) {
    $610 = $73;
    $611 = ($609|0)>($610|0);
    if ($611) {
     $612 = $73;
     $628 = $612;
     break;
    } else {
     $613 = $56;
     $614 = $76;
     $615 = ($613|0)<($614|0);
     $616 = $76;
     $617 = $56;
     $618 = $615 ? $616 : $617;
     $628 = $618;
     break;
    }
   } else {
    $619 = $76;
    $620 = ($609|0)>($619|0);
    if ($620) {
     $621 = $76;
     $628 = $621;
     break;
    } else {
     $622 = $56;
     $623 = $73;
     $624 = ($622|0)<($623|0);
     $625 = $73;
     $626 = $56;
     $627 = $624 ? $625 : $626;
     $628 = $627;
     break;
    }
   }
  } while(0);
  $56 = $628;
  $629 = $56;
  $630 = (($629) - 2)|0;
  $631 = $73;
  $632 = (_silk_max_int_329($630,$631)|0);
  $57 = $632;
  $633 = $56;
  $634 = (($633) + 2)|0;
  $635 = $76;
  $636 = (_silk_min_int_330($634,$635)|0);
  $58 = $636;
  $637 = $56;
  $59 = $637;
  $54 = 0;
  $50 = -1000.0;
  $638 = $13;
  $639 = $57;
  $640 = $70;
  $641 = $23;
  $642 = $22;
  $643 = $24;
  _silk_P_Ana_calc_corr_st3($65,$638,$639,$640,$641,$642,$643);
  $644 = $13;
  $645 = $57;
  $646 = $70;
  $647 = $23;
  $648 = $22;
  _silk_P_Ana_calc_energy_st3($64,$644,$645,$646,$647,$648);
  $66 = 0;
  $649 = $56;
  $650 = (+($649|0));
  $651 = 0.05000000074505806 / $650;
  $35 = $651;
  $652 = $23;
  $653 = ($652|0)==(4);
  if ($653) {
   $654 = $22;
   $655 = (30975 + ($654)|0);
   $656 = HEAP8[$655>>0]|0;
   $657 = $656 << 24 >> 24;
   $79 = $657;
   $60 = 34;
   $80 = 30815;
  } else {
   $79 = 12;
   $60 = 12;
   $80 = 30743;
  }
  $658 = $13;
  $659 = $21;
  $660 = ($659*20)|0;
  $661 = (($658) + ($660<<2)|0);
  $39 = $661;
  $662 = $39;
  $663 = $23;
  $664 = $70;
  $665 = Math_imul($663, $664)|0;
  $666 = (+_silk_energy_FLP($662,$665));
  $667 = $666 + 1.0;
  $44 = $667;
  $668 = $57;
  $27 = $668;
  while(1) {
   $669 = $27;
   $670 = $58;
   $671 = ($669|0)<=($670|0);
   if (!($671)) {
    break;
   }
   $28 = 0;
   while(1) {
    $672 = $28;
    $673 = $79;
    $674 = ($672|0)<($673|0);
    if (!($674)) {
     break;
    }
    $41 = 0.0;
    $675 = $44;
    $43 = $675;
    $26 = 0;
    while(1) {
     $676 = $26;
     $677 = $23;
     $678 = ($676|0)<($677|0);
     if (!($678)) {
      break;
     }
     $679 = $26;
     $680 = (($65) + (($679*680)|0)|0);
     $681 = $28;
     $682 = (($680) + (($681*20)|0)|0);
     $683 = $66;
     $684 = (($682) + ($683<<2)|0);
     $685 = +HEAPF32[$684>>2];
     $686 = $685;
     $687 = $41;
     $688 = $687 + $686;
     $41 = $688;
     $689 = $26;
     $690 = (($64) + (($689*680)|0)|0);
     $691 = $28;
     $692 = (($690) + (($691*20)|0)|0);
     $693 = $66;
     $694 = (($692) + ($693<<2)|0);
     $695 = +HEAPF32[$694>>2];
     $696 = $695;
     $697 = $43;
     $698 = $697 + $696;
     $43 = $698;
     $699 = $26;
     $700 = (($699) + 1)|0;
     $26 = $700;
    }
    $701 = $41;
    $702 = $701 > 0.0;
    if ($702) {
     $703 = $41;
     $704 = 2.0 * $703;
     $705 = $43;
     $706 = $704 / $705;
     $707 = $706;
     $53 = $707;
     $708 = $35;
     $709 = $28;
     $710 = (+($709|0));
     $711 = $708 * $710;
     $712 = 1.0 - $711;
     $713 = $53;
     $714 = $713 * $712;
     $53 = $714;
    } else {
     $53 = 0.0;
    }
    $715 = $53;
    $716 = $50;
    $717 = $715 > $716;
    if ($717) {
     $718 = $27;
     $719 = $28;
     $720 = (30815 + ($719)|0);
     $721 = HEAP8[$720>>0]|0;
     $722 = $721 << 24 >> 24;
     $723 = (($718) + ($722))|0;
     $724 = $76;
     $725 = ($723|0)<=($724|0);
     if ($725) {
      $726 = $53;
      $50 = $726;
      $727 = $27;
      $59 = $727;
      $728 = $28;
      $54 = $728;
     }
    }
    $729 = $28;
    $730 = (($729) + 1)|0;
    $28 = $730;
   }
   $731 = $66;
   $732 = (($731) + 1)|0;
   $66 = $732;
   $733 = $27;
   $734 = (($733) + 1)|0;
   $27 = $734;
  }
  $26 = 0;
  while(1) {
   $735 = $26;
   $736 = $23;
   $737 = ($735|0)<($736|0);
   $738 = $59;
   if (!($737)) {
    break;
   }
   $739 = $80;
   $740 = $26;
   $741 = $60;
   $742 = Math_imul($740, $741)|0;
   $743 = $54;
   $744 = (($742) + ($743))|0;
   $745 = (($739) + ($744)|0);
   $746 = HEAP8[$745>>0]|0;
   $747 = $746 << 24 >> 24;
   $748 = (($738) + ($747))|0;
   $749 = $14;
   $750 = $26;
   $751 = (($749) + ($750<<2)|0);
   HEAP32[$751>>2] = $748;
   $752 = $73;
   $753 = $21;
   $754 = ($753*18)|0;
   $755 = ($752|0)>($754|0);
   $756 = $14;
   $757 = $26;
   $758 = (($756) + ($757<<2)|0);
   $759 = HEAP32[$758>>2]|0;
   do {
    if ($755) {
     $760 = $73;
     $761 = ($759|0)>($760|0);
     if ($761) {
      $762 = $73;
      $795 = $762;
      break;
     }
     $763 = $14;
     $764 = $26;
     $765 = (($763) + ($764<<2)|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = $21;
     $768 = ($767*18)|0;
     $769 = ($766|0)<($768|0);
     if ($769) {
      $770 = $21;
      $771 = ($770*18)|0;
      $795 = $771;
      break;
     } else {
      $772 = $14;
      $773 = $26;
      $774 = (($772) + ($773<<2)|0);
      $775 = HEAP32[$774>>2]|0;
      $795 = $775;
      break;
     }
    } else {
     $776 = $21;
     $777 = ($776*18)|0;
     $778 = ($759|0)>($777|0);
     if ($778) {
      $779 = $21;
      $780 = ($779*18)|0;
      $795 = $780;
      break;
     }
     $781 = $14;
     $782 = $26;
     $783 = (($781) + ($782<<2)|0);
     $784 = HEAP32[$783>>2]|0;
     $785 = $73;
     $786 = ($784|0)<($785|0);
     if ($786) {
      $787 = $73;
      $795 = $787;
      break;
     } else {
      $788 = $14;
      $789 = $26;
      $790 = (($788) + ($789<<2)|0);
      $791 = HEAP32[$790>>2]|0;
      $795 = $791;
      break;
     }
    }
   } while(0);
   $792 = $14;
   $793 = $26;
   $794 = (($792) + ($793<<2)|0);
   HEAP32[$794>>2] = $795;
   $796 = $26;
   $797 = (($796) + 1)|0;
   $26 = $797;
  }
  $798 = $73;
  $799 = (($738) - ($798))|0;
  $800 = $799&65535;
  $801 = $15;
  HEAP16[$801>>1] = $800;
  $802 = $54;
  $803 = $802&255;
  $804 = $16;
  HEAP8[$804>>0] = $803;
 } else {
  $26 = 0;
  while(1) {
   $805 = $26;
   $806 = $23;
   $807 = ($805|0)<($806|0);
   $808 = $56;
   if (!($807)) {
    break;
   }
   $809 = $80;
   $810 = $26;
   $811 = $60;
   $812 = Math_imul($810, $811)|0;
   $813 = $54;
   $814 = (($812) + ($813))|0;
   $815 = (($809) + ($814)|0);
   $816 = HEAP8[$815>>0]|0;
   $817 = $816 << 24 >> 24;
   $818 = (($808) + ($817))|0;
   $819 = $14;
   $820 = $26;
   $821 = (($819) + ($820<<2)|0);
   HEAP32[$821>>2] = $818;
   $822 = $74;
   $823 = ($822|0)>(144);
   $824 = $14;
   $825 = $26;
   $826 = (($824) + ($825<<2)|0);
   $827 = HEAP32[$826>>2]|0;
   do {
    if ($823) {
     $828 = $74;
     $829 = ($827|0)>($828|0);
     if ($829) {
      $830 = $74;
      $855 = $830;
      break;
     }
     $831 = $14;
     $832 = $26;
     $833 = (($831) + ($832<<2)|0);
     $834 = HEAP32[$833>>2]|0;
     $835 = ($834|0)<(144);
     if ($835) {
      $855 = 144;
     } else {
      $836 = $14;
      $837 = $26;
      $838 = (($836) + ($837<<2)|0);
      $839 = HEAP32[$838>>2]|0;
      $855 = $839;
     }
    } else {
     $840 = ($827|0)>(144);
     if ($840) {
      $855 = 144;
     } else {
      $841 = $14;
      $842 = $26;
      $843 = (($841) + ($842<<2)|0);
      $844 = HEAP32[$843>>2]|0;
      $845 = $74;
      $846 = ($844|0)<($845|0);
      if ($846) {
       $847 = $74;
       $855 = $847;
       break;
      } else {
       $848 = $14;
       $849 = $26;
       $850 = (($848) + ($849<<2)|0);
       $851 = HEAP32[$850>>2]|0;
       $855 = $851;
       break;
      }
     }
    }
   } while(0);
   $852 = $14;
   $853 = $26;
   $854 = (($852) + ($853<<2)|0);
   HEAP32[$854>>2] = $855;
   $856 = $26;
   $857 = (($856) + 1)|0;
   $26 = $857;
  }
  $858 = $74;
  $859 = (($808) - ($858))|0;
  $860 = $859&65535;
  $861 = $15;
  HEAP16[$861>>1] = $860;
  $862 = $54;
  $863 = $862&255;
  $864 = $16;
  HEAP8[$864>>0] = $863;
 }
 $12 = 0;
 $865 = $12;
 STACKTOP = sp;return ($865|0);
}
function _silk_float2short_array_326($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = (($7) - 1)|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = +HEAPF32[$13>>2];
  $15 = (_lrintf($14)|0);
  $16 = ($15|0)>(32767);
  if ($16) {
   $29 = 32767;
  } else {
   $17 = $4;
   $18 = $6;
   $19 = (($17) + ($18<<2)|0);
   $20 = +HEAPF32[$19>>2];
   $21 = (_lrintf($20)|0);
   $22 = ($21|0)<(-32768);
   if ($22) {
    $29 = -32768;
   } else {
    $23 = $4;
    $24 = $6;
    $25 = (($23) + ($24<<2)|0);
    $26 = +HEAPF32[$25>>2];
    $27 = (_lrintf($26)|0);
    $29 = $27;
   }
  }
  $28 = $29&65535;
  $30 = $3;
  $31 = $6;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = $28;
  $33 = $6;
  $34 = (($33) + -1)|0;
  $6 = $34;
 }
 STACKTOP = sp;return;
}
function _silk_short2float_array_327($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = (($7) - 1)|0;
 $6 = $8;
 while(1) {
  $9 = $6;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $6;
  $13 = (($11) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (+($14<<16>>16));
  $16 = $3;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  HEAPF32[$18>>2] = $15;
  $19 = $6;
  $20 = (($19) + -1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return;
}
function _silk_log2_328($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_log10($2));
 $4 = 3.32192809488736 * $3;
 $5 = $4;
 STACKTOP = sp;return (+$5);
}
function _silk_max_int_329($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int_330($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_P_Ana_calc_corr_st3($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $25 = sp + 96|0;
 $26 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $29 = $11;
 $30 = ($29|0)==(4);
 if ($30) {
  $31 = $12;
  $32 = (30951 + ($31<<3)|0);
  $27 = $32;
  $28 = 30815;
  $33 = $12;
  $34 = (30975 + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $21 = $36;
  $24 = 34;
 } else {
  $27 = 30767;
  $28 = 30743;
  $21 = 12;
  $24 = 12;
 }
 $37 = $8;
 $38 = $10;
 $39 = $38 << 2;
 $40 = (($37) + ($39<<2)|0);
 $14 = $40;
 $17 = 0;
 while(1) {
  $41 = $17;
  $42 = $11;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $18 = 0;
  $44 = $27;
  $45 = $17;
  $46 = $45<<1;
  $47 = (($46) + 0)|0;
  $48 = (($44) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $19 = $50;
  $51 = $27;
  $52 = $17;
  $53 = $52<<1;
  $54 = (($53) + 1)|0;
  $55 = (($51) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $20 = $57;
  $58 = $14;
  $59 = $14;
  $60 = $9;
  $61 = (0 - ($60))|0;
  $62 = (($59) + ($61<<2)|0);
  $63 = $20;
  $64 = (0 - ($63))|0;
  $65 = (($62) + ($64<<2)|0);
  $66 = $10;
  $67 = $20;
  $68 = $19;
  $69 = (($67) - ($68))|0;
  $70 = (($69) + 1)|0;
  $71 = $13;
  _celt_pitch_xcorr($58,$65,$26,$66,$70,$71);
  $72 = $19;
  $16 = $72;
  while(1) {
   $73 = $16;
   $74 = $20;
   $75 = ($73|0)<=($74|0);
   if (!($75)) {
    break;
   }
   $76 = $20;
   $77 = $16;
   $78 = (($76) - ($77))|0;
   $79 = (($26) + ($78<<2)|0);
   $80 = +HEAPF32[$79>>2];
   $81 = $18;
   $82 = (($25) + ($81<<2)|0);
   HEAPF32[$82>>2] = $80;
   $83 = $18;
   $84 = (($83) + 1)|0;
   $18 = $84;
   $85 = $16;
   $86 = (($85) + 1)|0;
   $16 = $86;
  }
  $87 = $27;
  $88 = $17;
  $89 = $88<<1;
  $90 = (($89) + 0)|0;
  $91 = (($87) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92 << 24 >> 24;
  $22 = $93;
  $15 = 0;
  while(1) {
   $94 = $15;
   $95 = $21;
   $96 = ($94|0)<($95|0);
   if (!($96)) {
    break;
   }
   $97 = $28;
   $98 = $17;
   $99 = $24;
   $100 = Math_imul($98, $99)|0;
   $101 = $15;
   $102 = (($100) + ($101))|0;
   $103 = (($97) + ($102)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104 << 24 >> 24;
   $106 = $22;
   $107 = (($105) - ($106))|0;
   $23 = $107;
   $16 = 0;
   while(1) {
    $108 = $16;
    $109 = ($108|0)<(5);
    if (!($109)) {
     break;
    }
    $110 = $23;
    $111 = $16;
    $112 = (($110) + ($111))|0;
    $113 = (($25) + ($112<<2)|0);
    $114 = +HEAPF32[$113>>2];
    $115 = $7;
    $116 = $17;
    $117 = (($115) + (($116*680)|0)|0);
    $118 = $15;
    $119 = (($117) + (($118*20)|0)|0);
    $120 = $16;
    $121 = (($119) + ($120<<2)|0);
    HEAPF32[$121>>2] = $114;
    $122 = $16;
    $123 = (($122) + 1)|0;
    $16 = $123;
   }
   $124 = $15;
   $125 = (($124) + 1)|0;
   $15 = $125;
  }
  $126 = $10;
  $127 = $14;
  $128 = (($127) + ($126<<2)|0);
  $14 = $128;
  $129 = $17;
  $130 = (($129) + 1)|0;
  $17 = $130;
 }
 STACKTOP = sp;return;
}
function _silk_P_Ana_calc_energy_st3($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $24 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $27 = $10;
 $28 = ($27|0)==(4);
 if ($28) {
  $29 = $11;
  $30 = (30951 + ($29<<3)|0);
  $25 = $30;
  $26 = 30815;
  $31 = $11;
  $32 = (30975 + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  $19 = $34;
  $22 = 34;
 } else {
  $25 = 30767;
  $26 = 30743;
  $19 = 12;
  $22 = 12;
 }
 $35 = $7;
 $36 = $9;
 $37 = $36 << 2;
 $38 = (($35) + ($37<<2)|0);
 $12 = $38;
 $15 = 0;
 while(1) {
  $39 = $15;
  $40 = $10;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $18 = 0;
  $42 = $12;
  $43 = $8;
  $44 = $25;
  $45 = $15;
  $46 = $45<<1;
  $47 = (($46) + 0)|0;
  $48 = (($44) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = (($43) + ($50))|0;
  $52 = (0 - ($51))|0;
  $53 = (($42) + ($52<<2)|0);
  $13 = $53;
  $54 = $13;
  $55 = $9;
  $56 = (+_silk_energy_FLP($54,$55));
  $57 = $56 + 0.001;
  $14 = $57;
  $58 = $14;
  $59 = $58;
  $60 = $18;
  $61 = (($24) + ($60<<2)|0);
  HEAPF32[$61>>2] = $59;
  $62 = $18;
  $63 = (($62) + 1)|0;
  $18 = $63;
  $64 = $25;
  $65 = $15;
  $66 = $65<<1;
  $67 = (($66) + 1)|0;
  $68 = (($64) + ($67)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69 << 24 >> 24;
  $71 = $25;
  $72 = $15;
  $73 = $72<<1;
  $74 = (($73) + 0)|0;
  $75 = (($71) + ($74)|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76 << 24 >> 24;
  $78 = (($70) - ($77))|0;
  $79 = (($78) + 1)|0;
  $23 = $79;
  $16 = 1;
  while(1) {
   $80 = $16;
   $81 = $23;
   $82 = ($80|0)<($81|0);
   if (!($82)) {
    break;
   }
   $83 = $13;
   $84 = $9;
   $85 = $16;
   $86 = (($84) - ($85))|0;
   $87 = (($83) + ($86<<2)|0);
   $88 = +HEAPF32[$87>>2];
   $89 = $88;
   $90 = $13;
   $91 = $9;
   $92 = $16;
   $93 = (($91) - ($92))|0;
   $94 = (($90) + ($93<<2)|0);
   $95 = +HEAPF32[$94>>2];
   $96 = $95;
   $97 = $89 * $96;
   $98 = $14;
   $99 = $98 - $97;
   $14 = $99;
   $100 = $13;
   $101 = $16;
   $102 = (0 - ($101))|0;
   $103 = (($100) + ($102<<2)|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $104;
   $106 = $13;
   $107 = $16;
   $108 = (0 - ($107))|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $110;
   $112 = $105 * $111;
   $113 = $14;
   $114 = $113 + $112;
   $14 = $114;
   $115 = $14;
   $116 = $115;
   $117 = $18;
   $118 = (($24) + ($117<<2)|0);
   HEAPF32[$118>>2] = $116;
   $119 = $18;
   $120 = (($119) + 1)|0;
   $18 = $120;
   $121 = $16;
   $122 = (($121) + 1)|0;
   $16 = $122;
  }
  $123 = $25;
  $124 = $15;
  $125 = $124<<1;
  $126 = (($125) + 0)|0;
  $127 = (($123) + ($126)|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128 << 24 >> 24;
  $20 = $129;
  $16 = 0;
  while(1) {
   $130 = $16;
   $131 = $19;
   $132 = ($130|0)<($131|0);
   if (!($132)) {
    break;
   }
   $133 = $26;
   $134 = $15;
   $135 = $22;
   $136 = Math_imul($134, $135)|0;
   $137 = $16;
   $138 = (($136) + ($137))|0;
   $139 = (($133) + ($138)|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = $20;
   $143 = (($141) - ($142))|0;
   $21 = $143;
   $17 = 0;
   while(1) {
    $144 = $17;
    $145 = ($144|0)<(5);
    if (!($145)) {
     break;
    }
    $146 = $21;
    $147 = $17;
    $148 = (($146) + ($147))|0;
    $149 = (($24) + ($148<<2)|0);
    $150 = +HEAPF32[$149>>2];
    $151 = $6;
    $152 = $15;
    $153 = (($151) + (($152*680)|0)|0);
    $154 = $16;
    $155 = (($153) + (($154*20)|0)|0);
    $156 = $17;
    $157 = (($155) + ($156<<2)|0);
    HEAPF32[$157>>2] = $150;
    $158 = $17;
    $159 = (($158) + 1)|0;
    $17 = $159;
   }
   $160 = $16;
   $161 = (($160) + 1)|0;
   $16 = $161;
  }
  $162 = $9;
  $163 = $12;
  $164 = (($163) + ($162<<2)|0);
  $12 = $164;
  $165 = $15;
  $166 = (($165) + 1)|0;
  $15 = $166;
 }
 STACKTOP = sp;return;
}
function _silk_scale_copy_vector_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $7;
 $11 = $10 & 65532;
 $9 = $11;
 $8 = 0;
 while(1) {
  $12 = $8;
  $13 = $9;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = $5;
  $17 = $8;
  $18 = (($17) + 0)|0;
  $19 = (($16) + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $15 * $20;
  $22 = $4;
  $23 = $8;
  $24 = (($23) + 0)|0;
  $25 = (($22) + ($24<<2)|0);
  HEAPF32[$25>>2] = $21;
  $26 = $6;
  $27 = $5;
  $28 = $8;
  $29 = (($28) + 1)|0;
  $30 = (($27) + ($29<<2)|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $26 * $31;
  $33 = $4;
  $34 = $8;
  $35 = (($34) + 1)|0;
  $36 = (($33) + ($35<<2)|0);
  HEAPF32[$36>>2] = $32;
  $37 = $6;
  $38 = $5;
  $39 = $8;
  $40 = (($39) + 2)|0;
  $41 = (($38) + ($40<<2)|0);
  $42 = +HEAPF32[$41>>2];
  $43 = $37 * $42;
  $44 = $4;
  $45 = $8;
  $46 = (($45) + 2)|0;
  $47 = (($44) + ($46<<2)|0);
  HEAPF32[$47>>2] = $43;
  $48 = $6;
  $49 = $5;
  $50 = $8;
  $51 = (($50) + 3)|0;
  $52 = (($49) + ($51<<2)|0);
  $53 = +HEAPF32[$52>>2];
  $54 = $48 * $53;
  $55 = $4;
  $56 = $8;
  $57 = (($56) + 3)|0;
  $58 = (($55) + ($57<<2)|0);
  HEAPF32[$58>>2] = $54;
  $59 = $8;
  $60 = (($59) + 4)|0;
  $8 = $60;
 }
 while(1) {
  $61 = $8;
  $62 = $7;
  $63 = ($61|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $6;
  $65 = $5;
  $66 = $8;
  $67 = (($65) + ($66<<2)|0);
  $68 = +HEAPF32[$67>>2];
  $69 = $64 * $68;
  $70 = $4;
  $71 = $8;
  $72 = (($70) + ($71<<2)|0);
  HEAPF32[$72>>2] = $69;
  $73 = $8;
  $74 = (($73) + 1)|0;
  $8 = $74;
 }
 STACKTOP = sp;return;
}
function _silk_schur_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $12 = $6;
  $13 = $5;
  $14 = (($13) + 1)|0;
  $15 = ($12|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $6;
  $21 = (($8) + ($20<<3)|0);
  $22 = ((($21)) + 4|0);
  HEAPF32[$22>>2] = $19;
  $23 = $6;
  $24 = (($8) + ($23<<3)|0);
  HEAPF32[$24>>2] = $19;
  $25 = $6;
  $26 = (($25) + 1)|0;
  $6 = $26;
 }
 $6 = 0;
 while(1) {
  $27 = $6;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $6;
  $31 = (($30) + 1)|0;
  $32 = (($8) + ($31<<3)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = - $33;
  $35 = ((($8)) + 4|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $36 > 9.9999997171806853E-10;
  $38 = ((($8)) + 4|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $37 ? $39 : 9.9999997171806853E-10;
  $41 = $34 / $40;
  $11 = $41;
  $42 = $11;
  $43 = $3;
  $44 = $6;
  $45 = (($43) + ($44<<2)|0);
  HEAPF32[$45>>2] = $42;
  $7 = 0;
  while(1) {
   $46 = $7;
   $47 = $5;
   $48 = $6;
   $49 = (($47) - ($48))|0;
   $50 = ($46|0)<($49|0);
   if (!($50)) {
    break;
   }
   $51 = $7;
   $52 = $6;
   $53 = (($51) + ($52))|0;
   $54 = (($53) + 1)|0;
   $55 = (($8) + ($54<<3)|0);
   $56 = +HEAPF32[$55>>2];
   $9 = $56;
   $57 = $7;
   $58 = (($8) + ($57<<3)|0);
   $59 = ((($58)) + 4|0);
   $60 = +HEAPF32[$59>>2];
   $10 = $60;
   $61 = $9;
   $62 = $10;
   $63 = $11;
   $64 = $62 * $63;
   $65 = $61 + $64;
   $66 = $7;
   $67 = $6;
   $68 = (($66) + ($67))|0;
   $69 = (($68) + 1)|0;
   $70 = (($8) + ($69<<3)|0);
   HEAPF32[$70>>2] = $65;
   $71 = $10;
   $72 = $9;
   $73 = $11;
   $74 = $72 * $73;
   $75 = $71 + $74;
   $76 = $7;
   $77 = (($8) + ($76<<3)|0);
   $78 = ((($77)) + 4|0);
   HEAPF32[$78>>2] = $75;
   $79 = $7;
   $80 = (($79) + 1)|0;
   $7 = $80;
  }
  $81 = $6;
  $82 = (($81) + 1)|0;
  $6 = $82;
 }
 $83 = ((($8)) + 4|0);
 $84 = +HEAPF32[$83>>2];
 STACKTOP = sp;return (+$84);
}
function _silk_insertion_sort_decreasing_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 while(1) {
  $11 = $9;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $5;
  $16 = $9;
  $17 = (($15) + ($16<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = $9;
  $19 = (($18) + 1)|0;
  $9 = $19;
 }
 $9 = 1;
 while(1) {
  $20 = $9;
  $21 = $7;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $8 = $26;
  $27 = $9;
  $28 = (($27) - 1)|0;
  $10 = $28;
  while(1) {
   $29 = $10;
   $30 = ($29|0)>=(0);
   if (!($30)) {
    break;
   }
   $31 = $8;
   $32 = $4;
   $33 = $10;
   $34 = (($32) + ($33<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $31 > $35;
   if (!($36)) {
    break;
   }
   $37 = $4;
   $38 = $10;
   $39 = (($37) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $4;
   $42 = $10;
   $43 = (($42) + 1)|0;
   $44 = (($41) + ($43<<2)|0);
   HEAPF32[$44>>2] = $40;
   $45 = $5;
   $46 = $10;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = $10;
   $51 = (($50) + 1)|0;
   $52 = (($49) + ($51<<2)|0);
   HEAP32[$52>>2] = $48;
   $53 = $10;
   $54 = (($53) + -1)|0;
   $10 = $54;
  }
  $55 = $8;
  $56 = $4;
  $57 = $10;
  $58 = (($57) + 1)|0;
  $59 = (($56) + ($58<<2)|0);
  HEAPF32[$59>>2] = $55;
  $60 = $9;
  $61 = $5;
  $62 = $10;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  HEAP32[$64>>2] = $60;
  $65 = $9;
  $66 = (($65) + 1)|0;
  $9 = $66;
 }
 $67 = $7;
 $9 = $67;
 while(1) {
  $68 = $9;
  $69 = $6;
  $70 = ($68|0)<($69|0);
  if (!($70)) {
   break;
  }
  $71 = $4;
  $72 = $9;
  $73 = (($71) + ($72<<2)|0);
  $74 = +HEAPF32[$73>>2];
  $8 = $74;
  $75 = $8;
  $76 = $4;
  $77 = $7;
  $78 = (($77) - 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $75 > $80;
  if ($81) {
   $82 = $7;
   $83 = (($82) - 2)|0;
   $10 = $83;
   while(1) {
    $84 = $10;
    $85 = ($84|0)>=(0);
    if (!($85)) {
     break;
    }
    $86 = $8;
    $87 = $4;
    $88 = $10;
    $89 = (($87) + ($88<<2)|0);
    $90 = +HEAPF32[$89>>2];
    $91 = $86 > $90;
    if (!($91)) {
     break;
    }
    $92 = $4;
    $93 = $10;
    $94 = (($92) + ($93<<2)|0);
    $95 = +HEAPF32[$94>>2];
    $96 = $4;
    $97 = $10;
    $98 = (($97) + 1)|0;
    $99 = (($96) + ($98<<2)|0);
    HEAPF32[$99>>2] = $95;
    $100 = $5;
    $101 = $10;
    $102 = (($100) + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $5;
    $105 = $10;
    $106 = (($105) + 1)|0;
    $107 = (($104) + ($106<<2)|0);
    HEAP32[$107>>2] = $103;
    $108 = $10;
    $109 = (($108) + -1)|0;
    $10 = $109;
   }
   $110 = $8;
   $111 = $4;
   $112 = $10;
   $113 = (($112) + 1)|0;
   $114 = (($111) + ($113<<2)|0);
   HEAPF32[$114>>2] = $110;
   $115 = $9;
   $116 = $5;
   $117 = $10;
   $118 = (($117) + 1)|0;
   $119 = (($116) + ($118<<2)|0);
   HEAP32[$119>>2] = $115;
  }
  $120 = $9;
  $121 = (($120) + 1)|0;
  $9 = $121;
 }
 STACKTOP = sp;return;
}
function _opus_pcm_soft_clip($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0;
 var $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0.0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0.0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $21 = $6;
 $22 = ($21|0)<(1);
 $23 = $5;
 $24 = ($23|0)<(1);
 $or$cond = $22 | $24;
 $or$cond$not = $or$cond ^ 1;
 $25 = $4;
 $26 = ($25|0)!=(0|0);
 $or$cond3 = $or$cond$not & $26;
 $27 = $7;
 $28 = ($27|0)!=(0|0);
 $or$cond5 = $or$cond3 & $28;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $9 = 0;
 while(1) {
  $29 = $9;
  $30 = $5;
  $31 = $6;
  $32 = Math_imul($30, $31)|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $4;
  $35 = $9;
  $36 = (($34) + ($35<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = 2.0 < $37;
  if ($38) {
   $44 = 2.0;
  } else {
   $39 = $4;
   $40 = $9;
   $41 = (($39) + ($40<<2)|0);
   $42 = +HEAPF32[$41>>2];
   $44 = $42;
  }
  $43 = -2.0 > $44;
  if ($43) {
   $57 = -2.0;
  } else {
   $45 = $4;
   $46 = $9;
   $47 = (($45) + ($46<<2)|0);
   $48 = +HEAPF32[$47>>2];
   $49 = 2.0 < $48;
   if ($49) {
    $57 = 2.0;
   } else {
    $50 = $4;
    $51 = $9;
    $52 = (($50) + ($51<<2)|0);
    $53 = +HEAPF32[$52>>2];
    $57 = $53;
   }
  }
  $54 = $4;
  $55 = $9;
  $56 = (($54) + ($55<<2)|0);
  HEAPF32[$56>>2] = $57;
  $58 = $9;
  $59 = (($58) + 1)|0;
  $9 = $59;
 }
 $8 = 0;
 while(1) {
  $60 = $8;
  $61 = $6;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $4;
  $64 = $8;
  $65 = (($63) + ($64<<2)|0);
  $10 = $65;
  $66 = $7;
  $67 = $8;
  $68 = (($66) + ($67<<2)|0);
  $69 = +HEAPF32[$68>>2];
  $11 = $69;
  $9 = 0;
  while(1) {
   $70 = $9;
   $71 = $5;
   $72 = ($70|0)<($71|0);
   if (!($72)) {
    break;
   }
   $73 = $10;
   $74 = $9;
   $75 = $6;
   $76 = Math_imul($74, $75)|0;
   $77 = (($73) + ($76<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $79 = $11;
   $80 = $78 * $79;
   $81 = $80 >= 0.0;
   if ($81) {
    break;
   }
   $82 = $10;
   $83 = $9;
   $84 = $6;
   $85 = Math_imul($83, $84)|0;
   $86 = (($82) + ($85<<2)|0);
   $87 = +HEAPF32[$86>>2];
   $88 = $11;
   $89 = $10;
   $90 = $9;
   $91 = $6;
   $92 = Math_imul($90, $91)|0;
   $93 = (($89) + ($92<<2)|0);
   $94 = +HEAPF32[$93>>2];
   $95 = $88 * $94;
   $96 = $10;
   $97 = $9;
   $98 = $6;
   $99 = Math_imul($97, $98)|0;
   $100 = (($96) + ($99<<2)|0);
   $101 = +HEAPF32[$100>>2];
   $102 = $95 * $101;
   $103 = $87 + $102;
   $104 = $10;
   $105 = $9;
   $106 = $6;
   $107 = Math_imul($105, $106)|0;
   $108 = (($104) + ($107<<2)|0);
   HEAPF32[$108>>2] = $103;
   $109 = $9;
   $110 = (($109) + 1)|0;
   $9 = $110;
  }
  $13 = 0;
  $111 = $10;
  $112 = +HEAPF32[$111>>2];
  $12 = $112;
  while(1) {
   $17 = 0;
   $113 = $13;
   $9 = $113;
   while(1) {
    $114 = $9;
    $115 = $5;
    $116 = ($114|0)<($115|0);
    if (!($116)) {
     break;
    }
    $117 = $10;
    $118 = $9;
    $119 = $6;
    $120 = Math_imul($118, $119)|0;
    $121 = (($117) + ($120<<2)|0);
    $122 = +HEAPF32[$121>>2];
    $123 = $122 > 1.0;
    if ($123) {
     break;
    }
    $124 = $10;
    $125 = $9;
    $126 = $6;
    $127 = Math_imul($125, $126)|0;
    $128 = (($124) + ($127<<2)|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $129 < -1.0;
    if ($130) {
     break;
    }
    $131 = $9;
    $132 = (($131) + 1)|0;
    $9 = $132;
   }
   $133 = $9;
   $134 = $5;
   $135 = ($133|0)==($134|0);
   if ($135) {
    label = 23;
    break;
   }
   $136 = $9;
   $18 = $136;
   $137 = $9;
   $15 = $137;
   $14 = $137;
   $138 = $10;
   $139 = $9;
   $140 = $6;
   $141 = Math_imul($139, $140)|0;
   $142 = (($138) + ($141<<2)|0);
   $143 = +HEAPF32[$142>>2];
   $144 = $143;
   $145 = (+Math_abs((+$144)));
   $146 = $145;
   $16 = $146;
   while(1) {
    $147 = $14;
    $148 = ($147|0)>(0);
    if (!($148)) {
     break;
    }
    $149 = $10;
    $150 = $9;
    $151 = $6;
    $152 = Math_imul($150, $151)|0;
    $153 = (($149) + ($152<<2)|0);
    $154 = +HEAPF32[$153>>2];
    $155 = $10;
    $156 = $14;
    $157 = (($156) - 1)|0;
    $158 = $6;
    $159 = Math_imul($157, $158)|0;
    $160 = (($155) + ($159<<2)|0);
    $161 = +HEAPF32[$160>>2];
    $162 = $154 * $161;
    $163 = $162 >= 0.0;
    if (!($163)) {
     break;
    }
    $164 = $14;
    $165 = (($164) + -1)|0;
    $14 = $165;
   }
   while(1) {
    $166 = $15;
    $167 = $5;
    $168 = ($166|0)<($167|0);
    if (!($168)) {
     break;
    }
    $169 = $10;
    $170 = $9;
    $171 = $6;
    $172 = Math_imul($170, $171)|0;
    $173 = (($169) + ($172<<2)|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $10;
    $176 = $15;
    $177 = $6;
    $178 = Math_imul($176, $177)|0;
    $179 = (($175) + ($178<<2)|0);
    $180 = +HEAPF32[$179>>2];
    $181 = $174 * $180;
    $182 = $181 >= 0.0;
    if (!($182)) {
     break;
    }
    $183 = $10;
    $184 = $15;
    $185 = $6;
    $186 = Math_imul($184, $185)|0;
    $187 = (($183) + ($186<<2)|0);
    $188 = +HEAPF32[$187>>2];
    $189 = $188;
    $190 = (+Math_abs((+$189)));
    $191 = $190;
    $192 = $16;
    $193 = $191 > $192;
    if ($193) {
     $194 = $10;
     $195 = $15;
     $196 = $6;
     $197 = Math_imul($195, $196)|0;
     $198 = (($194) + ($197<<2)|0);
     $199 = +HEAPF32[$198>>2];
     $200 = $199;
     $201 = (+Math_abs((+$200)));
     $202 = $201;
     $16 = $202;
     $203 = $15;
     $18 = $203;
    }
    $204 = $15;
    $205 = (($204) + 1)|0;
    $15 = $205;
   }
   $206 = $14;
   $207 = ($206|0)==(0);
   if ($207) {
    $208 = $10;
    $209 = $9;
    $210 = $6;
    $211 = Math_imul($209, $210)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = +HEAPF32[$212>>2];
    $214 = $10;
    $215 = +HEAPF32[$214>>2];
    $216 = $213 * $215;
    $217 = $216 >= 0.0;
    $219 = $217;
   } else {
    $219 = 0;
   }
   $218 = $219&1;
   $17 = $218;
   $220 = $16;
   $221 = $220 - 1.0;
   $222 = $16;
   $223 = $16;
   $224 = $222 * $223;
   $225 = $221 / $224;
   $11 = $225;
   $226 = $10;
   $227 = $9;
   $228 = $6;
   $229 = Math_imul($227, $228)|0;
   $230 = (($226) + ($229<<2)|0);
   $231 = +HEAPF32[$230>>2];
   $232 = $231 > 0.0;
   if ($232) {
    $233 = $11;
    $234 = - $233;
    $11 = $234;
   }
   $235 = $14;
   $9 = $235;
   while(1) {
    $236 = $9;
    $237 = $15;
    $238 = ($236|0)<($237|0);
    if (!($238)) {
     break;
    }
    $239 = $10;
    $240 = $9;
    $241 = $6;
    $242 = Math_imul($240, $241)|0;
    $243 = (($239) + ($242<<2)|0);
    $244 = +HEAPF32[$243>>2];
    $245 = $11;
    $246 = $10;
    $247 = $9;
    $248 = $6;
    $249 = Math_imul($247, $248)|0;
    $250 = (($246) + ($249<<2)|0);
    $251 = +HEAPF32[$250>>2];
    $252 = $245 * $251;
    $253 = $10;
    $254 = $9;
    $255 = $6;
    $256 = Math_imul($254, $255)|0;
    $257 = (($253) + ($256<<2)|0);
    $258 = +HEAPF32[$257>>2];
    $259 = $252 * $258;
    $260 = $244 + $259;
    $261 = $10;
    $262 = $9;
    $263 = $6;
    $264 = Math_imul($262, $263)|0;
    $265 = (($261) + ($264<<2)|0);
    HEAPF32[$265>>2] = $260;
    $266 = $9;
    $267 = (($266) + 1)|0;
    $9 = $267;
   }
   $268 = $17;
   $269 = ($268|0)!=(0);
   $270 = $18;
   $271 = ($270|0)>=(2);
   $or$cond8 = $269 & $271;
   L54: do {
    if ($or$cond8) {
     $272 = $12;
     $273 = $10;
     $274 = +HEAPF32[$273>>2];
     $275 = $272 - $274;
     $20 = $275;
     $276 = $20;
     $277 = $18;
     $278 = (+($277|0));
     $279 = $276 / $278;
     $19 = $279;
     $280 = $13;
     $9 = $280;
     while(1) {
      $281 = $9;
      $282 = $18;
      $283 = ($281|0)<($282|0);
      if (!($283)) {
       break L54;
      }
      $284 = $19;
      $285 = $20;
      $286 = $285 - $284;
      $20 = $286;
      $287 = $20;
      $288 = $10;
      $289 = $9;
      $290 = $6;
      $291 = Math_imul($289, $290)|0;
      $292 = (($288) + ($291<<2)|0);
      $293 = +HEAPF32[$292>>2];
      $294 = $293 + $287;
      HEAPF32[$292>>2] = $294;
      $295 = $10;
      $296 = $9;
      $297 = $6;
      $298 = Math_imul($296, $297)|0;
      $299 = (($295) + ($298<<2)|0);
      $300 = +HEAPF32[$299>>2];
      $301 = 1.0 < $300;
      if ($301) {
       $309 = 1.0;
      } else {
       $302 = $10;
       $303 = $9;
       $304 = $6;
       $305 = Math_imul($303, $304)|0;
       $306 = (($302) + ($305<<2)|0);
       $307 = +HEAPF32[$306>>2];
       $309 = $307;
      }
      $308 = -1.0 > $309;
      if ($308) {
       $328 = -1.0;
      } else {
       $310 = $10;
       $311 = $9;
       $312 = $6;
       $313 = Math_imul($311, $312)|0;
       $314 = (($310) + ($313<<2)|0);
       $315 = +HEAPF32[$314>>2];
       $316 = 1.0 < $315;
       if ($316) {
        $328 = 1.0;
       } else {
        $317 = $10;
        $318 = $9;
        $319 = $6;
        $320 = Math_imul($318, $319)|0;
        $321 = (($317) + ($320<<2)|0);
        $322 = +HEAPF32[$321>>2];
        $328 = $322;
       }
      }
      $323 = $10;
      $324 = $9;
      $325 = $6;
      $326 = Math_imul($324, $325)|0;
      $327 = (($323) + ($326<<2)|0);
      HEAPF32[$327>>2] = $328;
      $329 = $9;
      $330 = (($329) + 1)|0;
      $9 = $330;
     }
    }
   } while(0);
   $331 = $15;
   $13 = $331;
   $332 = $13;
   $333 = $5;
   $334 = ($332|0)==($333|0);
   if ($334) {
    break;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $11 = 0.0;
  }
  $335 = $11;
  $336 = $7;
  $337 = $8;
  $338 = (($336) + ($337<<2)|0);
  HEAPF32[$338>>2] = $335;
  $339 = $8;
  $340 = (($339) + 1)|0;
  $8 = $340;
 }
 STACKTOP = sp;return;
}
function _encode_size($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)<(252);
 $7 = $3;
 if ($6) {
  $8 = $7&255;
  $9 = $4;
  HEAP8[$9>>0] = $8;
  $2 = 1;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 } else {
  $10 = $7 & 3;
  $11 = (252 + ($10))|0;
  $12 = $11&255;
  $13 = $4;
  HEAP8[$13>>0] = $12;
  $14 = $3;
  $15 = $4;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($14) - ($17))|0;
  $19 = $18 >> 2;
  $20 = $19&255;
  $21 = $4;
  $22 = ((($21)) + 1|0);
  HEAP8[$22>>0] = $20;
  $2 = 2;
  $23 = $2;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _opus_packet_get_samples_per_frame($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 128;
 $9 = ($8|0)!=(0);
 $10 = $2;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 if ($9) {
  $13 = $12 >> 3;
  $14 = $13 & 3;
  $4 = $14;
  $15 = $3;
  $16 = $4;
  $17 = $15 << $16;
  $18 = (($17|0) / 400)&-1;
  $4 = $18;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $19 = $12 & 96;
 $20 = ($19|0)==(96);
 $21 = $2;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 if ($20) {
  $24 = $23 & 8;
  $25 = ($24|0)!=(0);
  $26 = $3;
  $$sink = $25 ? 50 : 100;
  $27 = (($26|0) / ($$sink|0))&-1;
  $4 = $27;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 $28 = $23 >> 3;
 $29 = $28 & 3;
 $4 = $29;
 $30 = $4;
 $31 = ($30|0)==(3);
 $32 = $3;
 if ($31) {
  $33 = ($32*60)|0;
  $34 = (($33|0) / 1000)&-1;
  $4 = $34;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 } else {
  $35 = $4;
  $36 = $32 << $35;
  $37 = (($36|0) / 100)&-1;
  $4 = $37;
  $38 = $4;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _opus_packet_parse_impl($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $25 = 0;
 $29 = $9;
 $26 = $29;
 $30 = $14;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $8 = -1;
  $306 = $8;
  STACKTOP = sp;return ($306|0);
 }
 $32 = $9;
 $33 = (_opus_packet_get_samples_per_frame($32,48000)|0);
 $23 = $33;
 $20 = 0;
 $34 = $9;
 $35 = ((($34)) + 1|0);
 $9 = $35;
 $36 = HEAP8[$34>>0]|0;
 $22 = $36;
 $37 = $10;
 $38 = (($37) + -1)|0;
 $10 = $38;
 $39 = $10;
 $24 = $39;
 $40 = $22;
 $41 = $40&255;
 $42 = $41 & 3;
 L5: do {
  switch ($42|0) {
  case 0:  {
   $19 = 1;
   break;
  }
  case 1:  {
   $19 = 2;
   $20 = 1;
   $43 = $11;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $45 = $10;
    $46 = $45 & 1;
    $47 = ($46|0)!=(0);
    if (!($47)) {
     $48 = $10;
     $49 = (($48|0) / 2)&-1;
     $24 = $49;
     $50 = $24;
     $51 = $50&65535;
     $52 = $14;
     HEAP16[$52>>1] = $51;
     break L5;
    }
    $8 = -4;
    $306 = $8;
    STACKTOP = sp;return ($306|0);
   }
   break;
  }
  case 2:  {
   $19 = 2;
   $53 = $9;
   $54 = $10;
   $55 = $14;
   $56 = (_parse_size($53,$54,$55)|0);
   $18 = $56;
   $57 = $18;
   $58 = $10;
   $59 = (($58) - ($57))|0;
   $10 = $59;
   $60 = $14;
   $61 = HEAP16[$60>>1]|0;
   $62 = $61 << 16 >> 16;
   $63 = ($62|0)<(0);
   if (!($63)) {
    $64 = $14;
    $65 = HEAP16[$64>>1]|0;
    $66 = $65 << 16 >> 16;
    $67 = $10;
    $68 = ($66|0)>($67|0);
    if (!($68)) {
     $69 = $18;
     $70 = $9;
     $71 = (($70) + ($69)|0);
     $9 = $71;
     $72 = $10;
     $73 = $14;
     $74 = HEAP16[$73>>1]|0;
     $75 = $74 << 16 >> 16;
     $76 = (($72) - ($75))|0;
     $24 = $76;
     break L5;
    }
   }
   $8 = -4;
   $306 = $8;
   STACKTOP = sp;return ($306|0);
   break;
  }
  default: {
   $77 = $10;
   $78 = ($77|0)<(1);
   if ($78) {
    $8 = -4;
    $306 = $8;
    STACKTOP = sp;return ($306|0);
   }
   $79 = $9;
   $80 = ((($79)) + 1|0);
   $9 = $80;
   $81 = HEAP8[$79>>0]|0;
   $21 = $81;
   $82 = $21;
   $83 = $82&255;
   $84 = $83 & 63;
   $19 = $84;
   $85 = $19;
   $86 = ($85|0)<=(0);
   if (!($86)) {
    $87 = $23;
    $88 = $19;
    $89 = Math_imul($87, $88)|0;
    $90 = ($89|0)>(5760);
    if (!($90)) {
     $91 = $10;
     $92 = (($91) + -1)|0;
     $10 = $92;
     $93 = $21;
     $94 = $93&255;
     $95 = $94 & 64;
     $96 = ($95|0)!=(0);
     L14: do {
      if ($96) {
       while(1) {
        $97 = $10;
        $98 = ($97|0)<=(0);
        if ($98) {
         break;
        }
        $99 = $9;
        $100 = ((($99)) + 1|0);
        $9 = $100;
        $101 = HEAP8[$99>>0]|0;
        $102 = $101&255;
        $27 = $102;
        $103 = $10;
        $104 = (($103) + -1)|0;
        $10 = $104;
        $105 = $27;
        $106 = ($105|0)==(255);
        $107 = $27;
        $108 = $106 ? 254 : $107;
        $28 = $108;
        $109 = $28;
        $110 = $10;
        $111 = (($110) - ($109))|0;
        $10 = $111;
        $112 = $28;
        $113 = $25;
        $114 = (($113) + ($112))|0;
        $25 = $114;
        $115 = $27;
        $116 = ($115|0)==(255);
        if (!($116)) {
         break L14;
        }
       }
       $8 = -4;
       $306 = $8;
       STACKTOP = sp;return ($306|0);
      }
     } while(0);
     $117 = $10;
     $118 = ($117|0)<(0);
     if ($118) {
      $8 = -4;
      $306 = $8;
      STACKTOP = sp;return ($306|0);
     }
     $119 = $21;
     $120 = $119&255;
     $121 = $120 & 128;
     $122 = ($121|0)!=(0);
     $123 = $122 ^ 1;
     $124 = $123&1;
     $20 = $124;
     $125 = $20;
     $126 = ($125|0)!=(0);
     if ($126) {
      $170 = $11;
      $171 = ($170|0)!=(0);
      if ($171) {
       break L5;
      }
      $172 = $10;
      $173 = $19;
      $174 = (($172|0) / ($173|0))&-1;
      $24 = $174;
      $175 = $24;
      $176 = $19;
      $177 = Math_imul($175, $176)|0;
      $178 = $10;
      $179 = ($177|0)!=($178|0);
      if ($179) {
       $8 = -4;
       $306 = $8;
       STACKTOP = sp;return ($306|0);
      }
      $17 = 0;
      while(1) {
       $180 = $17;
       $181 = $19;
       $182 = (($181) - 1)|0;
       $183 = ($180|0)<($182|0);
       if (!($183)) {
        break L5;
       }
       $184 = $24;
       $185 = $184&65535;
       $186 = $14;
       $187 = $17;
       $188 = (($186) + ($187<<1)|0);
       HEAP16[$188>>1] = $185;
       $189 = $17;
       $190 = (($189) + 1)|0;
       $17 = $190;
      }
     }
     $127 = $10;
     $24 = $127;
     $17 = 0;
     while(1) {
      $128 = $17;
      $129 = $19;
      $130 = (($129) - 1)|0;
      $131 = ($128|0)<($130|0);
      if (!($131)) {
       break;
      }
      $132 = $9;
      $133 = $10;
      $134 = $14;
      $135 = $17;
      $136 = (($134) + ($135<<1)|0);
      $137 = (_parse_size($132,$133,$136)|0);
      $18 = $137;
      $138 = $18;
      $139 = $10;
      $140 = (($139) - ($138))|0;
      $10 = $140;
      $141 = $14;
      $142 = $17;
      $143 = (($141) + ($142<<1)|0);
      $144 = HEAP16[$143>>1]|0;
      $145 = $144 << 16 >> 16;
      $146 = ($145|0)<(0);
      if ($146) {
       label = 29;
       break;
      }
      $147 = $14;
      $148 = $17;
      $149 = (($147) + ($148<<1)|0);
      $150 = HEAP16[$149>>1]|0;
      $151 = $150 << 16 >> 16;
      $152 = $10;
      $153 = ($151|0)>($152|0);
      if ($153) {
       label = 29;
       break;
      }
      $154 = $18;
      $155 = $9;
      $156 = (($155) + ($154)|0);
      $9 = $156;
      $157 = $18;
      $158 = $14;
      $159 = $17;
      $160 = (($158) + ($159<<1)|0);
      $161 = HEAP16[$160>>1]|0;
      $162 = $161 << 16 >> 16;
      $163 = (($157) + ($162))|0;
      $164 = $24;
      $165 = (($164) - ($163))|0;
      $24 = $165;
      $166 = $17;
      $167 = (($166) + 1)|0;
      $17 = $167;
     }
     if ((label|0) == 29) {
      $8 = -4;
      $306 = $8;
      STACKTOP = sp;return ($306|0);
     }
     $168 = $24;
     $169 = ($168|0)<(0);
     if (!($169)) {
      break L5;
     }
     $8 = -4;
     $306 = $8;
     STACKTOP = sp;return ($306|0);
    }
   }
   $8 = -4;
   $306 = $8;
   STACKTOP = sp;return ($306|0);
  }
  }
 } while(0);
 $191 = $11;
 $192 = ($191|0)!=(0);
 L63: do {
  if ($192) {
   $193 = $9;
   $194 = $10;
   $195 = $14;
   $196 = $19;
   $197 = (($195) + ($196<<1)|0);
   $198 = ((($197)) + -2|0);
   $199 = (_parse_size($193,$194,$198)|0);
   $18 = $199;
   $200 = $18;
   $201 = $10;
   $202 = (($201) - ($200))|0;
   $10 = $202;
   $203 = $14;
   $204 = $19;
   $205 = (($204) - 1)|0;
   $206 = (($203) + ($205<<1)|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $207 << 16 >> 16;
   $209 = ($208|0)<(0);
   if (!($209)) {
    $210 = $14;
    $211 = $19;
    $212 = (($211) - 1)|0;
    $213 = (($210) + ($212<<1)|0);
    $214 = HEAP16[$213>>1]|0;
    $215 = $214 << 16 >> 16;
    $216 = $10;
    $217 = ($215|0)>($216|0);
    if (!($217)) {
     $218 = $18;
     $219 = $9;
     $220 = (($219) + ($218)|0);
     $9 = $220;
     $221 = $20;
     $222 = ($221|0)!=(0);
     if (!($222)) {
      $247 = $18;
      $248 = $14;
      $249 = $19;
      $250 = (($249) - 1)|0;
      $251 = (($248) + ($250<<1)|0);
      $252 = HEAP16[$251>>1]|0;
      $253 = $252 << 16 >> 16;
      $254 = (($247) + ($253))|0;
      $255 = $24;
      $256 = ($254|0)>($255|0);
      if (!($256)) {
       break;
      }
      $8 = -4;
      $306 = $8;
      STACKTOP = sp;return ($306|0);
     }
     $223 = $14;
     $224 = $19;
     $225 = (($224) - 1)|0;
     $226 = (($223) + ($225<<1)|0);
     $227 = HEAP16[$226>>1]|0;
     $228 = $227 << 16 >> 16;
     $229 = $19;
     $230 = Math_imul($228, $229)|0;
     $231 = $10;
     $232 = ($230|0)>($231|0);
     if ($232) {
      $8 = -4;
      $306 = $8;
      STACKTOP = sp;return ($306|0);
     }
     $17 = 0;
     while(1) {
      $233 = $17;
      $234 = $19;
      $235 = (($234) - 1)|0;
      $236 = ($233|0)<($235|0);
      if (!($236)) {
       break L63;
      }
      $237 = $14;
      $238 = $19;
      $239 = (($238) - 1)|0;
      $240 = (($237) + ($239<<1)|0);
      $241 = HEAP16[$240>>1]|0;
      $242 = $14;
      $243 = $17;
      $244 = (($242) + ($243<<1)|0);
      HEAP16[$244>>1] = $241;
      $245 = $17;
      $246 = (($245) + 1)|0;
      $17 = $246;
     }
    }
   }
   $8 = -4;
   $306 = $8;
   STACKTOP = sp;return ($306|0);
  } else {
   $257 = $24;
   $258 = ($257|0)>(1275);
   if (!($258)) {
    $259 = $24;
    $260 = $259&65535;
    $261 = $14;
    $262 = $19;
    $263 = (($262) - 1)|0;
    $264 = (($261) + ($263<<1)|0);
    HEAP16[$264>>1] = $260;
    break;
   }
   $8 = -4;
   $306 = $8;
   STACKTOP = sp;return ($306|0);
  }
 } while(0);
 $265 = $15;
 $266 = ($265|0)!=(0|0);
 if ($266) {
  $267 = $9;
  $268 = $26;
  $269 = $267;
  $270 = $268;
  $271 = (($269) - ($270))|0;
  $272 = $15;
  HEAP32[$272>>2] = $271;
 }
 $17 = 0;
 while(1) {
  $273 = $17;
  $274 = $19;
  $275 = ($273|0)<($274|0);
  if (!($275)) {
   break;
  }
  $276 = $13;
  $277 = ($276|0)!=(0|0);
  if ($277) {
   $278 = $9;
   $279 = $13;
   $280 = $17;
   $281 = (($279) + ($280<<2)|0);
   HEAP32[$281>>2] = $278;
  }
  $282 = $14;
  $283 = $17;
  $284 = (($282) + ($283<<1)|0);
  $285 = HEAP16[$284>>1]|0;
  $286 = $285 << 16 >> 16;
  $287 = $9;
  $288 = (($287) + ($286)|0);
  $9 = $288;
  $289 = $17;
  $290 = (($289) + 1)|0;
  $17 = $290;
 }
 $291 = $16;
 $292 = ($291|0)!=(0|0);
 if ($292) {
  $293 = $25;
  $294 = $9;
  $295 = $26;
  $296 = $294;
  $297 = $295;
  $298 = (($296) - ($297))|0;
  $299 = (($293) + ($298))|0;
  $300 = $16;
  HEAP32[$300>>2] = $299;
 }
 $301 = $12;
 $302 = ($301|0)!=(0|0);
 if ($302) {
  $303 = $22;
  $304 = $12;
  HEAP8[$304>>0] = $303;
 }
 $305 = $19;
 $8 = $305;
 $306 = $8;
 STACKTOP = sp;return ($306|0);
}
function _parse_size($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)<(1);
 do {
  if ($8) {
   $9 = $6;
   HEAP16[$9>>1] = -1;
   $3 = -1;
  } else {
   $10 = $4;
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = ($12|0)<(252);
   if ($13) {
    $14 = $4;
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $6;
    HEAP16[$17>>1] = $16;
    $3 = 1;
    break;
   }
   $18 = $5;
   $19 = ($18|0)<(2);
   if ($19) {
    $20 = $6;
    HEAP16[$20>>1] = -1;
    $3 = -1;
    break;
   } else {
    $21 = $4;
    $22 = ((($21)) + 1|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24<<2;
    $26 = $4;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27&255;
    $29 = (($25) + ($28))|0;
    $30 = $29&65535;
    $31 = $6;
    HEAP16[$31>>1] = $30;
    $3 = 2;
    break;
   }
  }
 } while(0);
 $32 = $3;
 STACKTOP = sp;return ($32|0);
}
function _hysteresis_decision($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $8;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = $6;
  $16 = $10;
  $17 = (($15) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $14 < $18;
  if ($19) {
   break;
  }
  $20 = $10;
  $21 = (($20) + 1)|0;
  $10 = $21;
 }
 $22 = $10;
 $23 = $9;
 $24 = ($22|0)>($23|0);
 if ($24) {
  $25 = $5;
  $26 = $6;
  $27 = $9;
  $28 = (($26) + ($27<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $7;
  $31 = $9;
  $32 = (($30) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $29 + $33;
  $35 = $25 < $34;
  if ($35) {
   $36 = $9;
   $10 = $36;
  }
 }
 $37 = $10;
 $38 = $9;
 $39 = ($37|0)<($38|0);
 if (!($39)) {
  $54 = $10;
  STACKTOP = sp;return ($54|0);
 }
 $40 = $5;
 $41 = $6;
 $42 = $9;
 $43 = (($42) - 1)|0;
 $44 = (($41) + ($43<<2)|0);
 $45 = +HEAPF32[$44>>2];
 $46 = $7;
 $47 = $9;
 $48 = (($47) - 1)|0;
 $49 = (($46) + ($48<<2)|0);
 $50 = +HEAPF32[$49>>2];
 $51 = $45 - $50;
 $52 = $40 > $51;
 if (!($52)) {
  $54 = $10;
  STACKTOP = sp;return ($54|0);
 }
 $53 = $9;
 $10 = $53;
 $54 = $10;
 STACKTOP = sp;return ($54|0);
}
function _celt_lcg_rand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = Math_imul(1664525, $2)|0;
 $4 = (($3) + 1013904223)|0;
 STACKTOP = sp;return ($4|0);
}
function _compute_band_energies($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $6;
 $18 = ((($17)) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $15 = $19;
 $20 = $6;
 $21 = ((($20)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $11;
 $24 = $22 << $23;
 $14 = $24;
 $13 = 0;
 while(1) {
  $12 = 0;
  while(1) {
   $25 = $12;
   $26 = $9;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $7;
   $29 = $13;
   $30 = $14;
   $31 = Math_imul($29, $30)|0;
   $32 = $15;
   $33 = $12;
   $34 = (($32) + ($33<<1)|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = $11;
   $38 = $36 << $37;
   $39 = (($31) + ($38))|0;
   $40 = (($28) + ($39<<2)|0);
   $41 = $7;
   $42 = $13;
   $43 = $14;
   $44 = Math_imul($42, $43)|0;
   $45 = $15;
   $46 = $12;
   $47 = (($45) + ($46<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48 << 16 >> 16;
   $50 = $11;
   $51 = $49 << $50;
   $52 = (($44) + ($51))|0;
   $53 = (($41) + ($52<<2)|0);
   $54 = $15;
   $55 = $12;
   $56 = (($55) + 1)|0;
   $57 = (($54) + ($56<<1)|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = $15;
   $61 = $12;
   $62 = (($60) + ($61<<1)|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = (($59) - ($64))|0;
   $66 = $11;
   $67 = $65 << $66;
   $68 = (+_celt_inner_prod_c_351($40,$53,$67));
   $69 = 1.0000000272452012E-27 + $68;
   $16 = $69;
   $70 = $16;
   $71 = $70;
   $72 = (+Math_sqrt((+$71)));
   $73 = $72;
   $74 = $8;
   $75 = $12;
   $76 = $13;
   $77 = $6;
   $78 = ((($77)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = Math_imul($76, $79)|0;
   $81 = (($75) + ($80))|0;
   $82 = (($74) + ($81<<2)|0);
   HEAPF32[$82>>2] = $73;
   $83 = $12;
   $84 = (($83) + 1)|0;
   $12 = $84;
  }
  $85 = $13;
  $86 = (($85) + 1)|0;
  $13 = $86;
  $87 = $10;
  $88 = ($86|0)<($87|0);
  if (!($88)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _celt_inner_prod_c_351($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0.0;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  $11 = $7;
  if (!($10)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 * $19;
  $21 = $11 + $20;
  $7 = $21;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $6 = $23;
 }
 STACKTOP = sp;return (+$11);
}
function _normalise_bands($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $20 = $7;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $13;
 $24 = $7;
 $25 = ((($24)) + 44|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($23, $26)|0;
 $16 = $27;
 $15 = 0;
 while(1) {
  $14 = 0;
  while(1) {
   $28 = $14;
   $29 = $11;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $10;
   $32 = $14;
   $33 = $15;
   $34 = $7;
   $35 = ((($34)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = Math_imul($33, $36)|0;
   $38 = (($32) + ($37))|0;
   $39 = (($31) + ($38<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = 1.0000000272452012E-27 + $40;
   $42 = 1.0 / $41;
   $19 = $42;
   $43 = $13;
   $44 = $17;
   $45 = $14;
   $46 = (($44) + ($45<<1)|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = Math_imul($43, $48)|0;
   $18 = $49;
   while(1) {
    $50 = $18;
    $51 = $13;
    $52 = $17;
    $53 = $14;
    $54 = (($53) + 1)|0;
    $55 = (($52) + ($54<<1)|0);
    $56 = HEAP16[$55>>1]|0;
    $57 = $56 << 16 >> 16;
    $58 = Math_imul($51, $57)|0;
    $59 = ($50|0)<($58|0);
    if (!($59)) {
     break;
    }
    $60 = $8;
    $61 = $18;
    $62 = $15;
    $63 = $16;
    $64 = Math_imul($62, $63)|0;
    $65 = (($61) + ($64))|0;
    $66 = (($60) + ($65<<2)|0);
    $67 = +HEAPF32[$66>>2];
    $68 = $19;
    $69 = $67 * $68;
    $70 = $9;
    $71 = $18;
    $72 = $15;
    $73 = $16;
    $74 = Math_imul($72, $73)|0;
    $75 = (($71) + ($74))|0;
    $76 = (($70) + ($75<<2)|0);
    HEAPF32[$76>>2] = $69;
    $77 = $18;
    $78 = (($77) + 1)|0;
    $18 = $78;
   }
   $79 = $14;
   $80 = (($79) + 1)|0;
   $14 = $80;
  }
  $81 = $15;
  $82 = (($81) + 1)|0;
  $15 = $82;
  $83 = $12;
  $84 = ($82|0)<($83|0);
  if (!($84)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _denormalise_bands($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $28 = $9;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $23 = $30;
 $31 = $15;
 $32 = $9;
 $33 = ((($32)) + 44|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($31, $34)|0;
 $19 = $35;
 $36 = $15;
 $37 = $23;
 $38 = $14;
 $39 = (($37) + ($38<<1)|0);
 $40 = HEAP16[$39>>1]|0;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($36, $41)|0;
 $20 = $42;
 $43 = $16;
 $44 = ($43|0)!=(1);
 if ($44) {
  $45 = $20;
  $46 = $19;
  $47 = $16;
  $48 = (($46|0) / ($47|0))&-1;
  $49 = ($45|0)<($48|0);
  if ($49) {
   $50 = $20;
   $54 = $50;
  } else {
   $51 = $19;
   $52 = $16;
   $53 = (($51|0) / ($52|0))&-1;
   $54 = $53;
  }
  $20 = $54;
 }
 $55 = $17;
 $56 = ($55|0)!=(0);
 if ($56) {
  $20 = 0;
  $14 = 0;
  $13 = 0;
 }
 $57 = $11;
 $21 = $57;
 $58 = $10;
 $59 = $15;
 $60 = $23;
 $61 = $13;
 $62 = (($60) + ($61<<1)|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = $63 << 16 >> 16;
 $65 = Math_imul($59, $64)|0;
 $66 = (($58) + ($65<<2)|0);
 $22 = $66;
 $18 = 0;
 while(1) {
  $67 = $18;
  $68 = $15;
  $69 = $23;
  $70 = $13;
  $71 = (($69) + ($70<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = Math_imul($68, $73)|0;
  $75 = ($67|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $21;
  $77 = ((($76)) + 4|0);
  $21 = $77;
  HEAPF32[$76>>2] = 0.0;
  $78 = $18;
  $79 = (($78) + 1)|0;
  $18 = $79;
 }
 $80 = $13;
 $18 = $80;
 while(1) {
  $81 = $18;
  $82 = $14;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $15;
  $85 = $23;
  $86 = $18;
  $87 = (($85) + ($86<<1)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88 << 16 >> 16;
  $90 = Math_imul($84, $89)|0;
  $24 = $90;
  $91 = $15;
  $92 = $23;
  $93 = $18;
  $94 = (($93) + 1)|0;
  $95 = (($92) + ($94<<1)|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = Math_imul($91, $97)|0;
  $25 = $98;
  $99 = $12;
  $100 = $18;
  $101 = (($99) + ($100<<2)|0);
  $102 = +HEAPF32[$101>>2];
  $103 = $18;
  $104 = (16504 + ($103<<2)|0);
  $105 = +HEAPF32[$104>>2];
  $106 = $102 + $105;
  $27 = $106;
  $107 = $27;
  $108 = $107;
  $109 = 0.69314718055994529 * $108;
  $110 = (+Math_exp((+$109)));
  $111 = $110;
  $26 = $111;
  while(1) {
   $112 = $22;
   $113 = ((($112)) + 4|0);
   $22 = $113;
   $114 = +HEAPF32[$112>>2];
   $115 = $26;
   $116 = $114 * $115;
   $117 = $21;
   $118 = ((($117)) + 4|0);
   $21 = $118;
   HEAPF32[$117>>2] = $116;
   $119 = $24;
   $120 = (($119) + 1)|0;
   $24 = $120;
   $121 = $25;
   $122 = ($120|0)<($121|0);
   if (!($122)) {
    break;
   }
  }
  $123 = $18;
  $124 = (($123) + 1)|0;
  $18 = $124;
 }
 $125 = $11;
 $126 = $20;
 $127 = (($125) + ($126<<2)|0);
 $128 = $19;
 $129 = $20;
 $130 = (($128) - ($129))|0;
 $131 = $130<<2;
 _memset(($127|0),0,($131|0))|0;
 STACKTOP = sp;return;
}
function _anti_collapse($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0;
 var $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0;
 var $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $42 = $20;
 $29 = $42;
 while(1) {
  $43 = $29;
  $44 = $21;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $14;
  $47 = ((($46)) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $29;
  $50 = (($49) + 1)|0;
  $51 = (($48) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = $14;
  $55 = ((($54)) + 32|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $29;
  $58 = (($56) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = (($53) - ($60))|0;
  $32 = $61;
  $62 = $25;
  $63 = $29;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (1 + ($65))|0;
  $67 = $14;
  $68 = ((($67)) + 32|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $29;
  $71 = (($70) + 1)|0;
  $72 = (($69) + ($71<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $14;
  $76 = ((($75)) + 32|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $29;
  $79 = (($77) + ($78<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = (($74) - ($81))|0;
  $83 = (_celt_udiv_358($66,$82)|0);
  $84 = $17;
  $85 = $83 >>> $84;
  $35 = $85;
  $86 = $35;
  $87 = (+($86|0));
  $88 = -0.125 * $87;
  $89 = $88;
  $90 = 0.69314718055994529 * $89;
  $91 = (+Math_exp((+$90)));
  $92 = $91;
  $93 = 0.5 * $92;
  $33 = $93;
  $94 = $32;
  $95 = $17;
  $96 = $94 << $95;
  $97 = (+($96|0));
  $98 = (+Math_sqrt((+$97)));
  $99 = $98;
  $100 = 1.0 / $99;
  $34 = $100;
  $28 = 0;
  while(1) {
   $41 = 0;
   $101 = $23;
   $102 = $28;
   $103 = $14;
   $104 = ((($103)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = Math_imul($102, $105)|0;
   $107 = $29;
   $108 = (($106) + ($107))|0;
   $109 = (($101) + ($108<<2)|0);
   $110 = +HEAPF32[$109>>2];
   $37 = $110;
   $111 = $24;
   $112 = $28;
   $113 = $14;
   $114 = ((($113)) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = Math_imul($112, $115)|0;
   $117 = $29;
   $118 = (($116) + ($117))|0;
   $119 = (($111) + ($118<<2)|0);
   $120 = +HEAPF32[$119>>2];
   $38 = $120;
   $121 = $18;
   $122 = ($121|0)==(1);
   if ($122) {
    $123 = $37;
    $124 = $23;
    $125 = $14;
    $126 = ((($125)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = $29;
    $129 = (($127) + ($128))|0;
    $130 = (($124) + ($129<<2)|0);
    $131 = +HEAPF32[$130>>2];
    $132 = $123 > $131;
    if ($132) {
     $133 = $37;
     $142 = $133;
    } else {
     $134 = $23;
     $135 = $14;
     $136 = ((($135)) + 8|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $29;
     $139 = (($137) + ($138))|0;
     $140 = (($134) + ($139<<2)|0);
     $141 = +HEAPF32[$140>>2];
     $142 = $141;
    }
    $37 = $142;
    $143 = $38;
    $144 = $24;
    $145 = $14;
    $146 = ((($145)) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $29;
    $149 = (($147) + ($148))|0;
    $150 = (($144) + ($149<<2)|0);
    $151 = +HEAPF32[$150>>2];
    $152 = $143 > $151;
    if ($152) {
     $153 = $38;
     $162 = $153;
    } else {
     $154 = $24;
     $155 = $14;
     $156 = ((($155)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $29;
     $159 = (($157) + ($158))|0;
     $160 = (($154) + ($159<<2)|0);
     $161 = +HEAPF32[$160>>2];
     $162 = $161;
    }
    $38 = $162;
   }
   $163 = $22;
   $164 = $28;
   $165 = $14;
   $166 = ((($165)) + 8|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = Math_imul($164, $167)|0;
   $169 = $29;
   $170 = (($168) + ($169))|0;
   $171 = (($163) + ($170<<2)|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $37;
   $174 = $38;
   $175 = $173 < $174;
   $176 = $37;
   $177 = $38;
   $178 = $175 ? $176 : $177;
   $179 = $172 - $178;
   $39 = $179;
   $180 = $39;
   $181 = 0.0 > $180;
   $182 = $39;
   $183 = $181 ? 0.0 : $182;
   $39 = $183;
   $184 = $39;
   $185 = - $184;
   $186 = $185;
   $187 = 0.69314718055994529 * $186;
   $188 = (+Math_exp((+$187)));
   $189 = $188;
   $190 = 2.0 * $189;
   $40 = $190;
   $191 = $17;
   $192 = ($191|0)==(3);
   if ($192) {
    $193 = $40;
    $194 = $193 * 1.4142135381698608;
    $40 = $194;
   }
   $195 = $33;
   $196 = $40;
   $197 = $195 < $196;
   $198 = $33;
   $199 = $40;
   $200 = $197 ? $198 : $199;
   $40 = $200;
   $201 = $40;
   $202 = $34;
   $203 = $201 * $202;
   $40 = $203;
   $204 = $15;
   $205 = $28;
   $206 = $19;
   $207 = Math_imul($205, $206)|0;
   $208 = (($204) + ($207<<2)|0);
   $209 = $14;
   $210 = ((($209)) + 32|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = $29;
   $213 = (($211) + ($212<<1)|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214 << 16 >> 16;
   $216 = $17;
   $217 = $215 << $216;
   $218 = (($208) + ($217<<2)|0);
   $36 = $218;
   $31 = 0;
   while(1) {
    $219 = $31;
    $220 = $17;
    $221 = 1 << $220;
    $222 = ($219|0)<($221|0);
    if (!($222)) {
     break;
    }
    $223 = $16;
    $224 = $29;
    $225 = $18;
    $226 = Math_imul($224, $225)|0;
    $227 = $28;
    $228 = (($226) + ($227))|0;
    $229 = (($223) + ($228)|0);
    $230 = HEAP8[$229>>0]|0;
    $231 = $230&255;
    $232 = $31;
    $233 = 1 << $232;
    $234 = $231 & $233;
    $235 = ($234|0)!=(0);
    if (!($235)) {
     $30 = 0;
     while(1) {
      $236 = $30;
      $237 = $32;
      $238 = ($236|0)<($237|0);
      if (!($238)) {
       break;
      }
      $239 = $26;
      $240 = (_celt_lcg_rand($239)|0);
      $26 = $240;
      $241 = $26;
      $242 = $241 & 32768;
      $243 = ($242|0)!=(0);
      $244 = $40;
      $245 = - $244;
      $246 = $243 ? $244 : $245;
      $247 = $36;
      $248 = $30;
      $249 = $17;
      $250 = $248 << $249;
      $251 = $31;
      $252 = (($250) + ($251))|0;
      $253 = (($247) + ($252<<2)|0);
      HEAPF32[$253>>2] = $246;
      $254 = $30;
      $255 = (($254) + 1)|0;
      $30 = $255;
     }
     $41 = 1;
    }
    $256 = $31;
    $257 = (($256) + 1)|0;
    $31 = $257;
   }
   $258 = $41;
   $259 = ($258|0)!=(0);
   if ($259) {
    $260 = $36;
    $261 = $32;
    $262 = $17;
    $263 = $261 << $262;
    $264 = $27;
    _renormalise_vector($260,$263,1.0,$264);
   }
   $265 = $28;
   $266 = (($265) + 1)|0;
   $28 = $266;
   $267 = $18;
   $268 = ($266|0)<($267|0);
   if (!($268)) {
    break;
   }
  }
  $269 = $29;
  $270 = (($269) + 1)|0;
  $29 = $270;
 }
 STACKTOP = sp;return;
}
function _celt_udiv_358($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4>>>0) / ($5>>>0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _spreading_decision($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$sink = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $32 = sp + 8|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $24 = 0;
 $25 = 0;
 $35 = $11;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $26 = $37;
 $28 = 0;
 $38 = $20;
 $39 = $11;
 $40 = ((($39)) + 44|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($38, $41)|0;
 $23 = $42;
 $43 = $20;
 $44 = $26;
 $45 = $18;
 $46 = (($44) + ($45<<1)|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = $26;
 $50 = $18;
 $51 = (($50) - 1)|0;
 $52 = (($49) + ($51<<1)|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = (($48) - ($54))|0;
 $56 = Math_imul($43, $55)|0;
 $57 = ($56|0)<=(8);
 if ($57) {
  $10 = 0;
  $231 = $10;
  STACKTOP = sp;return ($231|0);
 }
 $22 = 0;
 while(1) {
  $21 = 0;
  while(1) {
   $58 = $21;
   $59 = $18;
   $60 = ($58|0)<($59|0);
   if (!($60)) {
    break;
   }
   $31 = 0;
   ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;
   $61 = $12;
   $62 = $20;
   $63 = $26;
   $64 = $21;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = Math_imul($62, $67)|0;
   $69 = (($61) + ($68<<2)|0);
   $70 = $22;
   $71 = $23;
   $72 = Math_imul($70, $71)|0;
   $73 = (($69) + ($72<<2)|0);
   $33 = $73;
   $74 = $20;
   $75 = $26;
   $76 = $21;
   $77 = (($76) + 1)|0;
   $78 = (($75) + ($77<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = $26;
   $82 = $21;
   $83 = (($81) + ($82<<1)|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = $84 << 16 >> 16;
   $86 = (($80) - ($85))|0;
   $87 = Math_imul($74, $86)|0;
   $30 = $87;
   $88 = $30;
   $89 = ($88|0)<=(8);
   if (!($89)) {
    $29 = 0;
    while(1) {
     $90 = $29;
     $91 = $30;
     $92 = ($90|0)<($91|0);
     if (!($92)) {
      break;
     }
     $93 = $33;
     $94 = $29;
     $95 = (($93) + ($94<<2)|0);
     $96 = +HEAPF32[$95>>2];
     $97 = $33;
     $98 = $29;
     $99 = (($97) + ($98<<2)|0);
     $100 = +HEAPF32[$99>>2];
     $101 = $96 * $100;
     $102 = $30;
     $103 = (+($102|0));
     $104 = $101 * $103;
     $34 = $104;
     $105 = $34;
     $106 = $105 < 0.25;
     if ($106) {
      $107 = HEAP32[$32>>2]|0;
      $108 = (($107) + 1)|0;
      HEAP32[$32>>2] = $108;
     }
     $109 = $34;
     $110 = $109 < 0.0625;
     if ($110) {
      $111 = ((($32)) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = (($112) + 1)|0;
      HEAP32[$111>>2] = $113;
     }
     $114 = $34;
     $115 = $114 < 0.015625;
     if ($115) {
      $116 = ((($32)) + 8|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($117) + 1)|0;
      HEAP32[$116>>2] = $118;
     }
     $119 = $29;
     $120 = (($119) + 1)|0;
     $29 = $120;
    }
    $121 = $21;
    $122 = $11;
    $123 = ((($122)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) - 4)|0;
    $126 = ($121|0)>($125|0);
    if ($126) {
     $127 = ((($32)) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = HEAP32[$32>>2]|0;
     $130 = (($128) + ($129))|0;
     $131 = $130<<5;
     $132 = $30;
     $133 = (_celt_udiv_358($131,$132)|0);
     $134 = $28;
     $135 = (($134) + ($133))|0;
     $28 = $135;
    }
    $136 = ((($32)) + 8|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $137<<1;
    $139 = $30;
    $140 = ($138|0)>=($139|0);
    $141 = $140&1;
    $142 = ((($32)) + 4|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143<<1;
    $145 = $30;
    $146 = ($144|0)>=($145|0);
    $147 = $146&1;
    $148 = (($141) + ($147))|0;
    $149 = HEAP32[$32>>2]|0;
    $150 = $149<<1;
    $151 = $30;
    $152 = ($150|0)>=($151|0);
    $153 = $152&1;
    $154 = (($148) + ($153))|0;
    $31 = $154;
    $155 = $31;
    $156 = $155<<8;
    $157 = $24;
    $158 = (($157) + ($156))|0;
    $24 = $158;
    $159 = $25;
    $160 = (($159) + 1)|0;
    $25 = $160;
   }
   $161 = $21;
   $162 = (($161) + 1)|0;
   $21 = $162;
  }
  $163 = $22;
  $164 = (($163) + 1)|0;
  $22 = $164;
  $165 = $19;
  $166 = ($164|0)<($165|0);
  if (!($166)) {
   break;
  }
 }
 $167 = $17;
 $168 = ($167|0)!=(0);
 do {
  if ($168) {
   $169 = $28;
   $170 = ($169|0)!=(0);
   if ($170) {
    $171 = $28;
    $172 = $19;
    $173 = $11;
    $174 = ((($173)) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (4 - ($175))|0;
    $177 = $18;
    $178 = (($176) + ($177))|0;
    $179 = Math_imul($172, $178)|0;
    $180 = (_celt_udiv_358($171,$179)|0);
    $28 = $180;
   }
   $181 = $15;
   $182 = HEAP32[$181>>2]|0;
   $183 = $28;
   $184 = (($182) + ($183))|0;
   $185 = $184 >> 1;
   $186 = $15;
   HEAP32[$186>>2] = $185;
   $187 = $15;
   $188 = HEAP32[$187>>2]|0;
   $28 = $188;
   $189 = $16;
   $190 = HEAP32[$189>>2]|0;
   $191 = ($190|0)==(2);
   if ($191) {
    $192 = $28;
    $193 = (($192) + 4)|0;
    $28 = $193;
   } else {
    $194 = $16;
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(0);
    if ($196) {
     $197 = $28;
     $198 = (($197) - 4)|0;
     $28 = $198;
    }
   }
   $199 = $28;
   $200 = ($199|0)>(22);
   if ($200) {
    $201 = $16;
    HEAP32[$201>>2] = 2;
    break;
   } else {
    $202 = $28;
    $203 = ($202|0)>(18);
    $204 = $16;
    $$sink = $203 ? 1 : 0;
    HEAP32[$204>>2] = $$sink;
    break;
   }
  }
 } while(0);
 $205 = $24;
 $206 = $25;
 $207 = (_celt_udiv_358($205,$206)|0);
 $24 = $207;
 $208 = $24;
 $209 = $13;
 $210 = HEAP32[$209>>2]|0;
 $211 = (($208) + ($210))|0;
 $212 = $211 >> 1;
 $24 = $212;
 $213 = $24;
 $214 = $13;
 HEAP32[$214>>2] = $213;
 $215 = $24;
 $216 = ($215*3)|0;
 $217 = $14;
 $218 = (3 - ($217))|0;
 $219 = $218 << 7;
 $220 = (($219) + 64)|0;
 $221 = (($216) + ($220))|0;
 $222 = (($221) + 2)|0;
 $223 = $222 >> 2;
 $24 = $223;
 $224 = $24;
 $225 = ($224|0)<(80);
 do {
  if ($225) {
   $27 = 3;
  } else {
   $226 = $24;
   $227 = ($226|0)<(256);
   if ($227) {
    $27 = 2;
    break;
   }
   $228 = $24;
   $229 = ($228|0)<(384);
   if ($229) {
    $27 = 1;
    break;
   } else {
    $27 = 0;
    break;
   }
  }
 } while(0);
 $230 = $27;
 $10 = $230;
 $231 = $10;
 STACKTOP = sp;return ($231|0);
}
function _haar1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $4;
 $11 = $10 >> 1;
 $4 = $11;
 $6 = 0;
 while(1) {
  $12 = $6;
  $13 = $5;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $7 = 0;
  while(1) {
   $15 = $7;
   $16 = $4;
   $17 = ($15|0)<($16|0);
   if (!($17)) {
    break;
   }
   $18 = $3;
   $19 = $5;
   $20 = $19<<1;
   $21 = $7;
   $22 = Math_imul($20, $21)|0;
   $23 = $6;
   $24 = (($22) + ($23))|0;
   $25 = (($18) + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = 0.70710676908493042 * $26;
   $8 = $27;
   $28 = $3;
   $29 = $5;
   $30 = $7;
   $31 = $30<<1;
   $32 = (($31) + 1)|0;
   $33 = Math_imul($29, $32)|0;
   $34 = $6;
   $35 = (($33) + ($34))|0;
   $36 = (($28) + ($35<<2)|0);
   $37 = +HEAPF32[$36>>2];
   $38 = 0.70710676908493042 * $37;
   $9 = $38;
   $39 = $8;
   $40 = $9;
   $41 = $39 + $40;
   $42 = $3;
   $43 = $5;
   $44 = $43<<1;
   $45 = $7;
   $46 = Math_imul($44, $45)|0;
   $47 = $6;
   $48 = (($46) + ($47))|0;
   $49 = (($42) + ($48<<2)|0);
   HEAPF32[$49>>2] = $41;
   $50 = $8;
   $51 = $9;
   $52 = $50 - $51;
   $53 = $3;
   $54 = $5;
   $55 = $7;
   $56 = $55<<1;
   $57 = (($56) + 1)|0;
   $58 = Math_imul($54, $57)|0;
   $59 = $6;
   $60 = (($58) + ($59))|0;
   $61 = (($53) + ($60<<2)|0);
   HEAPF32[$61>>2] = $52;
   $62 = $7;
   $63 = (($62) + 1)|0;
   $7 = $63;
  }
  $64 = $6;
  $65 = (($64) + 1)|0;
  $6 = $65;
 }
 STACKTOP = sp;return;
}
function _quant_all_bands($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 var $$alloca_mul = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $55 = sp + 64|0;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $24 = $3;
 $25 = $4;
 $26 = $5;
 $27 = $6;
 $28 = $7;
 $29 = $8;
 $30 = $9;
 $31 = $10;
 $32 = $11;
 $33 = $12;
 $34 = $13;
 $35 = $14;
 $36 = $15;
 $37 = $16;
 $38 = $17;
 $39 = $18;
 $40 = $19;
 $41 = $20;
 $72 = $22;
 $73 = ((($72)) + 32|0);
 $74 = HEAP32[$73>>2]|0;
 $44 = $74;
 $51 = 1;
 $75 = $26;
 $76 = ($75|0)!=(0|0);
 $77 = $76 ? 2 : 1;
 $52 = $77;
 $78 = $21;
 $79 = ($78|0)!=(0);
 $80 = $79 ^ 1;
 $81 = $80&1;
 $54 = $81;
 $82 = $38;
 $83 = 1 << $82;
 $49 = $83;
 $84 = $30;
 $85 = ($84|0)!=(0);
 $86 = $49;
 $87 = $85 ? $86 : 1;
 $48 = $87;
 $88 = $49;
 $89 = $44;
 $90 = $23;
 $91 = (($89) + ($90<<1)|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = $92 << 16 >> 16;
 $94 = Math_imul($88, $93)|0;
 $53 = $94;
 $95 = $52;
 $96 = $49;
 $97 = $44;
 $98 = $22;
 $99 = ((($98)) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) - 1)|0;
 $102 = (($97) + ($101<<1)|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = $103 << 16 >> 16;
 $105 = Math_imul($96, $104)|0;
 $106 = $53;
 $107 = (($105) - ($106))|0;
 $108 = Math_imul($95, $107)|0;
 $109 = (_llvm_stacksave()|0);
 $56 = $109;
 $$alloca_mul = $108<<2;
 $110 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $45 = $110;
 $111 = $45;
 $112 = $49;
 $113 = $44;
 $114 = $22;
 $115 = ((($114)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) - 1)|0;
 $118 = (($113) + ($117<<1)|0);
 $119 = HEAP16[$118>>1]|0;
 $120 = $119 << 16 >> 16;
 $121 = Math_imul($112, $120)|0;
 $122 = (($111) + ($121<<2)|0);
 $123 = $53;
 $124 = (0 - ($123))|0;
 $125 = (($122) + ($124<<2)|0);
 $46 = $125;
 $126 = $25;
 $127 = $49;
 $128 = $44;
 $129 = $22;
 $130 = ((($129)) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) - 1)|0;
 $133 = (($128) + ($132<<1)|0);
 $134 = HEAP16[$133>>1]|0;
 $135 = $134 << 16 >> 16;
 $136 = Math_imul($127, $135)|0;
 $137 = (($126) + ($136<<2)|0);
 $47 = $137;
 $50 = 0;
 $138 = $28;
 $139 = ((($55)) + 32|0);
 HEAP32[$139>>2] = $138;
 $140 = $37;
 $141 = ((($55)) + 24|0);
 HEAP32[$141>>2] = $140;
 $142 = $21;
 HEAP32[$55>>2] = $142;
 $143 = $33;
 $144 = ((($55)) + 12|0);
 HEAP32[$144>>2] = $143;
 $145 = $22;
 $146 = ((($55)) + 4|0);
 HEAP32[$146>>2] = $145;
 $147 = $40;
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($55)) + 36|0);
 HEAP32[$149>>2] = $148;
 $150 = $31;
 $151 = ((($55)) + 16|0);
 HEAP32[$151>>2] = $150;
 $152 = $41;
 $153 = ((($55)) + 40|0);
 HEAP32[$153>>2] = $152;
 $154 = $23;
 $42 = $154;
 while(1) {
  $155 = $42;
  $156 = $24;
  $157 = ($155|0)<($156|0);
  if (!($157)) {
   break;
  }
  $61 = -1;
  $64 = 0;
  $158 = $42;
  $159 = ((($55)) + 8|0);
  HEAP32[$159>>2] = $158;
  $160 = $42;
  $161 = $24;
  $162 = (($161) - 1)|0;
  $163 = ($160|0)==($162|0);
  $164 = $163&1;
  $67 = $164;
  $165 = $25;
  $166 = $49;
  $167 = $44;
  $168 = $42;
  $169 = (($167) + ($168<<1)|0);
  $170 = HEAP16[$169>>1]|0;
  $171 = $170 << 16 >> 16;
  $172 = Math_imul($166, $171)|0;
  $173 = (($165) + ($172<<2)|0);
  $62 = $173;
  $174 = $26;
  $175 = ($174|0)!=(0|0);
  if ($175) {
   $176 = $26;
   $177 = $49;
   $178 = $44;
   $179 = $42;
   $180 = (($178) + ($179<<1)|0);
   $181 = HEAP16[$180>>1]|0;
   $182 = $181 << 16 >> 16;
   $183 = Math_imul($177, $182)|0;
   $184 = (($176) + ($183<<2)|0);
   $63 = $184;
  } else {
   $63 = 0;
  }
  $185 = $49;
  $186 = $44;
  $187 = $42;
  $188 = (($187) + 1)|0;
  $189 = (($186) + ($188<<1)|0);
  $190 = HEAP16[$189>>1]|0;
  $191 = $190 << 16 >> 16;
  $192 = Math_imul($185, $191)|0;
  $193 = $49;
  $194 = $44;
  $195 = $42;
  $196 = (($194) + ($195<<1)|0);
  $197 = HEAP16[$196>>1]|0;
  $198 = $197 << 16 >> 16;
  $199 = Math_imul($193, $198)|0;
  $200 = (($192) - ($199))|0;
  $59 = $200;
  $201 = $37;
  $202 = (_ec_tell_frac($201)|0);
  $57 = $202;
  $203 = $42;
  $204 = $23;
  $205 = ($203|0)!=($204|0);
  if ($205) {
   $206 = $57;
   $207 = $36;
   $208 = (($207) - ($206))|0;
   $36 = $208;
  }
  $209 = $35;
  $210 = $57;
  $211 = (($209) - ($210))|0;
  $212 = (($211) - 1)|0;
  $43 = $212;
  $213 = $43;
  $214 = ((($55)) + 28|0);
  HEAP32[$214>>2] = $213;
  $215 = $42;
  $216 = $39;
  $217 = (($216) - 1)|0;
  $218 = ($215|0)<=($217|0);
  if ($218) {
   $219 = $36;
   $220 = $39;
   $221 = $42;
   $222 = (($220) - ($221))|0;
   $223 = (3)<($222|0);
   if ($223) {
    $227 = 3;
   } else {
    $224 = $39;
    $225 = $42;
    $226 = (($224) - ($225))|0;
    $227 = $226;
   }
   $228 = (_celt_sudiv($219,$227)|0);
   $60 = $228;
   $229 = $43;
   $230 = (($229) + 1)|0;
   $231 = $29;
   $232 = $42;
   $233 = (($231) + ($232<<2)|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $60;
   $236 = (($234) + ($235))|0;
   $237 = ($230|0)<($236|0);
   if ($237) {
    $238 = $43;
    $239 = (($238) + 1)|0;
    $247 = $239;
   } else {
    $240 = $29;
    $241 = $42;
    $242 = (($240) + ($241<<2)|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $60;
    $245 = (($243) + ($244))|0;
    $247 = $245;
   }
   $246 = (16383)<($247|0);
   do {
    if ($246) {
     $266 = 16383;
    } else {
     $248 = $43;
     $249 = (($248) + 1)|0;
     $250 = $29;
     $251 = $42;
     $252 = (($250) + ($251<<2)|0);
     $253 = HEAP32[$252>>2]|0;
     $254 = $60;
     $255 = (($253) + ($254))|0;
     $256 = ($249|0)<($255|0);
     if ($256) {
      $257 = $43;
      $258 = (($257) + 1)|0;
      $266 = $258;
      break;
     } else {
      $259 = $29;
      $260 = $42;
      $261 = (($259) + ($260<<2)|0);
      $262 = HEAP32[$261>>2]|0;
      $263 = $60;
      $264 = (($262) + ($263))|0;
      $266 = $264;
      break;
     }
    }
   } while(0);
   $265 = (0)>($266|0);
   do {
    if ($265) {
     $303 = 0;
    } else {
     $267 = $43;
     $268 = (($267) + 1)|0;
     $269 = $29;
     $270 = $42;
     $271 = (($269) + ($270<<2)|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = $60;
     $274 = (($272) + ($273))|0;
     $275 = ($268|0)<($274|0);
     if ($275) {
      $276 = $43;
      $277 = (($276) + 1)|0;
      $285 = $277;
     } else {
      $278 = $29;
      $279 = $42;
      $280 = (($278) + ($279<<2)|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = $60;
      $283 = (($281) + ($282))|0;
      $285 = $283;
     }
     $284 = (16383)<($285|0);
     if ($284) {
      $303 = 16383;
     } else {
      $286 = $43;
      $287 = (($286) + 1)|0;
      $288 = $29;
      $289 = $42;
      $290 = (($288) + ($289<<2)|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = $60;
      $293 = (($291) + ($292))|0;
      $294 = ($287|0)<($293|0);
      if ($294) {
       $295 = $43;
       $296 = (($295) + 1)|0;
       $303 = $296;
       break;
      } else {
       $297 = $29;
       $298 = $42;
       $299 = (($297) + ($298<<2)|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = $60;
       $302 = (($300) + ($301))|0;
       $303 = $302;
       break;
      }
     }
    }
   } while(0);
   $58 = $303;
  } else {
   $58 = 0;
  }
  $304 = $54;
  $305 = ($304|0)!=(0);
  if ($305) {
   $306 = $49;
   $307 = $44;
   $308 = $42;
   $309 = (($307) + ($308<<1)|0);
   $310 = HEAP16[$309>>1]|0;
   $311 = $310 << 16 >> 16;
   $312 = Math_imul($306, $311)|0;
   $313 = $59;
   $314 = (($312) - ($313))|0;
   $315 = $49;
   $316 = $44;
   $317 = $23;
   $318 = (($316) + ($317<<1)|0);
   $319 = HEAP16[$318>>1]|0;
   $320 = $319 << 16 >> 16;
   $321 = Math_imul($315, $320)|0;
   $322 = ($314|0)>=($321|0);
   if ($322) {
    $323 = $51;
    $324 = ($323|0)!=(0);
    $325 = $50;
    $326 = ($325|0)==(0);
    $or$cond = $324 | $326;
    if ($or$cond) {
     $327 = $42;
     $50 = $327;
    }
   }
  }
  $328 = $34;
  $329 = $42;
  $330 = (($328) + ($329<<2)|0);
  $331 = HEAP32[$330>>2]|0;
  $64 = $331;
  $332 = $64;
  $333 = ((($55)) + 20|0);
  HEAP32[$333>>2] = $332;
  $334 = $42;
  $335 = $22;
  $336 = ((($335)) + 12|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = ($334|0)>=($337|0);
  if ($338) {
   $339 = $45;
   $62 = $339;
   $340 = $26;
   $341 = ($340|0)!=(0|0);
   if ($341) {
    $342 = $45;
    $63 = $342;
   }
   $47 = 0;
  }
  $343 = $42;
  $344 = $24;
  $345 = (($344) - 1)|0;
  $346 = ($343|0)==($345|0);
  if ($346) {
   $47 = 0;
  }
  $347 = $50;
  $348 = ($347|0)!=(0);
  if ($348) {
   $349 = $31;
   $350 = ($349|0)!=(3);
   $351 = $48;
   $352 = ($351|0)>(1);
   $or$cond3 = $350 | $352;
   $353 = $64;
   $354 = ($353|0)<(0);
   $or$cond5 = $or$cond3 | $354;
   if ($or$cond5) {
    $355 = $49;
    $356 = $44;
    $357 = $50;
    $358 = (($356) + ($357<<1)|0);
    $359 = HEAP16[$358>>1]|0;
    $360 = $359 << 16 >> 16;
    $361 = Math_imul($355, $360)|0;
    $362 = $53;
    $363 = (($361) - ($362))|0;
    $364 = $59;
    $365 = (($363) - ($364))|0;
    $366 = (0)>($365|0);
    if ($366) {
     $378 = 0;
    } else {
     $367 = $49;
     $368 = $44;
     $369 = $50;
     $370 = (($368) + ($369<<1)|0);
     $371 = HEAP16[$370>>1]|0;
     $372 = $371 << 16 >> 16;
     $373 = Math_imul($367, $372)|0;
     $374 = $53;
     $375 = (($373) - ($374))|0;
     $376 = $59;
     $377 = (($375) - ($376))|0;
     $378 = $377;
    }
    $61 = $378;
    $379 = $50;
    $68 = $379;
    while(1) {
     $380 = $49;
     $381 = $44;
     $382 = $68;
     $383 = (($382) + -1)|0;
     $68 = $383;
     $384 = (($381) + ($383<<1)|0);
     $385 = HEAP16[$384>>1]|0;
     $386 = $385 << 16 >> 16;
     $387 = Math_imul($380, $386)|0;
     $388 = $61;
     $389 = $53;
     $390 = (($388) + ($389))|0;
     $391 = ($387|0)>($390|0);
     if (!($391)) {
      break;
     }
    }
    $392 = $50;
    $393 = (($392) - 1)|0;
    $69 = $393;
    while(1) {
     $394 = $49;
     $395 = $44;
     $396 = $69;
     $397 = (($396) + 1)|0;
     $69 = $397;
     $398 = (($395) + ($397<<1)|0);
     $399 = HEAP16[$398>>1]|0;
     $400 = $399 << 16 >> 16;
     $401 = Math_imul($394, $400)|0;
     $402 = $61;
     $403 = $53;
     $404 = (($402) + ($403))|0;
     $405 = $59;
     $406 = (($404) + ($405))|0;
     $407 = ($401|0)<($406|0);
     if (!($407)) {
      break;
     }
    }
    $66 = 0;
    $65 = 0;
    $408 = $68;
    $70 = $408;
    while(1) {
     $409 = $27;
     $410 = $70;
     $411 = $52;
     $412 = Math_imul($410, $411)|0;
     $413 = (($412) + 0)|0;
     $414 = (($409) + ($413)|0);
     $415 = HEAP8[$414>>0]|0;
     $416 = $415&255;
     $417 = $65;
     $418 = $417 | $416;
     $65 = $418;
     $419 = $27;
     $420 = $70;
     $421 = $52;
     $422 = Math_imul($420, $421)|0;
     $423 = $52;
     $424 = (($422) + ($423))|0;
     $425 = (($424) - 1)|0;
     $426 = (($419) + ($425)|0);
     $427 = HEAP8[$426>>0]|0;
     $428 = $427&255;
     $429 = $66;
     $430 = $429 | $428;
     $66 = $430;
     $431 = $70;
     $432 = (($431) + 1)|0;
     $70 = $432;
     $433 = $69;
     $434 = ($432|0)<($433|0);
     if (!($434)) {
      break;
     }
    }
   } else {
    label = 48;
   }
  } else {
   label = 48;
  }
  if ((label|0) == 48) {
   label = 0;
   $435 = $48;
   $436 = 1 << $435;
   $437 = (($436) - 1)|0;
   $66 = $437;
   $65 = $437;
  }
  $438 = $32;
  $439 = ($438|0)!=(0);
  L70: do {
   if ($439) {
    $440 = $42;
    $441 = $33;
    $442 = ($440|0)==($441|0);
    if ($442) {
     $32 = 0;
     $443 = $54;
     $444 = ($443|0)!=(0);
     if ($444) {
      $71 = 0;
      while(1) {
       $445 = $71;
       $446 = $49;
       $447 = $44;
       $448 = $42;
       $449 = (($447) + ($448<<1)|0);
       $450 = HEAP16[$449>>1]|0;
       $451 = $450 << 16 >> 16;
       $452 = Math_imul($446, $451)|0;
       $453 = $53;
       $454 = (($452) - ($453))|0;
       $455 = ($445|0)<($454|0);
       if (!($455)) {
        break L70;
       }
       $456 = $45;
       $457 = $71;
       $458 = (($456) + ($457<<2)|0);
       $459 = +HEAPF32[$458>>2];
       $460 = $46;
       $461 = $71;
       $462 = (($460) + ($461<<2)|0);
       $463 = +HEAPF32[$462>>2];
       $464 = $459 + $463;
       $465 = 0.5 * $464;
       $466 = $45;
       $467 = $71;
       $468 = (($466) + ($467<<2)|0);
       HEAPF32[$468>>2] = $465;
       $469 = $71;
       $470 = (($469) + 1)|0;
       $71 = $470;
      }
     }
    }
   }
  } while(0);
  $471 = $32;
  $472 = ($471|0)!=(0);
  if ($472) {
   $473 = $62;
   $474 = $59;
   $475 = $58;
   $476 = (($475|0) / 2)&-1;
   $477 = $48;
   $478 = $61;
   $479 = ($478|0)!=(-1);
   if ($479) {
    $480 = $45;
    $481 = $61;
    $482 = (($480) + ($481<<2)|0);
    $500 = $482;
   } else {
    $500 = 0;
   }
   $483 = $38;
   $484 = $67;
   $485 = ($484|0)!=(0);
   if ($485) {
    $501 = 0;
   } else {
    $486 = $45;
    $487 = $49;
    $488 = $44;
    $489 = $42;
    $490 = (($488) + ($489<<1)|0);
    $491 = HEAP16[$490>>1]|0;
    $492 = $491 << 16 >> 16;
    $493 = Math_imul($487, $492)|0;
    $494 = (($486) + ($493<<2)|0);
    $495 = $53;
    $496 = (0 - ($495))|0;
    $497 = (($494) + ($496<<2)|0);
    $501 = $497;
   }
   $498 = $47;
   $499 = $65;
   $502 = (_quant_band($55,$473,$474,$476,$477,$500,$483,$501,1.0,$498,$499)|0);
   $65 = $502;
   $503 = $63;
   $504 = $59;
   $505 = $58;
   $506 = (($505|0) / 2)&-1;
   $507 = $48;
   $508 = $61;
   $509 = ($508|0)!=(-1);
   if ($509) {
    $510 = $46;
    $511 = $61;
    $512 = (($510) + ($511<<2)|0);
    $530 = $512;
   } else {
    $530 = 0;
   }
   $513 = $38;
   $514 = $67;
   $515 = ($514|0)!=(0);
   if ($515) {
    $531 = 0;
   } else {
    $516 = $46;
    $517 = $49;
    $518 = $44;
    $519 = $42;
    $520 = (($518) + ($519<<1)|0);
    $521 = HEAP16[$520>>1]|0;
    $522 = $521 << 16 >> 16;
    $523 = Math_imul($517, $522)|0;
    $524 = (($516) + ($523<<2)|0);
    $525 = $53;
    $526 = (0 - ($525))|0;
    $527 = (($524) + ($526<<2)|0);
    $531 = $527;
   }
   $528 = $47;
   $529 = $66;
   $532 = (_quant_band($55,$503,$504,$506,$507,$530,$513,$531,1.0,$528,$529)|0);
   $66 = $532;
  } else {
   $533 = $63;
   $534 = ($533|0)!=(0|0);
   $535 = $62;
   if ($534) {
    $536 = $63;
    $537 = $59;
    $538 = $58;
    $539 = $48;
    $540 = $61;
    $541 = ($540|0)!=(-1);
    if ($541) {
     $542 = $45;
     $543 = $61;
     $544 = (($542) + ($543<<2)|0);
     $564 = $544;
    } else {
     $564 = 0;
    }
    $545 = $38;
    $546 = $67;
    $547 = ($546|0)!=(0);
    if ($547) {
     $565 = 0;
    } else {
     $548 = $45;
     $549 = $49;
     $550 = $44;
     $551 = $42;
     $552 = (($550) + ($551<<1)|0);
     $553 = HEAP16[$552>>1]|0;
     $554 = $553 << 16 >> 16;
     $555 = Math_imul($549, $554)|0;
     $556 = (($548) + ($555<<2)|0);
     $557 = $53;
     $558 = (0 - ($557))|0;
     $559 = (($556) + ($558<<2)|0);
     $565 = $559;
    }
    $560 = $47;
    $561 = $65;
    $562 = $66;
    $563 = $561 | $562;
    $566 = (_quant_band_stereo($55,$535,$536,$537,$538,$539,$564,$545,$565,$560,$563)|0);
    $65 = $566;
   } else {
    $567 = $59;
    $568 = $58;
    $569 = $48;
    $570 = $61;
    $571 = ($570|0)!=(-1);
    if ($571) {
     $572 = $45;
     $573 = $61;
     $574 = (($572) + ($573<<2)|0);
     $594 = $574;
    } else {
     $594 = 0;
    }
    $575 = $38;
    $576 = $67;
    $577 = ($576|0)!=(0);
    if ($577) {
     $595 = 0;
    } else {
     $578 = $45;
     $579 = $49;
     $580 = $44;
     $581 = $42;
     $582 = (($580) + ($581<<1)|0);
     $583 = HEAP16[$582>>1]|0;
     $584 = $583 << 16 >> 16;
     $585 = Math_imul($579, $584)|0;
     $586 = (($578) + ($585<<2)|0);
     $587 = $53;
     $588 = (0 - ($587))|0;
     $589 = (($586) + ($588<<2)|0);
     $595 = $589;
    }
    $590 = $47;
    $591 = $65;
    $592 = $66;
    $593 = $591 | $592;
    $596 = (_quant_band($55,$535,$567,$568,$569,$594,$575,$595,1.0,$590,$593)|0);
    $65 = $596;
   }
   $597 = $65;
   $66 = $597;
  }
  $598 = $65;
  $599 = $598&255;
  $600 = $27;
  $601 = $42;
  $602 = $52;
  $603 = Math_imul($601, $602)|0;
  $604 = (($603) + 0)|0;
  $605 = (($600) + ($604)|0);
  HEAP8[$605>>0] = $599;
  $606 = $66;
  $607 = $606&255;
  $608 = $27;
  $609 = $42;
  $610 = $52;
  $611 = Math_imul($609, $610)|0;
  $612 = $52;
  $613 = (($611) + ($612))|0;
  $614 = (($613) - 1)|0;
  $615 = (($608) + ($614)|0);
  HEAP8[$615>>0] = $607;
  $616 = $29;
  $617 = $42;
  $618 = (($616) + ($617<<2)|0);
  $619 = HEAP32[$618>>2]|0;
  $620 = $57;
  $621 = (($619) + ($620))|0;
  $622 = $36;
  $623 = (($622) + ($621))|0;
  $36 = $623;
  $624 = $58;
  $625 = $59;
  $626 = $625 << 3;
  $627 = ($624|0)>($626|0);
  $628 = $627&1;
  $51 = $628;
  $629 = $42;
  $630 = (($629) + 1)|0;
  $42 = $630;
 }
 $631 = ((($55)) + 36|0);
 $632 = HEAP32[$631>>2]|0;
 $633 = $40;
 HEAP32[$633>>2] = $632;
 $634 = $56;
 _llvm_stackrestore(($634|0));
 STACKTOP = sp;return;
}
function _celt_sudiv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4|0) / ($5|0))&-1;
 STACKTOP = sp;return ($6|0);
}
function _quant_band($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = +$8;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $37 = $14;
 $23 = $37;
 $38 = $14;
 $24 = $38;
 $39 = $16;
 $26 = $39;
 $27 = 0;
 $28 = 0;
 $30 = 0;
 $40 = $12;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0);
 $43 = $42 ^ 1;
 $44 = $43&1;
 $31 = $44;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 $33 = $46;
 $47 = $12;
 $48 = ((($47)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $34 = $49;
 $50 = $26;
 $51 = ($50|0)==(1);
 $52 = $51&1;
 $29 = $52;
 $53 = $24;
 $54 = $16;
 $55 = (_celt_udiv_358($53,$54)|0);
 $24 = $55;
 $56 = $14;
 $57 = ($56|0)==(1);
 if ($57) {
  $58 = $12;
  $59 = $13;
  $60 = $15;
  $61 = $19;
  $62 = (_quant_band_n1($58,$59,0,$60,$61)|0);
  $11 = $62;
  $269 = $11;
  STACKTOP = sp;return ($269|0);
 }
 $63 = $34;
 $64 = ($63|0)>(0);
 if ($64) {
  $65 = $34;
  $28 = $65;
 }
 $66 = $21;
 $67 = ($66|0)!=(0|0);
 $68 = $17;
 $69 = ($68|0)!=(0|0);
 $or$cond = $67 & $69;
 do {
  if ($or$cond) {
   $70 = $28;
   $71 = ($70|0)!=(0);
   if (!($71)) {
    $72 = $24;
    $73 = $72 & 1;
    $74 = ($73|0)==(0);
    $75 = $34;
    $76 = ($75|0)<(0);
    $or$cond3 = $74 & $76;
    $77 = $26;
    $78 = ($77|0)>(1);
    $or$cond5 = $or$cond3 | $78;
    if (!($or$cond5)) {
     break;
    }
   }
   $79 = $21;
   $80 = $17;
   $81 = $14;
   $82 = $81<<2;
   $83 = $21;
   $84 = $17;
   $85 = $83;
   $86 = $84;
   $87 = (($85) - ($86))|0;
   $88 = (($87|0) / 4)&-1;
   $89 = 0;
   $90 = (($82) + ($89))|0;
   _memcpy(($79|0),($80|0),($90|0))|0;
   $91 = $21;
   $17 = $91;
  }
 } while(0);
 $32 = 0;
 while(1) {
  $92 = $32;
  $93 = $28;
  $94 = ($92|0)<($93|0);
  if (!($94)) {
   break;
  }
  $95 = $33;
  $96 = ($95|0)!=(0);
  if ($96) {
   $97 = $13;
   $98 = $14;
   $99 = $32;
   $100 = $98 >> $99;
   $101 = $32;
   $102 = 1 << $101;
   _haar1($97,$100,$102);
  }
  $103 = $17;
  $104 = ($103|0)!=(0|0);
  if ($104) {
   $105 = $17;
   $106 = $14;
   $107 = $32;
   $108 = $106 >> $107;
   $109 = $32;
   $110 = 1 << $109;
   _haar1($105,$108,$110);
  }
  $111 = $22;
  $112 = $111 & 15;
  $113 = (28935 + ($112)|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114&255;
  $116 = $22;
  $117 = $116 >> 4;
  $118 = (28935 + ($117)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 << 2;
  $122 = $115 | $121;
  $22 = $122;
  $123 = $32;
  $124 = (($123) + 1)|0;
  $32 = $124;
 }
 $125 = $28;
 $126 = $16;
 $127 = $126 >> $125;
 $16 = $127;
 $128 = $28;
 $129 = $24;
 $130 = $129 << $128;
 $24 = $130;
 while(1) {
  $131 = $24;
  $132 = $131 & 1;
  $133 = ($132|0)==(0);
  $134 = $34;
  $135 = ($134|0)<(0);
  $136 = $133 ? $135 : 0;
  if (!($136)) {
   break;
  }
  $137 = $33;
  $138 = ($137|0)!=(0);
  if ($138) {
   $139 = $13;
   $140 = $24;
   $141 = $16;
   _haar1($139,$140,$141);
  }
  $142 = $17;
  $143 = ($142|0)!=(0|0);
  if ($143) {
   $144 = $17;
   $145 = $24;
   $146 = $16;
   _haar1($144,$145,$146);
  }
  $147 = $22;
  $148 = $16;
  $149 = $147 << $148;
  $150 = $22;
  $151 = $150 | $149;
  $22 = $151;
  $152 = $16;
  $153 = $152 << 1;
  $16 = $153;
  $154 = $24;
  $155 = $154 >> 1;
  $24 = $155;
  $156 = $27;
  $157 = (($156) + 1)|0;
  $27 = $157;
  $158 = $34;
  $159 = (($158) + 1)|0;
  $34 = $159;
 }
 $160 = $16;
 $26 = $160;
 $161 = $24;
 $25 = $161;
 $162 = $26;
 $163 = ($162|0)>(1);
 if ($163) {
  $164 = $33;
  $165 = ($164|0)!=(0);
  if ($165) {
   $166 = $13;
   $167 = $24;
   $168 = $28;
   $169 = $167 >> $168;
   $170 = $26;
   $171 = $28;
   $172 = $170 << $171;
   $173 = $29;
   _deinterleave_hadamard($166,$169,$172,$173);
  }
  $174 = $17;
  $175 = ($174|0)!=(0|0);
  if ($175) {
   $176 = $17;
   $177 = $24;
   $178 = $28;
   $179 = $177 >> $178;
   $180 = $26;
   $181 = $28;
   $182 = $180 << $181;
   $183 = $29;
   _deinterleave_hadamard($176,$179,$182,$183);
  }
 }
 $184 = $12;
 $185 = $13;
 $186 = $14;
 $187 = $15;
 $188 = $16;
 $189 = $17;
 $190 = $18;
 $191 = $20;
 $192 = $22;
 $193 = (_quant_partition($184,$185,$186,$187,$188,$189,$190,$191,$192)|0);
 $30 = $193;
 $194 = $31;
 $195 = ($194|0)!=(0);
 if ($195) {
  $196 = $26;
  $197 = ($196|0)>(1);
  if ($197) {
   $198 = $13;
   $199 = $24;
   $200 = $28;
   $201 = $199 >> $200;
   $202 = $26;
   $203 = $28;
   $204 = $202 << $203;
   $205 = $29;
   _interleave_hadamard($198,$201,$204,$205);
  }
  $206 = $25;
  $24 = $206;
  $207 = $26;
  $16 = $207;
  $32 = 0;
  while(1) {
   $208 = $32;
   $209 = $27;
   $210 = ($208|0)<($209|0);
   if (!($210)) {
    break;
   }
   $211 = $16;
   $212 = $211 >> 1;
   $16 = $212;
   $213 = $24;
   $214 = $213 << 1;
   $24 = $214;
   $215 = $30;
   $216 = $16;
   $217 = $215 >>> $216;
   $218 = $30;
   $219 = $218 | $217;
   $30 = $219;
   $220 = $13;
   $221 = $24;
   $222 = $16;
   _haar1($220,$221,$222);
   $223 = $32;
   $224 = (($223) + 1)|0;
   $32 = $224;
  }
  $32 = 0;
  while(1) {
   $225 = $32;
   $226 = $28;
   $227 = ($225|0)<($226|0);
   if (!($227)) {
    break;
   }
   $228 = $30;
   $229 = (28951 + ($228)|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $30 = $231;
   $232 = $13;
   $233 = $23;
   $234 = $32;
   $235 = $233 >> $234;
   $236 = $32;
   $237 = 1 << $236;
   _haar1($232,$235,$237);
   $238 = $32;
   $239 = (($238) + 1)|0;
   $32 = $239;
  }
  $240 = $28;
  $241 = $16;
  $242 = $241 << $240;
  $16 = $242;
  $243 = $19;
  $244 = ($243|0)!=(0|0);
  L54: do {
   if ($244) {
    $245 = $23;
    $246 = (+($245|0));
    $247 = (+Math_sqrt((+$246)));
    $248 = $247;
    $36 = $248;
    $35 = 0;
    while(1) {
     $249 = $35;
     $250 = $23;
     $251 = ($249|0)<($250|0);
     if (!($251)) {
      break L54;
     }
     $252 = $36;
     $253 = $13;
     $254 = $35;
     $255 = (($253) + ($254<<2)|0);
     $256 = +HEAPF32[$255>>2];
     $257 = $252 * $256;
     $258 = $19;
     $259 = $35;
     $260 = (($258) + ($259<<2)|0);
     HEAPF32[$260>>2] = $257;
     $261 = $35;
     $262 = (($261) + 1)|0;
     $35 = $262;
    }
   }
  } while(0);
  $263 = $16;
  $264 = 1 << $263;
  $265 = (($264) - 1)|0;
  $266 = $30;
  $267 = $266 & $265;
  $30 = $267;
 }
 $268 = $30;
 $11 = $268;
 $269 = $11;
 STACKTOP = sp;return ($269|0);
}
function _quant_band_stereo($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $16 = sp + 136|0;
 $22 = sp + 112|0;
 $35 = sp + 40|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 HEAP32[$16>>2] = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 HEAP32[$22>>2] = $10;
 $23 = 0;
 $24 = 0;
 $25 = 0;
 $26 = 0.0;
 $27 = 0.0;
 $28 = 0;
 $46 = $12;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0);
 $49 = $48 ^ 1;
 $50 = $49&1;
 $29 = $50;
 $51 = $12;
 $52 = HEAP32[$51>>2]|0;
 $37 = $52;
 $53 = $12;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $38 = $55;
 $56 = $15;
 $57 = ($56|0)==(1);
 if ($57) {
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $61 = HEAP32[$16>>2]|0;
  $62 = $20;
  $63 = (_quant_band_n1($58,$59,$60,$61,$62)|0);
  $11 = $63;
  $367 = $11;
  STACKTOP = sp;return ($367|0);
 }
 $64 = HEAP32[$22>>2]|0;
 $36 = $64;
 $65 = $12;
 $66 = $13;
 $67 = $14;
 $68 = $15;
 $69 = $17;
 $70 = $17;
 $71 = $19;
 _compute_theta($65,$35,$66,$67,$68,$16,$69,$70,$71,1,$22);
 $72 = HEAP32[$35>>2]|0;
 $25 = $72;
 $73 = ((($35)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $23 = $74;
 $75 = ((($35)) + 8|0);
 $76 = HEAP32[$75>>2]|0;
 $24 = $76;
 $77 = ((($35)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $32 = $78;
 $79 = ((($35)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $33 = $80;
 $81 = ((($35)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $34 = $82;
 $83 = $23;
 $84 = (+($83|0));
 $85 = 3.0517578125E-5 * $84;
 $26 = $85;
 $86 = $24;
 $87 = (+($86|0));
 $88 = 3.0517578125E-5 * $87;
 $27 = $88;
 $89 = $15;
 $90 = ($89|0)==(2);
 do {
  if ($90) {
   $40 = 0;
   $91 = HEAP32[$16>>2]|0;
   $30 = $91;
   $31 = 0;
   $92 = $33;
   $93 = ($92|0)!=(0);
   $94 = $33;
   $95 = ($94|0)!=(16384);
   $or$cond = $93 & $95;
   $$ = $or$cond ? 8 : 0;
   $31 = $$;
   $96 = $31;
   $97 = $30;
   $98 = (($97) - ($96))|0;
   $30 = $98;
   $99 = $33;
   $100 = ($99|0)>(8192);
   $101 = $100&1;
   $39 = $101;
   $102 = $34;
   $103 = $31;
   $104 = (($102) + ($103))|0;
   $105 = $12;
   $106 = ((($105)) + 28|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) - ($104))|0;
   HEAP32[$106>>2] = $108;
   $109 = $39;
   $110 = ($109|0)!=(0);
   $111 = $14;
   $112 = $13;
   $113 = $110 ? $111 : $112;
   $41 = $113;
   $114 = $39;
   $115 = ($114|0)!=(0);
   $116 = $13;
   $117 = $14;
   $118 = $115 ? $116 : $117;
   $42 = $118;
   $119 = $31;
   $120 = ($119|0)!=(0);
   do {
    if ($120) {
     $121 = $37;
     $122 = ($121|0)!=(0);
     if ($122) {
      $123 = $41;
      $124 = +HEAPF32[$123>>2];
      $125 = $42;
      $126 = ((($125)) + 4|0);
      $127 = +HEAPF32[$126>>2];
      $128 = $124 * $127;
      $129 = $41;
      $130 = ((($129)) + 4|0);
      $131 = +HEAPF32[$130>>2];
      $132 = $42;
      $133 = +HEAPF32[$132>>2];
      $134 = $131 * $133;
      $135 = $128 - $134;
      $136 = $135 < 0.0;
      $137 = $136&1;
      $40 = $137;
      $138 = $38;
      $139 = $40;
      _ec_enc_bits($138,$139,1);
      break;
     } else {
      $140 = $38;
      $141 = (_ec_dec_bits($140,1)|0);
      $40 = $141;
      break;
     }
    }
   } while(0);
   $142 = $40;
   $143 = $142<<1;
   $144 = (1 - ($143))|0;
   $40 = $144;
   $145 = $12;
   $146 = $41;
   $147 = $15;
   $148 = $30;
   $149 = $17;
   $150 = $18;
   $151 = $19;
   $152 = $20;
   $153 = $21;
   $154 = $36;
   $155 = (_quant_band($145,$146,$147,$148,$149,$150,$151,$152,1.0,$153,$154)|0);
   $28 = $155;
   $156 = $40;
   $157 = (0 - ($156))|0;
   $158 = (+($157|0));
   $159 = $41;
   $160 = ((($159)) + 4|0);
   $161 = +HEAPF32[$160>>2];
   $162 = $158 * $161;
   $163 = $42;
   HEAPF32[$163>>2] = $162;
   $164 = $40;
   $165 = (+($164|0));
   $166 = $41;
   $167 = +HEAPF32[$166>>2];
   $168 = $165 * $167;
   $169 = $42;
   $170 = ((($169)) + 4|0);
   HEAPF32[$170>>2] = $168;
   $171 = $29;
   $172 = ($171|0)!=(0);
   if ($172) {
    $173 = $26;
    $174 = $13;
    $175 = +HEAPF32[$174>>2];
    $176 = $173 * $175;
    $177 = $13;
    HEAPF32[$177>>2] = $176;
    $178 = $26;
    $179 = $13;
    $180 = ((($179)) + 4|0);
    $181 = +HEAPF32[$180>>2];
    $182 = $178 * $181;
    $183 = $13;
    $184 = ((($183)) + 4|0);
    HEAPF32[$184>>2] = $182;
    $185 = $27;
    $186 = $14;
    $187 = +HEAPF32[$186>>2];
    $188 = $185 * $187;
    $189 = $14;
    HEAPF32[$189>>2] = $188;
    $190 = $27;
    $191 = $14;
    $192 = ((($191)) + 4|0);
    $193 = +HEAPF32[$192>>2];
    $194 = $190 * $193;
    $195 = $14;
    $196 = ((($195)) + 4|0);
    HEAPF32[$196>>2] = $194;
    $197 = $13;
    $198 = +HEAPF32[$197>>2];
    $43 = $198;
    $199 = $43;
    $200 = $14;
    $201 = +HEAPF32[$200>>2];
    $202 = $199 - $201;
    $203 = $13;
    HEAPF32[$203>>2] = $202;
    $204 = $43;
    $205 = $14;
    $206 = +HEAPF32[$205>>2];
    $207 = $204 + $206;
    $208 = $14;
    HEAPF32[$208>>2] = $207;
    $209 = $13;
    $210 = ((($209)) + 4|0);
    $211 = +HEAPF32[$210>>2];
    $43 = $211;
    $212 = $43;
    $213 = $14;
    $214 = ((($213)) + 4|0);
    $215 = +HEAPF32[$214>>2];
    $216 = $212 - $215;
    $217 = $13;
    $218 = ((($217)) + 4|0);
    HEAPF32[$218>>2] = $216;
    $219 = $43;
    $220 = $14;
    $221 = ((($220)) + 4|0);
    $222 = +HEAPF32[$221>>2];
    $223 = $219 + $222;
    $224 = $14;
    $225 = ((($224)) + 4|0);
    HEAPF32[$225>>2] = $223;
   }
  } else {
   $226 = HEAP32[$16>>2]|0;
   $227 = HEAP32[$16>>2]|0;
   $228 = $32;
   $229 = (($227) - ($228))|0;
   $230 = (($229|0) / 2)&-1;
   $231 = ($226|0)<($230|0);
   $232 = HEAP32[$16>>2]|0;
   if ($231) {
    $237 = $232;
   } else {
    $233 = $32;
    $234 = (($232) - ($233))|0;
    $235 = (($234|0) / 2)&-1;
    $237 = $235;
   }
   $236 = (0)>($237|0);
   if ($236) {
    $248 = 0;
   } else {
    $238 = HEAP32[$16>>2]|0;
    $239 = HEAP32[$16>>2]|0;
    $240 = $32;
    $241 = (($239) - ($240))|0;
    $242 = (($241|0) / 2)&-1;
    $243 = ($238|0)<($242|0);
    $244 = HEAP32[$16>>2]|0;
    if ($243) {
     $248 = $244;
    } else {
     $245 = $32;
     $246 = (($244) - ($245))|0;
     $247 = (($246|0) / 2)&-1;
     $248 = $247;
    }
   }
   $30 = $248;
   $249 = HEAP32[$16>>2]|0;
   $250 = $30;
   $251 = (($249) - ($250))|0;
   $31 = $251;
   $252 = $34;
   $253 = $12;
   $254 = ((($253)) + 28|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (($255) - ($252))|0;
   HEAP32[$254>>2] = $256;
   $257 = $12;
   $258 = ((($257)) + 28|0);
   $259 = HEAP32[$258>>2]|0;
   $44 = $259;
   $260 = $30;
   $261 = $31;
   $262 = ($260|0)>=($261|0);
   $263 = $12;
   if ($262) {
    $264 = $13;
    $265 = $15;
    $266 = $30;
    $267 = $17;
    $268 = $18;
    $269 = $19;
    $270 = $20;
    $271 = $21;
    $272 = HEAP32[$22>>2]|0;
    $273 = (_quant_band($263,$264,$265,$266,$267,$268,$269,$270,1.0,$271,$272)|0);
    $28 = $273;
    $274 = $30;
    $275 = $44;
    $276 = $12;
    $277 = ((($276)) + 28|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = (($275) - ($278))|0;
    $280 = (($274) - ($279))|0;
    $44 = $280;
    $281 = $44;
    $282 = ($281|0)>(24);
    $283 = $33;
    $284 = ($283|0)!=(0);
    $or$cond3 = $282 & $284;
    if ($or$cond3) {
     $285 = $44;
     $286 = (($285) - 24)|0;
     $287 = $31;
     $288 = (($287) + ($286))|0;
     $31 = $288;
    }
    $289 = $12;
    $290 = $14;
    $291 = $15;
    $292 = $31;
    $293 = $17;
    $294 = $19;
    $295 = $27;
    $296 = HEAP32[$22>>2]|0;
    $297 = $17;
    $298 = $296 >> $297;
    $299 = (_quant_band($289,$290,$291,$292,$293,0,$294,0,$295,0,$298)|0);
    $300 = $28;
    $301 = $300 | $299;
    $28 = $301;
    break;
   } else {
    $302 = $14;
    $303 = $15;
    $304 = $31;
    $305 = $17;
    $306 = $19;
    $307 = $27;
    $308 = HEAP32[$22>>2]|0;
    $309 = $17;
    $310 = $308 >> $309;
    $311 = (_quant_band($263,$302,$303,$304,$305,0,$306,0,$307,0,$310)|0);
    $28 = $311;
    $312 = $31;
    $313 = $44;
    $314 = $12;
    $315 = ((($314)) + 28|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (($313) - ($316))|0;
    $318 = (($312) - ($317))|0;
    $44 = $318;
    $319 = $44;
    $320 = ($319|0)>(24);
    $321 = $33;
    $322 = ($321|0)!=(16384);
    $or$cond5 = $320 & $322;
    if ($or$cond5) {
     $323 = $44;
     $324 = (($323) - 24)|0;
     $325 = $30;
     $326 = (($325) + ($324))|0;
     $30 = $326;
    }
    $327 = $12;
    $328 = $13;
    $329 = $15;
    $330 = $30;
    $331 = $17;
    $332 = $18;
    $333 = $19;
    $334 = $20;
    $335 = $21;
    $336 = HEAP32[$22>>2]|0;
    $337 = (_quant_band($327,$328,$329,$330,$331,$332,$333,$334,1.0,$335,$336)|0);
    $338 = $28;
    $339 = $338 | $337;
    $28 = $339;
    break;
   }
  }
 } while(0);
 $340 = $29;
 $341 = ($340|0)!=(0);
 L32: do {
  if ($341) {
   $342 = $15;
   $343 = ($342|0)!=(2);
   if ($343) {
    $344 = $13;
    $345 = $14;
    $346 = $26;
    $347 = $15;
    $348 = $12;
    $349 = ((($348)) + 40|0);
    $350 = HEAP32[$349>>2]|0;
    _stereo_merge($344,$345,$346,$347,$350);
   }
   $351 = $25;
   $352 = ($351|0)!=(0);
   if ($352) {
    $45 = 0;
    while(1) {
     $353 = $45;
     $354 = $15;
     $355 = ($353|0)<($354|0);
     if (!($355)) {
      break L32;
     }
     $356 = $14;
     $357 = $45;
     $358 = (($356) + ($357<<2)|0);
     $359 = +HEAPF32[$358>>2];
     $360 = - $359;
     $361 = $14;
     $362 = $45;
     $363 = (($361) + ($362<<2)|0);
     HEAPF32[$363>>2] = $360;
     $364 = $45;
     $365 = (($364) + 1)|0;
     $45 = $365;
    }
   }
  }
 } while(0);
 $366 = $28;
 $11 = $366;
 $367 = $11;
 STACKTOP = sp;return ($367|0);
}
function _quant_band_n1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = $5;
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 $20 = $19 ^ 1;
 $21 = $20&1;
 $10 = $21;
 $22 = $6;
 $13 = $22;
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $14 = $24;
 $25 = $5;
 $26 = ((($25)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $15 = $27;
 $28 = $7;
 $29 = ($28|0)!=(0|0);
 $30 = $29&1;
 $12 = $30;
 $11 = 0;
 while(1) {
  $16 = 0;
  $31 = $5;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)>=(8);
  if ($34) {
   $35 = $14;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $13;
    $38 = +HEAPF32[$37>>2];
    $39 = $38 < 0.0;
    $40 = $39&1;
    $16 = $40;
    $41 = $15;
    $42 = $16;
    _ec_enc_bits($41,$42,1);
   } else {
    $43 = $15;
    $44 = (_ec_dec_bits($43,1)|0);
    $16 = $44;
   }
   $45 = $5;
   $46 = ((($45)) + 28|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) - 8)|0;
   HEAP32[$46>>2] = $48;
   $49 = $8;
   $50 = (($49) - 8)|0;
   $8 = $50;
  }
  $51 = $10;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $16;
   $54 = ($53|0)!=(0);
   $55 = $54 ? -1.0 : 1.0;
   $56 = $13;
   HEAPF32[$56>>2] = $55;
  }
  $57 = $7;
  $13 = $57;
  $58 = $11;
  $59 = (($58) + 1)|0;
  $11 = $59;
  $60 = $12;
  $61 = (1 + ($60))|0;
  $62 = ($59|0)<($61|0);
  if (!($62)) {
   break;
  }
 }
 $63 = $9;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return 1;
 }
 $65 = $6;
 $66 = +HEAPF32[$65>>2];
 $67 = $9;
 HEAPF32[$67>>2] = $66;
 STACKTOP = sp;return 1;
}
function _compute_theta($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $23 = 0;
 $31 = 0;
 $49 = $11;
 $50 = HEAP32[$49>>2]|0;
 $32 = $50;
 $51 = $11;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $33 = $53;
 $54 = $11;
 $55 = ((($54)) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $34 = $56;
 $57 = $11;
 $58 = ((($57)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $35 = $59;
 $60 = $11;
 $61 = ((($60)) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 $36 = $62;
 $63 = $11;
 $64 = ((($63)) + 32|0);
 $65 = HEAP32[$64>>2]|0;
 $37 = $65;
 $66 = $33;
 $67 = ((($66)) + 56|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $34;
 $70 = (($68) + ($69<<1)|0);
 $71 = HEAP16[$70>>1]|0;
 $72 = $71 << 16 >> 16;
 $73 = $19;
 $74 = $73<<3;
 $75 = (($72) + ($74))|0;
 $28 = $75;
 $76 = $28;
 $77 = $76 >> 1;
 $78 = $20;
 $79 = ($78|0)!=(0);
 $80 = $15;
 $81 = ($80|0)==(2);
 $82 = $79 ? $81 : 0;
 $83 = $82 ? 16 : 4;
 $84 = (($77) - ($83))|0;
 $29 = $84;
 $85 = $15;
 $86 = $16;
 $87 = HEAP32[$86>>2]|0;
 $88 = $29;
 $89 = $28;
 $90 = $20;
 $91 = (_compute_qn($85,$87,$88,$89,$90)|0);
 $22 = $91;
 $92 = $20;
 $93 = ($92|0)!=(0);
 if ($93) {
  $94 = $34;
  $95 = $35;
  $96 = ($94|0)>=($95|0);
  if ($96) {
   $22 = 1;
  }
 }
 $97 = $32;
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = $13;
  $100 = $14;
  $101 = $20;
  $102 = $15;
  $103 = $11;
  $104 = ((($103)) + 40|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (_stereo_itheta($99,$100,$101,$102,$105)|0);
  $23 = $106;
 }
 $107 = $36;
 $108 = (_ec_tell_frac($107)|0);
 $30 = $108;
 $109 = $22;
 $110 = ($109|0)!=(1);
 do {
  if ($110) {
   $111 = $32;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $23;
    $114 = $22;
    $115 = Math_imul($113, $114)|0;
    $116 = (($115) + 8192)|0;
    $117 = $116 >> 14;
    $23 = $117;
   }
   $118 = $20;
   $119 = ($118|0)!=(0);
   $120 = $15;
   $121 = ($120|0)>(2);
   $or$cond = $119 & $121;
   do {
    if ($or$cond) {
     $38 = 3;
     $122 = $23;
     $39 = $122;
     $123 = $22;
     $124 = (($123|0) / 2)&-1;
     $40 = $124;
     $125 = $38;
     $126 = $40;
     $127 = (($126) + 1)|0;
     $128 = Math_imul($125, $127)|0;
     $129 = $40;
     $130 = (($128) + ($129))|0;
     $41 = $130;
     $131 = $32;
     $132 = ($131|0)!=(0);
     $133 = $36;
     if ($132) {
      $134 = $39;
      $135 = $40;
      $136 = ($134|0)<=($135|0);
      if ($136) {
       $137 = $38;
       $138 = $39;
       $139 = Math_imul($137, $138)|0;
       $165 = $139;
      } else {
       $140 = $39;
       $141 = (($140) - 1)|0;
       $142 = $40;
       $143 = (($141) - ($142))|0;
       $144 = $40;
       $145 = (($144) + 1)|0;
       $146 = $38;
       $147 = Math_imul($145, $146)|0;
       $148 = (($143) + ($147))|0;
       $165 = $148;
      }
      $149 = $39;
      $150 = $40;
      $151 = ($149|0)<=($150|0);
      if ($151) {
       $152 = $38;
       $153 = $39;
       $154 = (($153) + 1)|0;
       $155 = Math_imul($152, $154)|0;
       $166 = $155;
      } else {
       $156 = $39;
       $157 = $40;
       $158 = (($156) - ($157))|0;
       $159 = $40;
       $160 = (($159) + 1)|0;
       $161 = $38;
       $162 = Math_imul($160, $161)|0;
       $163 = (($158) + ($162))|0;
       $166 = $163;
      }
      $164 = $41;
      _ec_encode($133,$165,$166,$164);
      break;
     }
     $167 = $41;
     $168 = (_ec_decode($133,$167)|0);
     $42 = $168;
     $169 = $42;
     $170 = $40;
     $171 = (($170) + 1)|0;
     $172 = $38;
     $173 = Math_imul($171, $172)|0;
     $174 = ($169|0)<($173|0);
     if ($174) {
      $175 = $42;
      $176 = $38;
      $177 = (($175|0) / ($176|0))&-1;
      $39 = $177;
     } else {
      $178 = $40;
      $179 = (($178) + 1)|0;
      $180 = $42;
      $181 = $40;
      $182 = (($181) + 1)|0;
      $183 = $38;
      $184 = Math_imul($182, $183)|0;
      $185 = (($180) - ($184))|0;
      $186 = (($179) + ($185))|0;
      $39 = $186;
     }
     $187 = $36;
     $188 = $39;
     $189 = $40;
     $190 = ($188|0)<=($189|0);
     if ($190) {
      $191 = $38;
      $192 = $39;
      $193 = Math_imul($191, $192)|0;
      $219 = $193;
     } else {
      $194 = $39;
      $195 = (($194) - 1)|0;
      $196 = $40;
      $197 = (($195) - ($196))|0;
      $198 = $40;
      $199 = (($198) + 1)|0;
      $200 = $38;
      $201 = Math_imul($199, $200)|0;
      $202 = (($197) + ($201))|0;
      $219 = $202;
     }
     $203 = $39;
     $204 = $40;
     $205 = ($203|0)<=($204|0);
     if ($205) {
      $206 = $38;
      $207 = $39;
      $208 = (($207) + 1)|0;
      $209 = Math_imul($206, $208)|0;
      $220 = $209;
     } else {
      $210 = $39;
      $211 = $40;
      $212 = (($210) - ($211))|0;
      $213 = $40;
      $214 = (($213) + 1)|0;
      $215 = $38;
      $216 = Math_imul($214, $215)|0;
      $217 = (($212) + ($216))|0;
      $220 = $217;
     }
     $218 = $41;
     _ec_dec_update($187,$219,$220,$218);
     $221 = $39;
     $23 = $221;
    } else {
     $222 = $18;
     $223 = ($222|0)>(1);
     $224 = $20;
     $225 = ($224|0)!=(0);
     $or$cond3 = $223 | $225;
     if ($or$cond3) {
      $226 = $32;
      $227 = ($226|0)!=(0);
      $228 = $36;
      if ($227) {
       $229 = $23;
       $230 = $22;
       $231 = (($230) + 1)|0;
       _ec_enc_uint($228,$229,$231);
       break;
      } else {
       $232 = $22;
       $233 = (($232) + 1)|0;
       $234 = (_ec_dec_uint($228,$233)|0);
       $23 = $234;
       break;
      }
     }
     $43 = 1;
     $235 = $22;
     $236 = $235 >> 1;
     $237 = (($236) + 1)|0;
     $238 = $22;
     $239 = $238 >> 1;
     $240 = (($239) + 1)|0;
     $241 = Math_imul($237, $240)|0;
     $44 = $241;
     $242 = $32;
     $243 = ($242|0)!=(0);
     if (!($243)) {
      $46 = 0;
      $283 = $36;
      $284 = $44;
      $285 = (_ec_decode($283,$284)|0);
      $47 = $285;
      $286 = $47;
      $287 = $22;
      $288 = $287 >> 1;
      $289 = $22;
      $290 = $289 >> 1;
      $291 = (($290) + 1)|0;
      $292 = Math_imul($288, $291)|0;
      $293 = $292 >> 1;
      $294 = ($286|0)<($293|0);
      if ($294) {
       $295 = $47;
       $296 = $295<<3;
       $297 = (($296) + 1)|0;
       $298 = (_isqrt32($297)|0);
       $299 = (($298) - 1)|0;
       $300 = $299 >>> 1;
       $23 = $300;
       $301 = $23;
       $302 = (($301) + 1)|0;
       $43 = $302;
       $303 = $23;
       $304 = $23;
       $305 = (($304) + 1)|0;
       $306 = Math_imul($303, $305)|0;
       $307 = $306 >> 1;
       $46 = $307;
      } else {
       $308 = $22;
       $309 = (($308) + 1)|0;
       $310 = $309<<1;
       $311 = $44;
       $312 = $47;
       $313 = (($311) - ($312))|0;
       $314 = (($313) - 1)|0;
       $315 = $314<<3;
       $316 = (($315) + 1)|0;
       $317 = (_isqrt32($316)|0);
       $318 = (($310) - ($317))|0;
       $319 = $318 >>> 1;
       $23 = $319;
       $320 = $22;
       $321 = (($320) + 1)|0;
       $322 = $23;
       $323 = (($321) - ($322))|0;
       $43 = $323;
       $324 = $44;
       $325 = $22;
       $326 = (($325) + 1)|0;
       $327 = $23;
       $328 = (($326) - ($327))|0;
       $329 = $22;
       $330 = (($329) + 2)|0;
       $331 = $23;
       $332 = (($330) - ($331))|0;
       $333 = Math_imul($328, $332)|0;
       $334 = $333 >> 1;
       $335 = (($324) - ($334))|0;
       $46 = $335;
      }
      $336 = $36;
      $337 = $46;
      $338 = $46;
      $339 = $43;
      $340 = (($338) + ($339))|0;
      $341 = $44;
      _ec_dec_update($336,$337,$340,$341);
      break;
     }
     $244 = $23;
     $245 = $22;
     $246 = $245 >> 1;
     $247 = ($244|0)<=($246|0);
     if ($247) {
      $248 = $23;
      $249 = (($248) + 1)|0;
      $254 = $249;
     } else {
      $250 = $22;
      $251 = (($250) + 1)|0;
      $252 = $23;
      $253 = (($251) - ($252))|0;
      $254 = $253;
     }
     $43 = $254;
     $255 = $23;
     $256 = $22;
     $257 = $256 >> 1;
     $258 = ($255|0)<=($257|0);
     if ($258) {
      $259 = $23;
      $260 = $23;
      $261 = (($260) + 1)|0;
      $262 = Math_imul($259, $261)|0;
      $263 = $262 >> 1;
      $276 = $263;
     } else {
      $264 = $44;
      $265 = $22;
      $266 = (($265) + 1)|0;
      $267 = $23;
      $268 = (($266) - ($267))|0;
      $269 = $22;
      $270 = (($269) + 2)|0;
      $271 = $23;
      $272 = (($270) - ($271))|0;
      $273 = Math_imul($268, $272)|0;
      $274 = $273 >> 1;
      $275 = (($264) - ($274))|0;
      $276 = $275;
     }
     $45 = $276;
     $277 = $36;
     $278 = $45;
     $279 = $45;
     $280 = $43;
     $281 = (($279) + ($280))|0;
     $282 = $44;
     _ec_encode($277,$278,$281,$282);
    }
   } while(0);
   $342 = $23;
   $343 = $342<<14;
   $344 = $22;
   $345 = (_celt_udiv_358($343,$344)|0);
   $23 = $345;
   $346 = $32;
   $347 = ($346|0)!=(0);
   $348 = $20;
   $349 = ($348|0)!=(0);
   $or$cond5 = $347 & $349;
   if ($or$cond5) {
    $350 = $23;
    $351 = ($350|0)==(0);
    if ($351) {
     $352 = $33;
     $353 = $13;
     $354 = $14;
     $355 = $37;
     $356 = $34;
     $357 = $15;
     _intensity_stereo($352,$353,$354,$355,$356,$357);
     break;
    } else {
     $358 = $13;
     $359 = $14;
     $360 = $15;
     _stereo_split($358,$359,$360);
     break;
    }
   }
  } else {
   $361 = $20;
   $362 = ($361|0)!=(0);
   if ($362) {
    $363 = $32;
    $364 = ($363|0)!=(0);
    if ($364) {
     $365 = $23;
     $366 = ($365|0)>(8192);
     $367 = $366&1;
     $31 = $367;
     $368 = $31;
     $369 = ($368|0)!=(0);
     L69: do {
      if ($369) {
       $48 = 0;
       while(1) {
        $370 = $48;
        $371 = $15;
        $372 = ($370|0)<($371|0);
        if (!($372)) {
         break L69;
        }
        $373 = $14;
        $374 = $48;
        $375 = (($373) + ($374<<2)|0);
        $376 = +HEAPF32[$375>>2];
        $377 = - $376;
        $378 = $14;
        $379 = $48;
        $380 = (($378) + ($379<<2)|0);
        HEAPF32[$380>>2] = $377;
        $381 = $48;
        $382 = (($381) + 1)|0;
        $48 = $382;
       }
      }
     } while(0);
     $383 = $33;
     $384 = $13;
     $385 = $14;
     $386 = $37;
     $387 = $34;
     $388 = $15;
     _intensity_stereo($383,$384,$385,$386,$387,$388);
    }
    $389 = $16;
    $390 = HEAP32[$389>>2]|0;
    $391 = ($390|0)>(16);
    do {
     if ($391) {
      $392 = $11;
      $393 = ((($392)) + 28|0);
      $394 = HEAP32[$393>>2]|0;
      $395 = ($394|0)>(16);
      if ($395) {
       $396 = $32;
       $397 = ($396|0)!=(0);
       $398 = $36;
       if ($397) {
        $399 = $31;
        _ec_enc_bit_logp($398,$399,2);
        break;
       } else {
        $400 = (_ec_dec_bit_logp($398,2)|0);
        $31 = $400;
        break;
       }
      } else {
       label = 60;
      }
     } else {
      label = 60;
     }
    } while(0);
    if ((label|0) == 60) {
     $31 = 0;
    }
    $23 = 0;
   }
  }
 } while(0);
 $401 = $36;
 $402 = (_ec_tell_frac($401)|0);
 $403 = $30;
 $404 = (($402) - ($403))|0;
 $27 = $404;
 $405 = $27;
 $406 = $16;
 $407 = HEAP32[$406>>2]|0;
 $408 = (($407) - ($405))|0;
 HEAP32[$406>>2] = $408;
 $409 = $23;
 $410 = ($409|0)==(0);
 if ($410) {
  $25 = 32767;
  $26 = 0;
  $411 = $17;
  $412 = 1 << $411;
  $413 = (($412) - 1)|0;
  $414 = $21;
  $415 = HEAP32[$414>>2]|0;
  $416 = $415 & $413;
  HEAP32[$414>>2] = $416;
  $24 = -16384;
  $449 = $31;
  $450 = $12;
  HEAP32[$450>>2] = $449;
  $451 = $25;
  $452 = $12;
  $453 = ((($452)) + 4|0);
  HEAP32[$453>>2] = $451;
  $454 = $26;
  $455 = $12;
  $456 = ((($455)) + 8|0);
  HEAP32[$456>>2] = $454;
  $457 = $24;
  $458 = $12;
  $459 = ((($458)) + 12|0);
  HEAP32[$459>>2] = $457;
  $460 = $23;
  $461 = $12;
  $462 = ((($461)) + 16|0);
  HEAP32[$462>>2] = $460;
  $463 = $27;
  $464 = $12;
  $465 = ((($464)) + 20|0);
  HEAP32[$465>>2] = $463;
  STACKTOP = sp;return;
 }
 $417 = $23;
 $418 = ($417|0)==(16384);
 if ($418) {
  $25 = 0;
  $26 = 32767;
  $419 = $17;
  $420 = 1 << $419;
  $421 = (($420) - 1)|0;
  $422 = $17;
  $423 = $421 << $422;
  $424 = $21;
  $425 = HEAP32[$424>>2]|0;
  $426 = $425 & $423;
  HEAP32[$424>>2] = $426;
  $24 = 16384;
  $449 = $31;
  $450 = $12;
  HEAP32[$450>>2] = $449;
  $451 = $25;
  $452 = $12;
  $453 = ((($452)) + 4|0);
  HEAP32[$453>>2] = $451;
  $454 = $26;
  $455 = $12;
  $456 = ((($455)) + 8|0);
  HEAP32[$456>>2] = $454;
  $457 = $24;
  $458 = $12;
  $459 = ((($458)) + 12|0);
  HEAP32[$459>>2] = $457;
  $460 = $23;
  $461 = $12;
  $462 = ((($461)) + 16|0);
  HEAP32[$462>>2] = $460;
  $463 = $27;
  $464 = $12;
  $465 = ((($464)) + 20|0);
  HEAP32[$465>>2] = $463;
  STACKTOP = sp;return;
 } else {
  $427 = $23;
  $428 = $427&65535;
  $429 = (_bitexact_cos($428)|0);
  $430 = $429 << 16 >> 16;
  $25 = $430;
  $431 = $23;
  $432 = (16384 - ($431))|0;
  $433 = $432&65535;
  $434 = (_bitexact_cos($433)|0);
  $435 = $434 << 16 >> 16;
  $26 = $435;
  $436 = $15;
  $437 = (($436) - 1)|0;
  $438 = $437 << 7;
  $439 = $438&65535;
  $440 = $439 << 16 >> 16;
  $441 = $26;
  $442 = $25;
  $443 = (_bitexact_log2tan($441,$442)|0);
  $444 = $443&65535;
  $445 = $444 << 16 >> 16;
  $446 = Math_imul($440, $445)|0;
  $447 = (16384 + ($446))|0;
  $448 = $447 >> 15;
  $24 = $448;
  $449 = $31;
  $450 = $12;
  HEAP32[$450>>2] = $449;
  $451 = $25;
  $452 = $12;
  $453 = ((($452)) + 4|0);
  HEAP32[$453>>2] = $451;
  $454 = $26;
  $455 = $12;
  $456 = ((($455)) + 8|0);
  HEAP32[$456>>2] = $454;
  $457 = $24;
  $458 = $12;
  $459 = ((($458)) + 12|0);
  HEAP32[$459>>2] = $457;
  $460 = $23;
  $461 = $12;
  $462 = ((($461)) + 16|0);
  HEAP32[$462>>2] = $460;
  $463 = $27;
  $464 = $12;
  $465 = ((($464)) + 20|0);
  HEAP32[$465>>2] = $463;
  STACKTOP = sp;return;
 }
}
function _stereo_merge($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 36|0;
 $12 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 HEAPF32[$11>>2] = 0.0;
 HEAPF32[$12>>2] = 0.0;
 $21 = $6;
 $22 = $5;
 $23 = $6;
 $24 = $8;
 _dual_inner_prod_c_365($21,$22,$23,$24,$11,$12);
 $25 = $7;
 $26 = +HEAPF32[$11>>2];
 $27 = $25 * $26;
 HEAPF32[$11>>2] = $27;
 $28 = $7;
 $15 = $28;
 $29 = $15;
 $30 = $15;
 $31 = $29 * $30;
 $32 = +HEAPF32[$12>>2];
 $33 = $31 + $32;
 $34 = +HEAPF32[$11>>2];
 $35 = 2.0 * $34;
 $36 = $33 - $35;
 $13 = $36;
 $37 = $15;
 $38 = $15;
 $39 = $37 * $38;
 $40 = +HEAPF32[$12>>2];
 $41 = $39 + $40;
 $42 = +HEAPF32[$11>>2];
 $43 = 2.0 * $42;
 $44 = $41 + $43;
 $14 = $44;
 $45 = $14;
 $46 = $45 < 6.0000002849847078E-4;
 $47 = $13;
 $48 = $47 < 6.0000002849847078E-4;
 $or$cond = $46 | $48;
 if ($or$cond) {
  $49 = $6;
  $50 = $5;
  $51 = $8;
  $52 = $51<<2;
  $53 = $6;
  $54 = $5;
  $55 = $53;
  $56 = $54;
  $57 = (($55) - ($56))|0;
  $58 = (($57|0) / 4)&-1;
  $59 = 0;
  $60 = (($52) + ($59))|0;
  _memcpy(($49|0),($50|0),($60|0))|0;
  STACKTOP = sp;return;
 }
 $61 = $13;
 $16 = $61;
 $62 = $16;
 $63 = $62;
 $64 = (+Math_sqrt((+$63)));
 $65 = $64;
 $66 = 1.0 / $65;
 $17 = $66;
 $67 = $14;
 $16 = $67;
 $68 = $16;
 $69 = $68;
 $70 = (+Math_sqrt((+$69)));
 $71 = $70;
 $72 = 1.0 / $71;
 $18 = $72;
 $10 = 0;
 while(1) {
  $73 = $10;
  $74 = $8;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $7;
  $77 = $5;
  $78 = $10;
  $79 = (($77) + ($78<<2)|0);
  $80 = +HEAPF32[$79>>2];
  $81 = $76 * $80;
  $20 = $81;
  $82 = $6;
  $83 = $10;
  $84 = (($82) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $19 = $85;
  $86 = $17;
  $87 = $20;
  $88 = $19;
  $89 = $87 - $88;
  $90 = $86 * $89;
  $91 = $5;
  $92 = $10;
  $93 = (($91) + ($92<<2)|0);
  HEAPF32[$93>>2] = $90;
  $94 = $18;
  $95 = $20;
  $96 = $19;
  $97 = $95 + $96;
  $98 = $94 * $97;
  $99 = $6;
  $100 = $10;
  $101 = (($99) + ($100<<2)|0);
  HEAPF32[$101>>2] = $98;
  $102 = $10;
  $103 = (($102) + 1)|0;
  $10 = $103;
 }
 STACKTOP = sp;return;
}
function _dual_inner_prod_c_365($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = 0.0;
 $14 = 0.0;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $9;
  $17 = ($15|0)<($16|0);
  $18 = $13;
  if (!($17)) {
   break;
  }
  $19 = $6;
  $20 = $12;
  $21 = (($19) + ($20<<2)|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $7;
  $24 = $12;
  $25 = (($23) + ($24<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $22 * $26;
  $28 = $18 + $27;
  $13 = $28;
  $29 = $14;
  $30 = $6;
  $31 = $12;
  $32 = (($30) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $8;
  $35 = $12;
  $36 = (($34) + ($35<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $33 * $37;
  $39 = $29 + $38;
  $14 = $39;
  $40 = $12;
  $41 = (($40) + 1)|0;
  $12 = $41;
 }
 $42 = $10;
 HEAPF32[$42>>2] = $18;
 $43 = $14;
 $44 = $11;
 HEAPF32[$44>>2] = $43;
 STACKTOP = sp;return;
}
function _compute_qn($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = $5;
 $14 = $13<<1;
 $15 = (($14) - 1)|0;
 $12 = $15;
 $16 = $9;
 $17 = ($16|0)!=(0);
 $18 = $5;
 $19 = ($18|0)==(2);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = $12;
  $21 = (($20) + -1)|0;
  $12 = $21;
 }
 $22 = $6;
 $23 = $12;
 $24 = $7;
 $25 = Math_imul($23, $24)|0;
 $26 = (($22) + ($25))|0;
 $27 = $12;
 $28 = (_celt_sudiv($26,$27)|0);
 $11 = $28;
 $29 = $6;
 $30 = $8;
 $31 = (($29) - ($30))|0;
 $32 = (($31) - 32)|0;
 $33 = $11;
 $34 = ($32|0)<($33|0);
 if ($34) {
  $35 = $6;
  $36 = $8;
  $37 = (($35) - ($36))|0;
  $38 = (($37) - 32)|0;
  $40 = $38;
 } else {
  $39 = $11;
  $40 = $39;
 }
 $11 = $40;
 $41 = $11;
 $42 = (64)<($41|0);
 $43 = $11;
 $44 = $42 ? 64 : $43;
 $11 = $44;
 $45 = $11;
 $46 = ($45|0)<(4);
 if ($46) {
  $10 = 1;
  $60 = $10;
  STACKTOP = sp;return ($60|0);
 } else {
  $47 = $11;
  $48 = $47 & 7;
  $49 = (25378 + ($48<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = $11;
  $53 = $52 >> 3;
  $54 = (14 - ($53))|0;
  $55 = $51 >> $54;
  $10 = $55;
  $56 = $10;
  $57 = (($56) + 1)|0;
  $58 = $57 >> 1;
  $59 = $58 << 1;
  $10 = $59;
  $60 = $10;
  STACKTOP = sp;return ($60|0);
 }
 return (0)|0;
}
function _intensity_stereo($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $21 = $10;
 $12 = $21;
 $22 = $9;
 $23 = $12;
 $24 = (($22) + ($23<<2)|0);
 $25 = +HEAPF32[$24>>2];
 $16 = $25;
 $26 = $9;
 $27 = $12;
 $28 = $6;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + ($30))|0;
 $32 = (($26) + ($31<<2)|0);
 $33 = +HEAPF32[$32>>2];
 $17 = $33;
 $34 = $16;
 $35 = $16;
 $36 = $34 * $35;
 $37 = 1.0000000036274937E-15 + $36;
 $38 = $17;
 $39 = $17;
 $40 = $38 * $39;
 $41 = $37 + $40;
 $42 = $41;
 $43 = (+Math_sqrt((+$42)));
 $44 = $43;
 $45 = 1.0000000036274937E-15 + $44;
 $18 = $45;
 $46 = $16;
 $47 = $18;
 $48 = $46 / $47;
 $14 = $48;
 $49 = $17;
 $50 = $18;
 $51 = $49 / $50;
 $15 = $51;
 $13 = 0;
 while(1) {
  $52 = $13;
  $53 = $11;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = $7;
  $56 = $13;
  $57 = (($55) + ($56<<2)|0);
  $58 = +HEAPF32[$57>>2];
  $20 = $58;
  $59 = $8;
  $60 = $13;
  $61 = (($59) + ($60<<2)|0);
  $62 = +HEAPF32[$61>>2];
  $19 = $62;
  $63 = $14;
  $64 = $20;
  $65 = $63 * $64;
  $66 = $15;
  $67 = $19;
  $68 = $66 * $67;
  $69 = $65 + $68;
  $70 = $7;
  $71 = $13;
  $72 = (($70) + ($71<<2)|0);
  HEAPF32[$72>>2] = $69;
  $73 = $13;
  $74 = (($73) + 1)|0;
  $13 = $74;
 }
 STACKTOP = sp;return;
}
function _stereo_split($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $5;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = $6;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = 0.70710676908493042 * $15;
  $8 = $16;
  $17 = $4;
  $18 = $6;
  $19 = (($17) + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = 0.70710676908493042 * $20;
  $7 = $21;
  $22 = $8;
  $23 = $7;
  $24 = $22 + $23;
  $25 = $3;
  $26 = $6;
  $27 = (($25) + ($26<<2)|0);
  HEAPF32[$27>>2] = $24;
  $28 = $7;
  $29 = $8;
  $30 = $28 - $29;
  $31 = $4;
  $32 = $6;
  $33 = (($31) + ($32<<2)|0);
  HEAPF32[$33>>2] = $30;
  $34 = $6;
  $35 = (($34) + 1)|0;
  $6 = $35;
 }
 STACKTOP = sp;return;
}
function _bitexact_cos($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = $4 << 16 >> 16;
 $6 = $1;
 $7 = $6 << 16 >> 16;
 $8 = Math_imul($5, $7)|0;
 $9 = (4096 + ($8))|0;
 $10 = $9 >> 13;
 $2 = $10;
 $11 = $2;
 $12 = $11&65535;
 $3 = $12;
 $13 = $3;
 $14 = $13 << 16 >> 16;
 $15 = (32767 - ($14))|0;
 $16 = $3;
 $17 = $16 << 16 >> 16;
 $18 = $3;
 $19 = $18 << 16 >> 16;
 $20 = $3;
 $21 = $20 << 16 >> 16;
 $22 = Math_imul(-626, $21)|0;
 $23 = (16384 + ($22))|0;
 $24 = $23 >> 15;
 $25 = (8277 + ($24))|0;
 $26 = $25&65535;
 $27 = $26 << 16 >> 16;
 $28 = Math_imul($19, $27)|0;
 $29 = (16384 + ($28))|0;
 $30 = $29 >> 15;
 $31 = (-7651 + ($30))|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($17, $33)|0;
 $35 = (16384 + ($34))|0;
 $36 = $35 >> 15;
 $37 = (($15) + ($36))|0;
 $38 = $37&65535;
 $3 = $38;
 $39 = $3;
 $40 = $39 << 16 >> 16;
 $41 = (1 + ($40))|0;
 $42 = $41&65535;
 STACKTOP = sp;return ($42|0);
}
function _bitexact_log2tan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = (Math_clz32(($6|0))|0);
 $8 = (32 - ($7))|0;
 $4 = $8;
 $9 = $2;
 $10 = (Math_clz32(($9|0))|0);
 $11 = (32 - ($10))|0;
 $5 = $11;
 $12 = $4;
 $13 = (15 - ($12))|0;
 $14 = $3;
 $15 = $14 << $13;
 $3 = $15;
 $16 = $5;
 $17 = (15 - ($16))|0;
 $18 = $2;
 $19 = $18 << $17;
 $2 = $19;
 $20 = $5;
 $21 = $4;
 $22 = (($20) - ($21))|0;
 $23 = $22<<11;
 $24 = $2;
 $25 = $24&65535;
 $26 = $25 << 16 >> 16;
 $27 = $2;
 $28 = $27&65535;
 $29 = $28 << 16 >> 16;
 $30 = Math_imul($29, -2597)|0;
 $31 = (16384 + ($30))|0;
 $32 = $31 >> 15;
 $33 = (($32) + 7932)|0;
 $34 = $33&65535;
 $35 = $34 << 16 >> 16;
 $36 = Math_imul($26, $35)|0;
 $37 = (16384 + ($36))|0;
 $38 = $37 >> 15;
 $39 = (($23) + ($38))|0;
 $40 = $3;
 $41 = $40&65535;
 $42 = $41 << 16 >> 16;
 $43 = $3;
 $44 = $43&65535;
 $45 = $44 << 16 >> 16;
 $46 = Math_imul($45, -2597)|0;
 $47 = (16384 + ($46))|0;
 $48 = $47 >> 15;
 $49 = (($48) + 7932)|0;
 $50 = $49&65535;
 $51 = $50 << 16 >> 16;
 $52 = Math_imul($42, $51)|0;
 $53 = (16384 + ($52))|0;
 $54 = $53 >> 15;
 $55 = (($39) - ($54))|0;
 STACKTOP = sp;return ($55|0);
}
function _deinterleave_hadamard($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $5;
 $14 = $6;
 $15 = Math_imul($13, $14)|0;
 $10 = $15;
 $16 = $10;
 $17 = (_llvm_stacksave()|0);
 $11 = $17;
 $$alloca_mul = $16<<2;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $19 = $7;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $6;
  $22 = (16912 + ($21<<2)|0);
  $23 = ((($22)) + -8|0);
  $12 = $23;
  $8 = 0;
  while(1) {
   $24 = $8;
   $25 = $6;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $9 = 0;
   while(1) {
    $27 = $9;
    $28 = $5;
    $29 = ($27|0)<($28|0);
    if (!($29)) {
     break;
    }
    $30 = $4;
    $31 = $9;
    $32 = $6;
    $33 = Math_imul($31, $32)|0;
    $34 = $8;
    $35 = (($33) + ($34))|0;
    $36 = (($30) + ($35<<2)|0);
    $37 = +HEAPF32[$36>>2];
    $38 = $12;
    $39 = $8;
    $40 = (($38) + ($39<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $5;
    $43 = Math_imul($41, $42)|0;
    $44 = $9;
    $45 = (($43) + ($44))|0;
    $46 = (($18) + ($45<<2)|0);
    HEAPF32[$46>>2] = $37;
    $47 = $9;
    $48 = (($47) + 1)|0;
    $9 = $48;
   }
   $49 = $8;
   $50 = (($49) + 1)|0;
   $8 = $50;
  }
  $75 = $4;
  $76 = $10;
  $77 = $76<<2;
  $78 = $4;
  $79 = $78;
  $80 = $18;
  $81 = (($79) - ($80))|0;
  $82 = (($81|0) / 4)&-1;
  $83 = 0;
  $84 = (($77) + ($83))|0;
  _memcpy(($75|0),($18|0),($84|0))|0;
  $85 = $11;
  _llvm_stackrestore(($85|0));
  STACKTOP = sp;return;
 } else {
  $8 = 0;
  while(1) {
   $51 = $8;
   $52 = $6;
   $53 = ($51|0)<($52|0);
   if (!($53)) {
    break;
   }
   $9 = 0;
   while(1) {
    $54 = $9;
    $55 = $5;
    $56 = ($54|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $4;
    $58 = $9;
    $59 = $6;
    $60 = Math_imul($58, $59)|0;
    $61 = $8;
    $62 = (($60) + ($61))|0;
    $63 = (($57) + ($62<<2)|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $8;
    $66 = $5;
    $67 = Math_imul($65, $66)|0;
    $68 = $9;
    $69 = (($67) + ($68))|0;
    $70 = (($18) + ($69<<2)|0);
    HEAPF32[$70>>2] = $64;
    $71 = $9;
    $72 = (($71) + 1)|0;
    $9 = $72;
   }
   $73 = $8;
   $74 = (($73) + 1)|0;
   $8 = $74;
  }
  $75 = $4;
  $76 = $10;
  $77 = $76<<2;
  $78 = $4;
  $79 = $78;
  $80 = $18;
  $81 = (($79) - ($80))|0;
  $82 = (($81|0) / 4)&-1;
  $83 = 0;
  $84 = (($77) + ($83))|0;
  _memcpy(($75|0),($18|0),($84|0))|0;
  $85 = $11;
  _llvm_stackrestore(($85|0));
  STACKTOP = sp;return;
 }
}
function _quant_partition($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = +$7;
 $8 = $8|0;
 var $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0.0, $402 = 0.0, $403 = 0.0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $12 = sp + 152|0;
 $17 = sp + 132|0;
 $39 = sp + 24|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 HEAP32[$12>>2] = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 HEAP32[$17>>2] = $8;
 $21 = 0;
 $22 = 0;
 $46 = $13;
 $23 = $46;
 $24 = 0.0;
 $25 = 0.0;
 $26 = 0;
 $47 = $9;
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)!=(0);
 $50 = $49 ^ 1;
 $51 = $50&1;
 $27 = $51;
 $28 = 0;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $29 = $53;
 $54 = $9;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $30 = $56;
 $57 = $9;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $31 = $59;
 $60 = $9;
 $61 = ((($60)) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $32 = $62;
 $63 = $9;
 $64 = ((($63)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 $33 = $65;
 $66 = $30;
 $67 = ((($66)) + 92|0);
 $68 = ((($67)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $30;
 $71 = ((($70)) + 92|0);
 $72 = ((($71)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $15;
 $75 = (($74) + 1)|0;
 $76 = $30;
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = Math_imul($75, $78)|0;
 $80 = $31;
 $81 = (($79) + ($80))|0;
 $82 = (($73) + ($81<<1)|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = $83 << 16 >> 16;
 $85 = (($69) + ($84)|0);
 $18 = $85;
 $86 = $15;
 $87 = ($86|0)!=(-1);
 if ($87) {
  $88 = HEAP32[$12>>2]|0;
  $89 = $18;
  $90 = $18;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = (($89) + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (($95) + 12)|0;
  $97 = ($88|0)>($96|0);
  $98 = $11;
  $99 = ($98|0)>(2);
  $or$cond = $97 & $99;
  if ($or$cond) {
   $40 = 0;
   $100 = $11;
   $101 = $100 >> 1;
   $11 = $101;
   $102 = $10;
   $103 = $11;
   $104 = (($102) + ($103<<2)|0);
   $28 = $104;
   $105 = $15;
   $106 = (($105) - 1)|0;
   $15 = $106;
   $107 = $13;
   $108 = ($107|0)==(1);
   if ($108) {
    $109 = HEAP32[$17>>2]|0;
    $110 = $109 & 1;
    $111 = HEAP32[$17>>2]|0;
    $112 = $111 << 1;
    $113 = $110 | $112;
    HEAP32[$17>>2] = $113;
   }
   $114 = $13;
   $115 = (($114) + 1)|0;
   $116 = $115 >> 1;
   $13 = $116;
   $117 = $9;
   $118 = $10;
   $119 = $28;
   $120 = $11;
   $121 = $13;
   $122 = $23;
   $123 = $15;
   _compute_theta($117,$39,$118,$119,$120,$12,$121,$122,$123,0,$17);
   $124 = ((($39)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $21 = $125;
   $126 = ((($39)) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $22 = $127;
   $128 = ((($39)) + 12|0);
   $129 = HEAP32[$128>>2]|0;
   $36 = $129;
   $130 = ((($39)) + 16|0);
   $131 = HEAP32[$130>>2]|0;
   $37 = $131;
   $132 = ((($39)) + 20|0);
   $133 = HEAP32[$132>>2]|0;
   $38 = $133;
   $134 = $21;
   $135 = (+($134|0));
   $136 = 3.0517578125E-5 * $135;
   $24 = $136;
   $137 = $22;
   $138 = (+($137|0));
   $139 = 3.0517578125E-5 * $138;
   $25 = $139;
   $140 = $23;
   $141 = ($140|0)>(1);
   do {
    if ($141) {
     $142 = $37;
     $143 = $142 & 16383;
     $144 = ($143|0)!=(0);
     if ($144) {
      $145 = $37;
      $146 = ($145|0)>(8192);
      $147 = $36;
      if ($146) {
       $148 = $15;
       $149 = (4 - ($148))|0;
       $150 = $147 >> $149;
       $151 = $36;
       $152 = (($151) - ($150))|0;
       $36 = $152;
       break;
      }
      $153 = $11;
      $154 = $153 << 3;
      $155 = $15;
      $156 = (5 - ($155))|0;
      $157 = $154 >> $156;
      $158 = (($147) + ($157))|0;
      $159 = (0)<($158|0);
      if ($159) {
       $167 = 0;
      } else {
       $160 = $36;
       $161 = $11;
       $162 = $161 << 3;
       $163 = $15;
       $164 = (5 - ($163))|0;
       $165 = $162 >> $164;
       $166 = (($160) + ($165))|0;
       $167 = $166;
      }
      $36 = $167;
     }
    }
   } while(0);
   $168 = HEAP32[$12>>2]|0;
   $169 = HEAP32[$12>>2]|0;
   $170 = $36;
   $171 = (($169) - ($170))|0;
   $172 = (($171|0) / 2)&-1;
   $173 = ($168|0)<($172|0);
   $174 = HEAP32[$12>>2]|0;
   if ($173) {
    $179 = $174;
   } else {
    $175 = $36;
    $176 = (($174) - ($175))|0;
    $177 = (($176|0) / 2)&-1;
    $179 = $177;
   }
   $178 = (0)>($179|0);
   if ($178) {
    $190 = 0;
   } else {
    $180 = HEAP32[$12>>2]|0;
    $181 = HEAP32[$12>>2]|0;
    $182 = $36;
    $183 = (($181) - ($182))|0;
    $184 = (($183|0) / 2)&-1;
    $185 = ($180|0)<($184|0);
    $186 = HEAP32[$12>>2]|0;
    if ($185) {
     $190 = $186;
    } else {
     $187 = $36;
     $188 = (($186) - ($187))|0;
     $189 = (($188|0) / 2)&-1;
     $190 = $189;
    }
   }
   $34 = $190;
   $191 = HEAP32[$12>>2]|0;
   $192 = $34;
   $193 = (($191) - ($192))|0;
   $35 = $193;
   $194 = $38;
   $195 = $9;
   $196 = ((($195)) + 28|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($197) - ($194))|0;
   HEAP32[$196>>2] = $198;
   $199 = $14;
   $200 = ($199|0)!=(0|0);
   if ($200) {
    $201 = $14;
    $202 = $11;
    $203 = (($201) + ($202<<2)|0);
    $40 = $203;
   }
   $204 = $9;
   $205 = ((($204)) + 28|0);
   $206 = HEAP32[$205>>2]|0;
   $41 = $206;
   $207 = $34;
   $208 = $35;
   $209 = ($207|0)>=($208|0);
   $210 = $9;
   if ($209) {
    $211 = $10;
    $212 = $11;
    $213 = $34;
    $214 = $13;
    $215 = $14;
    $216 = $15;
    $217 = $16;
    $218 = $24;
    $219 = $217 * $218;
    $220 = HEAP32[$17>>2]|0;
    $221 = (_quant_partition($210,$211,$212,$213,$214,$215,$216,$219,$220)|0);
    $26 = $221;
    $222 = $34;
    $223 = $41;
    $224 = $9;
    $225 = ((($224)) + 28|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($223) - ($226))|0;
    $228 = (($222) - ($227))|0;
    $41 = $228;
    $229 = $41;
    $230 = ($229|0)>(24);
    $231 = $37;
    $232 = ($231|0)!=(0);
    $or$cond3 = $230 & $232;
    if ($or$cond3) {
     $233 = $41;
     $234 = (($233) - 24)|0;
     $235 = $35;
     $236 = (($235) + ($234))|0;
     $35 = $236;
    }
    $237 = $9;
    $238 = $28;
    $239 = $11;
    $240 = $35;
    $241 = $13;
    $242 = $40;
    $243 = $15;
    $244 = $16;
    $245 = $25;
    $246 = $244 * $245;
    $247 = HEAP32[$17>>2]|0;
    $248 = $13;
    $249 = $247 >> $248;
    $250 = (_quant_partition($237,$238,$239,$240,$241,$242,$243,$246,$249)|0);
    $251 = $23;
    $252 = $251 >> 1;
    $253 = $250 << $252;
    $254 = $26;
    $255 = $254 | $253;
    $26 = $255;
    $422 = $26;
    STACKTOP = sp;return ($422|0);
   } else {
    $256 = $28;
    $257 = $11;
    $258 = $35;
    $259 = $13;
    $260 = $40;
    $261 = $15;
    $262 = $16;
    $263 = $25;
    $264 = $262 * $263;
    $265 = HEAP32[$17>>2]|0;
    $266 = $13;
    $267 = $265 >> $266;
    $268 = (_quant_partition($210,$256,$257,$258,$259,$260,$261,$264,$267)|0);
    $269 = $23;
    $270 = $269 >> 1;
    $271 = $268 << $270;
    $26 = $271;
    $272 = $35;
    $273 = $41;
    $274 = $9;
    $275 = ((($274)) + 28|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($273) - ($276))|0;
    $278 = (($272) - ($277))|0;
    $41 = $278;
    $279 = $41;
    $280 = ($279|0)>(24);
    $281 = $37;
    $282 = ($281|0)!=(16384);
    $or$cond5 = $280 & $282;
    if ($or$cond5) {
     $283 = $41;
     $284 = (($283) - 24)|0;
     $285 = $34;
     $286 = (($285) + ($284))|0;
     $34 = $286;
    }
    $287 = $9;
    $288 = $10;
    $289 = $11;
    $290 = $34;
    $291 = $13;
    $292 = $14;
    $293 = $15;
    $294 = $16;
    $295 = $24;
    $296 = $294 * $295;
    $297 = HEAP32[$17>>2]|0;
    $298 = (_quant_partition($287,$288,$289,$290,$291,$292,$293,$296,$297)|0);
    $299 = $26;
    $300 = $299 | $298;
    $26 = $300;
    $422 = $26;
    STACKTOP = sp;return ($422|0);
   }
  }
 }
 $301 = $30;
 $302 = $31;
 $303 = $15;
 $304 = HEAP32[$12>>2]|0;
 $305 = (_bits2pulses($301,$302,$303,$304)|0);
 $19 = $305;
 $306 = $30;
 $307 = $31;
 $308 = $15;
 $309 = $19;
 $310 = (_pulses2bits($306,$307,$308,$309)|0);
 $20 = $310;
 $311 = $20;
 $312 = $9;
 $$sink8 = $311;$$sink9 = $312;
 while(1) {
  $313 = ((($$sink9)) + 28|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = (($314) - ($$sink8))|0;
  HEAP32[$313>>2] = $315;
  $316 = $9;
  $317 = ((($316)) + 28|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = ($318|0)<(0);
  $320 = $19;
  $321 = ($320|0)>(0);
  $322 = $319 ? $321 : 0;
  if (!($322)) {
   break;
  }
  $323 = $20;
  $324 = $9;
  $325 = ((($324)) + 28|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = (($326) + ($323))|0;
  HEAP32[$325>>2] = $327;
  $328 = $19;
  $329 = (($328) + -1)|0;
  $19 = $329;
  $330 = $30;
  $331 = $31;
  $332 = $15;
  $333 = $19;
  $334 = (_pulses2bits($330,$331,$332,$333)|0);
  $20 = $334;
  $335 = $20;
  $336 = $9;
  $$sink8 = $335;$$sink9 = $336;
 }
 $337 = $19;
 $338 = ($337|0)!=(0);
 if ($338) {
  $339 = $19;
  $340 = (_get_pulses($339)|0);
  $42 = $340;
  $341 = $29;
  $342 = ($341|0)!=(0);
  $343 = $10;
  $344 = $11;
  $345 = $42;
  $346 = $32;
  $347 = $13;
  $348 = $33;
  if ($342) {
   $349 = (_alg_quant($343,$344,$345,$346,$347,$348)|0);
   $26 = $349;
   $422 = $26;
   STACKTOP = sp;return ($422|0);
  } else {
   $350 = $16;
   $351 = (_alg_unquant($343,$344,$345,$346,$347,$348,$350)|0);
   $26 = $351;
   $422 = $26;
   STACKTOP = sp;return ($422|0);
  }
 }
 $352 = $27;
 $353 = ($352|0)!=(0);
 if (!($353)) {
  $422 = $26;
  STACKTOP = sp;return ($422|0);
 }
 $354 = $13;
 $355 = 1 << $354;
 $356 = (($355) - 1)|0;
 $44 = $356;
 $357 = $44;
 $358 = HEAP32[$17>>2]|0;
 $359 = $358 & $357;
 HEAP32[$17>>2] = $359;
 $360 = HEAP32[$17>>2]|0;
 $361 = ($360|0)!=(0);
 if (!($361)) {
  $362 = $10;
  $363 = $11;
  $364 = $363<<2;
  _memset(($362|0),0,($364|0))|0;
  $422 = $26;
  STACKTOP = sp;return ($422|0);
 }
 $365 = $14;
 $366 = ($365|0)==(0|0);
 $43 = 0;
 if ($366) {
  while(1) {
   $367 = $43;
   $368 = $11;
   $369 = ($367|0)<($368|0);
   if (!($369)) {
    break;
   }
   $370 = $9;
   $371 = ((($370)) + 36|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = (_celt_lcg_rand($372)|0);
   $374 = $9;
   $375 = ((($374)) + 36|0);
   HEAP32[$375>>2] = $373;
   $376 = $9;
   $377 = ((($376)) + 36|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $378 >> 20;
   $380 = (+($379|0));
   $381 = $10;
   $382 = $43;
   $383 = (($381) + ($382<<2)|0);
   HEAPF32[$383>>2] = $380;
   $384 = $43;
   $385 = (($384) + 1)|0;
   $43 = $385;
  }
  $386 = $44;
  $26 = $386;
 } else {
  while(1) {
   $387 = $43;
   $388 = $11;
   $389 = ($387|0)<($388|0);
   if (!($389)) {
    break;
   }
   $390 = $9;
   $391 = ((($390)) + 36|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = (_celt_lcg_rand($392)|0);
   $394 = $9;
   $395 = ((($394)) + 36|0);
   HEAP32[$395>>2] = $393;
   $45 = 0.00390625;
   $396 = $9;
   $397 = ((($396)) + 36|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = $398 & 32768;
   $400 = ($399|0)!=(0);
   $401 = $45;
   $402 = - $401;
   $403 = $400 ? $401 : $402;
   $45 = $403;
   $404 = $14;
   $405 = $43;
   $406 = (($404) + ($405<<2)|0);
   $407 = +HEAPF32[$406>>2];
   $408 = $45;
   $409 = $407 + $408;
   $410 = $10;
   $411 = $43;
   $412 = (($410) + ($411<<2)|0);
   HEAPF32[$412>>2] = $409;
   $413 = $43;
   $414 = (($413) + 1)|0;
   $43 = $414;
  }
  $415 = HEAP32[$17>>2]|0;
  $26 = $415;
 }
 $416 = $10;
 $417 = $11;
 $418 = $16;
 $419 = $9;
 $420 = ((($419)) + 40|0);
 $421 = HEAP32[$420>>2]|0;
 _renormalise_vector($416,$417,$418,$421);
 $422 = $26;
 STACKTOP = sp;return ($422|0);
}
function _interleave_hadamard($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $5;
 $14 = $6;
 $15 = Math_imul($13, $14)|0;
 $10 = $15;
 $16 = $10;
 $17 = (_llvm_stacksave()|0);
 $11 = $17;
 $$alloca_mul = $16<<2;
 $18 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $19 = $7;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $6;
  $22 = (16912 + ($21<<2)|0);
  $23 = ((($22)) + -8|0);
  $12 = $23;
  $8 = 0;
  while(1) {
   $24 = $8;
   $25 = $6;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $9 = 0;
   while(1) {
    $27 = $9;
    $28 = $5;
    $29 = ($27|0)<($28|0);
    if (!($29)) {
     break;
    }
    $30 = $4;
    $31 = $12;
    $32 = $8;
    $33 = (($31) + ($32<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $5;
    $36 = Math_imul($34, $35)|0;
    $37 = $9;
    $38 = (($36) + ($37))|0;
    $39 = (($30) + ($38<<2)|0);
    $40 = +HEAPF32[$39>>2];
    $41 = $9;
    $42 = $6;
    $43 = Math_imul($41, $42)|0;
    $44 = $8;
    $45 = (($43) + ($44))|0;
    $46 = (($18) + ($45<<2)|0);
    HEAPF32[$46>>2] = $40;
    $47 = $9;
    $48 = (($47) + 1)|0;
    $9 = $48;
   }
   $49 = $8;
   $50 = (($49) + 1)|0;
   $8 = $50;
  }
  $75 = $4;
  $76 = $10;
  $77 = $76<<2;
  $78 = $4;
  $79 = $78;
  $80 = $18;
  $81 = (($79) - ($80))|0;
  $82 = (($81|0) / 4)&-1;
  $83 = 0;
  $84 = (($77) + ($83))|0;
  _memcpy(($75|0),($18|0),($84|0))|0;
  $85 = $11;
  _llvm_stackrestore(($85|0));
  STACKTOP = sp;return;
 } else {
  $8 = 0;
  while(1) {
   $51 = $8;
   $52 = $6;
   $53 = ($51|0)<($52|0);
   if (!($53)) {
    break;
   }
   $9 = 0;
   while(1) {
    $54 = $9;
    $55 = $5;
    $56 = ($54|0)<($55|0);
    if (!($56)) {
     break;
    }
    $57 = $4;
    $58 = $8;
    $59 = $5;
    $60 = Math_imul($58, $59)|0;
    $61 = $9;
    $62 = (($60) + ($61))|0;
    $63 = (($57) + ($62<<2)|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $9;
    $66 = $6;
    $67 = Math_imul($65, $66)|0;
    $68 = $8;
    $69 = (($67) + ($68))|0;
    $70 = (($18) + ($69<<2)|0);
    HEAPF32[$70>>2] = $64;
    $71 = $9;
    $72 = (($71) + 1)|0;
    $9 = $72;
   }
   $73 = $8;
   $74 = (($73) + 1)|0;
   $8 = $74;
  }
  $75 = $4;
  $76 = $10;
  $77 = $76<<2;
  $78 = $4;
  $79 = $78;
  $80 = $18;
  $81 = (($79) - ($80))|0;
  $82 = (($81|0) / 4)&-1;
  $83 = 0;
  $84 = (($77) + ($83))|0;
  _memcpy(($75|0),($18|0),($84|0))|0;
  $85 = $11;
  _llvm_stackrestore(($85|0));
  STACKTOP = sp;return;
 }
}
function _bits2pulses($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 $15 = (($14) + 1)|0;
 $7 = $15;
 $16 = $5;
 $17 = ((($16)) + 92|0);
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = ((($20)) + 92|0);
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $7;
 $25 = $5;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = Math_imul($24, $27)|0;
 $29 = $6;
 $30 = (($28) + ($29))|0;
 $31 = (($23) + ($30<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 $34 = (($19) + ($33)|0);
 $12 = $34;
 $10 = 0;
 $35 = $12;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $11 = $37;
 $38 = $8;
 $39 = (($38) + -1)|0;
 $8 = $39;
 $9 = 0;
 while(1) {
  $40 = $9;
  $41 = ($40|0)<(6);
  if (!($41)) {
   break;
  }
  $42 = $10;
  $43 = $11;
  $44 = (($42) + ($43))|0;
  $45 = (($44) + 1)|0;
  $46 = $45 >> 1;
  $13 = $46;
  $47 = $12;
  $48 = $13;
  $49 = (($47) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $8;
  $53 = ($51|0)>=($52|0);
  $54 = $13;
  if ($53) {
   $11 = $54;
  } else {
   $10 = $54;
  }
  $55 = $9;
  $56 = (($55) + 1)|0;
  $9 = $56;
 }
 $57 = $8;
 $58 = $10;
 $59 = ($58|0)==(0);
 if ($59) {
  $66 = -1;
 } else {
  $60 = $12;
  $61 = $10;
  $62 = (($60) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $66 = $64;
 }
 $65 = (($57) - ($66))|0;
 $67 = $12;
 $68 = $11;
 $69 = (($67) + ($68)|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $8;
 $73 = (($71) - ($72))|0;
 $74 = ($65|0)<=($73|0);
 if ($74) {
  $75 = $10;
  $4 = $75;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 } else {
  $76 = $11;
  $4 = $76;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _pulses2bits($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $10 = (($9) + 1)|0;
 $6 = $10;
 $11 = $4;
 $12 = ((($11)) + 92|0);
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $4;
 $16 = ((($15)) + 92|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = $4;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($19, $22)|0;
 $24 = $5;
 $25 = (($23) + ($24))|0;
 $26 = (($18) + ($25<<1)|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 $29 = (($14) + ($28)|0);
 $8 = $29;
 $30 = $7;
 $31 = ($30|0)==(0);
 if ($31) {
  $38 = 0;
  STACKTOP = sp;return ($38|0);
 }
 $32 = $8;
 $33 = $7;
 $34 = (($32) + ($33)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = (($36) + 1)|0;
 $38 = $37;
 STACKTOP = sp;return ($38|0);
}
function _get_pulses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)<(8);
 $4 = $1;
 if ($3) {
  $11 = $4;
  STACKTOP = sp;return ($11|0);
 }
 $5 = $4 & 7;
 $6 = (8 + ($5))|0;
 $7 = $1;
 $8 = $7 >> 3;
 $9 = (($8) - 1)|0;
 $10 = $6 << $9;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _resampling_factor($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$split22D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $switch$split2D = ($3|0)<(16000);
 L1: do {
  if ($switch$split2D) {
   $switch$split22D = ($3|0)<(12000);
   if ($switch$split22D) {
    switch ($3|0) {
    case 8000:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $2 = 6;
    break;
   } else {
    switch ($3|0) {
    case 12000:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $2 = 4;
    break;
   }
  } else {
   $switch$split52D = ($3|0)<(24000);
   if ($switch$split52D) {
    switch ($3|0) {
    case 16000:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $2 = 3;
    break;
   }
   $switch$split82D = ($3|0)<(48000);
   if ($switch$split82D) {
    switch ($3|0) {
    case 24000:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $2 = 2;
    break;
   } else {
    switch ($3|0) {
    case 48000:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $2 = 1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $2 = 0;
 }
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _comb_filter($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0.0;
 var $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0;
 var $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $37 = $17;
 $38 = $37 == 0.0;
 $39 = $18;
 $40 = $39 == 0.0;
 $or$cond = $38 & $40;
 if ($or$cond) {
  $41 = $13;
  $42 = $12;
  $43 = ($41|0)!=($42|0);
  if (!($43)) {
   STACKTOP = sp;return;
  }
  $44 = $12;
  $45 = $13;
  $46 = $16;
  $47 = $46<<2;
  $48 = $12;
  $49 = $13;
  $50 = $48;
  $51 = $49;
  $52 = (($50) - ($51))|0;
  $53 = (($52|0) / 4)&-1;
  $54 = 0;
  $55 = (($47) + ($54))|0;
  _memmove(($44|0),($45|0),($55|0))|0;
  STACKTOP = sp;return;
 }
 $56 = $17;
 $57 = $19;
 $58 = (17032 + (($57*12)|0)|0);
 $59 = +HEAPF32[$58>>2];
 $60 = $56 * $59;
 $25 = $60;
 $61 = $17;
 $62 = $19;
 $63 = (17032 + (($62*12)|0)|0);
 $64 = ((($63)) + 4|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $61 * $65;
 $26 = $66;
 $67 = $17;
 $68 = $19;
 $69 = (17032 + (($68*12)|0)|0);
 $70 = ((($69)) + 8|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $67 * $71;
 $27 = $72;
 $73 = $18;
 $74 = $20;
 $75 = (17032 + (($74*12)|0)|0);
 $76 = +HEAPF32[$75>>2];
 $77 = $73 * $76;
 $28 = $77;
 $78 = $18;
 $79 = $20;
 $80 = (17032 + (($79*12)|0)|0);
 $81 = ((($80)) + 4|0);
 $82 = +HEAPF32[$81>>2];
 $83 = $78 * $82;
 $29 = $83;
 $84 = $18;
 $85 = $20;
 $86 = (17032 + (($85*12)|0)|0);
 $87 = ((($86)) + 8|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $84 * $88;
 $30 = $89;
 $90 = $13;
 $91 = $15;
 $92 = (0 - ($91))|0;
 $93 = (($92) + 1)|0;
 $94 = (($90) + ($93<<2)|0);
 $95 = +HEAPF32[$94>>2];
 $32 = $95;
 $96 = $13;
 $97 = $15;
 $98 = (0 - ($97))|0;
 $99 = (($96) + ($98<<2)|0);
 $100 = +HEAPF32[$99>>2];
 $33 = $100;
 $101 = $13;
 $102 = $15;
 $103 = (0 - ($102))|0;
 $104 = (($103) - 1)|0;
 $105 = (($101) + ($104<<2)|0);
 $106 = +HEAPF32[$105>>2];
 $34 = $106;
 $107 = $13;
 $108 = $15;
 $109 = (0 - ($108))|0;
 $110 = (($109) - 2)|0;
 $111 = (($107) + ($110<<2)|0);
 $112 = +HEAPF32[$111>>2];
 $35 = $112;
 $113 = $17;
 $114 = $18;
 $115 = $113 == $114;
 if ($115) {
  $116 = $14;
  $117 = $15;
  $118 = ($116|0)==($117|0);
  if ($118) {
   $119 = $19;
   $120 = $20;
   $121 = ($119|0)==($120|0);
   if ($121) {
    $22 = 0;
   }
  }
 }
 $24 = 0;
 while(1) {
  $122 = $24;
  $123 = $22;
  $124 = ($122|0)<($123|0);
  if (!($124)) {
   break;
  }
  $125 = $13;
  $126 = $24;
  $127 = $15;
  $128 = (($126) - ($127))|0;
  $129 = (($128) + 2)|0;
  $130 = (($125) + ($129<<2)|0);
  $131 = +HEAPF32[$130>>2];
  $31 = $131;
  $132 = $21;
  $133 = $24;
  $134 = (($132) + ($133<<2)|0);
  $135 = +HEAPF32[$134>>2];
  $136 = $21;
  $137 = $24;
  $138 = (($136) + ($137<<2)|0);
  $139 = +HEAPF32[$138>>2];
  $140 = $135 * $139;
  $36 = $140;
  $141 = $13;
  $142 = $24;
  $143 = (($141) + ($142<<2)|0);
  $144 = +HEAPF32[$143>>2];
  $145 = $36;
  $146 = 1.0 - $145;
  $147 = $25;
  $148 = $146 * $147;
  $149 = $13;
  $150 = $24;
  $151 = $14;
  $152 = (($150) - ($151))|0;
  $153 = (($149) + ($152<<2)|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $148 * $154;
  $156 = $144 + $155;
  $157 = $36;
  $158 = 1.0 - $157;
  $159 = $26;
  $160 = $158 * $159;
  $161 = $13;
  $162 = $24;
  $163 = $14;
  $164 = (($162) - ($163))|0;
  $165 = (($164) + 1)|0;
  $166 = (($161) + ($165<<2)|0);
  $167 = +HEAPF32[$166>>2];
  $168 = $13;
  $169 = $24;
  $170 = $14;
  $171 = (($169) - ($170))|0;
  $172 = (($171) - 1)|0;
  $173 = (($168) + ($172<<2)|0);
  $174 = +HEAPF32[$173>>2];
  $175 = $167 + $174;
  $176 = $160 * $175;
  $177 = $156 + $176;
  $178 = $36;
  $179 = 1.0 - $178;
  $180 = $27;
  $181 = $179 * $180;
  $182 = $13;
  $183 = $24;
  $184 = $14;
  $185 = (($183) - ($184))|0;
  $186 = (($185) + 2)|0;
  $187 = (($182) + ($186<<2)|0);
  $188 = +HEAPF32[$187>>2];
  $189 = $13;
  $190 = $24;
  $191 = $14;
  $192 = (($190) - ($191))|0;
  $193 = (($192) - 2)|0;
  $194 = (($189) + ($193<<2)|0);
  $195 = +HEAPF32[$194>>2];
  $196 = $188 + $195;
  $197 = $181 * $196;
  $198 = $177 + $197;
  $199 = $36;
  $200 = $28;
  $201 = $199 * $200;
  $202 = $33;
  $203 = $201 * $202;
  $204 = $198 + $203;
  $205 = $36;
  $206 = $29;
  $207 = $205 * $206;
  $208 = $32;
  $209 = $34;
  $210 = $208 + $209;
  $211 = $207 * $210;
  $212 = $204 + $211;
  $213 = $36;
  $214 = $30;
  $215 = $213 * $214;
  $216 = $31;
  $217 = $35;
  $218 = $216 + $217;
  $219 = $215 * $218;
  $220 = $212 + $219;
  $221 = $12;
  $222 = $24;
  $223 = (($221) + ($222<<2)|0);
  HEAPF32[$223>>2] = $220;
  $224 = $34;
  $35 = $224;
  $225 = $33;
  $34 = $225;
  $226 = $32;
  $33 = $226;
  $227 = $31;
  $32 = $227;
  $228 = $24;
  $229 = (($228) + 1)|0;
  $24 = $229;
 }
 $230 = $18;
 $231 = $230 == 0.0;
 if (!($231)) {
  $257 = $12;
  $258 = $24;
  $259 = (($257) + ($258<<2)|0);
  $260 = $13;
  $261 = $24;
  $262 = (($260) + ($261<<2)|0);
  $263 = $15;
  $264 = $16;
  $265 = $24;
  $266 = (($264) - ($265))|0;
  $267 = $28;
  $268 = $29;
  $269 = $30;
  _comb_filter_const_c($259,$262,$263,$266,$267,$268,$269);
  STACKTOP = sp;return;
 }
 $232 = $13;
 $233 = $12;
 $234 = ($232|0)!=($233|0);
 if (!($234)) {
  STACKTOP = sp;return;
 }
 $235 = $12;
 $236 = $22;
 $237 = (($235) + ($236<<2)|0);
 $238 = $13;
 $239 = $22;
 $240 = (($238) + ($239<<2)|0);
 $241 = $16;
 $242 = $22;
 $243 = (($241) - ($242))|0;
 $244 = $243<<2;
 $245 = $12;
 $246 = $22;
 $247 = (($245) + ($246<<2)|0);
 $248 = $13;
 $249 = $22;
 $250 = (($248) + ($249<<2)|0);
 $251 = $247;
 $252 = $250;
 $253 = (($251) - ($252))|0;
 $254 = (($253|0) / 4)&-1;
 $255 = 0;
 $256 = (($244) + ($255))|0;
 _memmove(($237|0),($240|0),($256|0))|0;
 STACKTOP = sp;return;
}
function _comb_filter_const_c($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $20 = $8;
 $21 = $9;
 $22 = (0 - ($21))|0;
 $23 = (($22) - 2)|0;
 $24 = (($20) + ($23<<2)|0);
 $25 = +HEAPF32[$24>>2];
 $18 = $25;
 $26 = $8;
 $27 = $9;
 $28 = (0 - ($27))|0;
 $29 = (($28) - 1)|0;
 $30 = (($26) + ($29<<2)|0);
 $31 = +HEAPF32[$30>>2];
 $17 = $31;
 $32 = $8;
 $33 = $9;
 $34 = (0 - ($33))|0;
 $35 = (($32) + ($34<<2)|0);
 $36 = +HEAPF32[$35>>2];
 $16 = $36;
 $37 = $8;
 $38 = $9;
 $39 = (0 - ($38))|0;
 $40 = (($39) + 1)|0;
 $41 = (($37) + ($40<<2)|0);
 $42 = +HEAPF32[$41>>2];
 $15 = $42;
 $19 = 0;
 while(1) {
  $43 = $19;
  $44 = $10;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $8;
  $47 = $19;
  $48 = $9;
  $49 = (($47) - ($48))|0;
  $50 = (($49) + 2)|0;
  $51 = (($46) + ($50<<2)|0);
  $52 = +HEAPF32[$51>>2];
  $14 = $52;
  $53 = $8;
  $54 = $19;
  $55 = (($53) + ($54<<2)|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $11;
  $58 = $16;
  $59 = $57 * $58;
  $60 = $56 + $59;
  $61 = $12;
  $62 = $15;
  $63 = $17;
  $64 = $62 + $63;
  $65 = $61 * $64;
  $66 = $60 + $65;
  $67 = $13;
  $68 = $14;
  $69 = $18;
  $70 = $68 + $69;
  $71 = $67 * $70;
  $72 = $66 + $71;
  $73 = $7;
  $74 = $19;
  $75 = (($73) + ($74<<2)|0);
  HEAPF32[$75>>2] = $72;
  $76 = $17;
  $18 = $76;
  $77 = $16;
  $17 = $77;
  $78 = $15;
  $16 = $78;
  $79 = $14;
  $15 = $79;
  $80 = $19;
  $81 = (($80) + 1)|0;
  $19 = $81;
 }
 STACKTOP = sp;return;
}
function _init_caps($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $4;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $8;
  $19 = (($18) + 1)|0;
  $20 = (($17) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $4;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $8;
  $27 = (($25) + ($26<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = (($22) - ($29))|0;
  $31 = $6;
  $32 = $30 << $31;
  $9 = $32;
  $33 = $4;
  $34 = ((($33)) + 92|0);
  $35 = ((($34)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $6;
  $41 = $40<<1;
  $42 = $7;
  $43 = (($41) + ($42))|0;
  $44 = (($43) - 1)|0;
  $45 = Math_imul($39, $44)|0;
  $46 = $8;
  $47 = (($45) + ($46))|0;
  $48 = (($36) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = (($50) + 64)|0;
  $52 = $7;
  $53 = Math_imul($51, $52)|0;
  $54 = $9;
  $55 = Math_imul($53, $54)|0;
  $56 = $55 >> 2;
  $57 = $5;
  $58 = $8;
  $59 = (($57) + ($58<<2)|0);
  HEAP32[$59>>2] = $56;
  $60 = $8;
  $61 = (($60) + 1)|0;
  $8 = $61;
 }
 STACKTOP = sp;return;
}
function _encode_pulses($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $7;
 $9 = $5;
 $10 = $4;
 $11 = (_icwrs($9,$10)|0);
 $12 = $5;
 $13 = $6;
 $14 = ($12|0)<($13|0);
 $15 = $5;
 $16 = $6;
 $17 = $14 ? $15 : $16;
 $18 = (17068 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = $6;
 $22 = ($20|0)>($21|0);
 $23 = $5;
 $24 = $6;
 $25 = $22 ? $23 : $24;
 $26 = (($19) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $5;
 $29 = $6;
 $30 = (($29) + 1)|0;
 $31 = ($28|0)<($30|0);
 $32 = $5;
 $33 = $6;
 $34 = (($33) + 1)|0;
 $35 = $31 ? $32 : $34;
 $36 = (17068 + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $5;
 $39 = $6;
 $40 = (($39) + 1)|0;
 $41 = ($38|0)>($40|0);
 $42 = $5;
 $43 = $6;
 $44 = (($43) + 1)|0;
 $45 = $41 ? $42 : $44;
 $46 = (($37) + ($45<<2)|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($27) + ($47))|0;
 _ec_enc_uint($8,$11,$48);
 STACKTOP = sp;return;
}
function _icwrs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = (($7) - 1)|0;
 $5 = $8;
 $9 = $3;
 $10 = $5;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(0);
 $14 = $13&1;
 $4 = $14;
 $15 = $3;
 $16 = $5;
 $17 = (($15) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (Math_abs(($18|0))|0);
 $6 = $19;
 while(1) {
  $20 = $5;
  $21 = (($20) + -1)|0;
  $5 = $21;
  $22 = $2;
  $23 = $5;
  $24 = (($22) - ($23))|0;
  $25 = $6;
  $26 = ($24|0)<($25|0);
  if ($26) {
   $27 = $2;
   $28 = $5;
   $29 = (($27) - ($28))|0;
   $32 = $29;
  } else {
   $30 = $6;
   $32 = $30;
  }
  $31 = (17068 + ($32<<2)|0);
  $33 = HEAP32[$31>>2]|0;
  $34 = $2;
  $35 = $5;
  $36 = (($34) - ($35))|0;
  $37 = $6;
  $38 = ($36|0)>($37|0);
  if ($38) {
   $39 = $2;
   $40 = $5;
   $41 = (($39) - ($40))|0;
   $44 = $41;
  } else {
   $42 = $6;
   $44 = $42;
  }
  $43 = (($33) + ($44<<2)|0);
  $45 = HEAP32[$43>>2]|0;
  $46 = $4;
  $47 = (($46) + ($45))|0;
  $4 = $47;
  $48 = $3;
  $49 = $5;
  $50 = (($48) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (Math_abs(($51|0))|0);
  $53 = $6;
  $54 = (($53) + ($52))|0;
  $6 = $54;
  $55 = $3;
  $56 = $5;
  $57 = (($55) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)<(0);
  if ($59) {
   $60 = $2;
   $61 = $5;
   $62 = (($60) - ($61))|0;
   $63 = $6;
   $64 = (($63) + 1)|0;
   $65 = ($62|0)<($64|0);
   if ($65) {
    $66 = $2;
    $67 = $5;
    $68 = (($66) - ($67))|0;
    $72 = $68;
   } else {
    $69 = $6;
    $70 = (($69) + 1)|0;
    $72 = $70;
   }
   $71 = (17068 + ($72<<2)|0);
   $73 = HEAP32[$71>>2]|0;
   $74 = $2;
   $75 = $5;
   $76 = (($74) - ($75))|0;
   $77 = $6;
   $78 = (($77) + 1)|0;
   $79 = ($76|0)>($78|0);
   if ($79) {
    $80 = $2;
    $81 = $5;
    $82 = (($80) - ($81))|0;
    $86 = $82;
   } else {
    $83 = $6;
    $84 = (($83) + 1)|0;
    $86 = $84;
   }
   $85 = (($73) + ($86<<2)|0);
   $87 = HEAP32[$85>>2]|0;
   $88 = $4;
   $89 = (($88) + ($87))|0;
   $4 = $89;
  }
  $90 = $5;
  $91 = ($90|0)>(0);
  if (!($91)) {
   break;
  }
 }
 $92 = $4;
 STACKTOP = sp;return ($92|0);
}
function _decode_pulses($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = $7;
 $11 = $5;
 $12 = $6;
 $13 = ($11|0)<($12|0);
 $14 = $5;
 $15 = $6;
 $16 = $13 ? $14 : $15;
 $17 = (17068 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $20 = $6;
 $21 = ($19|0)>($20|0);
 $22 = $5;
 $23 = $6;
 $24 = $21 ? $22 : $23;
 $25 = (($18) + ($24<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $5;
 $28 = $6;
 $29 = (($28) + 1)|0;
 $30 = ($27|0)<($29|0);
 $31 = $5;
 $32 = $6;
 $33 = (($32) + 1)|0;
 $34 = $30 ? $31 : $33;
 $35 = (17068 + ($34<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $5;
 $38 = $6;
 $39 = (($38) + 1)|0;
 $40 = ($37|0)>($39|0);
 $41 = $5;
 $42 = $6;
 $43 = (($42) + 1)|0;
 $44 = $40 ? $41 : $43;
 $45 = (($36) + ($44<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($26) + ($46))|0;
 $48 = (_ec_dec_uint($10,$47)|0);
 $49 = $4;
 $50 = (+_cwrsi($8,$9,$48,$49));
 STACKTOP = sp;return (+$50);
}
function _cwrsi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = 0.0;
 while(1) {
  $15 = $4;
  $16 = ($15|0)>(2);
  $17 = $5;
  if (!($16)) {
   break;
  }
  $18 = $4;
  $19 = ($17|0)>=($18|0);
  do {
   if ($19) {
    $20 = $4;
    $21 = (17068 + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $14 = $22;
    $23 = $14;
    $24 = $5;
    $25 = (($24) + 1)|0;
    $26 = (($23) + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $8 = $27;
    $28 = $6;
    $29 = $8;
    $30 = ($28>>>0)>=($29>>>0);
    $31 = $30&1;
    $32 = (0 - ($31))|0;
    $9 = $32;
    $33 = $8;
    $34 = $9;
    $35 = $33 & $34;
    $36 = $6;
    $37 = (($36) - ($35))|0;
    $6 = $37;
    $38 = $5;
    $10 = $38;
    $39 = $14;
    $40 = $4;
    $41 = (($39) + ($40<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $13 = $42;
    $43 = $13;
    $44 = $6;
    $45 = ($43>>>0)>($44>>>0);
    L6: do {
     if ($45) {
      $46 = $4;
      $5 = $46;
      while(1) {
       $47 = $5;
       $48 = (($47) + -1)|0;
       $5 = $48;
       $49 = (17068 + ($48<<2)|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = $4;
       $52 = (($50) + ($51<<2)|0);
       $53 = HEAP32[$52>>2]|0;
       $8 = $53;
       $54 = $8;
       $55 = $6;
       $56 = ($54>>>0)>($55>>>0);
       if (!($56)) {
        break;
       }
      }
     } else {
      $57 = $14;
      $58 = $5;
      $59 = (($57) + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $8 = $60;
      while(1) {
       $61 = $8;
       $62 = $6;
       $63 = ($61>>>0)>($62>>>0);
       if (!($63)) {
        break L6;
       }
       $64 = $5;
       $65 = (($64) + -1)|0;
       $5 = $65;
       $66 = $14;
       $67 = $5;
       $68 = (($66) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $8 = $69;
      }
     }
    } while(0);
    $70 = $8;
    $71 = $6;
    $72 = (($71) - ($70))|0;
    $6 = $72;
    $73 = $10;
    $74 = $5;
    $75 = (($73) - ($74))|0;
    $76 = $9;
    $77 = (($75) + ($76))|0;
    $78 = $9;
    $79 = $77 ^ $78;
    $80 = $79&65535;
    $11 = $80;
    $81 = $11;
    $82 = $81 << 16 >> 16;
    $83 = $7;
    $84 = ((($83)) + 4|0);
    $7 = $84;
    HEAP32[$83>>2] = $82;
    $85 = $12;
    $86 = $11;
    $87 = (+($86<<16>>16));
    $88 = $11;
    $89 = (+($88<<16>>16));
    $90 = $87 * $89;
    $91 = $85 + $90;
    $12 = $91;
   } else {
    $92 = $5;
    $93 = (17068 + ($92<<2)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $4;
    $96 = (($94) + ($95<<2)|0);
    $97 = HEAP32[$96>>2]|0;
    $8 = $97;
    $98 = $5;
    $99 = (($98) + 1)|0;
    $100 = (17068 + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $4;
    $103 = (($101) + ($102<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $13 = $104;
    $105 = $8;
    $106 = $6;
    $107 = ($105>>>0)<=($106>>>0);
    if ($107) {
     $108 = $6;
     $109 = $13;
     $110 = ($108>>>0)<($109>>>0);
     if ($110) {
      $111 = $8;
      $112 = $6;
      $113 = (($112) - ($111))|0;
      $6 = $113;
      $114 = $7;
      $115 = ((($114)) + 4|0);
      $7 = $115;
      HEAP32[$114>>2] = 0;
      break;
     }
    }
    $116 = $6;
    $117 = $13;
    $118 = ($116>>>0)>=($117>>>0);
    $119 = $118&1;
    $120 = (0 - ($119))|0;
    $9 = $120;
    $121 = $13;
    $122 = $9;
    $123 = $121 & $122;
    $124 = $6;
    $125 = (($124) - ($123))|0;
    $6 = $125;
    $126 = $5;
    $10 = $126;
    while(1) {
     $127 = $5;
     $128 = (($127) + -1)|0;
     $5 = $128;
     $129 = (17068 + ($128<<2)|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $4;
     $132 = (($130) + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $8 = $133;
     $134 = $8;
     $135 = $6;
     $136 = ($134>>>0)>($135>>>0);
     if (!($136)) {
      break;
     }
    }
    $137 = $8;
    $138 = $6;
    $139 = (($138) - ($137))|0;
    $6 = $139;
    $140 = $10;
    $141 = $5;
    $142 = (($140) - ($141))|0;
    $143 = $9;
    $144 = (($142) + ($143))|0;
    $145 = $9;
    $146 = $144 ^ $145;
    $147 = $146&65535;
    $11 = $147;
    $148 = $11;
    $149 = $148 << 16 >> 16;
    $150 = $7;
    $151 = ((($150)) + 4|0);
    $7 = $151;
    HEAP32[$150>>2] = $149;
    $152 = $12;
    $153 = $11;
    $154 = (+($153<<16>>16));
    $155 = $11;
    $156 = (+($155<<16>>16));
    $157 = $154 * $156;
    $158 = $152 + $157;
    $12 = $158;
   }
  } while(0);
  $159 = $4;
  $160 = (($159) + -1)|0;
  $4 = $160;
 }
 $161 = $17<<1;
 $162 = (($161) + 1)|0;
 $8 = $162;
 $163 = $6;
 $164 = $8;
 $165 = ($163>>>0)>=($164>>>0);
 $166 = $165&1;
 $167 = (0 - ($166))|0;
 $9 = $167;
 $168 = $8;
 $169 = $9;
 $170 = $168 & $169;
 $171 = $6;
 $172 = (($171) - ($170))|0;
 $6 = $172;
 $173 = $5;
 $10 = $173;
 $174 = $6;
 $175 = (($174) + 1)|0;
 $176 = $175 >>> 1;
 $5 = $176;
 $177 = $5;
 $178 = ($177|0)!=(0);
 if (!($178)) {
  $184 = $10;
  $185 = $5;
  $186 = (($184) - ($185))|0;
  $187 = $9;
  $188 = (($186) + ($187))|0;
  $189 = $9;
  $190 = $188 ^ $189;
  $191 = $190&65535;
  $11 = $191;
  $192 = $11;
  $193 = $192 << 16 >> 16;
  $194 = $7;
  $195 = ((($194)) + 4|0);
  $7 = $195;
  HEAP32[$194>>2] = $193;
  $196 = $12;
  $197 = $11;
  $198 = (+($197<<16>>16));
  $199 = $11;
  $200 = (+($199<<16>>16));
  $201 = $198 * $200;
  $202 = $196 + $201;
  $12 = $202;
  $203 = $6;
  $204 = (0 - ($203))|0;
  $9 = $204;
  $205 = $5;
  $206 = $9;
  $207 = (($205) + ($206))|0;
  $208 = $9;
  $209 = $207 ^ $208;
  $210 = $209&65535;
  $11 = $210;
  $211 = $11;
  $212 = $211 << 16 >> 16;
  $213 = $7;
  HEAP32[$213>>2] = $212;
  $214 = $12;
  $215 = $11;
  $216 = (+($215<<16>>16));
  $217 = $11;
  $218 = (+($217<<16>>16));
  $219 = $216 * $218;
  $220 = $214 + $219;
  $12 = $220;
  $221 = $12;
  STACKTOP = sp;return (+$221);
 }
 $179 = $5;
 $180 = $179<<1;
 $181 = (($180) - 1)|0;
 $182 = $6;
 $183 = (($182) - ($181))|0;
 $6 = $183;
 $184 = $10;
 $185 = $5;
 $186 = (($184) - ($185))|0;
 $187 = $9;
 $188 = (($186) + ($187))|0;
 $189 = $9;
 $190 = $188 ^ $189;
 $191 = $190&65535;
 $11 = $191;
 $192 = $11;
 $193 = $192 << 16 >> 16;
 $194 = $7;
 $195 = ((($194)) + 4|0);
 $7 = $195;
 HEAP32[$194>>2] = $193;
 $196 = $12;
 $197 = $11;
 $198 = (+($197<<16>>16));
 $199 = $11;
 $200 = (+($199<<16>>16));
 $201 = $198 * $200;
 $202 = $196 + $201;
 $12 = $202;
 $203 = $6;
 $204 = (0 - ($203))|0;
 $9 = $204;
 $205 = $5;
 $206 = $9;
 $207 = (($205) + ($206))|0;
 $208 = $9;
 $209 = $207 ^ $208;
 $210 = $209&65535;
 $11 = $210;
 $211 = $11;
 $212 = $211 << 16 >> 16;
 $213 = $7;
 HEAP32[$213>>2] = $212;
 $214 = $12;
 $215 = $11;
 $216 = (+($215<<16>>16));
 $217 = $11;
 $218 = (+($217<<16>>16));
 $219 = $216 * $218;
 $220 = $214 + $219;
 $12 = $220;
 $221 = $12;
 STACKTOP = sp;return (+$221);
}
function _ec_laplace_encode($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $5;
 $15 = HEAP32[$14>>2]|0;
 $9 = $15;
 $8 = 0;
 $16 = $9;
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $100 = $4;
  $101 = $8;
  $102 = $8;
  $103 = $6;
  $104 = (($102) + ($103))|0;
  _ec_encode_bin($100,$101,$104,15);
  STACKTOP = sp;return;
 }
 $18 = $9;
 $19 = ($18|0)<(0);
 $20 = $19&1;
 $21 = (0 - ($20))|0;
 $10 = $21;
 $22 = $9;
 $23 = $10;
 $24 = (($22) + ($23))|0;
 $25 = $10;
 $26 = $24 ^ $25;
 $9 = $26;
 $27 = $6;
 $8 = $27;
 $28 = $6;
 $29 = $7;
 $30 = (_ec_laplace_get_freq1($28,$29)|0);
 $6 = $30;
 $11 = 1;
 while(1) {
  $31 = $6;
  $32 = ($31>>>0)>(0);
  if ($32) {
   $33 = $11;
   $34 = $9;
   $35 = ($33|0)<($34|0);
   $105 = $35;
  } else {
   $105 = 0;
  }
  $36 = $6;
  if (!($105)) {
   break;
  }
  $37 = $36<<1;
  $6 = $37;
  $38 = $6;
  $39 = (($38) + 2)|0;
  $40 = $8;
  $41 = (($40) + ($39))|0;
  $8 = $41;
  $42 = $6;
  $43 = $7;
  $44 = Math_imul($42, $43)|0;
  $45 = $44 >>> 15;
  $6 = $45;
  $46 = $11;
  $47 = (($46) + 1)|0;
  $11 = $47;
 }
 $48 = ($36|0)!=(0);
 if ($48) {
  $92 = $6;
  $93 = (($92) + 1)|0;
  $6 = $93;
  $94 = $6;
  $95 = $10;
  $96 = $95 ^ -1;
  $97 = $94 & $96;
  $98 = $8;
  $99 = (($98) + ($97))|0;
  $8 = $99;
  $100 = $4;
  $101 = $8;
  $102 = $8;
  $103 = $6;
  $104 = (($102) + ($103))|0;
  _ec_encode_bin($100,$101,$104,15);
  STACKTOP = sp;return;
 }
 $49 = $8;
 $50 = (32768 - ($49))|0;
 $51 = (($50) + 1)|0;
 $52 = (($51) - 1)|0;
 $53 = $52 >>> 0;
 $13 = $53;
 $54 = $13;
 $55 = $10;
 $56 = (($54) - ($55))|0;
 $57 = $56 >> 1;
 $13 = $57;
 $58 = $9;
 $59 = $11;
 $60 = (($58) - ($59))|0;
 $61 = $13;
 $62 = (($61) - 1)|0;
 $63 = ($60|0)<($62|0);
 if ($63) {
  $64 = $9;
  $65 = $11;
  $66 = (($64) - ($65))|0;
  $69 = $66;
 } else {
  $67 = $13;
  $68 = (($67) - 1)|0;
  $69 = $68;
 }
 $12 = $69;
 $70 = $12;
 $71 = $70<<1;
 $72 = (($71) + 1)|0;
 $73 = $10;
 $74 = (($72) + ($73))|0;
 $75 = $74;
 $76 = $8;
 $77 = (($76) + ($75))|0;
 $8 = $77;
 $78 = $8;
 $79 = (32768 - ($78))|0;
 $80 = (1)<($79>>>0);
 $81 = $8;
 $82 = (32768 - ($81))|0;
 $83 = $80 ? 1 : $82;
 $6 = $83;
 $84 = $11;
 $85 = $12;
 $86 = (($84) + ($85))|0;
 $87 = $10;
 $88 = (($86) + ($87))|0;
 $89 = $10;
 $90 = $88 ^ $89;
 $91 = $5;
 HEAP32[$91>>2] = $90;
 $100 = $4;
 $101 = $8;
 $102 = $8;
 $103 = $6;
 $104 = (($102) + ($103))|0;
 _ec_encode_bin($100,$101,$104,15);
 STACKTOP = sp;return;
}
function _ec_laplace_get_freq1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (32736 - ($5))|0;
 $4 = $6;
 $7 = $4;
 $8 = $3;
 $9 = (16384 - ($8))|0;
 $10 = Math_imul($7, $9)|0;
 $11 = $10 >>> 15;
 STACKTOP = sp;return ($11|0);
}
function _ec_laplace_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 $10 = $3;
 $11 = (_ec_decode_bin($10,15)|0);
 $8 = $11;
 $7 = 0;
 $12 = $8;
 $13 = $4;
 $14 = ($12>>>0)>=($13>>>0);
 do {
  if ($14) {
   $15 = $6;
   $16 = (($15) + 1)|0;
   $6 = $16;
   $17 = $4;
   $7 = $17;
   $18 = $4;
   $19 = $5;
   $20 = (_ec_laplace_get_freq1($18,$19)|0);
   $21 = (($20) + 1)|0;
   $4 = $21;
   while(1) {
    $22 = $4;
    $23 = ($22>>>0)>(1);
    if ($23) {
     $24 = $8;
     $25 = $7;
     $26 = $4;
     $27 = $26<<1;
     $28 = (($25) + ($27))|0;
     $29 = ($24>>>0)>=($28>>>0);
     $78 = $29;
    } else {
     $78 = 0;
    }
    $30 = $4;
    if (!($78)) {
     break;
    }
    $31 = $30<<1;
    $4 = $31;
    $32 = $4;
    $33 = $7;
    $34 = (($33) + ($32))|0;
    $7 = $34;
    $35 = $4;
    $36 = (($35) - 2)|0;
    $37 = $5;
    $38 = Math_imul($36, $37)|0;
    $39 = $38 >>> 15;
    $4 = $39;
    $40 = $4;
    $41 = (($40) + 1)|0;
    $4 = $41;
    $42 = $6;
    $43 = (($42) + 1)|0;
    $6 = $43;
   }
   $44 = ($30>>>0)<=(1);
   if ($44) {
    $45 = $8;
    $46 = $7;
    $47 = (($45) - ($46))|0;
    $48 = $47 >>> 1;
    $9 = $48;
    $49 = $9;
    $50 = $6;
    $51 = (($50) + ($49))|0;
    $6 = $51;
    $52 = $9;
    $53 = $52<<1;
    $54 = $53;
    $55 = $7;
    $56 = (($55) + ($54))|0;
    $7 = $56;
   }
   $57 = $8;
   $58 = $7;
   $59 = $4;
   $60 = (($58) + ($59))|0;
   $61 = ($57>>>0)<($60>>>0);
   if ($61) {
    $62 = $6;
    $63 = (0 - ($62))|0;
    $6 = $63;
    break;
   } else {
    $64 = $4;
    $65 = $7;
    $66 = (($65) + ($64))|0;
    $7 = $66;
    break;
   }
  }
 } while(0);
 $67 = $3;
 $68 = $7;
 $69 = $7;
 $70 = $4;
 $71 = (($69) + ($70))|0;
 $72 = ($71>>>0)<(32768);
 if (!($72)) {
  $76 = 32768;
  _ec_dec_update($67,$68,$76,32768);
  $77 = $6;
  STACKTOP = sp;return ($77|0);
 }
 $73 = $7;
 $74 = $4;
 $75 = (($73) + ($74))|0;
 $76 = $75;
 _ec_dec_update($67,$68,$76,32768);
 $77 = $6;
 STACKTOP = sp;return ($77|0);
}
function _isqrt32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $3 = 0;
 $6 = $1;
 $7 = (Math_clz32(($6|0))|0);
 $8 = (32 - ($7))|0;
 $9 = (($8) - 1)|0;
 $10 = $9 >> 1;
 $4 = $10;
 $11 = $4;
 $12 = 1 << $11;
 $2 = $12;
 while(1) {
  $13 = $3;
  $14 = $13 << 1;
  $15 = $2;
  $16 = (($14) + ($15))|0;
  $17 = $4;
  $18 = $16 << $17;
  $5 = $18;
  $19 = $5;
  $20 = $1;
  $21 = ($19>>>0)<=($20>>>0);
  if ($21) {
   $22 = $2;
   $23 = $3;
   $24 = (($23) + ($22))|0;
   $3 = $24;
   $25 = $5;
   $26 = $1;
   $27 = (($26) - ($25))|0;
   $1 = $27;
  }
  $28 = $2;
  $29 = $28 >>> 1;
  $2 = $29;
  $30 = $4;
  $31 = (($30) + -1)|0;
  $4 = $31;
  $32 = $4;
  $33 = ($32|0)>=(0);
  if (!($33)) {
   break;
  }
 }
 $34 = $3;
 STACKTOP = sp;return ($34|0);
}
function _silk_encode_signs($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $15 = sp + 44|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = ((($15)) + 1|0);
 HEAP8[$18>>0] = 0;
 $19 = $7;
 $16 = $19;
 $20 = $10;
 $21 = $9;
 $22 = $21 << 1;
 $23 = (($20) + ($22))|0;
 $24 = $23&65535;
 $25 = $24 << 16 >> 16;
 $26 = ($25*7)|0;
 $12 = $26;
 $27 = $12;
 $28 = (28863 + ($27)|0);
 $17 = $28;
 $29 = $8;
 $30 = (($29) + 8)|0;
 $31 = $30 >> 4;
 $8 = $31;
 $12 = 0;
 while(1) {
  $32 = $12;
  $33 = $8;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $11;
  $36 = $12;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $14 = $38;
  $39 = $14;
  $40 = ($39|0)>(0);
  L4: do {
   if ($40) {
    $41 = $17;
    $42 = $14;
    $43 = $42 & 31;
    $44 = ($43|0)<(6);
    $45 = $14;
    $46 = $45 & 31;
    $47 = $44 ? $46 : 6;
    $48 = (($41) + ($47)|0);
    $49 = HEAP8[$48>>0]|0;
    HEAP8[$15>>0] = $49;
    $13 = 0;
    while(1) {
     $50 = $13;
     $51 = ($50|0)<(16);
     if (!($51)) {
      break L4;
     }
     $52 = $16;
     $53 = $13;
     $54 = (($52) + ($53)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = $55 << 24 >> 24;
     $57 = ($56|0)!=(0);
     if ($57) {
      $58 = $6;
      $59 = $16;
      $60 = $13;
      $61 = (($59) + ($60)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62 << 24 >> 24;
      $64 = $63 >> 15;
      $65 = (($64) + 1)|0;
      _ec_enc_icdf($58,$65,$15,8);
     }
     $66 = $13;
     $67 = (($66) + 1)|0;
     $13 = $67;
    }
   }
  } while(0);
  $68 = $16;
  $69 = ((($68)) + 16|0);
  $16 = $69;
  $70 = $12;
  $71 = (($70) + 1)|0;
  $12 = $71;
 }
 STACKTOP = sp;return;
}
function _silk_decode_signs($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $15 = sp + 44|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $18 = ((($15)) + 1|0);
 HEAP8[$18>>0] = 0;
 $19 = $7;
 $16 = $19;
 $20 = $10;
 $21 = $9;
 $22 = $21 << 1;
 $23 = (($20) + ($22))|0;
 $24 = $23&65535;
 $25 = $24 << 16 >> 16;
 $26 = ($25*7)|0;
 $12 = $26;
 $27 = $12;
 $28 = (28863 + ($27)|0);
 $17 = $28;
 $29 = $8;
 $30 = (($29) + 8)|0;
 $31 = $30 >> 4;
 $8 = $31;
 $12 = 0;
 while(1) {
  $32 = $12;
  $33 = $8;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $11;
  $36 = $12;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $14 = $38;
  $39 = $14;
  $40 = ($39|0)>(0);
  L4: do {
   if ($40) {
    $41 = $17;
    $42 = $14;
    $43 = $42 & 31;
    $44 = ($43|0)<(6);
    $45 = $14;
    $46 = $45 & 31;
    $47 = $44 ? $46 : 6;
    $48 = (($41) + ($47)|0);
    $49 = HEAP8[$48>>0]|0;
    HEAP8[$15>>0] = $49;
    $13 = 0;
    while(1) {
     $50 = $13;
     $51 = ($50|0)<(16);
     if (!($51)) {
      break L4;
     }
     $52 = $16;
     $53 = $13;
     $54 = (($52) + ($53<<1)|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)>(0);
     if ($57) {
      $58 = $6;
      $59 = (_ec_dec_icdf($58,$15,8)|0);
      $60 = $59 << 1;
      $61 = (($60) - 1)|0;
      $62 = $16;
      $63 = $13;
      $64 = (($62) + ($63<<1)|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65 << 16 >> 16;
      $67 = Math_imul($66, $61)|0;
      $68 = $67&65535;
      HEAP16[$64>>1] = $68;
     }
     $69 = $13;
     $70 = (($69) + 1)|0;
     $13 = $70;
    }
   }
  } while(0);
  $71 = $16;
  $72 = ((($71)) + 32|0);
  $16 = $72;
  $73 = $12;
  $74 = (($73) + 1)|0;
  $12 = $74;
 }
 STACKTOP = sp;return;
}
function _silk_init_decoder($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _memset(($2|0),0,4260)|0;
 $3 = $1;
 $4 = ((($3)) + 2376|0);
 HEAP32[$4>>2] = 1;
 $5 = $1;
 HEAP32[$5>>2] = 65536;
 $6 = $1;
 _silk_CNG_Reset($6);
 $7 = $1;
 _silk_PLC_Reset($7);
 STACKTOP = sp;return 0;
}
function _silk_decode_frame($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $17 = sp + 4|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $16 = 0;
 $19 = $7;
 $20 = ((($19)) + 2328|0);
 $21 = HEAP32[$20>>2]|0;
 $14 = $21;
 $22 = ((($17)) + 136|0);
 HEAP32[$22>>2] = 0;
 $23 = $11;
 $24 = ($23|0)==(0);
 do {
  if ($24) {
   label = 4;
  } else {
   $25 = $11;
   $26 = ($25|0)==(2);
   if ($26) {
    $27 = $7;
    $28 = ((($27)) + 2420|0);
    $29 = $7;
    $30 = ((($29)) + 2388|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($28) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(1);
    if ($34) {
     label = 4;
     break;
    }
   }
   $82 = $7;
   $83 = $9;
   $84 = $13;
   _silk_PLC($82,$17,$83,1,$84);
  }
 } while(0);
 if ((label|0) == 4) {
  $35 = $14;
  $36 = (($35) + 16)|0;
  $37 = (($36) - 1)|0;
  $38 = $37 & -16;
  $39 = (_llvm_stacksave()|0);
  $18 = $39;
  $$alloca_mul = $38<<1;
  $40 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
  $41 = $7;
  $42 = $8;
  $43 = $7;
  $44 = ((($43)) + 2388|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $11;
  $47 = $12;
  _silk_decode_indices($41,$42,$45,$46,$47);
  $48 = $8;
  $49 = $7;
  $50 = ((($49)) + 2736|0);
  $51 = ((($50)) + 29|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = $7;
  $55 = ((($54)) + 2736|0);
  $56 = ((($55)) + 30|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = $7;
  $60 = ((($59)) + 2328|0);
  $61 = HEAP32[$60>>2]|0;
  _silk_decode_pulses($48,$40,$53,$58,$61);
  $62 = $7;
  $63 = $12;
  _silk_decode_parameters($62,$17,$63);
  $64 = $7;
  $65 = $9;
  $66 = $13;
  _silk_decode_core($64,$17,$65,$40,$66);
  $67 = $7;
  $68 = $9;
  $69 = $13;
  _silk_PLC($67,$17,$68,0,$69);
  $70 = $7;
  $71 = ((($70)) + 4160|0);
  HEAP32[$71>>2] = 0;
  $72 = $7;
  $73 = ((($72)) + 2736|0);
  $74 = ((($73)) + 29|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75 << 24 >> 24;
  $77 = $7;
  $78 = ((($77)) + 4164|0);
  HEAP32[$78>>2] = $76;
  $79 = $7;
  $80 = ((($79)) + 2376|0);
  HEAP32[$80>>2] = 0;
  $81 = $18;
  _llvm_stackrestore(($81|0));
 }
 $85 = $7;
 $86 = ((($85)) + 2336|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $7;
 $89 = ((($88)) + 2328|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($87) - ($90))|0;
 $15 = $91;
 $92 = $7;
 $93 = ((($92)) + 1348|0);
 $94 = $7;
 $95 = ((($94)) + 1348|0);
 $96 = $7;
 $97 = ((($96)) + 2328|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (($95) + ($98<<1)|0);
 $100 = $15;
 $101 = $100<<1;
 _memmove(($93|0),($99|0),($101|0))|0;
 $102 = $7;
 $103 = ((($102)) + 1348|0);
 $104 = $15;
 $105 = (($103) + ($104<<1)|0);
 $106 = $9;
 $107 = $7;
 $108 = ((($107)) + 2328|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109<<1;
 _memcpy(($105|0),($106|0),($110|0))|0;
 $111 = $7;
 $112 = $9;
 $113 = $14;
 _silk_CNG($111,$17,$112,$113);
 $114 = $7;
 $115 = $9;
 $116 = $14;
 _silk_PLC_glue_frames($114,$115,$116);
 $117 = $7;
 $118 = ((($117)) + 2324|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (($119) - 1)|0;
 $121 = (($17) + ($120<<2)|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $7;
 $124 = ((($123)) + 2308|0);
 HEAP32[$124>>2] = $122;
 $125 = $14;
 $126 = $10;
 HEAP32[$126>>2] = $125;
 $127 = $16;
 STACKTOP = sp;return ($127|0);
}
function _silk_decode_parameters($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 64|0;
 $10 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $4;
 $13 = ((($12)) + 16|0);
 $14 = $3;
 $15 = ((($14)) + 2736|0);
 $16 = $3;
 $17 = ((($16)) + 2312|0);
 $18 = $5;
 $19 = ($18|0)==(2);
 $20 = $19&1;
 $21 = $3;
 $22 = ((($21)) + 2324|0);
 $23 = HEAP32[$22>>2]|0;
 _silk_gains_dequant($13,$15,$17,$20,$23);
 $24 = $3;
 $25 = ((($24)) + 2736|0);
 $26 = ((($25)) + 8|0);
 $27 = $3;
 $28 = ((($27)) + 2732|0);
 $29 = HEAP32[$28>>2]|0;
 _silk_NLSF_decode($9,$26,$29);
 $30 = $4;
 $31 = ((($30)) + 32|0);
 $32 = ((($31)) + 32|0);
 $33 = $3;
 $34 = ((($33)) + 2340|0);
 $35 = HEAP32[$34>>2]|0;
 _silk_NLSF2A($32,$9,$35);
 $36 = $3;
 $37 = ((($36)) + 2376|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  $40 = $3;
  $41 = ((($40)) + 2736|0);
  $42 = ((($41)) + 31|0);
  HEAP8[$42>>0] = 4;
 }
 $43 = $3;
 $44 = ((($43)) + 2736|0);
 $45 = ((($44)) + 31|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 << 24 >> 24;
 $48 = ($47|0)<(4);
 if ($48) {
  $6 = 0;
  while(1) {
   $49 = $6;
   $50 = $3;
   $51 = ((($50)) + 2340|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($49|0)<($52|0);
   if (!($53)) {
    break;
   }
   $54 = $3;
   $55 = ((($54)) + 2344|0);
   $56 = $6;
   $57 = (($55) + ($56<<1)|0);
   $58 = HEAP16[$57>>1]|0;
   $59 = $58 << 16 >> 16;
   $60 = $3;
   $61 = ((($60)) + 2736|0);
   $62 = ((($61)) + 31|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63 << 24 >> 24;
   $65 = $6;
   $66 = (($9) + ($65<<1)|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = $3;
   $70 = ((($69)) + 2344|0);
   $71 = $6;
   $72 = (($70) + ($71<<1)|0);
   $73 = HEAP16[$72>>1]|0;
   $74 = $73 << 16 >> 16;
   $75 = (($68) - ($74))|0;
   $76 = Math_imul($64, $75)|0;
   $77 = $76 >> 2;
   $78 = (($59) + ($77))|0;
   $79 = $78&65535;
   $80 = $6;
   $81 = (($10) + ($80<<1)|0);
   HEAP16[$81>>1] = $79;
   $82 = $6;
   $83 = (($82) + 1)|0;
   $6 = $83;
  }
  $84 = $4;
  $85 = ((($84)) + 32|0);
  $86 = $3;
  $87 = ((($86)) + 2340|0);
  $88 = HEAP32[$87>>2]|0;
  _silk_NLSF2A($85,$10,$88);
 } else {
  $89 = $4;
  $90 = ((($89)) + 32|0);
  $91 = $4;
  $92 = ((($91)) + 32|0);
  $93 = ((($92)) + 32|0);
  $94 = $3;
  $95 = ((($94)) + 2340|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $96<<1;
  _memcpy(($90|0),($93|0),($97|0))|0;
 }
 $98 = $3;
 $99 = ((($98)) + 2344|0);
 $100 = $3;
 $101 = ((($100)) + 2340|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $102<<1;
 _memcpy(($99|0),($9|0),($103|0))|0;
 $104 = $3;
 $105 = ((($104)) + 4160|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0);
 if ($107) {
  $108 = $4;
  $109 = ((($108)) + 32|0);
  $110 = $3;
  $111 = ((($110)) + 2340|0);
  $112 = HEAP32[$111>>2]|0;
  _silk_bwexpander($109,$112,63570);
  $113 = $4;
  $114 = ((($113)) + 32|0);
  $115 = ((($114)) + 32|0);
  $116 = $3;
  $117 = ((($116)) + 2340|0);
  $118 = HEAP32[$117>>2]|0;
  _silk_bwexpander($115,$118,63570);
 }
 $119 = $3;
 $120 = ((($119)) + 2736|0);
 $121 = ((($120)) + 29|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122 << 24 >> 24;
 $124 = ($123|0)==(2);
 if (!($124)) {
  $190 = $4;
  $191 = $3;
  $192 = ((($191)) + 2324|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $193<<2;
  _memset(($190|0),0,($194|0))|0;
  $195 = $4;
  $196 = ((($195)) + 96|0);
  $197 = $3;
  $198 = ((($197)) + 2324|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = ($199*5)|0;
  $201 = $200<<1;
  _memset(($196|0),0,($201|0))|0;
  $202 = $3;
  $203 = ((($202)) + 2736|0);
  $204 = ((($203)) + 32|0);
  HEAP8[$204>>0] = 0;
  $205 = $4;
  $$sink = 0;$$sink2 = $205;
  $206 = ((($$sink2)) + 136|0);
  HEAP32[$206>>2] = $$sink;
  STACKTOP = sp;return;
 }
 $125 = $3;
 $126 = ((($125)) + 2736|0);
 $127 = ((($126)) + 26|0);
 $128 = HEAP16[$127>>1]|0;
 $129 = $3;
 $130 = ((($129)) + 2736|0);
 $131 = ((($130)) + 28|0);
 $132 = HEAP8[$131>>0]|0;
 $133 = $4;
 $134 = $3;
 $135 = ((($134)) + 2316|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $3;
 $138 = ((($137)) + 2324|0);
 $139 = HEAP32[$138>>2]|0;
 _silk_decode_pitch($128,$132,$133,$136,$139);
 $140 = $3;
 $141 = ((($140)) + 2736|0);
 $142 = ((($141)) + 32|0);
 $143 = HEAP8[$142>>0]|0;
 $144 = $143 << 24 >> 24;
 $145 = (16684 + ($144<<2)|0);
 $146 = HEAP32[$145>>2]|0;
 $11 = $146;
 $7 = 0;
 while(1) {
  $147 = $7;
  $148 = $3;
  $149 = ((($148)) + 2324|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = ($147|0)<($150|0);
  $152 = $3;
  $153 = ((($152)) + 2736|0);
  if (!($151)) {
   break;
  }
  $154 = ((($153)) + 4|0);
  $155 = $7;
  $156 = (($154) + ($155)|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157 << 24 >> 24;
  $8 = $158;
  $6 = 0;
  while(1) {
   $159 = $6;
   $160 = ($159|0)<(5);
   if (!($160)) {
    break;
   }
   $161 = $11;
   $162 = $8;
   $163 = ($162*5)|0;
   $164 = $6;
   $165 = (($163) + ($164))|0;
   $166 = (($161) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167 << 24 >> 24;
   $169 = $168 << 7;
   $170 = $169&65535;
   $171 = $4;
   $172 = ((($171)) + 96|0);
   $173 = $7;
   $174 = ($173*5)|0;
   $175 = $6;
   $176 = (($174) + ($175))|0;
   $177 = (($172) + ($176<<1)|0);
   HEAP16[$177>>1] = $170;
   $178 = $6;
   $179 = (($178) + 1)|0;
   $6 = $179;
  }
  $180 = $7;
  $181 = (($180) + 1)|0;
  $7 = $181;
 }
 $182 = ((($153)) + 33|0);
 $183 = HEAP8[$182>>0]|0;
 $184 = $183 << 24 >> 24;
 $8 = $184;
 $185 = $8;
 $186 = (25006 + ($185<<1)|0);
 $187 = HEAP16[$186>>1]|0;
 $188 = $187 << 16 >> 16;
 $189 = $4;
 $$sink = $188;$$sink2 = $189;
 $206 = ((($$sink2)) + 136|0);
 HEAP32[$206>>2] = $$sink;
 STACKTOP = sp;return;
}
function _silk_decode_indices($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink3 = 0, $$sink4 = 0, $$sink7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $15 = sp + 40|0;
 $16 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = $8;
 $18 = ($17|0)!=(0);
 if ($18) {
  label = 3;
 } else {
  $19 = $5;
  $20 = ((($19)) + 2404|0);
  $21 = $7;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if ($24) {
   label = 3;
  } else {
   $28 = $6;
   $29 = (_ec_dec_icdf($28,27703,8)|0);
   $12 = $29;
  }
 }
 if ((label|0) == 3) {
  $25 = $6;
  $26 = (_ec_dec_icdf($25,27699,8)|0);
  $27 = (($26) + 2)|0;
  $12 = $27;
 }
 $30 = $12;
 $31 = $30 >> 1;
 $32 = $31&255;
 $33 = $5;
 $34 = ((($33)) + 2736|0);
 $35 = ((($34)) + 29|0);
 HEAP8[$35>>0] = $32;
 $36 = $12;
 $37 = $36 & 1;
 $38 = $37&255;
 $39 = $5;
 $40 = ((($39)) + 2736|0);
 $41 = ((($40)) + 30|0);
 HEAP8[$41>>0] = $38;
 $42 = $9;
 $43 = ($42|0)==(2);
 $44 = $6;
 if ($43) {
  $45 = (_ec_dec_icdf($44,27162,8)|0);
  $46 = $45&255;
  $47 = $5;
  $48 = ((($47)) + 2736|0);
  HEAP8[$48>>0] = $46;
 } else {
  $49 = $5;
  $50 = ((($49)) + 2736|0);
  $51 = ((($50)) + 29|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (27138 + ($53<<3)|0);
  $55 = (_ec_dec_icdf($44,$54,8)|0);
  $56 = $55 << 3;
  $57 = $56&255;
  $58 = $5;
  $59 = ((($58)) + 2736|0);
  HEAP8[$59>>0] = $57;
  $60 = $6;
  $61 = (_ec_dec_icdf($60,27728,8)|0);
  $62 = $61&255;
  $63 = $62 << 24 >> 24;
  $64 = $5;
  $65 = ((($64)) + 2736|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = (($67) + ($63))|0;
  $69 = $68&255;
  HEAP8[$65>>0] = $69;
 }
 $10 = 1;
 while(1) {
  $70 = $10;
  $71 = $5;
  $72 = ((($71)) + 2324|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)<($73|0);
  $75 = $6;
  if (!($74)) {
   break;
  }
  $76 = (_ec_dec_icdf($75,27162,8)|0);
  $77 = $76&255;
  $78 = $5;
  $79 = ((($78)) + 2736|0);
  $80 = $10;
  $81 = (($79) + ($80)|0);
  HEAP8[$81>>0] = $77;
  $82 = $10;
  $83 = (($82) + 1)|0;
  $10 = $83;
 }
 $84 = $5;
 $85 = ((($84)) + 2732|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $5;
 $90 = ((($89)) + 2736|0);
 $91 = ((($90)) + 29|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92 << 24 >> 24;
 $94 = $93 >> 1;
 $95 = $5;
 $96 = ((($95)) + 2732|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP16[$97>>1]|0;
 $99 = $98 << 16 >> 16;
 $100 = Math_imul($94, $99)|0;
 $101 = (($88) + ($100)|0);
 $102 = (_ec_dec_icdf($75,$101,8)|0);
 $103 = $102&255;
 $104 = $5;
 $105 = ((($104)) + 2736|0);
 $106 = ((($105)) + 8|0);
 HEAP8[$106>>0] = $103;
 $107 = $5;
 $108 = ((($107)) + 2732|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $5;
 $111 = ((($110)) + 2736|0);
 $112 = ((($111)) + 8|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113 << 24 >> 24;
 _silk_NLSF_unpack($15,$16,$109,$114);
 $10 = 0;
 while(1) {
  $115 = $10;
  $116 = $5;
  $117 = ((($116)) + 2732|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 2|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = ($115|0)<($121|0);
  if (!($122)) {
   break;
  }
  $123 = $6;
  $124 = $5;
  $125 = ((($124)) + 2732|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 24|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $10;
  $130 = (($15) + ($129<<1)|0);
  $131 = HEAP16[$130>>1]|0;
  $132 = $131 << 16 >> 16;
  $133 = (($128) + ($132)|0);
  $134 = (_ec_dec_icdf($123,$133,8)|0);
  $12 = $134;
  $135 = $12;
  $136 = ($135|0)==(0);
  if ($136) {
   $137 = $6;
   $138 = (_ec_dec_icdf($137,27736,8)|0);
   $139 = $12;
   $140 = (($139) - ($138))|0;
   $12 = $140;
  } else {
   $141 = $12;
   $142 = ($141|0)==(8);
   if ($142) {
    $143 = $6;
    $144 = (_ec_dec_icdf($143,27736,8)|0);
    $145 = $12;
    $146 = (($145) + ($144))|0;
    $12 = $146;
   }
  }
  $147 = $12;
  $148 = (($147) - 4)|0;
  $149 = $148&255;
  $150 = $5;
  $151 = ((($150)) + 2736|0);
  $152 = ((($151)) + 8|0);
  $153 = $10;
  $154 = (($153) + 1)|0;
  $155 = (($152) + ($154)|0);
  HEAP8[$155>>0] = $149;
  $156 = $10;
  $157 = (($156) + 1)|0;
  $10 = $157;
 }
 $158 = $5;
 $159 = ((($158)) + 2324|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)==(4);
 if ($161) {
  $162 = $6;
  $163 = (_ec_dec_icdf($162,27705,8)|0);
  $164 = $163&255;
  $165 = $5;
  $$sink = $164;$$sink3 = $165;
 } else {
  $166 = $5;
  $$sink = 4;$$sink3 = $166;
 }
 $167 = ((($$sink3)) + 2736|0);
 $168 = ((($167)) + 31|0);
 HEAP8[$168>>0] = $$sink;
 $169 = $5;
 $170 = ((($169)) + 2736|0);
 $171 = ((($170)) + 29|0);
 $172 = HEAP8[$171>>0]|0;
 $173 = $172 << 24 >> 24;
 $174 = ($173|0)==(2);
 if (!($174)) {
  $280 = $5;
  $281 = ((($280)) + 2736|0);
  $282 = ((($281)) + 29|0);
  $283 = HEAP8[$282>>0]|0;
  $284 = $283 << 24 >> 24;
  $285 = $5;
  $286 = ((($285)) + 2396|0);
  HEAP32[$286>>2] = $284;
  $287 = $6;
  $288 = (_ec_dec_icdf($287,27713,8)|0);
  $289 = $288&255;
  $290 = $5;
  $291 = ((($290)) + 2736|0);
  $292 = ((($291)) + 34|0);
  HEAP8[$292>>0] = $289;
  STACKTOP = sp;return;
 }
 $13 = 1;
 $175 = $9;
 $176 = ($175|0)==(2);
 if ($176) {
  $177 = $5;
  $178 = ((($177)) + 2396|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)==(2);
  if ($180) {
   $181 = $6;
   $182 = (_ec_dec_icdf($181,27775,8)|0);
   $183 = $182&65535;
   $184 = $183 << 16 >> 16;
   $14 = $184;
   $185 = $14;
   $186 = ($185|0)>(0);
   if ($186) {
    $187 = $14;
    $188 = (($187) - 9)|0;
    $14 = $188;
    $189 = $5;
    $190 = ((($189)) + 2400|0);
    $191 = HEAP16[$190>>1]|0;
    $192 = $191 << 16 >> 16;
    $193 = $14;
    $194 = (($192) + ($193))|0;
    $195 = $194&65535;
    $196 = $5;
    $197 = ((($196)) + 2736|0);
    $198 = ((($197)) + 26|0);
    HEAP16[$198>>1] = $195;
    $13 = 0;
   }
  }
 }
 $199 = $13;
 $200 = ($199|0)!=(0);
 if ($200) {
  $201 = $6;
  $202 = (_ec_dec_icdf($201,27743,8)|0);
  $203 = $202&65535;
  $204 = $203 << 16 >> 16;
  $205 = $5;
  $206 = ((($205)) + 2316|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $207 >> 1;
  $209 = Math_imul($204, $208)|0;
  $210 = $209&65535;
  $211 = $5;
  $212 = ((($211)) + 2736|0);
  $213 = ((($212)) + 26|0);
  HEAP16[$213>>1] = $210;
  $214 = $6;
  $215 = $5;
  $216 = ((($215)) + 2380|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (_ec_dec_icdf($214,$217,8)|0);
  $219 = $218&65535;
  $220 = $219 << 16 >> 16;
  $221 = $5;
  $222 = ((($221)) + 2736|0);
  $223 = ((($222)) + 26|0);
  $224 = HEAP16[$223>>1]|0;
  $225 = $224 << 16 >> 16;
  $226 = (($225) + ($220))|0;
  $227 = $226&65535;
  HEAP16[$223>>1] = $227;
 }
 $228 = $5;
 $229 = ((($228)) + 2736|0);
 $230 = ((($229)) + 26|0);
 $231 = HEAP16[$230>>1]|0;
 $232 = $5;
 $233 = ((($232)) + 2400|0);
 HEAP16[$233>>1] = $231;
 $234 = $6;
 $235 = $5;
 $236 = ((($235)) + 2384|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = (_ec_dec_icdf($234,$237,8)|0);
 $239 = $238&255;
 $240 = $5;
 $241 = ((($240)) + 2736|0);
 $242 = ((($241)) + 28|0);
 HEAP8[$242>>0] = $239;
 $243 = $6;
 $244 = (_ec_dec_icdf($243,27203,8)|0);
 $245 = $244&255;
 $246 = $5;
 $247 = ((($246)) + 2736|0);
 $248 = ((($247)) + 32|0);
 HEAP8[$248>>0] = $245;
 $11 = 0;
 while(1) {
  $249 = $11;
  $250 = $5;
  $251 = ((($250)) + 2324|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($249|0)<($252|0);
  if (!($253)) {
   break;
  }
  $254 = $6;
  $255 = $5;
  $256 = ((($255)) + 2736|0);
  $257 = ((($256)) + 32|0);
  $258 = HEAP8[$257>>0]|0;
  $259 = $258 << 24 >> 24;
  $260 = (16660 + ($259<<2)|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (_ec_dec_icdf($254,$261,8)|0);
  $263 = $262&255;
  $264 = $5;
  $265 = ((($264)) + 2736|0);
  $266 = ((($265)) + 4|0);
  $267 = $11;
  $268 = (($266) + ($267)|0);
  HEAP8[$268>>0] = $263;
  $269 = $11;
  $270 = (($269) + 1)|0;
  $11 = $270;
 }
 $271 = $9;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $6;
  $274 = (_ec_dec_icdf($273,27696,8)|0);
  $275 = $274&255;
  $276 = $5;
  $$sink4 = $275;$$sink7 = $276;
 } else {
  $277 = $5;
  $$sink4 = 0;$$sink7 = $277;
 }
 $278 = ((($$sink7)) + 2736|0);
 $279 = ((($278)) + 33|0);
 HEAP8[$279>>0] = $$sink4;
 $280 = $5;
 $281 = ((($280)) + 2736|0);
 $282 = ((($281)) + 29|0);
 $283 = HEAP8[$282>>0]|0;
 $284 = $283 << 24 >> 24;
 $285 = $5;
 $286 = ((($285)) + 2396|0);
 HEAP32[$286>>2] = $284;
 $287 = $6;
 $288 = (_ec_dec_icdf($287,27713,8)|0);
 $289 = $288&255;
 $290 = $5;
 $291 = ((($290)) + 2736|0);
 $292 = ((($291)) + 34|0);
 HEAP8[$292>>0] = $289;
 STACKTOP = sp;return;
}
function _silk_decode_pulses($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $17 = sp + 88|0;
 $18 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $21 = $5;
 $22 = $7;
 $23 = $22 >> 1;
 $24 = (28202 + (($23*9)|0)|0);
 $25 = (_ec_dec_icdf($21,$24,8)|0);
 $16 = $25;
 $26 = $9;
 $27 = $26 >> 4;
 $13 = $27;
 $28 = $13;
 $29 = $28<<4;
 $30 = $9;
 $31 = ($29|0)<($30|0);
 if ($31) {
  $32 = $13;
  $33 = (($32) + 1)|0;
  $13 = $33;
 }
 $34 = $16;
 $35 = (27860 + (($34*18)|0)|0);
 $20 = $35;
 $10 = 0;
 while(1) {
  $36 = $10;
  $37 = $13;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $10;
  $40 = (($18) + ($39<<2)|0);
  HEAP32[$40>>2] = 0;
  $41 = $5;
  $42 = $20;
  $43 = (_ec_dec_icdf($41,$42,8)|0);
  $44 = $10;
  $$sink = $43;$$sink2 = $44;
  while(1) {
   $45 = (($17) + ($$sink2<<2)|0);
   HEAP32[$45>>2] = $$sink;
   $46 = $10;
   $47 = (($17) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(17);
   $50 = $10;
   if (!($49)) {
    break;
   }
   $51 = (($18) + ($50<<2)|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$51>>2] = $53;
   $54 = $5;
   $55 = $10;
   $56 = (($18) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(10);
   $59 = $58&1;
   $60 = ((28022) + ($59)|0);
   $61 = (_ec_dec_icdf($54,$60,8)|0);
   $62 = $10;
   $$sink = $61;$$sink2 = $62;
  }
  $63 = (($50) + 1)|0;
  $10 = $63;
 }
 $10 = 0;
 while(1) {
  $64 = $10;
  $65 = $13;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = $10;
  $68 = (($17) + ($67<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)>(0);
  $71 = $6;
  $72 = $10;
  $73 = $72&65535;
  $74 = $73 << 16 >> 16;
  $75 = $74<<4;
  $76 = (($71) + ($75<<1)|0);
  if ($70) {
   $77 = $5;
   $78 = $10;
   $79 = (($17) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   _silk_shell_decoder($76,$77,$80);
  } else {
   dest=$76; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  }
  $81 = $10;
  $82 = (($81) + 1)|0;
  $10 = $82;
 }
 $10 = 0;
 while(1) {
  $83 = $10;
  $84 = $13;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $10;
  $87 = (($18) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)>(0);
  if ($89) {
   $90 = $10;
   $91 = (($18) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $15 = $92;
   $93 = $6;
   $94 = $10;
   $95 = $94&65535;
   $96 = $95 << 16 >> 16;
   $97 = $96<<4;
   $98 = (($93) + ($97<<1)|0);
   $19 = $98;
   $12 = 0;
   while(1) {
    $99 = $12;
    $100 = ($99|0)<(16);
    if (!($100)) {
     break;
    }
    $101 = $19;
    $102 = $12;
    $103 = (($101) + ($102<<1)|0);
    $104 = HEAP16[$103>>1]|0;
    $105 = $104 << 16 >> 16;
    $14 = $105;
    $11 = 0;
    while(1) {
     $106 = $11;
     $107 = $15;
     $108 = ($106|0)<($107|0);
     $109 = $14;
     if (!($108)) {
      break;
     }
     $110 = $109 << 1;
     $14 = $110;
     $111 = $5;
     $112 = (_ec_dec_icdf($111,27694,8)|0);
     $113 = $14;
     $114 = (($113) + ($112))|0;
     $14 = $114;
     $115 = $11;
     $116 = (($115) + 1)|0;
     $11 = $116;
    }
    $117 = $109&65535;
    $118 = $19;
    $119 = $12;
    $120 = (($118) + ($119<<1)|0);
    HEAP16[$120>>1] = $117;
    $121 = $12;
    $122 = (($121) + 1)|0;
    $12 = $122;
   }
   $123 = $15;
   $124 = $123 << 5;
   $125 = $10;
   $126 = (($17) + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $127 | $124;
   HEAP32[$126>>2] = $128;
  }
  $129 = $10;
  $130 = (($129) + 1)|0;
  $10 = $130;
 }
 $131 = $5;
 $132 = $6;
 $133 = $9;
 $134 = $7;
 $135 = $8;
 _silk_decode_signs($131,$132,$133,$134,$135,$17);
 STACKTOP = sp;return;
}
function _silk_decoder_set_fs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $$sink1$sink = 0, $$sink4 = 0, $$sink5 = 0, $$sink7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $silk_NLSF_CB_WB$sink = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = $4;
 $9 = $8&65535;
 $10 = $9 << 16 >> 16;
 $11 = ($10*5)|0;
 $12 = $3;
 $13 = ((($12)) + 2332|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 2324|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 $18 = $17 << 16 >> 16;
 $19 = $3;
 $20 = ((($19)) + 2332|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21&65535;
 $23 = $22 << 16 >> 16;
 $24 = Math_imul($18, $23)|0;
 $6 = $24;
 $25 = $3;
 $26 = ((($25)) + 2316|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = ($27|0)!=($28|0);
 if ($29) {
  label = 3;
 } else {
  $30 = $3;
  $31 = ((($30)) + 2320|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $5;
  $34 = ($32|0)!=($33|0);
  if ($34) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $35 = $3;
  $36 = ((($35)) + 2432|0);
  $37 = $4;
  $38 = $37&65535;
  $39 = $38 << 16 >> 16;
  $40 = ($39*1000)|0;
  $41 = $5;
  $42 = (_silk_resampler_init($36,$40,$41,0)|0);
  $43 = $7;
  $44 = (($43) + ($42))|0;
  $7 = $44;
  $45 = $5;
  $46 = $3;
  $47 = ((($46)) + 2320|0);
  HEAP32[$47>>2] = $45;
 }
 $48 = $3;
 $49 = ((($48)) + 2316|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $4;
 $52 = ($50|0)!=($51|0);
 if (!($52)) {
  $53 = $6;
  $54 = $3;
  $55 = ((($54)) + 2328|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($53|0)!=($56|0);
  if (!($57)) {
   $114 = $7;
   STACKTOP = sp;return ($114|0);
  }
 }
 $58 = $4;
 $59 = ($58|0)==(8);
 $60 = $3;
 $61 = ((($60)) + 2324|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(4);
 $64 = $3;
 $65 = ((($64)) + 2384|0);
 $$sink1 = $63 ? 27796 : 27841;
 $$sink = $63 ? 27830 : 27853;
 $$sink1$sink = $59 ? $$sink : $$sink1;
 HEAP32[$65>>2] = $$sink1$sink;
 $66 = $3;
 $67 = ((($66)) + 2316|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 $70 = ($68|0)!=($69|0);
 if ($70) {
  $71 = $4;
  $72 = $71&65535;
  $73 = $72 << 16 >> 16;
  $74 = ($73*20)|0;
  $75 = $3;
  $76 = ((($75)) + 2336|0);
  HEAP32[$76>>2] = $74;
  $77 = $4;
  $78 = ($77|0)==(8);
  $79 = $4;
  $80 = ($79|0)==(12);
  $or$cond = $78 | $80;
  $81 = $3;
  $82 = ((($81)) + 2340|0);
  if ($or$cond) {
   HEAP32[$82>>2] = 10;
   $83 = $3;
   $$sink4 = $83;$silk_NLSF_CB_WB$sink = 22216;
  } else {
   HEAP32[$82>>2] = 16;
   $84 = $3;
   $$sink4 = $84;$silk_NLSF_CB_WB$sink = 22252;
  }
  $85 = ((($$sink4)) + 2732|0);
  HEAP32[$85>>2] = $silk_NLSF_CB_WB$sink;
  $86 = $4;
  $87 = ($86|0)==(16);
  do {
   if ($87) {
    $88 = $3;
    $$sink5 = 27728;$$sink7 = $88;
    label = 16;
   } else {
    $89 = $4;
    $90 = ($89|0)==(12);
    if ($90) {
     $91 = $3;
     $$sink5 = 27722;$$sink7 = $91;
     label = 16;
     break;
    }
    $92 = $4;
    $93 = ($92|0)==(8);
    if ($93) {
     $94 = $3;
     $$sink5 = 27713;$$sink7 = $94;
     label = 16;
    }
   }
  } while(0);
  if ((label|0) == 16) {
   $95 = ((($$sink7)) + 2380|0);
   HEAP32[$95>>2] = $$sink5;
  }
  $96 = $3;
  $97 = ((($96)) + 2376|0);
  HEAP32[$97>>2] = 1;
  $98 = $3;
  $99 = ((($98)) + 2308|0);
  HEAP32[$99>>2] = 100;
  $100 = $3;
  $101 = ((($100)) + 2312|0);
  HEAP8[$101>>0] = 10;
  $102 = $3;
  $103 = ((($102)) + 4164|0);
  HEAP32[$103>>2] = 0;
  $104 = $3;
  $105 = ((($104)) + 1348|0);
  _memset(($105|0),0,960)|0;
  $106 = $3;
  $107 = ((($106)) + 1284|0);
  dest=$107; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 }
 $108 = $4;
 $109 = $3;
 $110 = ((($109)) + 2316|0);
 HEAP32[$110>>2] = $108;
 $111 = $6;
 $112 = $3;
 $113 = ((($112)) + 2328|0);
 HEAP32[$113>>2] = $111;
 $114 = $7;
 STACKTOP = sp;return ($114|0);
}
function _silk_gains_quant($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $9;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $16 = $10;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_silk_lin2log($18)|0);
  $20 = (($19) - 2090)|0;
  $21 = $20&65535;
  $22 = $21 << 16 >> 16;
  $23 = 0;
  $24 = $6;
  $25 = $10;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_silk_lin2log($27)|0);
  $29 = (($28) - 2090)|0;
  $30 = $29&65535;
  $31 = $30 << 16 >> 16;
  $32 = ($31*2251)|0;
  $33 = $32 >> 16;
  $34 = (($23) + ($33))|0;
  $35 = $34&255;
  $36 = $5;
  $37 = $10;
  $38 = (($36) + ($37)|0);
  HEAP8[$38>>0] = $35;
  $39 = $5;
  $40 = $10;
  $41 = (($39) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = $7;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($43|0)<($46|0);
  if ($47) {
   $48 = $5;
   $49 = $10;
   $50 = (($48) + ($49)|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = (($51) + 1)<<24>>24;
   HEAP8[$50>>0] = $52;
  }
  $53 = $5;
  $54 = $10;
  $55 = (($53) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)>(63);
  if ($58) {
   $71 = 63;
  } else {
   $59 = $5;
   $60 = $10;
   $61 = (($59) + ($60)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = ($63|0)<(0);
   if ($64) {
    $71 = 0;
   } else {
    $65 = $5;
    $66 = $10;
    $67 = (($65) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $71 = $69;
   }
  }
  $70 = $71&255;
  $72 = $5;
  $73 = $10;
  $74 = (($72) + ($73)|0);
  HEAP8[$74>>0] = $70;
  $75 = $10;
  $76 = ($75|0)==(0);
  $77 = $8;
  $78 = ($77|0)==(0);
  $or$cond = $76 & $78;
  if ($or$cond) {
   $79 = $7;
   $80 = HEAP8[$79>>0]|0;
   $81 = $80 << 24 >> 24;
   $82 = (($81) + -4)|0;
   $83 = ($82|0)>(63);
   $84 = $5;
   $85 = $10;
   $86 = (($84) + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = $87 << 24 >> 24;
   do {
    if ($83) {
     $89 = $7;
     $90 = HEAP8[$89>>0]|0;
     $91 = $90 << 24 >> 24;
     $92 = (($91) + -4)|0;
     $93 = ($88|0)>($92|0);
     if ($93) {
      $94 = $7;
      $95 = HEAP8[$94>>0]|0;
      $96 = $95 << 24 >> 24;
      $97 = (($96) + -4)|0;
      $130 = $97;
      break;
     }
     $98 = $5;
     $99 = $10;
     $100 = (($98) + ($99)|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101 << 24 >> 24;
     $103 = ($102|0)<(63);
     if ($103) {
      $130 = 63;
     } else {
      $104 = $5;
      $105 = $10;
      $106 = (($104) + ($105)|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = $107 << 24 >> 24;
      $130 = $108;
     }
    } else {
     $109 = ($88|0)>(63);
     if ($109) {
      $130 = 63;
     } else {
      $110 = $5;
      $111 = $10;
      $112 = (($110) + ($111)|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = $7;
      $116 = HEAP8[$115>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -4)|0;
      $119 = ($114|0)<($118|0);
      if ($119) {
       $120 = $7;
       $121 = HEAP8[$120>>0]|0;
       $122 = $121 << 24 >> 24;
       $123 = (($122) + -4)|0;
       $130 = $123;
       break;
      } else {
       $124 = $5;
       $125 = $10;
       $126 = (($124) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127 << 24 >> 24;
       $130 = $128;
       break;
      }
     }
    }
   } while(0);
   $129 = $130&255;
   $131 = $5;
   $132 = $10;
   $133 = (($131) + ($132)|0);
   HEAP8[$133>>0] = $129;
   $134 = $5;
   $135 = $10;
   $136 = (($134) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $7;
   HEAP8[$138>>0] = $137;
  } else {
   $139 = $5;
   $140 = $10;
   $141 = (($139) + ($140)|0);
   $142 = HEAP8[$141>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = $7;
   $145 = HEAP8[$144>>0]|0;
   $146 = $145 << 24 >> 24;
   $147 = (($143) - ($146))|0;
   $148 = $147&255;
   $149 = $5;
   $150 = $10;
   $151 = (($149) + ($150)|0);
   HEAP8[$151>>0] = $148;
   $152 = $7;
   $153 = HEAP8[$152>>0]|0;
   $154 = $153 << 24 >> 24;
   $155 = (8 + ($154))|0;
   $11 = $155;
   $156 = $5;
   $157 = $10;
   $158 = (($156) + ($157)|0);
   $159 = HEAP8[$158>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = $11;
   $162 = ($160|0)>($161|0);
   if ($162) {
    $163 = $11;
    $164 = $5;
    $165 = $10;
    $166 = (($164) + ($165)|0);
    $167 = HEAP8[$166>>0]|0;
    $168 = $167 << 24 >> 24;
    $169 = $11;
    $170 = (($168) - ($169))|0;
    $171 = (($170) + 1)|0;
    $172 = $171 >> 1;
    $173 = (($163) + ($172))|0;
    $174 = $173&255;
    $175 = $5;
    $176 = $10;
    $177 = (($175) + ($176)|0);
    HEAP8[$177>>0] = $174;
   }
   $178 = $5;
   $179 = $10;
   $180 = (($178) + ($179)|0);
   $181 = HEAP8[$180>>0]|0;
   $182 = $181 << 24 >> 24;
   $183 = ($182|0)>(36);
   if ($183) {
    $196 = 36;
   } else {
    $184 = $5;
    $185 = $10;
    $186 = (($184) + ($185)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187 << 24 >> 24;
    $189 = ($188|0)<(-4);
    if ($189) {
     $196 = -4;
    } else {
     $190 = $5;
     $191 = $10;
     $192 = (($190) + ($191)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193 << 24 >> 24;
     $196 = $194;
    }
   }
   $195 = $196&255;
   $197 = $5;
   $198 = $10;
   $199 = (($197) + ($198)|0);
   HEAP8[$199>>0] = $195;
   $200 = $5;
   $201 = $10;
   $202 = (($200) + ($201)|0);
   $203 = HEAP8[$202>>0]|0;
   $204 = $203 << 24 >> 24;
   $205 = $11;
   $206 = ($204|0)>($205|0);
   $207 = $5;
   $208 = $10;
   $209 = (($207) + ($208)|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210 << 24 >> 24;
   if ($206) {
    $212 = $211 << 1;
    $213 = $11;
    $214 = (($212) - ($213))|0;
    $215 = $7;
    $$sink = $215;$$sink4 = $214;
   } else {
    $216 = $7;
    $$sink = $216;$$sink4 = $211;
   }
   $217 = HEAP8[$$sink>>0]|0;
   $218 = $217 << 24 >> 24;
   $219 = (($218) + ($$sink4))|0;
   $220 = $219&255;
   HEAP8[$$sink>>0] = $220;
   $221 = $5;
   $222 = $10;
   $223 = (($221) + ($222)|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224 << 24 >> 24;
   $226 = (($225) - -4)|0;
   $227 = $226&255;
   HEAP8[$223>>0] = $227;
  }
  $228 = $7;
  $229 = HEAP8[$228>>0]|0;
  $230 = $229 << 24 >> 24;
  $231 = $230 << 16 >> 16;
  $232 = ($231*29)|0;
  $233 = $7;
  $234 = HEAP8[$233>>0]|0;
  $235 = $234 << 24 >> 24;
  $236 = $235 << 16 >> 16;
  $237 = ($236*7281)|0;
  $238 = $237 >> 16;
  $239 = (($232) + ($238))|0;
  $240 = (($239) + 2090)|0;
  $241 = (_silk_min_32_403($240,3967)|0);
  $242 = (_silk_log2lin($241)|0);
  $243 = $6;
  $244 = $10;
  $245 = (($243) + ($244<<2)|0);
  HEAP32[$245>>2] = $242;
  $246 = $10;
  $247 = (($246) + 1)|0;
  $10 = $247;
 }
 STACKTOP = sp;return;
}
function _silk_min_32_403($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_gains_dequant($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $9;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $10;
  $17 = ($16|0)==(0);
  $18 = $8;
  $19 = ($18|0)==(0);
  $or$cond = $17 & $19;
  $20 = $6;
  $21 = $10;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  if ($or$cond) {
   $25 = $7;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26 << 24 >> 24;
   $28 = (($27) - 16)|0;
   $29 = (_silk_max_int_406($24,$28)|0);
   $30 = $29&255;
   $31 = $7;
   HEAP8[$31>>0] = $30;
  } else {
   $32 = (($24) + -4)|0;
   $11 = $32;
   $33 = $7;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = (8 + ($35))|0;
   $12 = $36;
   $37 = $11;
   $38 = $12;
   $39 = ($37|0)>($38|0);
   $40 = $11;
   if ($39) {
    $41 = $40 << 1;
    $42 = $12;
    $43 = (($41) - ($42))|0;
    $44 = $7;
    $$sink = $44;$$sink4 = $43;
   } else {
    $45 = $7;
    $$sink = $45;$$sink4 = $40;
   }
   $46 = HEAP8[$$sink>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = (($47) + ($$sink4))|0;
   $49 = $48&255;
   HEAP8[$$sink>>0] = $49;
  }
  $50 = $7;
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)>(63);
  if ($53) {
   $62 = 63;
  } else {
   $54 = $7;
   $55 = HEAP8[$54>>0]|0;
   $56 = $55 << 24 >> 24;
   $57 = ($56|0)<(0);
   if ($57) {
    $62 = 0;
   } else {
    $58 = $7;
    $59 = HEAP8[$58>>0]|0;
    $60 = $59 << 24 >> 24;
    $62 = $60;
   }
  }
  $61 = $62&255;
  $63 = $7;
  HEAP8[$63>>0] = $61;
  $64 = $7;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = $66 << 16 >> 16;
  $68 = ($67*29)|0;
  $69 = $7;
  $70 = HEAP8[$69>>0]|0;
  $71 = $70 << 24 >> 24;
  $72 = $71 << 16 >> 16;
  $73 = ($72*7281)|0;
  $74 = $73 >> 16;
  $75 = (($68) + ($74))|0;
  $76 = (($75) + 2090)|0;
  $77 = (_silk_min_32_403($76,3967)|0);
  $78 = (_silk_log2lin($77)|0);
  $79 = $5;
  $80 = $10;
  $81 = (($79) + ($80<<2)|0);
  HEAP32[$81>>2] = $78;
  $82 = $10;
  $83 = (($82) + 1)|0;
  $10 = $83;
 }
 STACKTOP = sp;return;
}
function _silk_max_int_406($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_gains_ID($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = $3;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = $4;
  $11 = (($9) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = $5;
  $15 = $14 << 8;
  $16 = (($13) + ($15))|0;
  $5 = $16;
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 $19 = $5;
 STACKTOP = sp;return ($19|0);
}
function _silk_LP_variable_cutoff($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 $9 = 0;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = $3;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (256 - ($16))|0;
 $18 = $17 << 10;
 $8 = $18;
 $19 = $8;
 $20 = $19 >> 16;
 $9 = $20;
 $21 = $9;
 $22 = $21 << 16;
 $23 = $8;
 $24 = (($23) - ($22))|0;
 $8 = $24;
 $25 = $9;
 $26 = $8;
 _silk_LP_interpolate_filter_taps($6,$7,$25,$26);
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $3;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($29) + ($32))|0;
 $34 = ($33|0)>(256);
 if ($34) {
  $52 = 256;
 } else {
  $35 = $3;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = ((($38)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($37) + ($40))|0;
  $42 = ($41|0)<(0);
  if ($42) {
   $52 = 0;
  } else {
   $43 = $3;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $3;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($45) + ($48))|0;
   $52 = $49;
  }
 }
 $50 = $3;
 $51 = ((($50)) + 8|0);
 HEAP32[$51>>2] = $52;
 $53 = $4;
 $54 = $3;
 $55 = $4;
 $56 = $5;
 _silk_biquad_alt($53,$6,$7,$54,$55,$56,1);
 STACKTOP = sp;return;
}
function _silk_LP_interpolate_filter_taps($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $6;
 $11 = ($10|0)<(4);
 if (!($11)) {
  $224 = $4;
  ;HEAP32[$224>>2]=HEAP32[(16860)>>2]|0;HEAP32[$224+4>>2]=HEAP32[(16860)+4>>2]|0;HEAP32[$224+8>>2]=HEAP32[(16860)+8>>2]|0;
  $225 = $5;
  ;HEAP32[$225>>2]=HEAP32[(16904)>>2]|0;HEAP32[$225+4>>2]=HEAP32[(16904)+4>>2]|0;
  STACKTOP = sp;return;
 }
 $12 = $7;
 $13 = ($12|0)>(0);
 if (!($13)) {
  $218 = $4;
  $219 = $6;
  $220 = (16812 + (($219*12)|0)|0);
  ;HEAP32[$218>>2]=HEAP32[$220>>2]|0;HEAP32[$218+4>>2]=HEAP32[$220+4>>2]|0;HEAP32[$218+8>>2]=HEAP32[$220+8>>2]|0;
  $221 = $5;
  $222 = $6;
  $223 = (16872 + ($222<<3)|0);
  ;HEAP32[$221>>2]=HEAP32[$223>>2]|0;HEAP32[$221+4>>2]=HEAP32[$223+4>>2]|0;
  STACKTOP = sp;return;
 }
 $14 = $7;
 $15 = ($14|0)<(32768);
 $8 = 0;
 if ($15) {
  while(1) {
   $16 = $8;
   $17 = ($16|0)<(3);
   if (!($17)) {
    break;
   }
   $18 = $6;
   $19 = (16812 + (($18*12)|0)|0);
   $20 = $8;
   $21 = (($19) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $6;
   $24 = (($23) + 1)|0;
   $25 = (16812 + (($24*12)|0)|0);
   $26 = $8;
   $27 = (($25) + ($26<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $6;
   $30 = (16812 + (($29*12)|0)|0);
   $31 = $8;
   $32 = (($30) + ($31<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($28) - ($33))|0;
   $35 = $34 >> 16;
   $36 = $7;
   $37 = $36&65535;
   $38 = $37 << 16 >> 16;
   $39 = Math_imul($35, $38)|0;
   $40 = $6;
   $41 = (($40) + 1)|0;
   $42 = (16812 + (($41*12)|0)|0);
   $43 = $8;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $6;
   $47 = (16812 + (($46*12)|0)|0);
   $48 = $8;
   $49 = (($47) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($45) - ($50))|0;
   $52 = $51 & 65535;
   $53 = $7;
   $54 = $53&65535;
   $55 = $54 << 16 >> 16;
   $56 = Math_imul($52, $55)|0;
   $57 = $56 >> 16;
   $58 = (($39) + ($57))|0;
   $59 = (($22) + ($58))|0;
   $60 = $4;
   $61 = $8;
   $62 = (($60) + ($61<<2)|0);
   HEAP32[$62>>2] = $59;
   $63 = $8;
   $64 = (($63) + 1)|0;
   $8 = $64;
  }
  $9 = 0;
  while(1) {
   $65 = $9;
   $66 = ($65|0)<(2);
   if (!($66)) {
    break;
   }
   $67 = $6;
   $68 = (16872 + ($67<<3)|0);
   $69 = $9;
   $70 = (($68) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $6;
   $73 = (($72) + 1)|0;
   $74 = (16872 + ($73<<3)|0);
   $75 = $9;
   $76 = (($74) + ($75<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = $6;
   $79 = (16872 + ($78<<3)|0);
   $80 = $9;
   $81 = (($79) + ($80<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($77) - ($82))|0;
   $84 = $83 >> 16;
   $85 = $7;
   $86 = $85&65535;
   $87 = $86 << 16 >> 16;
   $88 = Math_imul($84, $87)|0;
   $89 = $6;
   $90 = (($89) + 1)|0;
   $91 = (16872 + ($90<<3)|0);
   $92 = $9;
   $93 = (($91) + ($92<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $6;
   $96 = (16872 + ($95<<3)|0);
   $97 = $9;
   $98 = (($96) + ($97<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($94) - ($99))|0;
   $101 = $100 & 65535;
   $102 = $7;
   $103 = $102&65535;
   $104 = $103 << 16 >> 16;
   $105 = Math_imul($101, $104)|0;
   $106 = $105 >> 16;
   $107 = (($88) + ($106))|0;
   $108 = (($71) + ($107))|0;
   $109 = $5;
   $110 = $9;
   $111 = (($109) + ($110<<2)|0);
   HEAP32[$111>>2] = $108;
   $112 = $9;
   $113 = (($112) + 1)|0;
   $9 = $113;
  }
  STACKTOP = sp;return;
 } else {
  while(1) {
   $114 = $8;
   $115 = ($114|0)<(3);
   if (!($115)) {
    break;
   }
   $116 = $6;
   $117 = (($116) + 1)|0;
   $118 = (16812 + (($117*12)|0)|0);
   $119 = $8;
   $120 = (($118) + ($119<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $6;
   $123 = (($122) + 1)|0;
   $124 = (16812 + (($123*12)|0)|0);
   $125 = $8;
   $126 = (($124) + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $6;
   $129 = (16812 + (($128*12)|0)|0);
   $130 = $8;
   $131 = (($129) + ($130<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($127) - ($132))|0;
   $134 = $133 >> 16;
   $135 = $7;
   $136 = (($135) - 65536)|0;
   $137 = $136&65535;
   $138 = $137 << 16 >> 16;
   $139 = Math_imul($134, $138)|0;
   $140 = $6;
   $141 = (($140) + 1)|0;
   $142 = (16812 + (($141*12)|0)|0);
   $143 = $8;
   $144 = (($142) + ($143<<2)|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = $6;
   $147 = (16812 + (($146*12)|0)|0);
   $148 = $8;
   $149 = (($147) + ($148<<2)|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = (($145) - ($150))|0;
   $152 = $151 & 65535;
   $153 = $7;
   $154 = (($153) - 65536)|0;
   $155 = $154&65535;
   $156 = $155 << 16 >> 16;
   $157 = Math_imul($152, $156)|0;
   $158 = $157 >> 16;
   $159 = (($139) + ($158))|0;
   $160 = (($121) + ($159))|0;
   $161 = $4;
   $162 = $8;
   $163 = (($161) + ($162<<2)|0);
   HEAP32[$163>>2] = $160;
   $164 = $8;
   $165 = (($164) + 1)|0;
   $8 = $165;
  }
  $9 = 0;
  while(1) {
   $166 = $9;
   $167 = ($166|0)<(2);
   if (!($167)) {
    break;
   }
   $168 = $6;
   $169 = (($168) + 1)|0;
   $170 = (16872 + ($169<<3)|0);
   $171 = $9;
   $172 = (($170) + ($171<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = $6;
   $175 = (($174) + 1)|0;
   $176 = (16872 + ($175<<3)|0);
   $177 = $9;
   $178 = (($176) + ($177<<2)|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $6;
   $181 = (16872 + ($180<<3)|0);
   $182 = $9;
   $183 = (($181) + ($182<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($179) - ($184))|0;
   $186 = $185 >> 16;
   $187 = $7;
   $188 = (($187) - 65536)|0;
   $189 = $188&65535;
   $190 = $189 << 16 >> 16;
   $191 = Math_imul($186, $190)|0;
   $192 = $6;
   $193 = (($192) + 1)|0;
   $194 = (16872 + ($193<<3)|0);
   $195 = $9;
   $196 = (($194) + ($195<<2)|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $6;
   $199 = (16872 + ($198<<3)|0);
   $200 = $9;
   $201 = (($199) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($197) - ($202))|0;
   $204 = $203 & 65535;
   $205 = $7;
   $206 = (($205) - 65536)|0;
   $207 = $206&65535;
   $208 = $207 << 16 >> 16;
   $209 = Math_imul($204, $208)|0;
   $210 = $209 >> 16;
   $211 = (($191) + ($210))|0;
   $212 = (($173) + ($211))|0;
   $213 = $5;
   $214 = $9;
   $215 = (($213) + ($214<<2)|0);
   HEAP32[$215>>2] = $212;
   $216 = $9;
   $217 = (($216) + 1)|0;
   $9 = $217;
  }
  STACKTOP = sp;return;
 }
}
function _silk_NLSF_decode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp + 128|0;
 $8 = sp + 96|0;
 $9 = sp + 64|0;
 $10 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = Math_imul($19, $23)|0;
 $25 = (($16) + ($24)|0);
 $13 = $25;
 $6 = 0;
 while(1) {
  $26 = $6;
  $27 = $5;
  $28 = ((($27)) + 2|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ($26|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = $13;
  $33 = $6;
  $34 = (($32) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = $36 << 16 >> 16;
  $38 = $37 << 7;
  $39 = $38&65535;
  $40 = $3;
  $41 = $6;
  $42 = (($40) + ($41<<1)|0);
  HEAP16[$42>>1] = $39;
  $43 = $6;
  $44 = (($43) + 1)|0;
  $6 = $44;
 }
 $45 = $5;
 $46 = $4;
 $47 = HEAP8[$46>>0]|0;
 $48 = $47 << 24 >> 24;
 _silk_NLSF_unpack($8,$7,$45,$48);
 $49 = $4;
 $50 = ((($49)) + 1|0);
 $51 = $5;
 $52 = ((($51)) + 4|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = $5;
 $56 = ((($55)) + 2|0);
 $57 = HEAP16[$56>>1]|0;
 _silk_NLSF_residual_dequant($9,$50,$7,$54,$57);
 $58 = $3;
 $59 = $5;
 $60 = ((($59)) + 2|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 _silk_NLSF_VQ_weights_laroia($10,$58,$62);
 $6 = 0;
 while(1) {
  $63 = $6;
  $64 = $5;
  $65 = ((($64)) + 2|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66 << 16 >> 16;
  $68 = ($63|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $6;
  $70 = (($10) + ($69<<1)|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $72 << 16;
  $74 = (_silk_SQRT_APPROX_413($73)|0);
  $11 = $74;
  $75 = $3;
  $76 = $6;
  $77 = (($75) + ($76<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $6;
  $81 = (($9) + ($80<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $84 = $83 << 14;
  $85 = $11;
  $86 = (($84|0) / ($85|0))&-1;
  $87 = (($79) + ($86))|0;
  $12 = $87;
  $88 = $12;
  $89 = ($88|0)>(32767);
  if ($89) {
   $95 = 32767;
  } else {
   $90 = $12;
   $91 = ($90|0)<(0);
   $92 = $12;
   $93 = $91 ? 0 : $92;
   $95 = $93;
  }
  $94 = $95&65535;
  $96 = $3;
  $97 = $6;
  $98 = (($96) + ($97<<1)|0);
  HEAP16[$98>>1] = $94;
  $99 = $6;
  $100 = (($99) + 1)|0;
  $6 = $100;
 }
 $101 = $3;
 $102 = $5;
 $103 = ((($102)) + 32|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $5;
 $106 = ((($105)) + 2|0);
 $107 = HEAP16[$106>>1]|0;
 $108 = $107 << 16 >> 16;
 _silk_NLSF_stabilize($101,$104,$108);
 STACKTOP = sp;return;
}
function _silk_NLSF_residual_dequant($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 $13 = $9;
 $14 = $13 << 16 >> 16;
 $15 = (($14) - 1)|0;
 $10 = $15;
 while(1) {
  $16 = $10;
  $17 = ($16|0)>=(0);
  if (!($17)) {
   break;
  }
  $18 = $11;
  $19 = $18&65535;
  $20 = $19 << 16 >> 16;
  $21 = $7;
  $22 = $10;
  $23 = (($21) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 16 >> 16;
  $27 = Math_imul($20, $26)|0;
  $28 = $27 >> 8;
  $12 = $28;
  $29 = $6;
  $30 = $10;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = $33 << 10;
  $11 = $34;
  $35 = $11;
  $36 = ($35|0)>(0);
  $37 = $11;
  if ($36) {
   $38 = (($37) - 102)|0;
   $11 = $38;
  } else {
   $39 = ($37|0)<(0);
   if ($39) {
    $40 = $11;
    $41 = (($40) + 102)|0;
    $11 = $41;
   }
  }
  $42 = $12;
  $43 = $11;
  $44 = $43 >> 16;
  $45 = $8;
  $46 = $45&65535;
  $47 = $46 << 16 >> 16;
  $48 = Math_imul($44, $47)|0;
  $49 = $11;
  $50 = $49 & 65535;
  $51 = $8;
  $52 = $51&65535;
  $53 = $52 << 16 >> 16;
  $54 = Math_imul($50, $53)|0;
  $55 = $54 >> 16;
  $56 = (($48) + ($55))|0;
  $57 = (($42) + ($56))|0;
  $11 = $57;
  $58 = $11;
  $59 = $58&65535;
  $60 = $5;
  $61 = $10;
  $62 = (($60) + ($61<<1)|0);
  HEAP16[$62>>1] = $59;
  $63 = $10;
  $64 = (($63) + -1)|0;
  $10 = $64;
 }
 STACKTOP = sp;return;
}
function _silk_SQRT_APPROX_413($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_414($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CLZ_FRAC_414($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_415($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_416($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_415($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32_416($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_NSQ_c($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$alloca_mul = 0, $$alloca_mul27 = 0, $$alloca_mul29 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $14;
 $41 = $17;
 $42 = ((($41)) + 34|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 << 24 >> 24;
 $45 = $16;
 $46 = ((($45)) + 4368|0);
 HEAP32[$46>>2] = $44;
 $47 = $16;
 $48 = ((($47)) + 4356|0);
 $49 = HEAP32[$48>>2]|0;
 $31 = $49;
 $50 = $17;
 $51 = ((($50)) + 29|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 << 24 >> 24;
 $54 = $53 >> 1;
 $55 = (24998 + ($54<<2)|0);
 $56 = $17;
 $57 = ((($56)) + 30|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58 << 24 >> 24;
 $60 = (($55) + ($59<<1)|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61 << 16 >> 16;
 $39 = $62;
 $63 = $17;
 $64 = ((($63)) + 31|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 << 24 >> 24;
 $67 = ($66|0)==(4);
 if ($67) {
  $33 = 0;
 } else {
  $33 = 1;
 }
 $68 = $15;
 $69 = ((($68)) + 4616|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $15;
 $72 = ((($71)) + 4608|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($70) + ($73))|0;
 $75 = (_llvm_stacksave()|0);
 $40 = $75;
 $$alloca_mul = $74<<2;
 $76 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $77 = $15;
 $78 = ((($77)) + 4616|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $15;
 $81 = ((($80)) + 4608|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($79) + ($82))|0;
 $$alloca_mul27 = $83<<1;
 $84 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul27)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul27)|0)+15)&-16)|0);;
 $85 = $15;
 $86 = ((($85)) + 4612|0);
 $87 = HEAP32[$86>>2]|0;
 $$alloca_mul29 = $87<<2;
 $88 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul29)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul29)|0)+15)&-16)|0);;
 $89 = $15;
 $90 = ((($89)) + 4616|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $16;
 $93 = ((($92)) + 4364|0);
 HEAP32[$93>>2] = $91;
 $94 = $15;
 $95 = ((($94)) + 4616|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $16;
 $98 = ((($97)) + 4360|0);
 HEAP32[$98>>2] = $96;
 $99 = $16;
 $100 = $15;
 $101 = ((($100)) + 4616|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($99) + ($102<<1)|0);
 $37 = $103;
 $30 = 0;
 while(1) {
  $104 = $30;
  $105 = $15;
  $106 = ((($105)) + 4604|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($104|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $20;
  $110 = $30;
  $111 = $110 >> 1;
  $112 = $33;
  $113 = (1 - ($112))|0;
  $114 = $111 | $113;
  $115 = $114<<4;
  $116 = (($109) + ($115<<1)|0);
  $34 = $116;
  $117 = $21;
  $118 = $30;
  $119 = ($118*5)|0;
  $120 = (($117) + ($119<<1)|0);
  $35 = $120;
  $121 = $22;
  $122 = $30;
  $123 = $122<<4;
  $124 = (($121) + ($123<<1)|0);
  $36 = $124;
  $125 = $23;
  $126 = $30;
  $127 = (($125) + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 >> 2;
  $38 = $129;
  $130 = $23;
  $131 = $30;
  $132 = (($130) + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $133 >> 1;
  $135 = $134 << 16;
  $136 = $38;
  $137 = $136 | $135;
  $38 = $137;
  $138 = $16;
  $139 = ((($138)) + 4376|0);
  HEAP32[$139>>2] = 0;
  $140 = $17;
  $141 = ((($140)) + 29|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142 << 24 >> 24;
  $144 = ($143|0)==(2);
  if ($144) {
   $145 = $27;
   $146 = $30;
   $147 = (($145) + ($146<<2)|0);
   $148 = HEAP32[$147>>2]|0;
   $31 = $148;
   $149 = $30;
   $150 = $33;
   $151 = $150 << 1;
   $152 = (3 - ($151))|0;
   $153 = $149 & $152;
   $154 = ($153|0)==(0);
   if ($154) {
    $155 = $15;
    $156 = ((($155)) + 4616|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = $31;
    $159 = (($157) - ($158))|0;
    $160 = $15;
    $161 = ((($160)) + 4664|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (($159) - ($162))|0;
    $164 = (($163) - 2)|0;
    $32 = $164;
    $165 = $32;
    $166 = (($84) + ($165<<1)|0);
    $167 = $16;
    $168 = $32;
    $169 = $30;
    $170 = $15;
    $171 = ((($170)) + 4612|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = Math_imul($169, $172)|0;
    $174 = (($168) + ($173))|0;
    $175 = (($167) + ($174<<1)|0);
    $176 = $34;
    $177 = $15;
    $178 = ((($177)) + 4616|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = $32;
    $181 = (($179) - ($180))|0;
    $182 = $15;
    $183 = ((($182)) + 4664|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = $15;
    $186 = ((($185)) + 5124|0);
    $187 = HEAP32[$186>>2]|0;
    _silk_LPC_analysis_filter($166,$175,$176,$181,$184,$187);
    $188 = $16;
    $189 = ((($188)) + 4376|0);
    HEAP32[$189>>2] = 1;
    $190 = $15;
    $191 = ((($190)) + 4616|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $16;
    $194 = ((($193)) + 4360|0);
    HEAP32[$194>>2] = $192;
   }
  }
  $195 = $15;
  $196 = $16;
  $197 = $18;
  $198 = $30;
  $199 = $29;
  $200 = $26;
  $201 = $27;
  $202 = $17;
  $203 = ((($202)) + 29|0);
  $204 = HEAP8[$203>>0]|0;
  $205 = $204 << 24 >> 24;
  _silk_nsq_scale_states($195,$196,$197,$88,$84,$76,$198,$199,$200,$201,$205);
  $206 = $16;
  $207 = $17;
  $208 = ((($207)) + 29|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209 << 24 >> 24;
  $211 = $19;
  $212 = $37;
  $213 = $34;
  $214 = $35;
  $215 = $36;
  $216 = $31;
  $217 = $38;
  $218 = $24;
  $219 = $30;
  $220 = (($218) + ($219<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $25;
  $223 = $30;
  $224 = (($222) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $26;
  $227 = $30;
  $228 = (($226) + ($227<<2)|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $28;
  $231 = $39;
  $232 = $15;
  $233 = ((($232)) + 4612|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $15;
  $236 = ((($235)) + 4660|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $15;
  $239 = ((($238)) + 4664|0);
  $240 = HEAP32[$239>>2]|0;
  _silk_noise_shape_quantizer($206,$210,$88,$211,$212,$76,$213,$214,$215,$216,$217,$221,$225,$229,$230,$231,$234,$237,$240);
  $241 = $15;
  $242 = ((($241)) + 4612|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $18;
  $245 = (($244) + ($243<<2)|0);
  $18 = $245;
  $246 = $15;
  $247 = ((($246)) + 4612|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = $19;
  $250 = (($249) + ($248)|0);
  $19 = $250;
  $251 = $15;
  $252 = ((($251)) + 4612|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $37;
  $255 = (($254) + ($253<<1)|0);
  $37 = $255;
  $256 = $30;
  $257 = (($256) + 1)|0;
  $30 = $257;
 }
 $258 = $27;
 $259 = $15;
 $260 = ((($259)) + 4604|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = (($261) - 1)|0;
 $263 = (($258) + ($262<<2)|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = $16;
 $266 = ((($265)) + 4356|0);
 HEAP32[$266>>2] = $264;
 $267 = $16;
 $268 = $16;
 $269 = $15;
 $270 = ((($269)) + 4608|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (($268) + ($271<<1)|0);
 $273 = $15;
 $274 = ((($273)) + 4616|0);
 $275 = HEAP32[$274>>2]|0;
 $276 = $275<<1;
 _memmove(($267|0),($272|0),($276|0))|0;
 $277 = $16;
 $278 = ((($277)) + 1280|0);
 $279 = $16;
 $280 = ((($279)) + 1280|0);
 $281 = $15;
 $282 = ((($281)) + 4608|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = (($280) + ($283<<2)|0);
 $285 = $15;
 $286 = ((($285)) + 4616|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = $287<<2;
 _memmove(($278|0),($284|0),($288|0))|0;
 $289 = $40;
 _llvm_stackrestore(($289|0));
 STACKTOP = sp;return;
}
function _silk_nsq_scale_states($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $27 = $20;
 $28 = $17;
 $29 = (($27) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $23 = $30;
 $31 = $19;
 $32 = $17;
 $33 = (($31) + ($32<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(1);
 if ($35) {
  $36 = $19;
  $37 = $17;
  $38 = (($36) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $39;
 } else {
  $40 = 1;
 }
 $41 = (_silk_INVERSE32_varQ($40,47)|0);
 $25 = $41;
 $42 = $19;
 $43 = $17;
 $44 = (($42) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $12;
 $47 = ((($46)) + 4372|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($45|0)!=($48|0);
 if ($49) {
  $50 = $12;
  $51 = ((($50)) + 4372|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $19;
  $54 = $17;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_silk_DIV32_varQ_419($52,$56,16)|0);
  $24 = $57;
 } else {
  $24 = 65536;
 }
 $58 = $25;
 $59 = $58 >> 7;
 $60 = (($59) + 1)|0;
 $61 = $60 >> 1;
 $26 = $61;
 $22 = 0;
 while(1) {
  $62 = $22;
  $63 = $11;
  $64 = ((($63)) + 4612|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = $13;
  $68 = $22;
  $69 = (($67) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 >> 16;
  $72 = $26;
  $73 = $72&65535;
  $74 = $73 << 16 >> 16;
  $75 = Math_imul($71, $74)|0;
  $76 = $13;
  $77 = $22;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 & 65535;
  $81 = $26;
  $82 = $81&65535;
  $83 = $82 << 16 >> 16;
  $84 = Math_imul($80, $83)|0;
  $85 = $84 >> 16;
  $86 = (($75) + ($85))|0;
  $87 = $13;
  $88 = $22;
  $89 = (($87) + ($88<<2)|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $26;
  $92 = $91 >> 15;
  $93 = (($92) + 1)|0;
  $94 = $93 >> 1;
  $95 = Math_imul($90, $94)|0;
  $96 = (($86) + ($95))|0;
  $97 = $14;
  $98 = $22;
  $99 = (($97) + ($98<<2)|0);
  HEAP32[$99>>2] = $96;
  $100 = $22;
  $101 = (($100) + 1)|0;
  $22 = $101;
 }
 $102 = $19;
 $103 = $17;
 $104 = (($102) + ($103<<2)|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $12;
 $107 = ((($106)) + 4372|0);
 HEAP32[$107>>2] = $105;
 $108 = $12;
 $109 = ((($108)) + 4376|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0);
 L12: do {
  if ($111) {
   $112 = $17;
   $113 = ($112|0)==(0);
   if ($113) {
    $114 = $25;
    $115 = $114 >> 16;
    $116 = $18;
    $117 = $116&65535;
    $118 = $117 << 16 >> 16;
    $119 = Math_imul($115, $118)|0;
    $120 = $25;
    $121 = $120 & 65535;
    $122 = $18;
    $123 = $122&65535;
    $124 = $123 << 16 >> 16;
    $125 = Math_imul($121, $124)|0;
    $126 = $125 >> 16;
    $127 = (($119) + ($126))|0;
    $128 = $127 << 2;
    $25 = $128;
   }
   $129 = $12;
   $130 = ((($129)) + 4360|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $23;
   $133 = (($131) - ($132))|0;
   $134 = (($133) - 2)|0;
   $22 = $134;
   while(1) {
    $135 = $22;
    $136 = $12;
    $137 = ((($136)) + 4360|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($135|0)<($138|0);
    if (!($139)) {
     break L12;
    }
    $140 = $25;
    $141 = $140 >> 16;
    $142 = $15;
    $143 = $22;
    $144 = (($142) + ($143<<1)|0);
    $145 = HEAP16[$144>>1]|0;
    $146 = $145 << 16 >> 16;
    $147 = Math_imul($141, $146)|0;
    $148 = $25;
    $149 = $148 & 65535;
    $150 = $15;
    $151 = $22;
    $152 = (($150) + ($151<<1)|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153 << 16 >> 16;
    $155 = Math_imul($149, $154)|0;
    $156 = $155 >> 16;
    $157 = (($147) + ($156))|0;
    $158 = $16;
    $159 = $22;
    $160 = (($158) + ($159<<2)|0);
    HEAP32[$160>>2] = $157;
    $161 = $22;
    $162 = (($161) + 1)|0;
    $22 = $162;
   }
  }
 } while(0);
 $163 = $24;
 $164 = ($163|0)!=(65536);
 if (!($164)) {
  STACKTOP = sp;return;
 }
 $165 = $12;
 $166 = ((($165)) + 4364|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $11;
 $169 = ((($168)) + 4616|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = (($167) - ($170))|0;
 $22 = $171;
 while(1) {
  $172 = $22;
  $173 = $12;
  $174 = ((($173)) + 4364|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($172|0)<($175|0);
  if (!($176)) {
   break;
  }
  $177 = $24;
  $178 = $177 >> 16;
  $179 = $12;
  $180 = ((($179)) + 1280|0);
  $181 = $22;
  $182 = (($180) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183&65535;
  $185 = $184 << 16 >> 16;
  $186 = Math_imul($178, $185)|0;
  $187 = $24;
  $188 = $187 & 65535;
  $189 = $12;
  $190 = ((($189)) + 1280|0);
  $191 = $22;
  $192 = (($190) + ($191<<2)|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $193&65535;
  $195 = $194 << 16 >> 16;
  $196 = Math_imul($188, $195)|0;
  $197 = $196 >> 16;
  $198 = (($186) + ($197))|0;
  $199 = $24;
  $200 = $12;
  $201 = ((($200)) + 1280|0);
  $202 = $22;
  $203 = (($201) + ($202<<2)|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = $204 >> 15;
  $206 = (($205) + 1)|0;
  $207 = $206 >> 1;
  $208 = Math_imul($199, $207)|0;
  $209 = (($198) + ($208))|0;
  $210 = $12;
  $211 = ((($210)) + 1280|0);
  $212 = $22;
  $213 = (($211) + ($212<<2)|0);
  HEAP32[$213>>2] = $209;
  $214 = $22;
  $215 = (($214) + 1)|0;
  $22 = $215;
 }
 $216 = $21;
 $217 = ($216|0)==(2);
 L28: do {
  if ($217) {
   $218 = $12;
   $219 = ((($218)) + 4376|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ($220|0)==(0);
   if ($221) {
    $222 = $12;
    $223 = ((($222)) + 4360|0);
    $224 = HEAP32[$223>>2]|0;
    $225 = $23;
    $226 = (($224) - ($225))|0;
    $227 = (($226) - 2)|0;
    $22 = $227;
    while(1) {
     $228 = $22;
     $229 = $12;
     $230 = ((($229)) + 4360|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($228|0)<($231|0);
     if (!($232)) {
      break L28;
     }
     $233 = $24;
     $234 = $233 >> 16;
     $235 = $16;
     $236 = $22;
     $237 = (($235) + ($236<<2)|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = $238&65535;
     $240 = $239 << 16 >> 16;
     $241 = Math_imul($234, $240)|0;
     $242 = $24;
     $243 = $242 & 65535;
     $244 = $16;
     $245 = $22;
     $246 = (($244) + ($245<<2)|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = $247&65535;
     $249 = $248 << 16 >> 16;
     $250 = Math_imul($243, $249)|0;
     $251 = $250 >> 16;
     $252 = (($241) + ($251))|0;
     $253 = $24;
     $254 = $16;
     $255 = $22;
     $256 = (($254) + ($255<<2)|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $257 >> 15;
     $259 = (($258) + 1)|0;
     $260 = $259 >> 1;
     $261 = Math_imul($253, $260)|0;
     $262 = (($252) + ($261))|0;
     $263 = $16;
     $264 = $22;
     $265 = (($263) + ($264<<2)|0);
     HEAP32[$265>>2] = $262;
     $266 = $22;
     $267 = (($266) + 1)|0;
     $22 = $267;
    }
   }
  }
 } while(0);
 $268 = $24;
 $269 = $268 >> 16;
 $270 = $12;
 $271 = ((($270)) + 4352|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272&65535;
 $274 = $273 << 16 >> 16;
 $275 = Math_imul($269, $274)|0;
 $276 = $24;
 $277 = $276 & 65535;
 $278 = $12;
 $279 = ((($278)) + 4352|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280&65535;
 $282 = $281 << 16 >> 16;
 $283 = Math_imul($277, $282)|0;
 $284 = $283 >> 16;
 $285 = (($275) + ($284))|0;
 $286 = $24;
 $287 = $12;
 $288 = ((($287)) + 4352|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = $289 >> 15;
 $291 = (($290) + 1)|0;
 $292 = $291 >> 1;
 $293 = Math_imul($286, $292)|0;
 $294 = (($285) + ($293))|0;
 $295 = $12;
 $296 = ((($295)) + 4352|0);
 HEAP32[$296>>2] = $294;
 $22 = 0;
 while(1) {
  $297 = $22;
  $298 = ($297|0)<(32);
  if (!($298)) {
   break;
  }
  $299 = $24;
  $300 = $299 >> 16;
  $301 = $12;
  $302 = ((($301)) + 3840|0);
  $303 = $22;
  $304 = (($302) + ($303<<2)|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $305&65535;
  $307 = $306 << 16 >> 16;
  $308 = Math_imul($300, $307)|0;
  $309 = $24;
  $310 = $309 & 65535;
  $311 = $12;
  $312 = ((($311)) + 3840|0);
  $313 = $22;
  $314 = (($312) + ($313<<2)|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = $315&65535;
  $317 = $316 << 16 >> 16;
  $318 = Math_imul($310, $317)|0;
  $319 = $318 >> 16;
  $320 = (($308) + ($319))|0;
  $321 = $24;
  $322 = $12;
  $323 = ((($322)) + 3840|0);
  $324 = $22;
  $325 = (($323) + ($324<<2)|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = $326 >> 15;
  $328 = (($327) + 1)|0;
  $329 = $328 >> 1;
  $330 = Math_imul($321, $329)|0;
  $331 = (($320) + ($330))|0;
  $332 = $12;
  $333 = ((($332)) + 3840|0);
  $334 = $22;
  $335 = (($333) + ($334<<2)|0);
  HEAP32[$335>>2] = $331;
  $336 = $22;
  $337 = (($336) + 1)|0;
  $22 = $337;
 }
 $22 = 0;
 while(1) {
  $338 = $22;
  $339 = ($338|0)<(16);
  if (!($339)) {
   break;
  }
  $340 = $24;
  $341 = $340 >> 16;
  $342 = $12;
  $343 = ((($342)) + 4288|0);
  $344 = $22;
  $345 = (($343) + ($344<<2)|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = $346&65535;
  $348 = $347 << 16 >> 16;
  $349 = Math_imul($341, $348)|0;
  $350 = $24;
  $351 = $350 & 65535;
  $352 = $12;
  $353 = ((($352)) + 4288|0);
  $354 = $22;
  $355 = (($353) + ($354<<2)|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = $356&65535;
  $358 = $357 << 16 >> 16;
  $359 = Math_imul($351, $358)|0;
  $360 = $359 >> 16;
  $361 = (($349) + ($360))|0;
  $362 = $24;
  $363 = $12;
  $364 = ((($363)) + 4288|0);
  $365 = $22;
  $366 = (($364) + ($365<<2)|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $367 >> 15;
  $369 = (($368) + 1)|0;
  $370 = $369 >> 1;
  $371 = Math_imul($362, $370)|0;
  $372 = (($361) + ($371))|0;
  $373 = $12;
  $374 = ((($373)) + 4288|0);
  $375 = $22;
  $376 = (($374) + ($375<<2)|0);
  HEAP32[$376>>2] = $372;
  $377 = $22;
  $378 = (($377) + 1)|0;
  $22 = $378;
 }
 STACKTOP = sp;return;
}
function _silk_noise_shape_quantizer($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 var $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0;
 var $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0;
 var $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0;
 var $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0;
 var $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0;
 var $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $19 = $0;
 $20 = $1;
 $21 = $2;
 $22 = $3;
 $23 = $4;
 $24 = $5;
 $25 = $6;
 $26 = $7;
 $27 = $8;
 $28 = $9;
 $29 = $10;
 $30 = $11;
 $31 = $12;
 $32 = $13;
 $33 = $14;
 $34 = $15;
 $35 = $16;
 $36 = $17;
 $37 = $18;
 $62 = $19;
 $63 = ((($62)) + 1280|0);
 $64 = $19;
 $65 = ((($64)) + 4364|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $28;
 $68 = (($66) - ($67))|0;
 $69 = (($68) + 1)|0;
 $70 = (($63) + ($69<<2)|0);
 $60 = $70;
 $71 = $24;
 $72 = $19;
 $73 = ((($72)) + 4360|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $28;
 $76 = (($74) - ($75))|0;
 $77 = (($76) + 2)|0;
 $78 = (($71) + ($77<<2)|0);
 $61 = $78;
 $79 = $32;
 $80 = $79 >> 6;
 $55 = $80;
 $81 = $19;
 $82 = ((($81)) + 3840|0);
 $83 = ((($82)) + 124|0);
 $59 = $83;
 $38 = 0;
 while(1) {
  $84 = $38;
  $85 = $35;
  $86 = ($84|0)<($85|0);
  $87 = $19;
  if (!($86)) {
   break;
  }
  $88 = ((($87)) + 4368|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = Math_imul($89, 196314165)|0;
  $91 = (907633515 + ($90))|0;
  $92 = $19;
  $93 = ((($92)) + 4368|0);
  HEAP32[$93>>2] = $91;
  $94 = $37;
  $95 = $94 >> 1;
  $41 = $95;
  $96 = $41;
  $97 = $59;
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 >> 16;
  $100 = $25;
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = Math_imul($99, $102)|0;
  $104 = $59;
  $105 = HEAP32[$104>>2]|0;
  $106 = $105 & 65535;
  $107 = $25;
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = Math_imul($106, $109)|0;
  $111 = $110 >> 16;
  $112 = (($103) + ($111))|0;
  $113 = (($96) + ($112))|0;
  $41 = $113;
  $114 = $41;
  $115 = $59;
  $116 = ((($115)) + -4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117 >> 16;
  $119 = $25;
  $120 = ((($119)) + 2|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121 << 16 >> 16;
  $123 = Math_imul($118, $122)|0;
  $124 = $59;
  $125 = ((($124)) + -4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $126 & 65535;
  $128 = $25;
  $129 = ((($128)) + 2|0);
  $130 = HEAP16[$129>>1]|0;
  $131 = $130 << 16 >> 16;
  $132 = Math_imul($127, $131)|0;
  $133 = $132 >> 16;
  $134 = (($123) + ($133))|0;
  $135 = (($114) + ($134))|0;
  $41 = $135;
  $136 = $41;
  $137 = $59;
  $138 = ((($137)) + -8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $139 >> 16;
  $141 = $25;
  $142 = ((($141)) + 4|0);
  $143 = HEAP16[$142>>1]|0;
  $144 = $143 << 16 >> 16;
  $145 = Math_imul($140, $144)|0;
  $146 = $59;
  $147 = ((($146)) + -8|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $148 & 65535;
  $150 = $25;
  $151 = ((($150)) + 4|0);
  $152 = HEAP16[$151>>1]|0;
  $153 = $152 << 16 >> 16;
  $154 = Math_imul($149, $153)|0;
  $155 = $154 >> 16;
  $156 = (($145) + ($155))|0;
  $157 = (($136) + ($156))|0;
  $41 = $157;
  $158 = $41;
  $159 = $59;
  $160 = ((($159)) + -12|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161 >> 16;
  $163 = $25;
  $164 = ((($163)) + 6|0);
  $165 = HEAP16[$164>>1]|0;
  $166 = $165 << 16 >> 16;
  $167 = Math_imul($162, $166)|0;
  $168 = $59;
  $169 = ((($168)) + -12|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $170 & 65535;
  $172 = $25;
  $173 = ((($172)) + 6|0);
  $174 = HEAP16[$173>>1]|0;
  $175 = $174 << 16 >> 16;
  $176 = Math_imul($171, $175)|0;
  $177 = $176 >> 16;
  $178 = (($167) + ($177))|0;
  $179 = (($158) + ($178))|0;
  $41 = $179;
  $180 = $41;
  $181 = $59;
  $182 = ((($181)) + -16|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183 >> 16;
  $185 = $25;
  $186 = ((($185)) + 8|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187 << 16 >> 16;
  $189 = Math_imul($184, $188)|0;
  $190 = $59;
  $191 = ((($190)) + -16|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $192 & 65535;
  $194 = $25;
  $195 = ((($194)) + 8|0);
  $196 = HEAP16[$195>>1]|0;
  $197 = $196 << 16 >> 16;
  $198 = Math_imul($193, $197)|0;
  $199 = $198 >> 16;
  $200 = (($189) + ($199))|0;
  $201 = (($180) + ($200))|0;
  $41 = $201;
  $202 = $41;
  $203 = $59;
  $204 = ((($203)) + -20|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $205 >> 16;
  $207 = $25;
  $208 = ((($207)) + 10|0);
  $209 = HEAP16[$208>>1]|0;
  $210 = $209 << 16 >> 16;
  $211 = Math_imul($206, $210)|0;
  $212 = $59;
  $213 = ((($212)) + -20|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $214 & 65535;
  $216 = $25;
  $217 = ((($216)) + 10|0);
  $218 = HEAP16[$217>>1]|0;
  $219 = $218 << 16 >> 16;
  $220 = Math_imul($215, $219)|0;
  $221 = $220 >> 16;
  $222 = (($211) + ($221))|0;
  $223 = (($202) + ($222))|0;
  $41 = $223;
  $224 = $41;
  $225 = $59;
  $226 = ((($225)) + -24|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = $227 >> 16;
  $229 = $25;
  $230 = ((($229)) + 12|0);
  $231 = HEAP16[$230>>1]|0;
  $232 = $231 << 16 >> 16;
  $233 = Math_imul($228, $232)|0;
  $234 = $59;
  $235 = ((($234)) + -24|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = $236 & 65535;
  $238 = $25;
  $239 = ((($238)) + 12|0);
  $240 = HEAP16[$239>>1]|0;
  $241 = $240 << 16 >> 16;
  $242 = Math_imul($237, $241)|0;
  $243 = $242 >> 16;
  $244 = (($233) + ($243))|0;
  $245 = (($224) + ($244))|0;
  $41 = $245;
  $246 = $41;
  $247 = $59;
  $248 = ((($247)) + -28|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = $249 >> 16;
  $251 = $25;
  $252 = ((($251)) + 14|0);
  $253 = HEAP16[$252>>1]|0;
  $254 = $253 << 16 >> 16;
  $255 = Math_imul($250, $254)|0;
  $256 = $59;
  $257 = ((($256)) + -28|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $258 & 65535;
  $260 = $25;
  $261 = ((($260)) + 14|0);
  $262 = HEAP16[$261>>1]|0;
  $263 = $262 << 16 >> 16;
  $264 = Math_imul($259, $263)|0;
  $265 = $264 >> 16;
  $266 = (($255) + ($265))|0;
  $267 = (($246) + ($266))|0;
  $41 = $267;
  $268 = $41;
  $269 = $59;
  $270 = ((($269)) + -32|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $271 >> 16;
  $273 = $25;
  $274 = ((($273)) + 16|0);
  $275 = HEAP16[$274>>1]|0;
  $276 = $275 << 16 >> 16;
  $277 = Math_imul($272, $276)|0;
  $278 = $59;
  $279 = ((($278)) + -32|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $280 & 65535;
  $282 = $25;
  $283 = ((($282)) + 16|0);
  $284 = HEAP16[$283>>1]|0;
  $285 = $284 << 16 >> 16;
  $286 = Math_imul($281, $285)|0;
  $287 = $286 >> 16;
  $288 = (($277) + ($287))|0;
  $289 = (($268) + ($288))|0;
  $41 = $289;
  $290 = $41;
  $291 = $59;
  $292 = ((($291)) + -36|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = $293 >> 16;
  $295 = $25;
  $296 = ((($295)) + 18|0);
  $297 = HEAP16[$296>>1]|0;
  $298 = $297 << 16 >> 16;
  $299 = Math_imul($294, $298)|0;
  $300 = $59;
  $301 = ((($300)) + -36|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $302 & 65535;
  $304 = $25;
  $305 = ((($304)) + 18|0);
  $306 = HEAP16[$305>>1]|0;
  $307 = $306 << 16 >> 16;
  $308 = Math_imul($303, $307)|0;
  $309 = $308 >> 16;
  $310 = (($299) + ($309))|0;
  $311 = (($290) + ($310))|0;
  $41 = $311;
  $312 = $37;
  $313 = ($312|0)==(16);
  if ($313) {
   $314 = $41;
   $315 = $59;
   $316 = ((($315)) + -40|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = $317 >> 16;
   $319 = $25;
   $320 = ((($319)) + 20|0);
   $321 = HEAP16[$320>>1]|0;
   $322 = $321 << 16 >> 16;
   $323 = Math_imul($318, $322)|0;
   $324 = $59;
   $325 = ((($324)) + -40|0);
   $326 = HEAP32[$325>>2]|0;
   $327 = $326 & 65535;
   $328 = $25;
   $329 = ((($328)) + 20|0);
   $330 = HEAP16[$329>>1]|0;
   $331 = $330 << 16 >> 16;
   $332 = Math_imul($327, $331)|0;
   $333 = $332 >> 16;
   $334 = (($323) + ($333))|0;
   $335 = (($314) + ($334))|0;
   $41 = $335;
   $336 = $41;
   $337 = $59;
   $338 = ((($337)) + -44|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $339 >> 16;
   $341 = $25;
   $342 = ((($341)) + 22|0);
   $343 = HEAP16[$342>>1]|0;
   $344 = $343 << 16 >> 16;
   $345 = Math_imul($340, $344)|0;
   $346 = $59;
   $347 = ((($346)) + -44|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $348 & 65535;
   $350 = $25;
   $351 = ((($350)) + 22|0);
   $352 = HEAP16[$351>>1]|0;
   $353 = $352 << 16 >> 16;
   $354 = Math_imul($349, $353)|0;
   $355 = $354 >> 16;
   $356 = (($345) + ($355))|0;
   $357 = (($336) + ($356))|0;
   $41 = $357;
   $358 = $41;
   $359 = $59;
   $360 = ((($359)) + -48|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $361 >> 16;
   $363 = $25;
   $364 = ((($363)) + 24|0);
   $365 = HEAP16[$364>>1]|0;
   $366 = $365 << 16 >> 16;
   $367 = Math_imul($362, $366)|0;
   $368 = $59;
   $369 = ((($368)) + -48|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = $370 & 65535;
   $372 = $25;
   $373 = ((($372)) + 24|0);
   $374 = HEAP16[$373>>1]|0;
   $375 = $374 << 16 >> 16;
   $376 = Math_imul($371, $375)|0;
   $377 = $376 >> 16;
   $378 = (($367) + ($377))|0;
   $379 = (($358) + ($378))|0;
   $41 = $379;
   $380 = $41;
   $381 = $59;
   $382 = ((($381)) + -52|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $383 >> 16;
   $385 = $25;
   $386 = ((($385)) + 26|0);
   $387 = HEAP16[$386>>1]|0;
   $388 = $387 << 16 >> 16;
   $389 = Math_imul($384, $388)|0;
   $390 = $59;
   $391 = ((($390)) + -52|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = $392 & 65535;
   $394 = $25;
   $395 = ((($394)) + 26|0);
   $396 = HEAP16[$395>>1]|0;
   $397 = $396 << 16 >> 16;
   $398 = Math_imul($393, $397)|0;
   $399 = $398 >> 16;
   $400 = (($389) + ($399))|0;
   $401 = (($380) + ($400))|0;
   $41 = $401;
   $402 = $41;
   $403 = $59;
   $404 = ((($403)) + -56|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $405 >> 16;
   $407 = $25;
   $408 = ((($407)) + 28|0);
   $409 = HEAP16[$408>>1]|0;
   $410 = $409 << 16 >> 16;
   $411 = Math_imul($406, $410)|0;
   $412 = $59;
   $413 = ((($412)) + -56|0);
   $414 = HEAP32[$413>>2]|0;
   $415 = $414 & 65535;
   $416 = $25;
   $417 = ((($416)) + 28|0);
   $418 = HEAP16[$417>>1]|0;
   $419 = $418 << 16 >> 16;
   $420 = Math_imul($415, $419)|0;
   $421 = $420 >> 16;
   $422 = (($411) + ($421))|0;
   $423 = (($402) + ($422))|0;
   $41 = $423;
   $424 = $41;
   $425 = $59;
   $426 = ((($425)) + -60|0);
   $427 = HEAP32[$426>>2]|0;
   $428 = $427 >> 16;
   $429 = $25;
   $430 = ((($429)) + 30|0);
   $431 = HEAP16[$430>>1]|0;
   $432 = $431 << 16 >> 16;
   $433 = Math_imul($428, $432)|0;
   $434 = $59;
   $435 = ((($434)) + -60|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = $436 & 65535;
   $438 = $25;
   $439 = ((($438)) + 30|0);
   $440 = HEAP16[$439>>1]|0;
   $441 = $440 << 16 >> 16;
   $442 = Math_imul($437, $441)|0;
   $443 = $442 >> 16;
   $444 = (($433) + ($443))|0;
   $445 = (($424) + ($444))|0;
   $41 = $445;
  }
  $446 = $20;
  $447 = ($446|0)==(2);
  if ($447) {
   $40 = 2;
   $448 = $40;
   $449 = $61;
   $450 = HEAP32[$449>>2]|0;
   $451 = $450 >> 16;
   $452 = $26;
   $453 = HEAP16[$452>>1]|0;
   $454 = $453 << 16 >> 16;
   $455 = Math_imul($451, $454)|0;
   $456 = $61;
   $457 = HEAP32[$456>>2]|0;
   $458 = $457 & 65535;
   $459 = $26;
   $460 = HEAP16[$459>>1]|0;
   $461 = $460 << 16 >> 16;
   $462 = Math_imul($458, $461)|0;
   $463 = $462 >> 16;
   $464 = (($455) + ($463))|0;
   $465 = (($448) + ($464))|0;
   $40 = $465;
   $466 = $40;
   $467 = $61;
   $468 = ((($467)) + -4|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = $469 >> 16;
   $471 = $26;
   $472 = ((($471)) + 2|0);
   $473 = HEAP16[$472>>1]|0;
   $474 = $473 << 16 >> 16;
   $475 = Math_imul($470, $474)|0;
   $476 = $61;
   $477 = ((($476)) + -4|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = $478 & 65535;
   $480 = $26;
   $481 = ((($480)) + 2|0);
   $482 = HEAP16[$481>>1]|0;
   $483 = $482 << 16 >> 16;
   $484 = Math_imul($479, $483)|0;
   $485 = $484 >> 16;
   $486 = (($475) + ($485))|0;
   $487 = (($466) + ($486))|0;
   $40 = $487;
   $488 = $40;
   $489 = $61;
   $490 = ((($489)) + -8|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = $491 >> 16;
   $493 = $26;
   $494 = ((($493)) + 4|0);
   $495 = HEAP16[$494>>1]|0;
   $496 = $495 << 16 >> 16;
   $497 = Math_imul($492, $496)|0;
   $498 = $61;
   $499 = ((($498)) + -8|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = $500 & 65535;
   $502 = $26;
   $503 = ((($502)) + 4|0);
   $504 = HEAP16[$503>>1]|0;
   $505 = $504 << 16 >> 16;
   $506 = Math_imul($501, $505)|0;
   $507 = $506 >> 16;
   $508 = (($497) + ($507))|0;
   $509 = (($488) + ($508))|0;
   $40 = $509;
   $510 = $40;
   $511 = $61;
   $512 = ((($511)) + -12|0);
   $513 = HEAP32[$512>>2]|0;
   $514 = $513 >> 16;
   $515 = $26;
   $516 = ((($515)) + 6|0);
   $517 = HEAP16[$516>>1]|0;
   $518 = $517 << 16 >> 16;
   $519 = Math_imul($514, $518)|0;
   $520 = $61;
   $521 = ((($520)) + -12|0);
   $522 = HEAP32[$521>>2]|0;
   $523 = $522 & 65535;
   $524 = $26;
   $525 = ((($524)) + 6|0);
   $526 = HEAP16[$525>>1]|0;
   $527 = $526 << 16 >> 16;
   $528 = Math_imul($523, $527)|0;
   $529 = $528 >> 16;
   $530 = (($519) + ($529))|0;
   $531 = (($510) + ($530))|0;
   $40 = $531;
   $532 = $40;
   $533 = $61;
   $534 = ((($533)) + -16|0);
   $535 = HEAP32[$534>>2]|0;
   $536 = $535 >> 16;
   $537 = $26;
   $538 = ((($537)) + 8|0);
   $539 = HEAP16[$538>>1]|0;
   $540 = $539 << 16 >> 16;
   $541 = Math_imul($536, $540)|0;
   $542 = $61;
   $543 = ((($542)) + -16|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = $544 & 65535;
   $546 = $26;
   $547 = ((($546)) + 8|0);
   $548 = HEAP16[$547>>1]|0;
   $549 = $548 << 16 >> 16;
   $550 = Math_imul($545, $549)|0;
   $551 = $550 >> 16;
   $552 = (($541) + ($551))|0;
   $553 = (($532) + ($552))|0;
   $40 = $553;
   $554 = $61;
   $555 = ((($554)) + 4|0);
   $61 = $555;
  } else {
   $40 = 0;
  }
  $556 = $59;
  $557 = HEAP32[$556>>2]|0;
  $57 = $557;
  $558 = $19;
  $559 = ((($558)) + 4288|0);
  $560 = HEAP32[$559>>2]|0;
  $56 = $560;
  $561 = $57;
  $562 = $19;
  $563 = ((($562)) + 4288|0);
  HEAP32[$563>>2] = $561;
  $564 = $36;
  $565 = $564 >> 1;
  $42 = $565;
  $566 = $42;
  $567 = $57;
  $568 = $567 >> 16;
  $569 = $27;
  $570 = HEAP16[$569>>1]|0;
  $571 = $570 << 16 >> 16;
  $572 = Math_imul($568, $571)|0;
  $573 = $57;
  $574 = $573 & 65535;
  $575 = $27;
  $576 = HEAP16[$575>>1]|0;
  $577 = $576 << 16 >> 16;
  $578 = Math_imul($574, $577)|0;
  $579 = $578 >> 16;
  $580 = (($572) + ($579))|0;
  $581 = (($566) + ($580))|0;
  $42 = $581;
  $39 = 2;
  while(1) {
   $582 = $39;
   $583 = $36;
   $584 = ($582|0)<($583|0);
   if (!($584)) {
    break;
   }
   $585 = $19;
   $586 = ((($585)) + 4288|0);
   $587 = $39;
   $588 = (($587) - 1)|0;
   $589 = (($586) + ($588<<2)|0);
   $590 = HEAP32[$589>>2]|0;
   $57 = $590;
   $591 = $56;
   $592 = $19;
   $593 = ((($592)) + 4288|0);
   $594 = $39;
   $595 = (($594) - 1)|0;
   $596 = (($593) + ($595<<2)|0);
   HEAP32[$596>>2] = $591;
   $597 = $42;
   $598 = $56;
   $599 = $598 >> 16;
   $600 = $27;
   $601 = $39;
   $602 = (($601) - 1)|0;
   $603 = (($600) + ($602<<1)|0);
   $604 = HEAP16[$603>>1]|0;
   $605 = $604 << 16 >> 16;
   $606 = Math_imul($599, $605)|0;
   $607 = $56;
   $608 = $607 & 65535;
   $609 = $27;
   $610 = $39;
   $611 = (($610) - 1)|0;
   $612 = (($609) + ($611<<1)|0);
   $613 = HEAP16[$612>>1]|0;
   $614 = $613 << 16 >> 16;
   $615 = Math_imul($608, $614)|0;
   $616 = $615 >> 16;
   $617 = (($606) + ($616))|0;
   $618 = (($597) + ($617))|0;
   $42 = $618;
   $619 = $19;
   $620 = ((($619)) + 4288|0);
   $621 = $39;
   $622 = (($621) + 0)|0;
   $623 = (($620) + ($622<<2)|0);
   $624 = HEAP32[$623>>2]|0;
   $56 = $624;
   $625 = $57;
   $626 = $19;
   $627 = ((($626)) + 4288|0);
   $628 = $39;
   $629 = (($628) + 0)|0;
   $630 = (($627) + ($629<<2)|0);
   HEAP32[$630>>2] = $625;
   $631 = $42;
   $632 = $57;
   $633 = $632 >> 16;
   $634 = $27;
   $635 = $39;
   $636 = (($634) + ($635<<1)|0);
   $637 = HEAP16[$636>>1]|0;
   $638 = $637 << 16 >> 16;
   $639 = Math_imul($633, $638)|0;
   $640 = $57;
   $641 = $640 & 65535;
   $642 = $27;
   $643 = $39;
   $644 = (($642) + ($643<<1)|0);
   $645 = HEAP16[$644>>1]|0;
   $646 = $645 << 16 >> 16;
   $647 = Math_imul($641, $646)|0;
   $648 = $647 >> 16;
   $649 = (($639) + ($648))|0;
   $650 = (($631) + ($649))|0;
   $42 = $650;
   $651 = $39;
   $652 = (($651) + 2)|0;
   $39 = $652;
  }
  $653 = $56;
  $654 = $19;
  $655 = ((($654)) + 4288|0);
  $656 = $36;
  $657 = (($656) - 1)|0;
  $658 = (($655) + ($657<<2)|0);
  HEAP32[$658>>2] = $653;
  $659 = $42;
  $660 = $56;
  $661 = $660 >> 16;
  $662 = $27;
  $663 = $36;
  $664 = (($663) - 1)|0;
  $665 = (($662) + ($664<<1)|0);
  $666 = HEAP16[$665>>1]|0;
  $667 = $666 << 16 >> 16;
  $668 = Math_imul($661, $667)|0;
  $669 = $56;
  $670 = $669 & 65535;
  $671 = $27;
  $672 = $36;
  $673 = (($672) - 1)|0;
  $674 = (($671) + ($673<<1)|0);
  $675 = HEAP16[$674>>1]|0;
  $676 = $675 << 16 >> 16;
  $677 = Math_imul($670, $676)|0;
  $678 = $677 >> 16;
  $679 = (($668) + ($678))|0;
  $680 = (($659) + ($679))|0;
  $42 = $680;
  $681 = $42;
  $682 = $681 << 1;
  $42 = $682;
  $683 = $42;
  $684 = $19;
  $685 = ((($684)) + 4352|0);
  $686 = HEAP32[$685>>2]|0;
  $687 = $686 >> 16;
  $688 = $30;
  $689 = $688&65535;
  $690 = $689 << 16 >> 16;
  $691 = Math_imul($687, $690)|0;
  $692 = $19;
  $693 = ((($692)) + 4352|0);
  $694 = HEAP32[$693>>2]|0;
  $695 = $694 & 65535;
  $696 = $30;
  $697 = $696&65535;
  $698 = $697 << 16 >> 16;
  $699 = Math_imul($695, $698)|0;
  $700 = $699 >> 16;
  $701 = (($691) + ($700))|0;
  $702 = (($683) + ($701))|0;
  $42 = $702;
  $703 = $19;
  $704 = ((($703)) + 1280|0);
  $705 = $19;
  $706 = ((($705)) + 4364|0);
  $707 = HEAP32[$706>>2]|0;
  $708 = (($707) - 1)|0;
  $709 = (($704) + ($708<<2)|0);
  $710 = HEAP32[$709>>2]|0;
  $711 = $710 >> 16;
  $712 = $31;
  $713 = $712&65535;
  $714 = $713 << 16 >> 16;
  $715 = Math_imul($711, $714)|0;
  $716 = $19;
  $717 = ((($716)) + 1280|0);
  $718 = $19;
  $719 = ((($718)) + 4364|0);
  $720 = HEAP32[$719>>2]|0;
  $721 = (($720) - 1)|0;
  $722 = (($717) + ($721<<2)|0);
  $723 = HEAP32[$722>>2]|0;
  $724 = $723 & 65535;
  $725 = $31;
  $726 = $725&65535;
  $727 = $726 << 16 >> 16;
  $728 = Math_imul($724, $727)|0;
  $729 = $728 >> 16;
  $730 = (($715) + ($729))|0;
  $44 = $730;
  $731 = $44;
  $732 = $19;
  $733 = ((($732)) + 4352|0);
  $734 = HEAP32[$733>>2]|0;
  $735 = $734 >> 16;
  $736 = $31;
  $737 = $736 >> 16;
  $738 = Math_imul($735, $737)|0;
  $739 = (($731) + ($738))|0;
  $740 = $19;
  $741 = ((($740)) + 4352|0);
  $742 = HEAP32[$741>>2]|0;
  $743 = $742 & 65535;
  $744 = $31;
  $745 = $744 >> 16;
  $746 = Math_imul($743, $745)|0;
  $747 = $746 >> 16;
  $748 = (($739) + ($747))|0;
  $44 = $748;
  $749 = $41;
  $750 = $749 << 2;
  $751 = $42;
  $752 = (($750) - ($751))|0;
  $56 = $752;
  $753 = $56;
  $754 = $44;
  $755 = (($753) - ($754))|0;
  $56 = $755;
  $756 = $28;
  $757 = ($756|0)>(0);
  if ($757) {
   $758 = $60;
   $759 = HEAP32[$758>>2]|0;
   $760 = $60;
   $761 = ((($760)) + -8|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = (($759) + ($762))|0;
   $764 = $763 >> 16;
   $765 = $29;
   $766 = $765&65535;
   $767 = $766 << 16 >> 16;
   $768 = Math_imul($764, $767)|0;
   $769 = $60;
   $770 = HEAP32[$769>>2]|0;
   $771 = $60;
   $772 = ((($771)) + -8|0);
   $773 = HEAP32[$772>>2]|0;
   $774 = (($770) + ($773))|0;
   $775 = $774 & 65535;
   $776 = $29;
   $777 = $776&65535;
   $778 = $777 << 16 >> 16;
   $779 = Math_imul($775, $778)|0;
   $780 = $779 >> 16;
   $781 = (($768) + ($780))|0;
   $43 = $781;
   $782 = $43;
   $783 = $60;
   $784 = ((($783)) + -4|0);
   $785 = HEAP32[$784>>2]|0;
   $786 = $785 >> 16;
   $787 = $29;
   $788 = $787 >> 16;
   $789 = Math_imul($786, $788)|0;
   $790 = (($782) + ($789))|0;
   $791 = $60;
   $792 = ((($791)) + -4|0);
   $793 = HEAP32[$792>>2]|0;
   $794 = $793 & 65535;
   $795 = $29;
   $796 = $795 >> 16;
   $797 = Math_imul($794, $796)|0;
   $798 = $797 >> 16;
   $799 = (($790) + ($798))|0;
   $43 = $799;
   $800 = $43;
   $801 = $800 << 1;
   $43 = $801;
   $802 = $60;
   $803 = ((($802)) + 4|0);
   $60 = $803;
   $804 = $40;
   $805 = $43;
   $806 = (($804) - ($805))|0;
   $57 = $806;
   $807 = $57;
   $808 = $56;
   $809 = $808 << 1;
   $810 = (($807) + ($809))|0;
   $56 = $810;
   $811 = $56;
   $812 = $811 >> 2;
   $813 = (($812) + 1)|0;
   $814 = $813 >> 1;
   $56 = $814;
  } else {
   $815 = $56;
   $816 = $815 >> 1;
   $817 = (($816) + 1)|0;
   $818 = $817 >> 1;
   $56 = $818;
  }
  $819 = $21;
  $820 = $38;
  $821 = (($819) + ($820<<2)|0);
  $822 = HEAP32[$821>>2]|0;
  $823 = $56;
  $824 = (($822) - ($823))|0;
  $45 = $824;
  $825 = $19;
  $826 = ((($825)) + 4368|0);
  $827 = HEAP32[$826>>2]|0;
  $828 = ($827|0)<(0);
  if ($828) {
   $829 = $45;
   $830 = (0 - ($829))|0;
   $45 = $830;
  }
  $831 = $45;
  $832 = ($831|0)>(30720);
  if ($832) {
   $837 = 30720;
  } else {
   $833 = $45;
   $834 = ($833|0)<(-31744);
   $835 = $45;
   $836 = $834 ? -31744 : $835;
   $837 = $836;
  }
  $45 = $837;
  $838 = $45;
  $839 = $34;
  $840 = (($838) - ($839))|0;
  $48 = $840;
  $841 = $48;
  $842 = $841 >> 10;
  $47 = $842;
  $843 = $47;
  $844 = ($843|0)>(0);
  $845 = $47;
  do {
   if ($844) {
    $846 = $845 << 10;
    $847 = (($846) - 80)|0;
    $48 = $847;
    $848 = $48;
    $849 = $34;
    $850 = (($848) + ($849))|0;
    $48 = $850;
    $851 = $48;
    $852 = (($851) + 1024)|0;
    $49 = $852;
    $853 = $48;
    $854 = $853&65535;
    $855 = $854 << 16 >> 16;
    $856 = $33;
    $857 = $856&65535;
    $858 = $857 << 16 >> 16;
    $859 = Math_imul($855, $858)|0;
    $50 = $859;
    $860 = $49;
    $861 = $860&65535;
    $862 = $861 << 16 >> 16;
    $863 = $33;
    $864 = $863&65535;
    $865 = $864 << 16 >> 16;
    $866 = Math_imul($862, $865)|0;
    $51 = $866;
   } else {
    $867 = ($845|0)==(0);
    if ($867) {
     $868 = $34;
     $48 = $868;
     $869 = $48;
     $870 = (($869) + 944)|0;
     $49 = $870;
     $871 = $48;
     $872 = $871&65535;
     $873 = $872 << 16 >> 16;
     $874 = $33;
     $875 = $874&65535;
     $876 = $875 << 16 >> 16;
     $877 = Math_imul($873, $876)|0;
     $50 = $877;
     $878 = $49;
     $879 = $878&65535;
     $880 = $879 << 16 >> 16;
     $881 = $33;
     $882 = $881&65535;
     $883 = $882 << 16 >> 16;
     $884 = Math_imul($880, $883)|0;
     $51 = $884;
     break;
    }
    $885 = $47;
    $886 = ($885|0)==(-1);
    if ($886) {
     $887 = $34;
     $49 = $887;
     $888 = $49;
     $889 = (($888) - 944)|0;
     $48 = $889;
     $890 = $48;
     $891 = (0 - ($890))|0;
     $892 = $891&65535;
     $893 = $892 << 16 >> 16;
     $894 = $33;
     $895 = $894&65535;
     $896 = $895 << 16 >> 16;
     $897 = Math_imul($893, $896)|0;
     $50 = $897;
     $898 = $49;
     $899 = $898&65535;
     $900 = $899 << 16 >> 16;
     $901 = $33;
     $902 = $901&65535;
     $903 = $902 << 16 >> 16;
     $904 = Math_imul($900, $903)|0;
     $51 = $904;
     break;
    } else {
     $905 = $47;
     $906 = $905 << 10;
     $907 = (($906) + 80)|0;
     $48 = $907;
     $908 = $48;
     $909 = $34;
     $910 = (($908) + ($909))|0;
     $48 = $910;
     $911 = $48;
     $912 = (($911) + 1024)|0;
     $49 = $912;
     $913 = $48;
     $914 = (0 - ($913))|0;
     $915 = $914&65535;
     $916 = $915 << 16 >> 16;
     $917 = $33;
     $918 = $917&65535;
     $919 = $918 << 16 >> 16;
     $920 = Math_imul($916, $919)|0;
     $50 = $920;
     $921 = $49;
     $922 = (0 - ($921))|0;
     $923 = $922&65535;
     $924 = $923 << 16 >> 16;
     $925 = $33;
     $926 = $925&65535;
     $927 = $926 << 16 >> 16;
     $928 = Math_imul($924, $927)|0;
     $51 = $928;
     break;
    }
   }
  } while(0);
  $929 = $45;
  $930 = $48;
  $931 = (($929) - ($930))|0;
  $46 = $931;
  $932 = $50;
  $933 = $46;
  $934 = $933&65535;
  $935 = $934 << 16 >> 16;
  $936 = $46;
  $937 = $936&65535;
  $938 = $937 << 16 >> 16;
  $939 = Math_imul($935, $938)|0;
  $940 = (($932) + ($939))|0;
  $50 = $940;
  $941 = $45;
  $942 = $49;
  $943 = (($941) - ($942))|0;
  $46 = $943;
  $944 = $51;
  $945 = $46;
  $946 = $945&65535;
  $947 = $946 << 16 >> 16;
  $948 = $46;
  $949 = $948&65535;
  $950 = $949 << 16 >> 16;
  $951 = Math_imul($947, $950)|0;
  $952 = (($944) + ($951))|0;
  $51 = $952;
  $953 = $51;
  $954 = $50;
  $955 = ($953|0)<($954|0);
  if ($955) {
   $956 = $49;
   $48 = $956;
  }
  $957 = $48;
  $958 = $957 >> 9;
  $959 = (($958) + 1)|0;
  $960 = $959 >> 1;
  $961 = $960&255;
  $962 = $22;
  $963 = $38;
  $964 = (($962) + ($963)|0);
  HEAP8[$964>>0] = $961;
  $965 = $48;
  $966 = $965 << 4;
  $52 = $966;
  $967 = $19;
  $968 = ((($967)) + 4368|0);
  $969 = HEAP32[$968>>2]|0;
  $970 = ($969|0)<(0);
  if ($970) {
   $971 = $52;
   $972 = (0 - ($971))|0;
   $52 = $972;
  }
  $973 = $52;
  $974 = $40;
  $975 = $974 << 1;
  $976 = (($973) + ($975))|0;
  $53 = $976;
  $977 = $53;
  $978 = $41;
  $979 = $978 << 4;
  $980 = (($977) + ($979))|0;
  $54 = $980;
  $981 = $54;
  $982 = $981 >> 16;
  $983 = $55;
  $984 = $983&65535;
  $985 = $984 << 16 >> 16;
  $986 = Math_imul($982, $985)|0;
  $987 = $54;
  $988 = $987 & 65535;
  $989 = $55;
  $990 = $989&65535;
  $991 = $990 << 16 >> 16;
  $992 = Math_imul($988, $991)|0;
  $993 = $992 >> 16;
  $994 = (($986) + ($993))|0;
  $995 = $54;
  $996 = $55;
  $997 = $996 >> 15;
  $998 = (($997) + 1)|0;
  $999 = $998 >> 1;
  $1000 = Math_imul($995, $999)|0;
  $1001 = (($994) + ($1000))|0;
  $1002 = $1001 >> 7;
  $1003 = (($1002) + 1)|0;
  $1004 = $1003 >> 1;
  $1005 = ($1004|0)>(32767);
  if ($1005) {
   $1056 = 32767;
  } else {
   $1006 = $54;
   $1007 = $1006 >> 16;
   $1008 = $55;
   $1009 = $1008&65535;
   $1010 = $1009 << 16 >> 16;
   $1011 = Math_imul($1007, $1010)|0;
   $1012 = $54;
   $1013 = $1012 & 65535;
   $1014 = $55;
   $1015 = $1014&65535;
   $1016 = $1015 << 16 >> 16;
   $1017 = Math_imul($1013, $1016)|0;
   $1018 = $1017 >> 16;
   $1019 = (($1011) + ($1018))|0;
   $1020 = $54;
   $1021 = $55;
   $1022 = $1021 >> 15;
   $1023 = (($1022) + 1)|0;
   $1024 = $1023 >> 1;
   $1025 = Math_imul($1020, $1024)|0;
   $1026 = (($1019) + ($1025))|0;
   $1027 = $1026 >> 7;
   $1028 = (($1027) + 1)|0;
   $1029 = $1028 >> 1;
   $1030 = ($1029|0)<(-32768);
   if ($1030) {
    $1056 = -32768;
   } else {
    $1031 = $54;
    $1032 = $1031 >> 16;
    $1033 = $55;
    $1034 = $1033&65535;
    $1035 = $1034 << 16 >> 16;
    $1036 = Math_imul($1032, $1035)|0;
    $1037 = $54;
    $1038 = $1037 & 65535;
    $1039 = $55;
    $1040 = $1039&65535;
    $1041 = $1040 << 16 >> 16;
    $1042 = Math_imul($1038, $1041)|0;
    $1043 = $1042 >> 16;
    $1044 = (($1036) + ($1043))|0;
    $1045 = $54;
    $1046 = $55;
    $1047 = $1046 >> 15;
    $1048 = (($1047) + 1)|0;
    $1049 = $1048 >> 1;
    $1050 = Math_imul($1045, $1049)|0;
    $1051 = (($1044) + ($1050))|0;
    $1052 = $1051 >> 7;
    $1053 = (($1052) + 1)|0;
    $1054 = $1053 >> 1;
    $1056 = $1054;
   }
  }
  $1055 = $1056&65535;
  $1057 = $23;
  $1058 = $38;
  $1059 = (($1057) + ($1058<<1)|0);
  HEAP16[$1059>>1] = $1055;
  $1060 = $59;
  $1061 = ((($1060)) + 4|0);
  $59 = $1061;
  $1062 = $54;
  $1063 = $59;
  HEAP32[$1063>>2] = $1062;
  $1064 = $54;
  $1065 = $42;
  $1066 = $1065 << 2;
  $1067 = (($1064) - ($1066))|0;
  $58 = $1067;
  $1068 = $58;
  $1069 = $19;
  $1070 = ((($1069)) + 4352|0);
  HEAP32[$1070>>2] = $1068;
  $1071 = $58;
  $1072 = $44;
  $1073 = $1072 << 2;
  $1074 = (($1071) - ($1073))|0;
  $1075 = $19;
  $1076 = ((($1075)) + 1280|0);
  $1077 = $19;
  $1078 = ((($1077)) + 4364|0);
  $1079 = HEAP32[$1078>>2]|0;
  $1080 = (($1076) + ($1079<<2)|0);
  HEAP32[$1080>>2] = $1074;
  $1081 = $53;
  $1082 = $1081 << 1;
  $1083 = $24;
  $1084 = $19;
  $1085 = ((($1084)) + 4360|0);
  $1086 = HEAP32[$1085>>2]|0;
  $1087 = (($1083) + ($1086<<2)|0);
  HEAP32[$1087>>2] = $1082;
  $1088 = $19;
  $1089 = ((($1088)) + 4364|0);
  $1090 = HEAP32[$1089>>2]|0;
  $1091 = (($1090) + 1)|0;
  HEAP32[$1089>>2] = $1091;
  $1092 = $19;
  $1093 = ((($1092)) + 4360|0);
  $1094 = HEAP32[$1093>>2]|0;
  $1095 = (($1094) + 1)|0;
  HEAP32[$1093>>2] = $1095;
  $1096 = $19;
  $1097 = ((($1096)) + 4368|0);
  $1098 = HEAP32[$1097>>2]|0;
  $1099 = $22;
  $1100 = $38;
  $1101 = (($1099) + ($1100)|0);
  $1102 = HEAP8[$1101>>0]|0;
  $1103 = $1102 << 24 >> 24;
  $1104 = (($1098) + ($1103))|0;
  $1105 = $19;
  $1106 = ((($1105)) + 4368|0);
  HEAP32[$1106>>2] = $1104;
  $1107 = $38;
  $1108 = (($1107) + 1)|0;
  $38 = $1108;
 }
 $1109 = ((($87)) + 3840|0);
 $1110 = $19;
 $1111 = ((($1110)) + 3840|0);
 $1112 = $35;
 $1113 = (($1111) + ($1112<<2)|0);
 dest=$1109; src=$1113; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _silk_INVERSE32_varQ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)>(0);
 $13 = $3;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $16 = (_silk_CLZ32_420($15)|0);
 $17 = (($16) - 1)|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $18 << $19;
 $8 = $20;
 $21 = $8;
 $22 = $21 >> 16;
 $23 = (536870911 / ($22|0))&-1;
 $7 = $23;
 $24 = $7;
 $25 = $24 << 16;
 $10 = $25;
 $26 = $8;
 $27 = $26 >> 16;
 $28 = $7;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = Math_imul($27, $30)|0;
 $32 = $8;
 $33 = $32 & 65535;
 $34 = $7;
 $35 = $34&65535;
 $36 = $35 << 16 >> 16;
 $37 = Math_imul($33, $36)|0;
 $38 = $37 >> 16;
 $39 = (($31) + ($38))|0;
 $40 = (536870912 - ($39))|0;
 $41 = $40 << 3;
 $9 = $41;
 $42 = $10;
 $43 = $9;
 $44 = $43 >> 16;
 $45 = $7;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $9;
 $50 = $49 & 65535;
 $51 = $7;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($50, $53)|0;
 $55 = $54 >> 16;
 $56 = (($48) + ($55))|0;
 $57 = (($42) + ($56))|0;
 $58 = $9;
 $59 = $7;
 $60 = $59 >> 15;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = Math_imul($58, $62)|0;
 $64 = (($57) + ($63))|0;
 $10 = $64;
 $65 = $5;
 $66 = (61 - ($65))|0;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $6 = $68;
 $69 = $6;
 $70 = ($69|0)<=(0);
 $71 = $6;
 if (!($70)) {
  $113 = ($71|0)<(32);
  if ($113) {
   $114 = $10;
   $115 = $6;
   $116 = $114 >> $115;
   $2 = $116;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  } else {
   $2 = 0;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  }
 }
 $72 = (0 - ($71))|0;
 $73 = -2147483648 >> $72;
 $74 = $6;
 $75 = (0 - ($74))|0;
 $76 = 2147483647 >> $75;
 $77 = ($73|0)>($76|0);
 $78 = $10;
 $79 = $6;
 $80 = (0 - ($79))|0;
 do {
  if ($77) {
   $81 = -2147483648 >> $80;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $6;
    $84 = (0 - ($83))|0;
    $85 = -2147483648 >> $84;
    $112 = $85;
    break;
   }
   $86 = $10;
   $87 = $6;
   $88 = (0 - ($87))|0;
   $89 = 2147483647 >> $88;
   $90 = ($86|0)<($89|0);
   if ($90) {
    $91 = $6;
    $92 = (0 - ($91))|0;
    $93 = 2147483647 >> $92;
    $112 = $93;
    break;
   } else {
    $94 = $10;
    $112 = $94;
    break;
   }
  } else {
   $95 = 2147483647 >> $80;
   $96 = ($78|0)>($95|0);
   if ($96) {
    $97 = $6;
    $98 = (0 - ($97))|0;
    $99 = 2147483647 >> $98;
    $112 = $99;
    break;
   }
   $100 = $10;
   $101 = $6;
   $102 = (0 - ($101))|0;
   $103 = -2147483648 >> $102;
   $104 = ($100|0)<($103|0);
   if ($104) {
    $105 = $6;
    $106 = (0 - ($105))|0;
    $107 = -2147483648 >> $106;
    $112 = $107;
    break;
   } else {
    $108 = $10;
    $112 = $108;
    break;
   }
  }
 } while(0);
 $109 = $6;
 $110 = (0 - ($109))|0;
 $111 = $112 << $110;
 $2 = $111;
 $117 = $2;
 STACKTOP = sp;return ($117|0);
}
function _silk_DIV32_varQ_419($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)>(0);
 $16 = $4;
 $17 = (0 - ($16))|0;
 $18 = $15 ? $16 : $17;
 $19 = (_silk_CLZ32_420($18)|0);
 $20 = (($19) - 1)|0;
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = $21 << $22;
 $11 = $23;
 $24 = $5;
 $25 = ($24|0)>(0);
 $26 = $5;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $26 : $27;
 $29 = (_silk_CLZ32_420($28)|0);
 $30 = (($29) - 1)|0;
 $8 = $30;
 $31 = $5;
 $32 = $8;
 $33 = $31 << $32;
 $12 = $33;
 $34 = $12;
 $35 = $34 >> 16;
 $36 = (536870911 / ($35|0))&-1;
 $10 = $36;
 $37 = $11;
 $38 = $37 >> 16;
 $39 = $10;
 $40 = $39&65535;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($38, $41)|0;
 $43 = $11;
 $44 = $43 & 65535;
 $45 = $10;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $48 >> 16;
 $50 = (($42) + ($49))|0;
 $13 = $50;
 $51 = $11;
 $52 = $12;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = $13;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = tempRet0;
 $60 = (_bitshift64Ashr(($58|0),($59|0),32)|0);
 $61 = tempRet0;
 $62 = $60 << 3;
 $63 = (($51) - ($62))|0;
 $11 = $63;
 $64 = $13;
 $65 = $11;
 $66 = $65 >> 16;
 $67 = $10;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $11;
 $72 = $71 & 65535;
 $73 = $10;
 $74 = $73&65535;
 $75 = $74 << 16 >> 16;
 $76 = Math_imul($72, $75)|0;
 $77 = $76 >> 16;
 $78 = (($70) + ($77))|0;
 $79 = (($64) + ($78))|0;
 $13 = $79;
 $80 = $7;
 $81 = (29 + ($80))|0;
 $82 = $8;
 $83 = (($81) - ($82))|0;
 $84 = $6;
 $85 = (($83) - ($84))|0;
 $9 = $85;
 $86 = $9;
 $87 = ($86|0)<(0);
 $88 = $9;
 if (!($87)) {
  $130 = ($88|0)<(32);
  if ($130) {
   $131 = $13;
   $132 = $9;
   $133 = $131 >> $132;
   $3 = $133;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $3 = 0;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 }
 $89 = (0 - ($88))|0;
 $90 = -2147483648 >> $89;
 $91 = $9;
 $92 = (0 - ($91))|0;
 $93 = 2147483647 >> $92;
 $94 = ($90|0)>($93|0);
 $95 = $13;
 $96 = $9;
 $97 = (0 - ($96))|0;
 do {
  if ($94) {
   $98 = -2147483648 >> $97;
   $99 = ($95|0)>($98|0);
   if ($99) {
    $100 = $9;
    $101 = (0 - ($100))|0;
    $102 = -2147483648 >> $101;
    $129 = $102;
    break;
   }
   $103 = $13;
   $104 = $9;
   $105 = (0 - ($104))|0;
   $106 = 2147483647 >> $105;
   $107 = ($103|0)<($106|0);
   if ($107) {
    $108 = $9;
    $109 = (0 - ($108))|0;
    $110 = 2147483647 >> $109;
    $129 = $110;
    break;
   } else {
    $111 = $13;
    $129 = $111;
    break;
   }
  } else {
   $112 = 2147483647 >> $97;
   $113 = ($95|0)>($112|0);
   if ($113) {
    $114 = $9;
    $115 = (0 - ($114))|0;
    $116 = 2147483647 >> $115;
    $129 = $116;
    break;
   }
   $117 = $13;
   $118 = $9;
   $119 = (0 - ($118))|0;
   $120 = -2147483648 >> $119;
   $121 = ($117|0)<($120|0);
   if ($121) {
    $122 = $9;
    $123 = (0 - ($122))|0;
    $124 = -2147483648 >> $123;
    $129 = $124;
    break;
   } else {
    $125 = $13;
    $129 = $125;
    break;
   }
  }
 } while(0);
 $126 = $9;
 $127 = (0 - ($126))|0;
 $128 = $129 << $127;
 $3 = $128;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _silk_CLZ32_420($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_NSQ_del_dec_c($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$alloca_mul = 0, $$alloca_mul37 = 0, $$alloca_mul39 = 0, $$alloca_mul41 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $38 = sp + 172|0;
 $50 = sp;
 $15 = $0;
 $16 = $1;
 $17 = $2;
 $18 = $3;
 $19 = $4;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 $27 = $12;
 $28 = $13;
 $29 = $14;
 $51 = $16;
 $52 = ((($51)) + 4356|0);
 $53 = HEAP32[$52>>2]|0;
 $32 = $53;
 $54 = $15;
 $55 = ((($54)) + 4652|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_llvm_stacksave()|0);
 $49 = $57;
 $$alloca_mul = ($56*1168)|0;
 $58 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $59 = $15;
 $60 = ((($59)) + 4652|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61*1168)|0;
 _memset(($58|0),0,($62|0))|0;
 $31 = 0;
 while(1) {
  $63 = $31;
  $64 = $15;
  $65 = ((($64)) + 4652|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)<($66|0);
  if (!($67)) {
   break;
  }
  $68 = $31;
  $69 = (($58) + (($68*1168)|0)|0);
  $48 = $69;
  $70 = $31;
  $71 = $17;
  $72 = ((($71)) + 34|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = (($70) + ($74))|0;
  $76 = $75 & 3;
  $77 = $48;
  $78 = ((($77)) + 1156|0);
  HEAP32[$78>>2] = $76;
  $79 = $48;
  $80 = ((($79)) + 1156|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $48;
  $83 = ((($82)) + 1160|0);
  HEAP32[$83>>2] = $81;
  $84 = $48;
  $85 = ((($84)) + 1164|0);
  HEAP32[$85>>2] = 0;
  $86 = $16;
  $87 = ((($86)) + 4352|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $48;
  $90 = ((($89)) + 1152|0);
  HEAP32[$90>>2] = $88;
  $91 = $16;
  $92 = ((($91)) + 1280|0);
  $93 = $15;
  $94 = ((($93)) + 4616|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) - 1)|0;
  $97 = (($92) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $48;
  $100 = ((($99)) + 960|0);
  HEAP32[$100>>2] = $98;
  $101 = $48;
  $102 = $16;
  $103 = ((($102)) + 3840|0);
  dest=$101; src=$103; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $104 = $48;
  $105 = ((($104)) + 1088|0);
  $106 = $16;
  $107 = ((($106)) + 4288|0);
  dest=$105; src=$107; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $108 = $31;
  $109 = (($108) + 1)|0;
  $31 = $109;
 }
 $110 = $17;
 $111 = ((($110)) + 29|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = $112 << 24 >> 24;
 $114 = $113 >> 1;
 $115 = (24998 + ($114<<2)|0);
 $116 = $17;
 $117 = ((($116)) + 30|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118 << 24 >> 24;
 $120 = (($115) + ($119<<1)|0);
 $121 = HEAP16[$120>>1]|0;
 $122 = $121 << 16 >> 16;
 $45 = $122;
 HEAP32[$38>>2] = 0;
 $123 = $15;
 $124 = ((($123)) + 4612|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (_silk_min_int_423(32,$125)|0);
 $39 = $126;
 $127 = $17;
 $128 = ((($127)) + 29|0);
 $129 = HEAP8[$128>>0]|0;
 $130 = $129 << 24 >> 24;
 $131 = ($130|0)==(2);
 L5: do {
  if ($131) {
   $31 = 0;
   while(1) {
    $132 = $31;
    $133 = $15;
    $134 = ((($133)) + 4604|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($132|0)<($135|0);
    if (!($136)) {
     break L5;
    }
    $137 = $39;
    $138 = $27;
    $139 = $31;
    $140 = (($138) + ($139<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) - 2)|0;
    $143 = (($142) - 1)|0;
    $144 = (_silk_min_int_423($137,$143)|0);
    $39 = $144;
    $145 = $31;
    $146 = (($145) + 1)|0;
    $31 = $146;
   }
  } else {
   $147 = $32;
   $148 = ($147|0)>(0);
   if ($148) {
    $149 = $39;
    $150 = $32;
    $151 = (($150) - 2)|0;
    $152 = (($151) - 1)|0;
    $153 = (_silk_min_int_423($149,$152)|0);
    $39 = $153;
   }
  }
 } while(0);
 $154 = $17;
 $155 = ((($154)) + 31|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156 << 24 >> 24;
 $158 = ($157|0)==(4);
 if ($158) {
  $34 = 0;
 } else {
  $34 = 1;
 }
 $159 = $15;
 $160 = ((($159)) + 4616|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = $15;
 $163 = ((($162)) + 4608|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($161) + ($164))|0;
 $$alloca_mul37 = $165<<2;
 $166 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul37)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul37)|0)+15)&-16)|0);;
 $167 = $15;
 $168 = ((($167)) + 4616|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = $15;
 $171 = ((($170)) + 4608|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($169) + ($172))|0;
 $$alloca_mul39 = $173<<1;
 $174 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul39)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul39)|0)+15)&-16)|0);;
 $175 = $15;
 $176 = ((($175)) + 4612|0);
 $177 = HEAP32[$176>>2]|0;
 $$alloca_mul41 = $177<<2;
 $178 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul41)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul41)|0)+15)&-16)|0);;
 $179 = $16;
 $180 = $15;
 $181 = ((($180)) + 4616|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = (($179) + ($182<<1)|0);
 $43 = $183;
 $184 = $15;
 $185 = ((($184)) + 4616|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = $16;
 $188 = ((($187)) + 4364|0);
 HEAP32[$188>>2] = $186;
 $189 = $15;
 $190 = ((($189)) + 4616|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = $16;
 $193 = ((($192)) + 4360|0);
 HEAP32[$193>>2] = $191;
 $36 = 0;
 $31 = 0;
 while(1) {
  $194 = $31;
  $195 = $15;
  $196 = ((($195)) + 4604|0);
  $197 = HEAP32[$196>>2]|0;
  $198 = ($194|0)<($197|0);
  if (!($198)) {
   break;
  }
  $199 = $20;
  $200 = $31;
  $201 = $200 >> 1;
  $202 = $34;
  $203 = (1 - ($202))|0;
  $204 = $201 | $203;
  $205 = $204<<4;
  $206 = (($199) + ($205<<1)|0);
  $40 = $206;
  $207 = $21;
  $208 = $31;
  $209 = ($208*5)|0;
  $210 = (($207) + ($209<<1)|0);
  $41 = $210;
  $211 = $22;
  $212 = $31;
  $213 = $212<<4;
  $214 = (($211) + ($213<<1)|0);
  $42 = $214;
  $215 = $23;
  $216 = $31;
  $217 = (($215) + ($216<<2)|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $218 >> 2;
  $44 = $219;
  $220 = $23;
  $221 = $31;
  $222 = (($220) + ($221<<2)|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = $223 >> 1;
  $225 = $224 << 16;
  $226 = $44;
  $227 = $226 | $225;
  $44 = $227;
  $228 = $16;
  $229 = ((($228)) + 4376|0);
  HEAP32[$229>>2] = 0;
  $230 = $17;
  $231 = ((($230)) + 29|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232 << 24 >> 24;
  $234 = ($233|0)==(2);
  if ($234) {
   $235 = $27;
   $236 = $31;
   $237 = (($235) + ($236<<2)|0);
   $238 = HEAP32[$237>>2]|0;
   $32 = $238;
   $239 = $31;
   $240 = $34;
   $241 = $240 << 1;
   $242 = (3 - ($241))|0;
   $243 = $239 & $242;
   $244 = ($243|0)==(0);
   if ($244) {
    $245 = $31;
    $246 = ($245|0)==(2);
    if ($246) {
     $247 = ((($58)) + 1164|0);
     $248 = HEAP32[$247>>2]|0;
     $46 = $248;
     $35 = 0;
     $30 = 1;
     while(1) {
      $249 = $30;
      $250 = $15;
      $251 = ((($250)) + 4652|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = ($249|0)<($252|0);
      if (!($253)) {
       break;
      }
      $254 = $30;
      $255 = (($58) + (($254*1168)|0)|0);
      $256 = ((($255)) + 1164|0);
      $257 = HEAP32[$256>>2]|0;
      $258 = $46;
      $259 = ($257|0)<($258|0);
      if ($259) {
       $260 = $30;
       $261 = (($58) + (($260*1168)|0)|0);
       $262 = ((($261)) + 1164|0);
       $263 = HEAP32[$262>>2]|0;
       $46 = $263;
       $264 = $30;
       $35 = $264;
      }
      $265 = $30;
      $266 = (($265) + 1)|0;
      $30 = $266;
     }
     $30 = 0;
     while(1) {
      $267 = $30;
      $268 = $15;
      $269 = ((($268)) + 4652|0);
      $270 = HEAP32[$269>>2]|0;
      $271 = ($267|0)<($270|0);
      if (!($271)) {
       break;
      }
      $272 = $30;
      $273 = $35;
      $274 = ($272|0)!=($273|0);
      if ($274) {
       $275 = $30;
       $276 = (($58) + (($275*1168)|0)|0);
       $277 = ((($276)) + 1164|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (($278) + 134217727)|0;
       HEAP32[$277>>2] = $279;
      }
      $280 = $30;
      $281 = (($280) + 1)|0;
      $30 = $281;
     }
     $282 = $35;
     $283 = (($58) + (($282*1168)|0)|0);
     $48 = $283;
     $284 = HEAP32[$38>>2]|0;
     $285 = $39;
     $286 = (($284) + ($285))|0;
     $37 = $286;
     $30 = 0;
     while(1) {
      $287 = $30;
      $288 = $39;
      $289 = ($287|0)<($288|0);
      if (!($289)) {
       break;
      }
      $290 = $37;
      $291 = (($290) - 1)|0;
      $292 = $291 & 31;
      $37 = $292;
      $293 = $48;
      $294 = ((($293)) + 576|0);
      $295 = $37;
      $296 = (($294) + ($295<<2)|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = $297 >> 9;
      $299 = (($298) + 1)|0;
      $300 = $299 >> 1;
      $301 = $300&255;
      $302 = $19;
      $303 = $30;
      $304 = $39;
      $305 = (($303) - ($304))|0;
      $306 = (($302) + ($305)|0);
      HEAP8[$306>>0] = $301;
      $307 = $48;
      $308 = ((($307)) + 704|0);
      $309 = $37;
      $310 = (($308) + ($309<<2)|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $311 >> 16;
      $313 = $26;
      $314 = ((($313)) + 4|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = $315&65535;
      $317 = $316 << 16 >> 16;
      $318 = Math_imul($312, $317)|0;
      $319 = $48;
      $320 = ((($319)) + 704|0);
      $321 = $37;
      $322 = (($320) + ($321<<2)|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $323 & 65535;
      $325 = $26;
      $326 = ((($325)) + 4|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = $327&65535;
      $329 = $328 << 16 >> 16;
      $330 = Math_imul($324, $329)|0;
      $331 = $330 >> 16;
      $332 = (($318) + ($331))|0;
      $333 = $48;
      $334 = ((($333)) + 704|0);
      $335 = $37;
      $336 = (($334) + ($335<<2)|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = $26;
      $339 = ((($338)) + 4|0);
      $340 = HEAP32[$339>>2]|0;
      $341 = $340 >> 15;
      $342 = (($341) + 1)|0;
      $343 = $342 >> 1;
      $344 = Math_imul($337, $343)|0;
      $345 = (($332) + ($344))|0;
      $346 = $345 >> 13;
      $347 = (($346) + 1)|0;
      $348 = $347 >> 1;
      $349 = ($348|0)>(32767);
      if ($349) {
       $436 = 32767;
      } else {
       $350 = $48;
       $351 = ((($350)) + 704|0);
       $352 = $37;
       $353 = (($351) + ($352<<2)|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = $354 >> 16;
       $356 = $26;
       $357 = ((($356)) + 4|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = $358&65535;
       $360 = $359 << 16 >> 16;
       $361 = Math_imul($355, $360)|0;
       $362 = $48;
       $363 = ((($362)) + 704|0);
       $364 = $37;
       $365 = (($363) + ($364<<2)|0);
       $366 = HEAP32[$365>>2]|0;
       $367 = $366 & 65535;
       $368 = $26;
       $369 = ((($368)) + 4|0);
       $370 = HEAP32[$369>>2]|0;
       $371 = $370&65535;
       $372 = $371 << 16 >> 16;
       $373 = Math_imul($367, $372)|0;
       $374 = $373 >> 16;
       $375 = (($361) + ($374))|0;
       $376 = $48;
       $377 = ((($376)) + 704|0);
       $378 = $37;
       $379 = (($377) + ($378<<2)|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = $26;
       $382 = ((($381)) + 4|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = $383 >> 15;
       $385 = (($384) + 1)|0;
       $386 = $385 >> 1;
       $387 = Math_imul($380, $386)|0;
       $388 = (($375) + ($387))|0;
       $389 = $388 >> 13;
       $390 = (($389) + 1)|0;
       $391 = $390 >> 1;
       $392 = ($391|0)<(-32768);
       if ($392) {
        $436 = -32768;
       } else {
        $393 = $48;
        $394 = ((($393)) + 704|0);
        $395 = $37;
        $396 = (($394) + ($395<<2)|0);
        $397 = HEAP32[$396>>2]|0;
        $398 = $397 >> 16;
        $399 = $26;
        $400 = ((($399)) + 4|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = $401&65535;
        $403 = $402 << 16 >> 16;
        $404 = Math_imul($398, $403)|0;
        $405 = $48;
        $406 = ((($405)) + 704|0);
        $407 = $37;
        $408 = (($406) + ($407<<2)|0);
        $409 = HEAP32[$408>>2]|0;
        $410 = $409 & 65535;
        $411 = $26;
        $412 = ((($411)) + 4|0);
        $413 = HEAP32[$412>>2]|0;
        $414 = $413&65535;
        $415 = $414 << 16 >> 16;
        $416 = Math_imul($410, $415)|0;
        $417 = $416 >> 16;
        $418 = (($404) + ($417))|0;
        $419 = $48;
        $420 = ((($419)) + 704|0);
        $421 = $37;
        $422 = (($420) + ($421<<2)|0);
        $423 = HEAP32[$422>>2]|0;
        $424 = $26;
        $425 = ((($424)) + 4|0);
        $426 = HEAP32[$425>>2]|0;
        $427 = $426 >> 15;
        $428 = (($427) + 1)|0;
        $429 = $428 >> 1;
        $430 = Math_imul($423, $429)|0;
        $431 = (($418) + ($430))|0;
        $432 = $431 >> 13;
        $433 = (($432) + 1)|0;
        $434 = $433 >> 1;
        $436 = $434;
       }
      }
      $435 = $436&65535;
      $437 = $43;
      $438 = $30;
      $439 = $39;
      $440 = (($438) - ($439))|0;
      $441 = (($437) + ($440<<1)|0);
      HEAP16[$441>>1] = $435;
      $442 = $48;
      $443 = ((($442)) + 960|0);
      $444 = $37;
      $445 = (($443) + ($444<<2)|0);
      $446 = HEAP32[$445>>2]|0;
      $447 = $16;
      $448 = ((($447)) + 1280|0);
      $449 = $16;
      $450 = ((($449)) + 4364|0);
      $451 = HEAP32[$450>>2]|0;
      $452 = $39;
      $453 = (($451) - ($452))|0;
      $454 = $30;
      $455 = (($453) + ($454))|0;
      $456 = (($448) + ($455<<2)|0);
      HEAP32[$456>>2] = $446;
      $457 = $30;
      $458 = (($457) + 1)|0;
      $30 = $458;
     }
     $36 = 0;
    }
    $459 = $15;
    $460 = ((($459)) + 4616|0);
    $461 = HEAP32[$460>>2]|0;
    $462 = $32;
    $463 = (($461) - ($462))|0;
    $464 = $15;
    $465 = ((($464)) + 4664|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = (($463) - ($466))|0;
    $468 = (($467) - 2)|0;
    $33 = $468;
    $469 = $33;
    $470 = (($174) + ($469<<1)|0);
    $471 = $16;
    $472 = $33;
    $473 = $31;
    $474 = $15;
    $475 = ((($474)) + 4612|0);
    $476 = HEAP32[$475>>2]|0;
    $477 = Math_imul($473, $476)|0;
    $478 = (($472) + ($477))|0;
    $479 = (($471) + ($478<<1)|0);
    $480 = $40;
    $481 = $15;
    $482 = ((($481)) + 4616|0);
    $483 = HEAP32[$482>>2]|0;
    $484 = $33;
    $485 = (($483) - ($484))|0;
    $486 = $15;
    $487 = ((($486)) + 4664|0);
    $488 = HEAP32[$487>>2]|0;
    $489 = $15;
    $490 = ((($489)) + 5124|0);
    $491 = HEAP32[$490>>2]|0;
    _silk_LPC_analysis_filter($470,$479,$480,$485,$488,$491);
    $492 = $15;
    $493 = ((($492)) + 4616|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = $16;
    $496 = ((($495)) + 4360|0);
    HEAP32[$496>>2] = $494;
    $497 = $16;
    $498 = ((($497)) + 4376|0);
    HEAP32[$498>>2] = 1;
   }
  }
  $499 = $15;
  $500 = $16;
  $501 = $18;
  $502 = $31;
  $503 = $15;
  $504 = ((($503)) + 4652|0);
  $505 = HEAP32[$504>>2]|0;
  $506 = $29;
  $507 = $26;
  $508 = $27;
  $509 = $17;
  $510 = ((($509)) + 29|0);
  $511 = HEAP8[$510>>0]|0;
  $512 = $511 << 24 >> 24;
  $513 = $39;
  _silk_nsq_del_dec_scale_states($499,$500,$58,$501,$178,$174,$166,$502,$505,$506,$507,$508,$512,$513);
  $514 = $16;
  $515 = $17;
  $516 = ((($515)) + 29|0);
  $517 = HEAP8[$516>>0]|0;
  $518 = $517 << 24 >> 24;
  $519 = $19;
  $520 = $43;
  $521 = $40;
  $522 = $41;
  $523 = $42;
  $524 = $32;
  $525 = $44;
  $526 = $24;
  $527 = $31;
  $528 = (($526) + ($527<<2)|0);
  $529 = HEAP32[$528>>2]|0;
  $530 = $25;
  $531 = $31;
  $532 = (($530) + ($531<<2)|0);
  $533 = HEAP32[$532>>2]|0;
  $534 = $26;
  $535 = $31;
  $536 = (($534) + ($535<<2)|0);
  $537 = HEAP32[$536>>2]|0;
  $538 = $28;
  $539 = $45;
  $540 = $15;
  $541 = ((($540)) + 4612|0);
  $542 = HEAP32[$541>>2]|0;
  $543 = $36;
  $544 = (($543) + 1)|0;
  $36 = $544;
  $545 = $15;
  $546 = ((($545)) + 4660|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = $15;
  $549 = ((($548)) + 4664|0);
  $550 = HEAP32[$549>>2]|0;
  $551 = $15;
  $552 = ((($551)) + 4704|0);
  $553 = HEAP32[$552>>2]|0;
  $554 = $15;
  $555 = ((($554)) + 4652|0);
  $556 = HEAP32[$555>>2]|0;
  $557 = $39;
  _silk_noise_shape_quantizer_del_dec($514,$58,$518,$178,$519,$520,$166,$50,$521,$522,$523,$524,$525,$529,$533,$537,$538,$539,$542,$543,$547,$550,$553,$556,$38,$557);
  $558 = $15;
  $559 = ((($558)) + 4612|0);
  $560 = HEAP32[$559>>2]|0;
  $561 = $18;
  $562 = (($561) + ($560<<2)|0);
  $18 = $562;
  $563 = $15;
  $564 = ((($563)) + 4612|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = $19;
  $567 = (($566) + ($565)|0);
  $19 = $567;
  $568 = $15;
  $569 = ((($568)) + 4612|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = $43;
  $572 = (($571) + ($570<<1)|0);
  $43 = $572;
  $573 = $31;
  $574 = (($573) + 1)|0;
  $31 = $574;
 }
 $575 = ((($58)) + 1164|0);
 $576 = HEAP32[$575>>2]|0;
 $46 = $576;
 $35 = 0;
 $31 = 1;
 while(1) {
  $577 = $31;
  $578 = $15;
  $579 = ((($578)) + 4652|0);
  $580 = HEAP32[$579>>2]|0;
  $581 = ($577|0)<($580|0);
  if (!($581)) {
   break;
  }
  $582 = $31;
  $583 = (($58) + (($582*1168)|0)|0);
  $584 = ((($583)) + 1164|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = $46;
  $587 = ($585|0)<($586|0);
  if ($587) {
   $588 = $31;
   $589 = (($58) + (($588*1168)|0)|0);
   $590 = ((($589)) + 1164|0);
   $591 = HEAP32[$590>>2]|0;
   $46 = $591;
   $592 = $31;
   $35 = $592;
  }
  $593 = $31;
  $594 = (($593) + 1)|0;
  $31 = $594;
 }
 $595 = $35;
 $596 = (($58) + (($595*1168)|0)|0);
 $48 = $596;
 $597 = $48;
 $598 = ((($597)) + 1160|0);
 $599 = HEAP32[$598>>2]|0;
 $600 = $599&255;
 $601 = $17;
 $602 = ((($601)) + 34|0);
 HEAP8[$602>>0] = $600;
 $603 = HEAP32[$38>>2]|0;
 $604 = $39;
 $605 = (($603) + ($604))|0;
 $37 = $605;
 $606 = $26;
 $607 = $15;
 $608 = ((($607)) + 4604|0);
 $609 = HEAP32[$608>>2]|0;
 $610 = (($609) - 1)|0;
 $611 = (($606) + ($610<<2)|0);
 $612 = HEAP32[$611>>2]|0;
 $613 = $612 >> 6;
 $47 = $613;
 $30 = 0;
 while(1) {
  $614 = $30;
  $615 = $39;
  $616 = ($614|0)<($615|0);
  if (!($616)) {
   break;
  }
  $617 = $37;
  $618 = (($617) - 1)|0;
  $619 = $618 & 31;
  $37 = $619;
  $620 = $48;
  $621 = ((($620)) + 576|0);
  $622 = $37;
  $623 = (($621) + ($622<<2)|0);
  $624 = HEAP32[$623>>2]|0;
  $625 = $624 >> 9;
  $626 = (($625) + 1)|0;
  $627 = $626 >> 1;
  $628 = $627&255;
  $629 = $19;
  $630 = $30;
  $631 = $39;
  $632 = (($630) - ($631))|0;
  $633 = (($629) + ($632)|0);
  HEAP8[$633>>0] = $628;
  $634 = $48;
  $635 = ((($634)) + 704|0);
  $636 = $37;
  $637 = (($635) + ($636<<2)|0);
  $638 = HEAP32[$637>>2]|0;
  $639 = $638 >> 16;
  $640 = $47;
  $641 = $640&65535;
  $642 = $641 << 16 >> 16;
  $643 = Math_imul($639, $642)|0;
  $644 = $48;
  $645 = ((($644)) + 704|0);
  $646 = $37;
  $647 = (($645) + ($646<<2)|0);
  $648 = HEAP32[$647>>2]|0;
  $649 = $648 & 65535;
  $650 = $47;
  $651 = $650&65535;
  $652 = $651 << 16 >> 16;
  $653 = Math_imul($649, $652)|0;
  $654 = $653 >> 16;
  $655 = (($643) + ($654))|0;
  $656 = $48;
  $657 = ((($656)) + 704|0);
  $658 = $37;
  $659 = (($657) + ($658<<2)|0);
  $660 = HEAP32[$659>>2]|0;
  $661 = $47;
  $662 = $661 >> 15;
  $663 = (($662) + 1)|0;
  $664 = $663 >> 1;
  $665 = Math_imul($660, $664)|0;
  $666 = (($655) + ($665))|0;
  $667 = $666 >> 7;
  $668 = (($667) + 1)|0;
  $669 = $668 >> 1;
  $670 = ($669|0)>(32767);
  if ($670) {
   $745 = 32767;
  } else {
   $671 = $48;
   $672 = ((($671)) + 704|0);
   $673 = $37;
   $674 = (($672) + ($673<<2)|0);
   $675 = HEAP32[$674>>2]|0;
   $676 = $675 >> 16;
   $677 = $47;
   $678 = $677&65535;
   $679 = $678 << 16 >> 16;
   $680 = Math_imul($676, $679)|0;
   $681 = $48;
   $682 = ((($681)) + 704|0);
   $683 = $37;
   $684 = (($682) + ($683<<2)|0);
   $685 = HEAP32[$684>>2]|0;
   $686 = $685 & 65535;
   $687 = $47;
   $688 = $687&65535;
   $689 = $688 << 16 >> 16;
   $690 = Math_imul($686, $689)|0;
   $691 = $690 >> 16;
   $692 = (($680) + ($691))|0;
   $693 = $48;
   $694 = ((($693)) + 704|0);
   $695 = $37;
   $696 = (($694) + ($695<<2)|0);
   $697 = HEAP32[$696>>2]|0;
   $698 = $47;
   $699 = $698 >> 15;
   $700 = (($699) + 1)|0;
   $701 = $700 >> 1;
   $702 = Math_imul($697, $701)|0;
   $703 = (($692) + ($702))|0;
   $704 = $703 >> 7;
   $705 = (($704) + 1)|0;
   $706 = $705 >> 1;
   $707 = ($706|0)<(-32768);
   if ($707) {
    $745 = -32768;
   } else {
    $708 = $48;
    $709 = ((($708)) + 704|0);
    $710 = $37;
    $711 = (($709) + ($710<<2)|0);
    $712 = HEAP32[$711>>2]|0;
    $713 = $712 >> 16;
    $714 = $47;
    $715 = $714&65535;
    $716 = $715 << 16 >> 16;
    $717 = Math_imul($713, $716)|0;
    $718 = $48;
    $719 = ((($718)) + 704|0);
    $720 = $37;
    $721 = (($719) + ($720<<2)|0);
    $722 = HEAP32[$721>>2]|0;
    $723 = $722 & 65535;
    $724 = $47;
    $725 = $724&65535;
    $726 = $725 << 16 >> 16;
    $727 = Math_imul($723, $726)|0;
    $728 = $727 >> 16;
    $729 = (($717) + ($728))|0;
    $730 = $48;
    $731 = ((($730)) + 704|0);
    $732 = $37;
    $733 = (($731) + ($732<<2)|0);
    $734 = HEAP32[$733>>2]|0;
    $735 = $47;
    $736 = $735 >> 15;
    $737 = (($736) + 1)|0;
    $738 = $737 >> 1;
    $739 = Math_imul($734, $738)|0;
    $740 = (($729) + ($739))|0;
    $741 = $740 >> 7;
    $742 = (($741) + 1)|0;
    $743 = $742 >> 1;
    $745 = $743;
   }
  }
  $744 = $745&65535;
  $746 = $43;
  $747 = $30;
  $748 = $39;
  $749 = (($747) - ($748))|0;
  $750 = (($746) + ($749<<1)|0);
  HEAP16[$750>>1] = $744;
  $751 = $48;
  $752 = ((($751)) + 960|0);
  $753 = $37;
  $754 = (($752) + ($753<<2)|0);
  $755 = HEAP32[$754>>2]|0;
  $756 = $16;
  $757 = ((($756)) + 1280|0);
  $758 = $16;
  $759 = ((($758)) + 4364|0);
  $760 = HEAP32[$759>>2]|0;
  $761 = $39;
  $762 = (($760) - ($761))|0;
  $763 = $30;
  $764 = (($762) + ($763))|0;
  $765 = (($757) + ($764<<2)|0);
  HEAP32[$765>>2] = $755;
  $766 = $30;
  $767 = (($766) + 1)|0;
  $30 = $767;
 }
 $768 = $16;
 $769 = ((($768)) + 3840|0);
 $770 = $48;
 $771 = $15;
 $772 = ((($771)) + 4612|0);
 $773 = HEAP32[$772>>2]|0;
 $774 = (($770) + ($773<<2)|0);
 dest=$769; src=$774; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $775 = $16;
 $776 = ((($775)) + 4288|0);
 $777 = $48;
 $778 = ((($777)) + 1088|0);
 dest=$776; src=$778; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $779 = $48;
 $780 = ((($779)) + 1152|0);
 $781 = HEAP32[$780>>2]|0;
 $782 = $16;
 $783 = ((($782)) + 4352|0);
 HEAP32[$783>>2] = $781;
 $784 = $27;
 $785 = $15;
 $786 = ((($785)) + 4604|0);
 $787 = HEAP32[$786>>2]|0;
 $788 = (($787) - 1)|0;
 $789 = (($784) + ($788<<2)|0);
 $790 = HEAP32[$789>>2]|0;
 $791 = $16;
 $792 = ((($791)) + 4356|0);
 HEAP32[$792>>2] = $790;
 $793 = $16;
 $794 = $16;
 $795 = $15;
 $796 = ((($795)) + 4608|0);
 $797 = HEAP32[$796>>2]|0;
 $798 = (($794) + ($797<<1)|0);
 $799 = $15;
 $800 = ((($799)) + 4616|0);
 $801 = HEAP32[$800>>2]|0;
 $802 = $801<<1;
 _memmove(($793|0),($798|0),($802|0))|0;
 $803 = $16;
 $804 = ((($803)) + 1280|0);
 $805 = $16;
 $806 = ((($805)) + 1280|0);
 $807 = $15;
 $808 = ((($807)) + 4608|0);
 $809 = HEAP32[$808>>2]|0;
 $810 = (($806) + ($809<<2)|0);
 $811 = $15;
 $812 = ((($811)) + 4616|0);
 $813 = HEAP32[$812>>2]|0;
 $814 = $813<<2;
 _memmove(($804|0),($810|0),($814|0))|0;
 $815 = $49;
 _llvm_stackrestore(($815|0));
 STACKTOP = sp;return;
}
function _silk_min_int_423($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_nsq_del_dec_scale_states($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $27 = $13;
 $35 = $25;
 $36 = $21;
 $37 = (($35) + ($36<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $38;
 $39 = $24;
 $40 = $21;
 $41 = (($39) + ($40<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(1);
 if ($43) {
  $44 = $24;
  $45 = $21;
  $46 = (($44) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47;
 } else {
  $48 = 1;
 }
 $49 = (_silk_INVERSE32_varQ_424($48,47)|0);
 $32 = $49;
 $50 = $24;
 $51 = $21;
 $52 = (($50) + ($51<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $15;
 $55 = ((($54)) + 4372|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($53|0)!=($56|0);
 if ($57) {
  $58 = $15;
  $59 = ((($58)) + 4372|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $24;
  $62 = $21;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_silk_DIV32_varQ_425($60,$64,16)|0);
  $31 = $65;
 } else {
  $31 = 65536;
 }
 $66 = $32;
 $67 = $66 >> 7;
 $68 = (($67) + 1)|0;
 $69 = $68 >> 1;
 $33 = $69;
 $28 = 0;
 while(1) {
  $70 = $28;
  $71 = $14;
  $72 = ((($71)) + 4612|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)<($73|0);
  if (!($74)) {
   break;
  }
  $75 = $17;
  $76 = $28;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78 >> 16;
  $80 = $33;
  $81 = $80&65535;
  $82 = $81 << 16 >> 16;
  $83 = Math_imul($79, $82)|0;
  $84 = $17;
  $85 = $28;
  $86 = (($84) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87 & 65535;
  $89 = $33;
  $90 = $89&65535;
  $91 = $90 << 16 >> 16;
  $92 = Math_imul($88, $91)|0;
  $93 = $92 >> 16;
  $94 = (($83) + ($93))|0;
  $95 = $17;
  $96 = $28;
  $97 = (($95) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $33;
  $100 = $99 >> 15;
  $101 = (($100) + 1)|0;
  $102 = $101 >> 1;
  $103 = Math_imul($98, $102)|0;
  $104 = (($94) + ($103))|0;
  $105 = $18;
  $106 = $28;
  $107 = (($105) + ($106<<2)|0);
  HEAP32[$107>>2] = $104;
  $108 = $28;
  $109 = (($108) + 1)|0;
  $28 = $109;
 }
 $110 = $24;
 $111 = $21;
 $112 = (($110) + ($111<<2)|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $15;
 $115 = ((($114)) + 4372|0);
 HEAP32[$115>>2] = $113;
 $116 = $15;
 $117 = ((($116)) + 4376|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0);
 L12: do {
  if ($119) {
   $120 = $21;
   $121 = ($120|0)==(0);
   if ($121) {
    $122 = $32;
    $123 = $122 >> 16;
    $124 = $23;
    $125 = $124&65535;
    $126 = $125 << 16 >> 16;
    $127 = Math_imul($123, $126)|0;
    $128 = $32;
    $129 = $128 & 65535;
    $130 = $23;
    $131 = $130&65535;
    $132 = $131 << 16 >> 16;
    $133 = Math_imul($129, $132)|0;
    $134 = $133 >> 16;
    $135 = (($127) + ($134))|0;
    $136 = $135 << 2;
    $32 = $136;
   }
   $137 = $15;
   $138 = ((($137)) + 4360|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $30;
   $141 = (($139) - ($140))|0;
   $142 = (($141) - 2)|0;
   $28 = $142;
   while(1) {
    $143 = $28;
    $144 = $15;
    $145 = ((($144)) + 4360|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($143|0)<($146|0);
    if (!($147)) {
     break L12;
    }
    $148 = $32;
    $149 = $148 >> 16;
    $150 = $19;
    $151 = $28;
    $152 = (($150) + ($151<<1)|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153 << 16 >> 16;
    $155 = Math_imul($149, $154)|0;
    $156 = $32;
    $157 = $156 & 65535;
    $158 = $19;
    $159 = $28;
    $160 = (($158) + ($159<<1)|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = $161 << 16 >> 16;
    $163 = Math_imul($157, $162)|0;
    $164 = $163 >> 16;
    $165 = (($155) + ($164))|0;
    $166 = $20;
    $167 = $28;
    $168 = (($166) + ($167<<2)|0);
    HEAP32[$168>>2] = $165;
    $169 = $28;
    $170 = (($169) + 1)|0;
    $28 = $170;
   }
  }
 } while(0);
 $171 = $31;
 $172 = ($171|0)!=(65536);
 if (!($172)) {
  STACKTOP = sp;return;
 }
 $173 = $15;
 $174 = ((($173)) + 4364|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = $14;
 $177 = ((($176)) + 4616|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = (($175) - ($178))|0;
 $28 = $179;
 while(1) {
  $180 = $28;
  $181 = $15;
  $182 = ((($181)) + 4364|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = ($180|0)<($183|0);
  if (!($184)) {
   break;
  }
  $185 = $31;
  $186 = $185 >> 16;
  $187 = $15;
  $188 = ((($187)) + 1280|0);
  $189 = $28;
  $190 = (($188) + ($189<<2)|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = $191&65535;
  $193 = $192 << 16 >> 16;
  $194 = Math_imul($186, $193)|0;
  $195 = $31;
  $196 = $195 & 65535;
  $197 = $15;
  $198 = ((($197)) + 1280|0);
  $199 = $28;
  $200 = (($198) + ($199<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $201&65535;
  $203 = $202 << 16 >> 16;
  $204 = Math_imul($196, $203)|0;
  $205 = $204 >> 16;
  $206 = (($194) + ($205))|0;
  $207 = $31;
  $208 = $15;
  $209 = ((($208)) + 1280|0);
  $210 = $28;
  $211 = (($209) + ($210<<2)|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $212 >> 15;
  $214 = (($213) + 1)|0;
  $215 = $214 >> 1;
  $216 = Math_imul($207, $215)|0;
  $217 = (($206) + ($216))|0;
  $218 = $15;
  $219 = ((($218)) + 1280|0);
  $220 = $28;
  $221 = (($219) + ($220<<2)|0);
  HEAP32[$221>>2] = $217;
  $222 = $28;
  $223 = (($222) + 1)|0;
  $28 = $223;
 }
 $224 = $26;
 $225 = ($224|0)==(2);
 L28: do {
  if ($225) {
   $226 = $15;
   $227 = ((($226)) + 4376|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ($228|0)==(0);
   if ($229) {
    $230 = $15;
    $231 = ((($230)) + 4360|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $30;
    $234 = (($232) - ($233))|0;
    $235 = (($234) - 2)|0;
    $28 = $235;
    while(1) {
     $236 = $28;
     $237 = $15;
     $238 = ((($237)) + 4360|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = $27;
     $241 = (($239) - ($240))|0;
     $242 = ($236|0)<($241|0);
     if (!($242)) {
      break L28;
     }
     $243 = $31;
     $244 = $243 >> 16;
     $245 = $20;
     $246 = $28;
     $247 = (($245) + ($246<<2)|0);
     $248 = HEAP32[$247>>2]|0;
     $249 = $248&65535;
     $250 = $249 << 16 >> 16;
     $251 = Math_imul($244, $250)|0;
     $252 = $31;
     $253 = $252 & 65535;
     $254 = $20;
     $255 = $28;
     $256 = (($254) + ($255<<2)|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = $257&65535;
     $259 = $258 << 16 >> 16;
     $260 = Math_imul($253, $259)|0;
     $261 = $260 >> 16;
     $262 = (($251) + ($261))|0;
     $263 = $31;
     $264 = $20;
     $265 = $28;
     $266 = (($264) + ($265<<2)|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $267 >> 15;
     $269 = (($268) + 1)|0;
     $270 = $269 >> 1;
     $271 = Math_imul($263, $270)|0;
     $272 = (($262) + ($271))|0;
     $273 = $20;
     $274 = $28;
     $275 = (($273) + ($274<<2)|0);
     HEAP32[$275>>2] = $272;
     $276 = $28;
     $277 = (($276) + 1)|0;
     $28 = $277;
    }
   }
  }
 } while(0);
 $29 = 0;
 while(1) {
  $278 = $29;
  $279 = $22;
  $280 = ($278|0)<($279|0);
  if (!($280)) {
   break;
  }
  $281 = $16;
  $282 = $29;
  $283 = (($281) + (($282*1168)|0)|0);
  $34 = $283;
  $284 = $31;
  $285 = $284 >> 16;
  $286 = $34;
  $287 = ((($286)) + 1152|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $288&65535;
  $290 = $289 << 16 >> 16;
  $291 = Math_imul($285, $290)|0;
  $292 = $31;
  $293 = $292 & 65535;
  $294 = $34;
  $295 = ((($294)) + 1152|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $296&65535;
  $298 = $297 << 16 >> 16;
  $299 = Math_imul($293, $298)|0;
  $300 = $299 >> 16;
  $301 = (($291) + ($300))|0;
  $302 = $31;
  $303 = $34;
  $304 = ((($303)) + 1152|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = $305 >> 15;
  $307 = (($306) + 1)|0;
  $308 = $307 >> 1;
  $309 = Math_imul($302, $308)|0;
  $310 = (($301) + ($309))|0;
  $311 = $34;
  $312 = ((($311)) + 1152|0);
  HEAP32[$312>>2] = $310;
  $28 = 0;
  while(1) {
   $313 = $28;
   $314 = ($313|0)<(32);
   if (!($314)) {
    break;
   }
   $315 = $31;
   $316 = $315 >> 16;
   $317 = $34;
   $318 = $28;
   $319 = (($317) + ($318<<2)|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = $320&65535;
   $322 = $321 << 16 >> 16;
   $323 = Math_imul($316, $322)|0;
   $324 = $31;
   $325 = $324 & 65535;
   $326 = $34;
   $327 = $28;
   $328 = (($326) + ($327<<2)|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = $329&65535;
   $331 = $330 << 16 >> 16;
   $332 = Math_imul($325, $331)|0;
   $333 = $332 >> 16;
   $334 = (($323) + ($333))|0;
   $335 = $31;
   $336 = $34;
   $337 = $28;
   $338 = (($336) + ($337<<2)|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $339 >> 15;
   $341 = (($340) + 1)|0;
   $342 = $341 >> 1;
   $343 = Math_imul($335, $342)|0;
   $344 = (($334) + ($343))|0;
   $345 = $34;
   $346 = $28;
   $347 = (($345) + ($346<<2)|0);
   HEAP32[$347>>2] = $344;
   $348 = $28;
   $349 = (($348) + 1)|0;
   $28 = $349;
  }
  $28 = 0;
  while(1) {
   $350 = $28;
   $351 = ($350|0)<(16);
   if (!($351)) {
    break;
   }
   $352 = $31;
   $353 = $352 >> 16;
   $354 = $34;
   $355 = ((($354)) + 1088|0);
   $356 = $28;
   $357 = (($355) + ($356<<2)|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = $358&65535;
   $360 = $359 << 16 >> 16;
   $361 = Math_imul($353, $360)|0;
   $362 = $31;
   $363 = $362 & 65535;
   $364 = $34;
   $365 = ((($364)) + 1088|0);
   $366 = $28;
   $367 = (($365) + ($366<<2)|0);
   $368 = HEAP32[$367>>2]|0;
   $369 = $368&65535;
   $370 = $369 << 16 >> 16;
   $371 = Math_imul($363, $370)|0;
   $372 = $371 >> 16;
   $373 = (($361) + ($372))|0;
   $374 = $31;
   $375 = $34;
   $376 = ((($375)) + 1088|0);
   $377 = $28;
   $378 = (($376) + ($377<<2)|0);
   $379 = HEAP32[$378>>2]|0;
   $380 = $379 >> 15;
   $381 = (($380) + 1)|0;
   $382 = $381 >> 1;
   $383 = Math_imul($374, $382)|0;
   $384 = (($373) + ($383))|0;
   $385 = $34;
   $386 = ((($385)) + 1088|0);
   $387 = $28;
   $388 = (($386) + ($387<<2)|0);
   HEAP32[$388>>2] = $384;
   $389 = $28;
   $390 = (($389) + 1)|0;
   $28 = $390;
  }
  $28 = 0;
  while(1) {
   $391 = $28;
   $392 = ($391|0)<(32);
   if (!($392)) {
    break;
   }
   $393 = $31;
   $394 = $393 >> 16;
   $395 = $34;
   $396 = ((($395)) + 832|0);
   $397 = $28;
   $398 = (($396) + ($397<<2)|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $399&65535;
   $401 = $400 << 16 >> 16;
   $402 = Math_imul($394, $401)|0;
   $403 = $31;
   $404 = $403 & 65535;
   $405 = $34;
   $406 = ((($405)) + 832|0);
   $407 = $28;
   $408 = (($406) + ($407<<2)|0);
   $409 = HEAP32[$408>>2]|0;
   $410 = $409&65535;
   $411 = $410 << 16 >> 16;
   $412 = Math_imul($404, $411)|0;
   $413 = $412 >> 16;
   $414 = (($402) + ($413))|0;
   $415 = $31;
   $416 = $34;
   $417 = ((($416)) + 832|0);
   $418 = $28;
   $419 = (($417) + ($418<<2)|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = $420 >> 15;
   $422 = (($421) + 1)|0;
   $423 = $422 >> 1;
   $424 = Math_imul($415, $423)|0;
   $425 = (($414) + ($424))|0;
   $426 = $34;
   $427 = ((($426)) + 832|0);
   $428 = $28;
   $429 = (($427) + ($428<<2)|0);
   HEAP32[$429>>2] = $425;
   $430 = $31;
   $431 = $430 >> 16;
   $432 = $34;
   $433 = ((($432)) + 960|0);
   $434 = $28;
   $435 = (($433) + ($434<<2)|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = $436&65535;
   $438 = $437 << 16 >> 16;
   $439 = Math_imul($431, $438)|0;
   $440 = $31;
   $441 = $440 & 65535;
   $442 = $34;
   $443 = ((($442)) + 960|0);
   $444 = $28;
   $445 = (($443) + ($444<<2)|0);
   $446 = HEAP32[$445>>2]|0;
   $447 = $446&65535;
   $448 = $447 << 16 >> 16;
   $449 = Math_imul($441, $448)|0;
   $450 = $449 >> 16;
   $451 = (($439) + ($450))|0;
   $452 = $31;
   $453 = $34;
   $454 = ((($453)) + 960|0);
   $455 = $28;
   $456 = (($454) + ($455<<2)|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $457 >> 15;
   $459 = (($458) + 1)|0;
   $460 = $459 >> 1;
   $461 = Math_imul($452, $460)|0;
   $462 = (($451) + ($461))|0;
   $463 = $34;
   $464 = ((($463)) + 960|0);
   $465 = $28;
   $466 = (($464) + ($465<<2)|0);
   HEAP32[$466>>2] = $462;
   $467 = $28;
   $468 = (($467) + 1)|0;
   $28 = $468;
  }
  $469 = $29;
  $470 = (($469) + 1)|0;
  $29 = $470;
 }
 STACKTOP = sp;return;
}
function _silk_noise_shape_quantizer_del_dec($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 $16 = $16|0;
 $17 = $17|0;
 $18 = $18|0;
 $19 = $19|0;
 $20 = $20|0;
 $21 = $21|0;
 $22 = $22|0;
 $23 = $23|0;
 $24 = $24|0;
 $25 = $25|0;
 var $$alloca_mul = 0, $$sink = 0, $$sink3 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0;
 var $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0;
 var $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0;
 var $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0;
 var $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0;
 var $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0;
 var $1397 = 0, $1398 = 0, $1399 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0;
 var $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0;
 var $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0;
 var $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0;
 var $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0;
 var $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0;
 var $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0;
 var $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0;
 var $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0;
 var $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0;
 var $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0;
 var $1597 = 0, $1598 = 0, $1599 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $26 = $0;
 $27 = $1;
 $28 = $2;
 $29 = $3;
 $30 = $4;
 $31 = $5;
 $32 = $6;
 $33 = $7;
 $34 = $8;
 $35 = $9;
 $36 = $10;
 $37 = $11;
 $38 = $12;
 $39 = $13;
 $40 = $14;
 $41 = $15;
 $42 = $16;
 $43 = $17;
 $44 = $18;
 $45 = $19;
 $46 = $20;
 $47 = $21;
 $48 = $22;
 $49 = $23;
 $50 = $24;
 $51 = $25;
 $87 = $49;
 $88 = (_llvm_stacksave()|0);
 $86 = $88;
 $$alloca_mul = ($87*48)|0;
 $89 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $90 = $26;
 $91 = ((($90)) + 1280|0);
 $92 = $26;
 $93 = ((($92)) + 4364|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $37;
 $96 = (($94) - ($95))|0;
 $97 = (($96) + 1)|0;
 $98 = (($91) + ($97<<2)|0);
 $82 = $98;
 $99 = $32;
 $100 = $26;
 $101 = ((($100)) + 4360|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $37;
 $104 = (($102) - ($103))|0;
 $105 = (($104) + 2)|0;
 $106 = (($99) + ($105<<2)|0);
 $81 = $106;
 $107 = $41;
 $108 = $107 >> 6;
 $77 = $108;
 $52 = 0;
 while(1) {
  $109 = $52;
  $110 = $44;
  $111 = ($109|0)<($110|0);
  if (!($111)) {
   break;
  }
  $112 = $28;
  $113 = ($112|0)==(2);
  if ($113) {
   $60 = 2;
   $114 = $60;
   $115 = $81;
   $116 = HEAP32[$115>>2]|0;
   $117 = $116 >> 16;
   $118 = $35;
   $119 = HEAP16[$118>>1]|0;
   $120 = $119 << 16 >> 16;
   $121 = Math_imul($117, $120)|0;
   $122 = $81;
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 & 65535;
   $125 = $35;
   $126 = HEAP16[$125>>1]|0;
   $127 = $126 << 16 >> 16;
   $128 = Math_imul($124, $127)|0;
   $129 = $128 >> 16;
   $130 = (($121) + ($129))|0;
   $131 = (($114) + ($130))|0;
   $60 = $131;
   $132 = $60;
   $133 = $81;
   $134 = ((($133)) + -4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 >> 16;
   $137 = $35;
   $138 = ((($137)) + 2|0);
   $139 = HEAP16[$138>>1]|0;
   $140 = $139 << 16 >> 16;
   $141 = Math_imul($136, $140)|0;
   $142 = $81;
   $143 = ((($142)) + -4|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $144 & 65535;
   $146 = $35;
   $147 = ((($146)) + 2|0);
   $148 = HEAP16[$147>>1]|0;
   $149 = $148 << 16 >> 16;
   $150 = Math_imul($145, $149)|0;
   $151 = $150 >> 16;
   $152 = (($141) + ($151))|0;
   $153 = (($132) + ($152))|0;
   $60 = $153;
   $154 = $60;
   $155 = $81;
   $156 = ((($155)) + -8|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $157 >> 16;
   $159 = $35;
   $160 = ((($159)) + 4|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = $161 << 16 >> 16;
   $163 = Math_imul($158, $162)|0;
   $164 = $81;
   $165 = ((($164)) + -8|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = $166 & 65535;
   $168 = $35;
   $169 = ((($168)) + 4|0);
   $170 = HEAP16[$169>>1]|0;
   $171 = $170 << 16 >> 16;
   $172 = Math_imul($167, $171)|0;
   $173 = $172 >> 16;
   $174 = (($163) + ($173))|0;
   $175 = (($154) + ($174))|0;
   $60 = $175;
   $176 = $60;
   $177 = $81;
   $178 = ((($177)) + -12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = $179 >> 16;
   $181 = $35;
   $182 = ((($181)) + 6|0);
   $183 = HEAP16[$182>>1]|0;
   $184 = $183 << 16 >> 16;
   $185 = Math_imul($180, $184)|0;
   $186 = $81;
   $187 = ((($186)) + -12|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $188 & 65535;
   $190 = $35;
   $191 = ((($190)) + 6|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = $192 << 16 >> 16;
   $194 = Math_imul($189, $193)|0;
   $195 = $194 >> 16;
   $196 = (($185) + ($195))|0;
   $197 = (($176) + ($196))|0;
   $60 = $197;
   $198 = $60;
   $199 = $81;
   $200 = ((($199)) + -16|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = $201 >> 16;
   $203 = $35;
   $204 = ((($203)) + 8|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205 << 16 >> 16;
   $207 = Math_imul($202, $206)|0;
   $208 = $81;
   $209 = ((($208)) + -16|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = $210 & 65535;
   $212 = $35;
   $213 = ((($212)) + 8|0);
   $214 = HEAP16[$213>>1]|0;
   $215 = $214 << 16 >> 16;
   $216 = Math_imul($211, $215)|0;
   $217 = $216 >> 16;
   $218 = (($207) + ($217))|0;
   $219 = (($198) + ($218))|0;
   $60 = $219;
   $220 = $60;
   $221 = $220 << 1;
   $60 = $221;
   $222 = $81;
   $223 = ((($222)) + 4|0);
   $81 = $223;
  } else {
   $60 = 0;
  }
  $224 = $37;
  $225 = ($224|0)>(0);
  if ($225) {
   $226 = $82;
   $227 = HEAP32[$226>>2]|0;
   $228 = $82;
   $229 = ((($228)) + -8|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($227) + ($230))|0;
   $232 = $231 >> 16;
   $233 = $38;
   $234 = $233&65535;
   $235 = $234 << 16 >> 16;
   $236 = Math_imul($232, $235)|0;
   $237 = $82;
   $238 = HEAP32[$237>>2]|0;
   $239 = $82;
   $240 = ((($239)) + -8|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = (($238) + ($241))|0;
   $243 = $242 & 65535;
   $244 = $38;
   $245 = $244&65535;
   $246 = $245 << 16 >> 16;
   $247 = Math_imul($243, $246)|0;
   $248 = $247 >> 16;
   $249 = (($236) + ($248))|0;
   $63 = $249;
   $250 = $63;
   $251 = $82;
   $252 = ((($251)) + -4|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $253 >> 16;
   $255 = $38;
   $256 = $255 >> 16;
   $257 = Math_imul($254, $256)|0;
   $258 = (($250) + ($257))|0;
   $259 = $82;
   $260 = ((($259)) + -4|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = $261 & 65535;
   $263 = $38;
   $264 = $263 >> 16;
   $265 = Math_imul($262, $264)|0;
   $266 = $265 >> 16;
   $267 = (($258) + ($266))|0;
   $63 = $267;
   $268 = $60;
   $269 = $63;
   $270 = $269 << 2;
   $271 = (($268) - ($270))|0;
   $63 = $271;
   $272 = $82;
   $273 = ((($272)) + 4|0);
   $82 = $273;
  } else {
   $63 = 0;
  }
  $54 = 0;
  while(1) {
   $274 = $54;
   $275 = $49;
   $276 = ($274|0)<($275|0);
   if (!($276)) {
    break;
   }
   $277 = $27;
   $278 = $54;
   $279 = (($277) + (($278*1168)|0)|0);
   $84 = $279;
   $280 = $54;
   $281 = (($89) + (($280*48)|0)|0);
   $85 = $281;
   $282 = $84;
   $283 = ((($282)) + 1156|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = Math_imul($284, 196314165)|0;
   $286 = (907633515 + ($285))|0;
   $287 = $84;
   $288 = ((($287)) + 1156|0);
   HEAP32[$288>>2] = $286;
   $289 = $84;
   $290 = $52;
   $291 = (31 + ($290))|0;
   $292 = (($289) + ($291<<2)|0);
   $83 = $292;
   $293 = $47;
   $294 = $293 >> 1;
   $61 = $294;
   $295 = $61;
   $296 = $83;
   $297 = HEAP32[$296>>2]|0;
   $298 = $297 >> 16;
   $299 = $34;
   $300 = HEAP16[$299>>1]|0;
   $301 = $300 << 16 >> 16;
   $302 = Math_imul($298, $301)|0;
   $303 = $83;
   $304 = HEAP32[$303>>2]|0;
   $305 = $304 & 65535;
   $306 = $34;
   $307 = HEAP16[$306>>1]|0;
   $308 = $307 << 16 >> 16;
   $309 = Math_imul($305, $308)|0;
   $310 = $309 >> 16;
   $311 = (($302) + ($310))|0;
   $312 = (($295) + ($311))|0;
   $61 = $312;
   $313 = $61;
   $314 = $83;
   $315 = ((($314)) + -4|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = $316 >> 16;
   $318 = $34;
   $319 = ((($318)) + 2|0);
   $320 = HEAP16[$319>>1]|0;
   $321 = $320 << 16 >> 16;
   $322 = Math_imul($317, $321)|0;
   $323 = $83;
   $324 = ((($323)) + -4|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = $325 & 65535;
   $327 = $34;
   $328 = ((($327)) + 2|0);
   $329 = HEAP16[$328>>1]|0;
   $330 = $329 << 16 >> 16;
   $331 = Math_imul($326, $330)|0;
   $332 = $331 >> 16;
   $333 = (($322) + ($332))|0;
   $334 = (($313) + ($333))|0;
   $61 = $334;
   $335 = $61;
   $336 = $83;
   $337 = ((($336)) + -8|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = $338 >> 16;
   $340 = $34;
   $341 = ((($340)) + 4|0);
   $342 = HEAP16[$341>>1]|0;
   $343 = $342 << 16 >> 16;
   $344 = Math_imul($339, $343)|0;
   $345 = $83;
   $346 = ((($345)) + -8|0);
   $347 = HEAP32[$346>>2]|0;
   $348 = $347 & 65535;
   $349 = $34;
   $350 = ((($349)) + 4|0);
   $351 = HEAP16[$350>>1]|0;
   $352 = $351 << 16 >> 16;
   $353 = Math_imul($348, $352)|0;
   $354 = $353 >> 16;
   $355 = (($344) + ($354))|0;
   $356 = (($335) + ($355))|0;
   $61 = $356;
   $357 = $61;
   $358 = $83;
   $359 = ((($358)) + -12|0);
   $360 = HEAP32[$359>>2]|0;
   $361 = $360 >> 16;
   $362 = $34;
   $363 = ((($362)) + 6|0);
   $364 = HEAP16[$363>>1]|0;
   $365 = $364 << 16 >> 16;
   $366 = Math_imul($361, $365)|0;
   $367 = $83;
   $368 = ((($367)) + -12|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = $369 & 65535;
   $371 = $34;
   $372 = ((($371)) + 6|0);
   $373 = HEAP16[$372>>1]|0;
   $374 = $373 << 16 >> 16;
   $375 = Math_imul($370, $374)|0;
   $376 = $375 >> 16;
   $377 = (($366) + ($376))|0;
   $378 = (($357) + ($377))|0;
   $61 = $378;
   $379 = $61;
   $380 = $83;
   $381 = ((($380)) + -16|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = $382 >> 16;
   $384 = $34;
   $385 = ((($384)) + 8|0);
   $386 = HEAP16[$385>>1]|0;
   $387 = $386 << 16 >> 16;
   $388 = Math_imul($383, $387)|0;
   $389 = $83;
   $390 = ((($389)) + -16|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = $391 & 65535;
   $393 = $34;
   $394 = ((($393)) + 8|0);
   $395 = HEAP16[$394>>1]|0;
   $396 = $395 << 16 >> 16;
   $397 = Math_imul($392, $396)|0;
   $398 = $397 >> 16;
   $399 = (($388) + ($398))|0;
   $400 = (($379) + ($399))|0;
   $61 = $400;
   $401 = $61;
   $402 = $83;
   $403 = ((($402)) + -20|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = $404 >> 16;
   $406 = $34;
   $407 = ((($406)) + 10|0);
   $408 = HEAP16[$407>>1]|0;
   $409 = $408 << 16 >> 16;
   $410 = Math_imul($405, $409)|0;
   $411 = $83;
   $412 = ((($411)) + -20|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $413 & 65535;
   $415 = $34;
   $416 = ((($415)) + 10|0);
   $417 = HEAP16[$416>>1]|0;
   $418 = $417 << 16 >> 16;
   $419 = Math_imul($414, $418)|0;
   $420 = $419 >> 16;
   $421 = (($410) + ($420))|0;
   $422 = (($401) + ($421))|0;
   $61 = $422;
   $423 = $61;
   $424 = $83;
   $425 = ((($424)) + -24|0);
   $426 = HEAP32[$425>>2]|0;
   $427 = $426 >> 16;
   $428 = $34;
   $429 = ((($428)) + 12|0);
   $430 = HEAP16[$429>>1]|0;
   $431 = $430 << 16 >> 16;
   $432 = Math_imul($427, $431)|0;
   $433 = $83;
   $434 = ((($433)) + -24|0);
   $435 = HEAP32[$434>>2]|0;
   $436 = $435 & 65535;
   $437 = $34;
   $438 = ((($437)) + 12|0);
   $439 = HEAP16[$438>>1]|0;
   $440 = $439 << 16 >> 16;
   $441 = Math_imul($436, $440)|0;
   $442 = $441 >> 16;
   $443 = (($432) + ($442))|0;
   $444 = (($423) + ($443))|0;
   $61 = $444;
   $445 = $61;
   $446 = $83;
   $447 = ((($446)) + -28|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = $448 >> 16;
   $450 = $34;
   $451 = ((($450)) + 14|0);
   $452 = HEAP16[$451>>1]|0;
   $453 = $452 << 16 >> 16;
   $454 = Math_imul($449, $453)|0;
   $455 = $83;
   $456 = ((($455)) + -28|0);
   $457 = HEAP32[$456>>2]|0;
   $458 = $457 & 65535;
   $459 = $34;
   $460 = ((($459)) + 14|0);
   $461 = HEAP16[$460>>1]|0;
   $462 = $461 << 16 >> 16;
   $463 = Math_imul($458, $462)|0;
   $464 = $463 >> 16;
   $465 = (($454) + ($464))|0;
   $466 = (($445) + ($465))|0;
   $61 = $466;
   $467 = $61;
   $468 = $83;
   $469 = ((($468)) + -32|0);
   $470 = HEAP32[$469>>2]|0;
   $471 = $470 >> 16;
   $472 = $34;
   $473 = ((($472)) + 16|0);
   $474 = HEAP16[$473>>1]|0;
   $475 = $474 << 16 >> 16;
   $476 = Math_imul($471, $475)|0;
   $477 = $83;
   $478 = ((($477)) + -32|0);
   $479 = HEAP32[$478>>2]|0;
   $480 = $479 & 65535;
   $481 = $34;
   $482 = ((($481)) + 16|0);
   $483 = HEAP16[$482>>1]|0;
   $484 = $483 << 16 >> 16;
   $485 = Math_imul($480, $484)|0;
   $486 = $485 >> 16;
   $487 = (($476) + ($486))|0;
   $488 = (($467) + ($487))|0;
   $61 = $488;
   $489 = $61;
   $490 = $83;
   $491 = ((($490)) + -36|0);
   $492 = HEAP32[$491>>2]|0;
   $493 = $492 >> 16;
   $494 = $34;
   $495 = ((($494)) + 18|0);
   $496 = HEAP16[$495>>1]|0;
   $497 = $496 << 16 >> 16;
   $498 = Math_imul($493, $497)|0;
   $499 = $83;
   $500 = ((($499)) + -36|0);
   $501 = HEAP32[$500>>2]|0;
   $502 = $501 & 65535;
   $503 = $34;
   $504 = ((($503)) + 18|0);
   $505 = HEAP16[$504>>1]|0;
   $506 = $505 << 16 >> 16;
   $507 = Math_imul($502, $506)|0;
   $508 = $507 >> 16;
   $509 = (($498) + ($508))|0;
   $510 = (($489) + ($509))|0;
   $61 = $510;
   $511 = $47;
   $512 = ($511|0)==(16);
   if ($512) {
    $513 = $61;
    $514 = $83;
    $515 = ((($514)) + -40|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = $516 >> 16;
    $518 = $34;
    $519 = ((($518)) + 20|0);
    $520 = HEAP16[$519>>1]|0;
    $521 = $520 << 16 >> 16;
    $522 = Math_imul($517, $521)|0;
    $523 = $83;
    $524 = ((($523)) + -40|0);
    $525 = HEAP32[$524>>2]|0;
    $526 = $525 & 65535;
    $527 = $34;
    $528 = ((($527)) + 20|0);
    $529 = HEAP16[$528>>1]|0;
    $530 = $529 << 16 >> 16;
    $531 = Math_imul($526, $530)|0;
    $532 = $531 >> 16;
    $533 = (($522) + ($532))|0;
    $534 = (($513) + ($533))|0;
    $61 = $534;
    $535 = $61;
    $536 = $83;
    $537 = ((($536)) + -44|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = $538 >> 16;
    $540 = $34;
    $541 = ((($540)) + 22|0);
    $542 = HEAP16[$541>>1]|0;
    $543 = $542 << 16 >> 16;
    $544 = Math_imul($539, $543)|0;
    $545 = $83;
    $546 = ((($545)) + -44|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = $547 & 65535;
    $549 = $34;
    $550 = ((($549)) + 22|0);
    $551 = HEAP16[$550>>1]|0;
    $552 = $551 << 16 >> 16;
    $553 = Math_imul($548, $552)|0;
    $554 = $553 >> 16;
    $555 = (($544) + ($554))|0;
    $556 = (($535) + ($555))|0;
    $61 = $556;
    $557 = $61;
    $558 = $83;
    $559 = ((($558)) + -48|0);
    $560 = HEAP32[$559>>2]|0;
    $561 = $560 >> 16;
    $562 = $34;
    $563 = ((($562)) + 24|0);
    $564 = HEAP16[$563>>1]|0;
    $565 = $564 << 16 >> 16;
    $566 = Math_imul($561, $565)|0;
    $567 = $83;
    $568 = ((($567)) + -48|0);
    $569 = HEAP32[$568>>2]|0;
    $570 = $569 & 65535;
    $571 = $34;
    $572 = ((($571)) + 24|0);
    $573 = HEAP16[$572>>1]|0;
    $574 = $573 << 16 >> 16;
    $575 = Math_imul($570, $574)|0;
    $576 = $575 >> 16;
    $577 = (($566) + ($576))|0;
    $578 = (($557) + ($577))|0;
    $61 = $578;
    $579 = $61;
    $580 = $83;
    $581 = ((($580)) + -52|0);
    $582 = HEAP32[$581>>2]|0;
    $583 = $582 >> 16;
    $584 = $34;
    $585 = ((($584)) + 26|0);
    $586 = HEAP16[$585>>1]|0;
    $587 = $586 << 16 >> 16;
    $588 = Math_imul($583, $587)|0;
    $589 = $83;
    $590 = ((($589)) + -52|0);
    $591 = HEAP32[$590>>2]|0;
    $592 = $591 & 65535;
    $593 = $34;
    $594 = ((($593)) + 26|0);
    $595 = HEAP16[$594>>1]|0;
    $596 = $595 << 16 >> 16;
    $597 = Math_imul($592, $596)|0;
    $598 = $597 >> 16;
    $599 = (($588) + ($598))|0;
    $600 = (($579) + ($599))|0;
    $61 = $600;
    $601 = $61;
    $602 = $83;
    $603 = ((($602)) + -56|0);
    $604 = HEAP32[$603>>2]|0;
    $605 = $604 >> 16;
    $606 = $34;
    $607 = ((($606)) + 28|0);
    $608 = HEAP16[$607>>1]|0;
    $609 = $608 << 16 >> 16;
    $610 = Math_imul($605, $609)|0;
    $611 = $83;
    $612 = ((($611)) + -56|0);
    $613 = HEAP32[$612>>2]|0;
    $614 = $613 & 65535;
    $615 = $34;
    $616 = ((($615)) + 28|0);
    $617 = HEAP16[$616>>1]|0;
    $618 = $617 << 16 >> 16;
    $619 = Math_imul($614, $618)|0;
    $620 = $619 >> 16;
    $621 = (($610) + ($620))|0;
    $622 = (($601) + ($621))|0;
    $61 = $622;
    $623 = $61;
    $624 = $83;
    $625 = ((($624)) + -60|0);
    $626 = HEAP32[$625>>2]|0;
    $627 = $626 >> 16;
    $628 = $34;
    $629 = ((($628)) + 30|0);
    $630 = HEAP16[$629>>1]|0;
    $631 = $630 << 16 >> 16;
    $632 = Math_imul($627, $631)|0;
    $633 = $83;
    $634 = ((($633)) + -60|0);
    $635 = HEAP32[$634>>2]|0;
    $636 = $635 & 65535;
    $637 = $34;
    $638 = ((($637)) + 30|0);
    $639 = HEAP16[$638>>1]|0;
    $640 = $639 << 16 >> 16;
    $641 = Math_imul($636, $640)|0;
    $642 = $641 >> 16;
    $643 = (($632) + ($642))|0;
    $644 = (($623) + ($643))|0;
    $61 = $644;
   }
   $645 = $61;
   $646 = $645 << 4;
   $61 = $646;
   $647 = $83;
   $648 = HEAP32[$647>>2]|0;
   $649 = $84;
   $650 = ((($649)) + 1088|0);
   $651 = HEAP32[$650>>2]|0;
   $652 = $651 >> 16;
   $653 = $48;
   $654 = $653&65535;
   $655 = $654 << 16 >> 16;
   $656 = Math_imul($652, $655)|0;
   $657 = $84;
   $658 = ((($657)) + 1088|0);
   $659 = HEAP32[$658>>2]|0;
   $660 = $659 & 65535;
   $661 = $48;
   $662 = $661&65535;
   $663 = $662 << 16 >> 16;
   $664 = Math_imul($660, $663)|0;
   $665 = $664 >> 16;
   $666 = (($656) + ($665))|0;
   $667 = (($648) + ($666))|0;
   $79 = $667;
   $668 = $84;
   $669 = ((($668)) + 1088|0);
   $670 = HEAP32[$669>>2]|0;
   $671 = $84;
   $672 = ((($671)) + 1088|0);
   $673 = ((($672)) + 4|0);
   $674 = HEAP32[$673>>2]|0;
   $675 = $79;
   $676 = (($674) - ($675))|0;
   $677 = $676 >> 16;
   $678 = $48;
   $679 = $678&65535;
   $680 = $679 << 16 >> 16;
   $681 = Math_imul($677, $680)|0;
   $682 = $84;
   $683 = ((($682)) + 1088|0);
   $684 = ((($683)) + 4|0);
   $685 = HEAP32[$684>>2]|0;
   $686 = $79;
   $687 = (($685) - ($686))|0;
   $688 = $687 & 65535;
   $689 = $48;
   $690 = $689&65535;
   $691 = $690 << 16 >> 16;
   $692 = Math_imul($688, $691)|0;
   $693 = $692 >> 16;
   $694 = (($681) + ($693))|0;
   $695 = (($670) + ($694))|0;
   $78 = $695;
   $696 = $79;
   $697 = $84;
   $698 = ((($697)) + 1088|0);
   HEAP32[$698>>2] = $696;
   $699 = $46;
   $700 = $699 >> 1;
   $62 = $700;
   $701 = $62;
   $702 = $79;
   $703 = $702 >> 16;
   $704 = $36;
   $705 = HEAP16[$704>>1]|0;
   $706 = $705 << 16 >> 16;
   $707 = Math_imul($703, $706)|0;
   $708 = $79;
   $709 = $708 & 65535;
   $710 = $36;
   $711 = HEAP16[$710>>1]|0;
   $712 = $711 << 16 >> 16;
   $713 = Math_imul($709, $712)|0;
   $714 = $713 >> 16;
   $715 = (($707) + ($714))|0;
   $716 = (($701) + ($715))|0;
   $62 = $716;
   $53 = 2;
   while(1) {
    $717 = $53;
    $718 = $46;
    $719 = ($717|0)<($718|0);
    if (!($719)) {
     break;
    }
    $720 = $84;
    $721 = ((($720)) + 1088|0);
    $722 = $53;
    $723 = (($722) - 1)|0;
    $724 = (($721) + ($723<<2)|0);
    $725 = HEAP32[$724>>2]|0;
    $726 = $84;
    $727 = ((($726)) + 1088|0);
    $728 = $53;
    $729 = (($728) + 0)|0;
    $730 = (($727) + ($729<<2)|0);
    $731 = HEAP32[$730>>2]|0;
    $732 = $78;
    $733 = (($731) - ($732))|0;
    $734 = $733 >> 16;
    $735 = $48;
    $736 = $735&65535;
    $737 = $736 << 16 >> 16;
    $738 = Math_imul($734, $737)|0;
    $739 = $84;
    $740 = ((($739)) + 1088|0);
    $741 = $53;
    $742 = (($741) + 0)|0;
    $743 = (($740) + ($742<<2)|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = $78;
    $746 = (($744) - ($745))|0;
    $747 = $746 & 65535;
    $748 = $48;
    $749 = $748&65535;
    $750 = $749 << 16 >> 16;
    $751 = Math_imul($747, $750)|0;
    $752 = $751 >> 16;
    $753 = (($738) + ($752))|0;
    $754 = (($725) + ($753))|0;
    $79 = $754;
    $755 = $78;
    $756 = $84;
    $757 = ((($756)) + 1088|0);
    $758 = $53;
    $759 = (($758) - 1)|0;
    $760 = (($757) + ($759<<2)|0);
    HEAP32[$760>>2] = $755;
    $761 = $62;
    $762 = $78;
    $763 = $762 >> 16;
    $764 = $36;
    $765 = $53;
    $766 = (($765) - 1)|0;
    $767 = (($764) + ($766<<1)|0);
    $768 = HEAP16[$767>>1]|0;
    $769 = $768 << 16 >> 16;
    $770 = Math_imul($763, $769)|0;
    $771 = $78;
    $772 = $771 & 65535;
    $773 = $36;
    $774 = $53;
    $775 = (($774) - 1)|0;
    $776 = (($773) + ($775<<1)|0);
    $777 = HEAP16[$776>>1]|0;
    $778 = $777 << 16 >> 16;
    $779 = Math_imul($772, $778)|0;
    $780 = $779 >> 16;
    $781 = (($770) + ($780))|0;
    $782 = (($761) + ($781))|0;
    $62 = $782;
    $783 = $84;
    $784 = ((($783)) + 1088|0);
    $785 = $53;
    $786 = (($785) + 0)|0;
    $787 = (($784) + ($786<<2)|0);
    $788 = HEAP32[$787>>2]|0;
    $789 = $84;
    $790 = ((($789)) + 1088|0);
    $791 = $53;
    $792 = (($791) + 1)|0;
    $793 = (($790) + ($792<<2)|0);
    $794 = HEAP32[$793>>2]|0;
    $795 = $79;
    $796 = (($794) - ($795))|0;
    $797 = $796 >> 16;
    $798 = $48;
    $799 = $798&65535;
    $800 = $799 << 16 >> 16;
    $801 = Math_imul($797, $800)|0;
    $802 = $84;
    $803 = ((($802)) + 1088|0);
    $804 = $53;
    $805 = (($804) + 1)|0;
    $806 = (($803) + ($805<<2)|0);
    $807 = HEAP32[$806>>2]|0;
    $808 = $79;
    $809 = (($807) - ($808))|0;
    $810 = $809 & 65535;
    $811 = $48;
    $812 = $811&65535;
    $813 = $812 << 16 >> 16;
    $814 = Math_imul($810, $813)|0;
    $815 = $814 >> 16;
    $816 = (($801) + ($815))|0;
    $817 = (($788) + ($816))|0;
    $78 = $817;
    $818 = $79;
    $819 = $84;
    $820 = ((($819)) + 1088|0);
    $821 = $53;
    $822 = (($821) + 0)|0;
    $823 = (($820) + ($822<<2)|0);
    HEAP32[$823>>2] = $818;
    $824 = $62;
    $825 = $79;
    $826 = $825 >> 16;
    $827 = $36;
    $828 = $53;
    $829 = (($827) + ($828<<1)|0);
    $830 = HEAP16[$829>>1]|0;
    $831 = $830 << 16 >> 16;
    $832 = Math_imul($826, $831)|0;
    $833 = $79;
    $834 = $833 & 65535;
    $835 = $36;
    $836 = $53;
    $837 = (($835) + ($836<<1)|0);
    $838 = HEAP16[$837>>1]|0;
    $839 = $838 << 16 >> 16;
    $840 = Math_imul($834, $839)|0;
    $841 = $840 >> 16;
    $842 = (($832) + ($841))|0;
    $843 = (($824) + ($842))|0;
    $62 = $843;
    $844 = $53;
    $845 = (($844) + 2)|0;
    $53 = $845;
   }
   $846 = $78;
   $847 = $84;
   $848 = ((($847)) + 1088|0);
   $849 = $46;
   $850 = (($849) - 1)|0;
   $851 = (($848) + ($850<<2)|0);
   HEAP32[$851>>2] = $846;
   $852 = $62;
   $853 = $78;
   $854 = $853 >> 16;
   $855 = $36;
   $856 = $46;
   $857 = (($856) - 1)|0;
   $858 = (($855) + ($857<<1)|0);
   $859 = HEAP16[$858>>1]|0;
   $860 = $859 << 16 >> 16;
   $861 = Math_imul($854, $860)|0;
   $862 = $78;
   $863 = $862 & 65535;
   $864 = $36;
   $865 = $46;
   $866 = (($865) - 1)|0;
   $867 = (($864) + ($866<<1)|0);
   $868 = HEAP16[$867>>1]|0;
   $869 = $868 << 16 >> 16;
   $870 = Math_imul($863, $869)|0;
   $871 = $870 >> 16;
   $872 = (($861) + ($871))|0;
   $873 = (($852) + ($872))|0;
   $62 = $873;
   $874 = $62;
   $875 = $874 << 1;
   $62 = $875;
   $876 = $62;
   $877 = $84;
   $878 = ((($877)) + 1152|0);
   $879 = HEAP32[$878>>2]|0;
   $880 = $879 >> 16;
   $881 = $39;
   $882 = $881&65535;
   $883 = $882 << 16 >> 16;
   $884 = Math_imul($880, $883)|0;
   $885 = $84;
   $886 = ((($885)) + 1152|0);
   $887 = HEAP32[$886>>2]|0;
   $888 = $887 & 65535;
   $889 = $39;
   $890 = $889&65535;
   $891 = $890 << 16 >> 16;
   $892 = Math_imul($888, $891)|0;
   $893 = $892 >> 16;
   $894 = (($884) + ($893))|0;
   $895 = (($876) + ($894))|0;
   $62 = $895;
   $896 = $62;
   $897 = $896 << 2;
   $62 = $897;
   $898 = $84;
   $899 = ((($898)) + 960|0);
   $900 = $50;
   $901 = HEAP32[$900>>2]|0;
   $902 = (($899) + ($901<<2)|0);
   $903 = HEAP32[$902>>2]|0;
   $904 = $903 >> 16;
   $905 = $40;
   $906 = $905&65535;
   $907 = $906 << 16 >> 16;
   $908 = Math_imul($904, $907)|0;
   $909 = $84;
   $910 = ((($909)) + 960|0);
   $911 = $50;
   $912 = HEAP32[$911>>2]|0;
   $913 = (($910) + ($912<<2)|0);
   $914 = HEAP32[$913>>2]|0;
   $915 = $914 & 65535;
   $916 = $40;
   $917 = $916&65535;
   $918 = $917 << 16 >> 16;
   $919 = Math_imul($915, $918)|0;
   $920 = $919 >> 16;
   $921 = (($908) + ($920))|0;
   $64 = $921;
   $922 = $64;
   $923 = $84;
   $924 = ((($923)) + 1152|0);
   $925 = HEAP32[$924>>2]|0;
   $926 = $925 >> 16;
   $927 = $40;
   $928 = $927 >> 16;
   $929 = Math_imul($926, $928)|0;
   $930 = (($922) + ($929))|0;
   $931 = $84;
   $932 = ((($931)) + 1152|0);
   $933 = HEAP32[$932>>2]|0;
   $934 = $933 & 65535;
   $935 = $40;
   $936 = $935 >> 16;
   $937 = Math_imul($934, $936)|0;
   $938 = $937 >> 16;
   $939 = (($930) + ($938))|0;
   $64 = $939;
   $940 = $64;
   $941 = $940 << 2;
   $64 = $941;
   $942 = $62;
   $943 = $64;
   $944 = (($942) + ($943))|0;
   $78 = $944;
   $945 = $63;
   $946 = $61;
   $947 = (($945) + ($946))|0;
   $79 = $947;
   $948 = $79;
   $949 = $78;
   $950 = (($948) - ($949))|0;
   $78 = $950;
   $951 = $78;
   $952 = $951 >> 3;
   $953 = (($952) + 1)|0;
   $954 = $953 >> 1;
   $78 = $954;
   $955 = $29;
   $956 = $52;
   $957 = (($955) + ($956<<2)|0);
   $958 = HEAP32[$957>>2]|0;
   $959 = $78;
   $960 = (($958) - ($959))|0;
   $65 = $960;
   $961 = $84;
   $962 = ((($961)) + 1156|0);
   $963 = HEAP32[$962>>2]|0;
   $964 = ($963|0)<(0);
   if ($964) {
    $965 = $65;
    $966 = (0 - ($965))|0;
    $65 = $966;
   }
   $967 = $65;
   $968 = ($967|0)>(30720);
   if ($968) {
    $973 = 30720;
   } else {
    $969 = $65;
    $970 = ($969|0)<(-31744);
    $971 = $65;
    $972 = $970 ? -31744 : $971;
    $973 = $972;
   }
   $65 = $973;
   $974 = $65;
   $975 = $43;
   $976 = (($974) - ($975))|0;
   $72 = $976;
   $977 = $72;
   $978 = $977 >> 10;
   $71 = $978;
   $979 = $71;
   $980 = ($979|0)>(0);
   $981 = $71;
   do {
    if ($980) {
     $982 = $981 << 10;
     $983 = (($982) - 80)|0;
     $72 = $983;
     $984 = $72;
     $985 = $43;
     $986 = (($984) + ($985))|0;
     $72 = $986;
     $987 = $72;
     $988 = (($987) + 1024)|0;
     $73 = $988;
     $989 = $72;
     $990 = $989&65535;
     $991 = $990 << 16 >> 16;
     $992 = $42;
     $993 = $992&65535;
     $994 = $993 << 16 >> 16;
     $995 = Math_imul($991, $994)|0;
     $67 = $995;
     $996 = $73;
     $997 = $996&65535;
     $998 = $997 << 16 >> 16;
     $999 = $42;
     $1000 = $999&65535;
     $1001 = $1000 << 16 >> 16;
     $1002 = Math_imul($998, $1001)|0;
     $68 = $1002;
    } else {
     $1003 = ($981|0)==(0);
     if ($1003) {
      $1004 = $43;
      $72 = $1004;
      $1005 = $72;
      $1006 = (($1005) + 944)|0;
      $73 = $1006;
      $1007 = $72;
      $1008 = $1007&65535;
      $1009 = $1008 << 16 >> 16;
      $1010 = $42;
      $1011 = $1010&65535;
      $1012 = $1011 << 16 >> 16;
      $1013 = Math_imul($1009, $1012)|0;
      $67 = $1013;
      $1014 = $73;
      $1015 = $1014&65535;
      $1016 = $1015 << 16 >> 16;
      $1017 = $42;
      $1018 = $1017&65535;
      $1019 = $1018 << 16 >> 16;
      $1020 = Math_imul($1016, $1019)|0;
      $68 = $1020;
      break;
     }
     $1021 = $71;
     $1022 = ($1021|0)==(-1);
     if ($1022) {
      $1023 = $43;
      $73 = $1023;
      $1024 = $73;
      $1025 = (($1024) - 944)|0;
      $72 = $1025;
      $1026 = $72;
      $1027 = (0 - ($1026))|0;
      $1028 = $1027&65535;
      $1029 = $1028 << 16 >> 16;
      $1030 = $42;
      $1031 = $1030&65535;
      $1032 = $1031 << 16 >> 16;
      $1033 = Math_imul($1029, $1032)|0;
      $67 = $1033;
      $1034 = $73;
      $1035 = $1034&65535;
      $1036 = $1035 << 16 >> 16;
      $1037 = $42;
      $1038 = $1037&65535;
      $1039 = $1038 << 16 >> 16;
      $1040 = Math_imul($1036, $1039)|0;
      $68 = $1040;
      break;
     } else {
      $1041 = $71;
      $1042 = $1041 << 10;
      $1043 = (($1042) + 80)|0;
      $72 = $1043;
      $1044 = $72;
      $1045 = $43;
      $1046 = (($1044) + ($1045))|0;
      $72 = $1046;
      $1047 = $72;
      $1048 = (($1047) + 1024)|0;
      $73 = $1048;
      $1049 = $72;
      $1050 = (0 - ($1049))|0;
      $1051 = $1050&65535;
      $1052 = $1051 << 16 >> 16;
      $1053 = $42;
      $1054 = $1053&65535;
      $1055 = $1054 << 16 >> 16;
      $1056 = Math_imul($1052, $1055)|0;
      $67 = $1056;
      $1057 = $73;
      $1058 = (0 - ($1057))|0;
      $1059 = $1058&65535;
      $1060 = $1059 << 16 >> 16;
      $1061 = $42;
      $1062 = $1061&65535;
      $1063 = $1062 << 16 >> 16;
      $1064 = Math_imul($1060, $1063)|0;
      $68 = $1064;
      break;
     }
    }
   } while(0);
   $1065 = $65;
   $1066 = $72;
   $1067 = (($1065) - ($1066))|0;
   $66 = $1067;
   $1068 = $67;
   $1069 = $66;
   $1070 = $1069&65535;
   $1071 = $1070 << 16 >> 16;
   $1072 = $66;
   $1073 = $1072&65535;
   $1074 = $1073 << 16 >> 16;
   $1075 = Math_imul($1071, $1074)|0;
   $1076 = (($1068) + ($1075))|0;
   $1077 = $1076 >> 10;
   $67 = $1077;
   $1078 = $65;
   $1079 = $73;
   $1080 = (($1078) - ($1079))|0;
   $66 = $1080;
   $1081 = $68;
   $1082 = $66;
   $1083 = $1082&65535;
   $1084 = $1083 << 16 >> 16;
   $1085 = $66;
   $1086 = $1085&65535;
   $1087 = $1086 << 16 >> 16;
   $1088 = Math_imul($1084, $1087)|0;
   $1089 = (($1081) + ($1088))|0;
   $1090 = $1089 >> 10;
   $68 = $1090;
   $1091 = $67;
   $1092 = $68;
   $1093 = ($1091|0)<($1092|0);
   $1094 = $84;
   $1095 = ((($1094)) + 1164|0);
   $1096 = HEAP32[$1095>>2]|0;
   if ($1093) {
    $1097 = $67;
    $1098 = (($1096) + ($1097))|0;
    $1099 = $85;
    $1100 = ((($1099)) + 4|0);
    HEAP32[$1100>>2] = $1098;
    $1101 = $84;
    $1102 = ((($1101)) + 1164|0);
    $1103 = HEAP32[$1102>>2]|0;
    $1104 = $68;
    $1105 = (($1103) + ($1104))|0;
    $1106 = $85;
    $1107 = ((($1106)) + 24|0);
    $1108 = ((($1107)) + 4|0);
    HEAP32[$1108>>2] = $1105;
    $1109 = $72;
    $1110 = $85;
    HEAP32[$1110>>2] = $1109;
    $1111 = $73;
    $1112 = $85;
    $$sink = $1111;$$sink3 = $1112;
   } else {
    $1113 = $68;
    $1114 = (($1096) + ($1113))|0;
    $1115 = $85;
    $1116 = ((($1115)) + 4|0);
    HEAP32[$1116>>2] = $1114;
    $1117 = $84;
    $1118 = ((($1117)) + 1164|0);
    $1119 = HEAP32[$1118>>2]|0;
    $1120 = $67;
    $1121 = (($1119) + ($1120))|0;
    $1122 = $85;
    $1123 = ((($1122)) + 24|0);
    $1124 = ((($1123)) + 4|0);
    HEAP32[$1124>>2] = $1121;
    $1125 = $73;
    $1126 = $85;
    HEAP32[$1126>>2] = $1125;
    $1127 = $72;
    $1128 = $85;
    $$sink = $1127;$$sink3 = $1128;
   }
   $1129 = ((($$sink3)) + 24|0);
   HEAP32[$1129>>2] = $$sink;
   $1130 = $85;
   $1131 = HEAP32[$1130>>2]|0;
   $1132 = $1131 << 4;
   $74 = $1132;
   $1133 = $84;
   $1134 = ((($1133)) + 1156|0);
   $1135 = HEAP32[$1134>>2]|0;
   $1136 = ($1135|0)<(0);
   if ($1136) {
    $1137 = $74;
    $1138 = (0 - ($1137))|0;
    $74 = $1138;
   }
   $1139 = $74;
   $1140 = $60;
   $1141 = (($1139) + ($1140))|0;
   $75 = $1141;
   $1142 = $75;
   $1143 = $61;
   $1144 = (($1142) + ($1143))|0;
   $76 = $1144;
   $1145 = $76;
   $1146 = $62;
   $1147 = (($1145) - ($1146))|0;
   $80 = $1147;
   $1148 = $80;
   $1149 = $64;
   $1150 = (($1148) - ($1149))|0;
   $1151 = $85;
   $1152 = ((($1151)) + 16|0);
   HEAP32[$1152>>2] = $1150;
   $1153 = $80;
   $1154 = $85;
   $1155 = ((($1154)) + 12|0);
   HEAP32[$1155>>2] = $1153;
   $1156 = $75;
   $1157 = $85;
   $1158 = ((($1157)) + 20|0);
   HEAP32[$1158>>2] = $1156;
   $1159 = $76;
   $1160 = $85;
   $1161 = ((($1160)) + 8|0);
   HEAP32[$1161>>2] = $1159;
   $1162 = $85;
   $1163 = ((($1162)) + 24|0);
   $1164 = HEAP32[$1163>>2]|0;
   $1165 = $1164 << 4;
   $74 = $1165;
   $1166 = $84;
   $1167 = ((($1166)) + 1156|0);
   $1168 = HEAP32[$1167>>2]|0;
   $1169 = ($1168|0)<(0);
   if ($1169) {
    $1170 = $74;
    $1171 = (0 - ($1170))|0;
    $74 = $1171;
   }
   $1172 = $74;
   $1173 = $60;
   $1174 = (($1172) + ($1173))|0;
   $75 = $1174;
   $1175 = $75;
   $1176 = $61;
   $1177 = (($1175) + ($1176))|0;
   $76 = $1177;
   $1178 = $76;
   $1179 = $62;
   $1180 = (($1178) - ($1179))|0;
   $80 = $1180;
   $1181 = $80;
   $1182 = $64;
   $1183 = (($1181) - ($1182))|0;
   $1184 = $85;
   $1185 = ((($1184)) + 24|0);
   $1186 = ((($1185)) + 16|0);
   HEAP32[$1186>>2] = $1183;
   $1187 = $80;
   $1188 = $85;
   $1189 = ((($1188)) + 24|0);
   $1190 = ((($1189)) + 12|0);
   HEAP32[$1190>>2] = $1187;
   $1191 = $75;
   $1192 = $85;
   $1193 = ((($1192)) + 24|0);
   $1194 = ((($1193)) + 20|0);
   HEAP32[$1194>>2] = $1191;
   $1195 = $76;
   $1196 = $85;
   $1197 = ((($1196)) + 24|0);
   $1198 = ((($1197)) + 8|0);
   HEAP32[$1198>>2] = $1195;
   $1199 = $54;
   $1200 = (($1199) + 1)|0;
   $54 = $1200;
  }
  $1201 = $50;
  $1202 = HEAP32[$1201>>2]|0;
  $1203 = (($1202) - 1)|0;
  $1204 = $1203 & 31;
  $1205 = $50;
  HEAP32[$1205>>2] = $1204;
  $1206 = $50;
  $1207 = HEAP32[$1206>>2]|0;
  $1208 = $51;
  $1209 = (($1207) + ($1208))|0;
  $1210 = $1209 & 31;
  $58 = $1210;
  $1211 = ((($89)) + 4|0);
  $1212 = HEAP32[$1211>>2]|0;
  $69 = $1212;
  $55 = 0;
  $54 = 1;
  while(1) {
   $1213 = $54;
   $1214 = $49;
   $1215 = ($1213|0)<($1214|0);
   if (!($1215)) {
    break;
   }
   $1216 = $54;
   $1217 = (($89) + (($1216*48)|0)|0);
   $1218 = ((($1217)) + 4|0);
   $1219 = HEAP32[$1218>>2]|0;
   $1220 = $69;
   $1221 = ($1219|0)<($1220|0);
   if ($1221) {
    $1222 = $54;
    $1223 = (($89) + (($1222*48)|0)|0);
    $1224 = ((($1223)) + 4|0);
    $1225 = HEAP32[$1224>>2]|0;
    $69 = $1225;
    $1226 = $54;
    $55 = $1226;
   }
   $1227 = $54;
   $1228 = (($1227) + 1)|0;
   $54 = $1228;
  }
  $1229 = $27;
  $1230 = $55;
  $1231 = (($1229) + (($1230*1168)|0)|0);
  $1232 = ((($1231)) + 448|0);
  $1233 = $58;
  $1234 = (($1232) + ($1233<<2)|0);
  $1235 = HEAP32[$1234>>2]|0;
  $59 = $1235;
  $54 = 0;
  while(1) {
   $1236 = $54;
   $1237 = $49;
   $1238 = ($1236|0)<($1237|0);
   if (!($1238)) {
    break;
   }
   $1239 = $27;
   $1240 = $54;
   $1241 = (($1239) + (($1240*1168)|0)|0);
   $1242 = ((($1241)) + 448|0);
   $1243 = $58;
   $1244 = (($1242) + ($1243<<2)|0);
   $1245 = HEAP32[$1244>>2]|0;
   $1246 = $59;
   $1247 = ($1245|0)!=($1246|0);
   if ($1247) {
    $1248 = $54;
    $1249 = (($89) + (($1248*48)|0)|0);
    $1250 = ((($1249)) + 4|0);
    $1251 = HEAP32[$1250>>2]|0;
    $1252 = (($1251) + 134217727)|0;
    $1253 = $54;
    $1254 = (($89) + (($1253*48)|0)|0);
    $1255 = ((($1254)) + 4|0);
    HEAP32[$1255>>2] = $1252;
    $1256 = $54;
    $1257 = (($89) + (($1256*48)|0)|0);
    $1258 = ((($1257)) + 24|0);
    $1259 = ((($1258)) + 4|0);
    $1260 = HEAP32[$1259>>2]|0;
    $1261 = (($1260) + 134217727)|0;
    $1262 = $54;
    $1263 = (($89) + (($1262*48)|0)|0);
    $1264 = ((($1263)) + 24|0);
    $1265 = ((($1264)) + 4|0);
    HEAP32[$1265>>2] = $1261;
   }
   $1266 = $54;
   $1267 = (($1266) + 1)|0;
   $54 = $1267;
  }
  $1268 = ((($89)) + 4|0);
  $1269 = HEAP32[$1268>>2]|0;
  $70 = $1269;
  $1270 = ((($89)) + 24|0);
  $1271 = ((($1270)) + 4|0);
  $1272 = HEAP32[$1271>>2]|0;
  $69 = $1272;
  $57 = 0;
  $56 = 0;
  $54 = 1;
  while(1) {
   $1273 = $54;
   $1274 = $49;
   $1275 = ($1273|0)<($1274|0);
   if (!($1275)) {
    break;
   }
   $1276 = $54;
   $1277 = (($89) + (($1276*48)|0)|0);
   $1278 = ((($1277)) + 4|0);
   $1279 = HEAP32[$1278>>2]|0;
   $1280 = $70;
   $1281 = ($1279|0)>($1280|0);
   if ($1281) {
    $1282 = $54;
    $1283 = (($89) + (($1282*48)|0)|0);
    $1284 = ((($1283)) + 4|0);
    $1285 = HEAP32[$1284>>2]|0;
    $70 = $1285;
    $1286 = $54;
    $57 = $1286;
   }
   $1287 = $54;
   $1288 = (($89) + (($1287*48)|0)|0);
   $1289 = ((($1288)) + 24|0);
   $1290 = ((($1289)) + 4|0);
   $1291 = HEAP32[$1290>>2]|0;
   $1292 = $69;
   $1293 = ($1291|0)<($1292|0);
   if ($1293) {
    $1294 = $54;
    $1295 = (($89) + (($1294*48)|0)|0);
    $1296 = ((($1295)) + 24|0);
    $1297 = ((($1296)) + 4|0);
    $1298 = HEAP32[$1297>>2]|0;
    $69 = $1298;
    $1299 = $54;
    $56 = $1299;
   }
   $1300 = $54;
   $1301 = (($1300) + 1)|0;
   $54 = $1301;
  }
  $1302 = $69;
  $1303 = $70;
  $1304 = ($1302|0)<($1303|0);
  if ($1304) {
   $1305 = $27;
   $1306 = $57;
   $1307 = (($1305) + (($1306*1168)|0)|0);
   $1308 = $52;
   $1309 = (($1307) + ($1308<<2)|0);
   $1310 = $27;
   $1311 = $56;
   $1312 = (($1310) + (($1311*1168)|0)|0);
   $1313 = $52;
   $1314 = (($1312) + ($1313<<2)|0);
   $1315 = $52;
   $1316 = $1315<<2;
   $1317 = (1168 - ($1316))|0;
   _memcpy(($1309|0),($1314|0),($1317|0))|0;
   $1318 = $57;
   $1319 = (($89) + (($1318*48)|0)|0);
   $1320 = $56;
   $1321 = (($89) + (($1320*48)|0)|0);
   $1322 = ((($1321)) + 24|0);
   ;HEAP32[$1319>>2]=HEAP32[$1322>>2]|0;HEAP32[$1319+4>>2]=HEAP32[$1322+4>>2]|0;HEAP32[$1319+8>>2]=HEAP32[$1322+8>>2]|0;HEAP32[$1319+12>>2]=HEAP32[$1322+12>>2]|0;HEAP32[$1319+16>>2]=HEAP32[$1322+16>>2]|0;HEAP32[$1319+20>>2]=HEAP32[$1322+20>>2]|0;
  }
  $1323 = $27;
  $1324 = $55;
  $1325 = (($1323) + (($1324*1168)|0)|0);
  $84 = $1325;
  $1326 = $45;
  $1327 = ($1326|0)>(0);
  if ($1327) {
   label = 56;
  } else {
   $1328 = $52;
   $1329 = $51;
   $1330 = ($1328|0)>=($1329|0);
   if ($1330) {
    label = 56;
   }
  }
  if ((label|0) == 56) {
   label = 0;
   $1331 = $84;
   $1332 = ((($1331)) + 576|0);
   $1333 = $58;
   $1334 = (($1332) + ($1333<<2)|0);
   $1335 = HEAP32[$1334>>2]|0;
   $1336 = $1335 >> 9;
   $1337 = (($1336) + 1)|0;
   $1338 = $1337 >> 1;
   $1339 = $1338&255;
   $1340 = $30;
   $1341 = $52;
   $1342 = $51;
   $1343 = (($1341) - ($1342))|0;
   $1344 = (($1340) + ($1343)|0);
   HEAP8[$1344>>0] = $1339;
   $1345 = $84;
   $1346 = ((($1345)) + 704|0);
   $1347 = $58;
   $1348 = (($1346) + ($1347<<2)|0);
   $1349 = HEAP32[$1348>>2]|0;
   $1350 = $1349 >> 16;
   $1351 = $33;
   $1352 = $58;
   $1353 = (($1351) + ($1352<<2)|0);
   $1354 = HEAP32[$1353>>2]|0;
   $1355 = $1354&65535;
   $1356 = $1355 << 16 >> 16;
   $1357 = Math_imul($1350, $1356)|0;
   $1358 = $84;
   $1359 = ((($1358)) + 704|0);
   $1360 = $58;
   $1361 = (($1359) + ($1360<<2)|0);
   $1362 = HEAP32[$1361>>2]|0;
   $1363 = $1362 & 65535;
   $1364 = $33;
   $1365 = $58;
   $1366 = (($1364) + ($1365<<2)|0);
   $1367 = HEAP32[$1366>>2]|0;
   $1368 = $1367&65535;
   $1369 = $1368 << 16 >> 16;
   $1370 = Math_imul($1363, $1369)|0;
   $1371 = $1370 >> 16;
   $1372 = (($1357) + ($1371))|0;
   $1373 = $84;
   $1374 = ((($1373)) + 704|0);
   $1375 = $58;
   $1376 = (($1374) + ($1375<<2)|0);
   $1377 = HEAP32[$1376>>2]|0;
   $1378 = $33;
   $1379 = $58;
   $1380 = (($1378) + ($1379<<2)|0);
   $1381 = HEAP32[$1380>>2]|0;
   $1382 = $1381 >> 15;
   $1383 = (($1382) + 1)|0;
   $1384 = $1383 >> 1;
   $1385 = Math_imul($1377, $1384)|0;
   $1386 = (($1372) + ($1385))|0;
   $1387 = $1386 >> 7;
   $1388 = (($1387) + 1)|0;
   $1389 = $1388 >> 1;
   $1390 = ($1389|0)>(32767);
   if ($1390) {
    $1483 = 32767;
   } else {
    $1391 = $84;
    $1392 = ((($1391)) + 704|0);
    $1393 = $58;
    $1394 = (($1392) + ($1393<<2)|0);
    $1395 = HEAP32[$1394>>2]|0;
    $1396 = $1395 >> 16;
    $1397 = $33;
    $1398 = $58;
    $1399 = (($1397) + ($1398<<2)|0);
    $1400 = HEAP32[$1399>>2]|0;
    $1401 = $1400&65535;
    $1402 = $1401 << 16 >> 16;
    $1403 = Math_imul($1396, $1402)|0;
    $1404 = $84;
    $1405 = ((($1404)) + 704|0);
    $1406 = $58;
    $1407 = (($1405) + ($1406<<2)|0);
    $1408 = HEAP32[$1407>>2]|0;
    $1409 = $1408 & 65535;
    $1410 = $33;
    $1411 = $58;
    $1412 = (($1410) + ($1411<<2)|0);
    $1413 = HEAP32[$1412>>2]|0;
    $1414 = $1413&65535;
    $1415 = $1414 << 16 >> 16;
    $1416 = Math_imul($1409, $1415)|0;
    $1417 = $1416 >> 16;
    $1418 = (($1403) + ($1417))|0;
    $1419 = $84;
    $1420 = ((($1419)) + 704|0);
    $1421 = $58;
    $1422 = (($1420) + ($1421<<2)|0);
    $1423 = HEAP32[$1422>>2]|0;
    $1424 = $33;
    $1425 = $58;
    $1426 = (($1424) + ($1425<<2)|0);
    $1427 = HEAP32[$1426>>2]|0;
    $1428 = $1427 >> 15;
    $1429 = (($1428) + 1)|0;
    $1430 = $1429 >> 1;
    $1431 = Math_imul($1423, $1430)|0;
    $1432 = (($1418) + ($1431))|0;
    $1433 = $1432 >> 7;
    $1434 = (($1433) + 1)|0;
    $1435 = $1434 >> 1;
    $1436 = ($1435|0)<(-32768);
    if ($1436) {
     $1483 = -32768;
    } else {
     $1437 = $84;
     $1438 = ((($1437)) + 704|0);
     $1439 = $58;
     $1440 = (($1438) + ($1439<<2)|0);
     $1441 = HEAP32[$1440>>2]|0;
     $1442 = $1441 >> 16;
     $1443 = $33;
     $1444 = $58;
     $1445 = (($1443) + ($1444<<2)|0);
     $1446 = HEAP32[$1445>>2]|0;
     $1447 = $1446&65535;
     $1448 = $1447 << 16 >> 16;
     $1449 = Math_imul($1442, $1448)|0;
     $1450 = $84;
     $1451 = ((($1450)) + 704|0);
     $1452 = $58;
     $1453 = (($1451) + ($1452<<2)|0);
     $1454 = HEAP32[$1453>>2]|0;
     $1455 = $1454 & 65535;
     $1456 = $33;
     $1457 = $58;
     $1458 = (($1456) + ($1457<<2)|0);
     $1459 = HEAP32[$1458>>2]|0;
     $1460 = $1459&65535;
     $1461 = $1460 << 16 >> 16;
     $1462 = Math_imul($1455, $1461)|0;
     $1463 = $1462 >> 16;
     $1464 = (($1449) + ($1463))|0;
     $1465 = $84;
     $1466 = ((($1465)) + 704|0);
     $1467 = $58;
     $1468 = (($1466) + ($1467<<2)|0);
     $1469 = HEAP32[$1468>>2]|0;
     $1470 = $33;
     $1471 = $58;
     $1472 = (($1470) + ($1471<<2)|0);
     $1473 = HEAP32[$1472>>2]|0;
     $1474 = $1473 >> 15;
     $1475 = (($1474) + 1)|0;
     $1476 = $1475 >> 1;
     $1477 = Math_imul($1469, $1476)|0;
     $1478 = (($1464) + ($1477))|0;
     $1479 = $1478 >> 7;
     $1480 = (($1479) + 1)|0;
     $1481 = $1480 >> 1;
     $1483 = $1481;
    }
   }
   $1482 = $1483&65535;
   $1484 = $31;
   $1485 = $52;
   $1486 = $51;
   $1487 = (($1485) - ($1486))|0;
   $1488 = (($1484) + ($1487<<1)|0);
   HEAP16[$1488>>1] = $1482;
   $1489 = $84;
   $1490 = ((($1489)) + 960|0);
   $1491 = $58;
   $1492 = (($1490) + ($1491<<2)|0);
   $1493 = HEAP32[$1492>>2]|0;
   $1494 = $26;
   $1495 = ((($1494)) + 1280|0);
   $1496 = $26;
   $1497 = ((($1496)) + 4364|0);
   $1498 = HEAP32[$1497>>2]|0;
   $1499 = $51;
   $1500 = (($1498) - ($1499))|0;
   $1501 = (($1495) + ($1500<<2)|0);
   HEAP32[$1501>>2] = $1493;
   $1502 = $84;
   $1503 = ((($1502)) + 832|0);
   $1504 = $58;
   $1505 = (($1503) + ($1504<<2)|0);
   $1506 = HEAP32[$1505>>2]|0;
   $1507 = $32;
   $1508 = $26;
   $1509 = ((($1508)) + 4360|0);
   $1510 = HEAP32[$1509>>2]|0;
   $1511 = $51;
   $1512 = (($1510) - ($1511))|0;
   $1513 = (($1507) + ($1512<<2)|0);
   HEAP32[$1513>>2] = $1506;
  }
  $1514 = $26;
  $1515 = ((($1514)) + 4364|0);
  $1516 = HEAP32[$1515>>2]|0;
  $1517 = (($1516) + 1)|0;
  HEAP32[$1515>>2] = $1517;
  $1518 = $26;
  $1519 = ((($1518)) + 4360|0);
  $1520 = HEAP32[$1519>>2]|0;
  $1521 = (($1520) + 1)|0;
  HEAP32[$1519>>2] = $1521;
  $54 = 0;
  while(1) {
   $1522 = $54;
   $1523 = $49;
   $1524 = ($1522|0)<($1523|0);
   if (!($1524)) {
    break;
   }
   $1525 = $27;
   $1526 = $54;
   $1527 = (($1525) + (($1526*1168)|0)|0);
   $84 = $1527;
   $1528 = $54;
   $1529 = (($89) + (($1528*48)|0)|0);
   $85 = $1529;
   $1530 = $85;
   $1531 = ((($1530)) + 12|0);
   $1532 = HEAP32[$1531>>2]|0;
   $1533 = $84;
   $1534 = ((($1533)) + 1152|0);
   HEAP32[$1534>>2] = $1532;
   $1535 = $85;
   $1536 = ((($1535)) + 8|0);
   $1537 = HEAP32[$1536>>2]|0;
   $1538 = $84;
   $1539 = $52;
   $1540 = (32 + ($1539))|0;
   $1541 = (($1538) + ($1540<<2)|0);
   HEAP32[$1541>>2] = $1537;
   $1542 = $85;
   $1543 = ((($1542)) + 8|0);
   $1544 = HEAP32[$1543>>2]|0;
   $1545 = $84;
   $1546 = ((($1545)) + 704|0);
   $1547 = $50;
   $1548 = HEAP32[$1547>>2]|0;
   $1549 = (($1546) + ($1548<<2)|0);
   HEAP32[$1549>>2] = $1544;
   $1550 = $85;
   $1551 = HEAP32[$1550>>2]|0;
   $1552 = $84;
   $1553 = ((($1552)) + 576|0);
   $1554 = $50;
   $1555 = HEAP32[$1554>>2]|0;
   $1556 = (($1553) + ($1555<<2)|0);
   HEAP32[$1556>>2] = $1551;
   $1557 = $85;
   $1558 = ((($1557)) + 20|0);
   $1559 = HEAP32[$1558>>2]|0;
   $1560 = $1559 << 1;
   $1561 = $84;
   $1562 = ((($1561)) + 832|0);
   $1563 = $50;
   $1564 = HEAP32[$1563>>2]|0;
   $1565 = (($1562) + ($1564<<2)|0);
   HEAP32[$1565>>2] = $1560;
   $1566 = $85;
   $1567 = ((($1566)) + 16|0);
   $1568 = HEAP32[$1567>>2]|0;
   $1569 = $84;
   $1570 = ((($1569)) + 960|0);
   $1571 = $50;
   $1572 = HEAP32[$1571>>2]|0;
   $1573 = (($1570) + ($1572<<2)|0);
   HEAP32[$1573>>2] = $1568;
   $1574 = $84;
   $1575 = ((($1574)) + 1156|0);
   $1576 = HEAP32[$1575>>2]|0;
   $1577 = $85;
   $1578 = HEAP32[$1577>>2]|0;
   $1579 = $1578 >> 9;
   $1580 = (($1579) + 1)|0;
   $1581 = $1580 >> 1;
   $1582 = (($1576) + ($1581))|0;
   $1583 = $84;
   $1584 = ((($1583)) + 1156|0);
   HEAP32[$1584>>2] = $1582;
   $1585 = $84;
   $1586 = ((($1585)) + 1156|0);
   $1587 = HEAP32[$1586>>2]|0;
   $1588 = $84;
   $1589 = ((($1588)) + 448|0);
   $1590 = $50;
   $1591 = HEAP32[$1590>>2]|0;
   $1592 = (($1589) + ($1591<<2)|0);
   HEAP32[$1592>>2] = $1587;
   $1593 = $85;
   $1594 = ((($1593)) + 4|0);
   $1595 = HEAP32[$1594>>2]|0;
   $1596 = $84;
   $1597 = ((($1596)) + 1164|0);
   HEAP32[$1597>>2] = $1595;
   $1598 = $54;
   $1599 = (($1598) + 1)|0;
   $54 = $1599;
  }
  $1600 = $77;
  $1601 = $33;
  $1602 = $50;
  $1603 = HEAP32[$1602>>2]|0;
  $1604 = (($1601) + ($1603<<2)|0);
  HEAP32[$1604>>2] = $1600;
  $1605 = $52;
  $1606 = (($1605) + 1)|0;
  $52 = $1606;
 }
 $54 = 0;
 while(1) {
  $1607 = $54;
  $1608 = $49;
  $1609 = ($1607|0)<($1608|0);
  if (!($1609)) {
   break;
  }
  $1610 = $27;
  $1611 = $54;
  $1612 = (($1610) + (($1611*1168)|0)|0);
  $84 = $1612;
  $1613 = $84;
  $1614 = $84;
  $1615 = $44;
  $1616 = (($1614) + ($1615<<2)|0);
  dest=$1613; src=$1616; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $1617 = $54;
  $1618 = (($1617) + 1)|0;
  $54 = $1618;
 }
 $1619 = $86;
 _llvm_stackrestore(($1619|0));
 STACKTOP = sp;return;
}
function _silk_INVERSE32_varQ_424($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)>(0);
 $13 = $3;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $16 = (_silk_CLZ32_426($15)|0);
 $17 = (($16) - 1)|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $18 << $19;
 $8 = $20;
 $21 = $8;
 $22 = $21 >> 16;
 $23 = (536870911 / ($22|0))&-1;
 $7 = $23;
 $24 = $7;
 $25 = $24 << 16;
 $10 = $25;
 $26 = $8;
 $27 = $26 >> 16;
 $28 = $7;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = Math_imul($27, $30)|0;
 $32 = $8;
 $33 = $32 & 65535;
 $34 = $7;
 $35 = $34&65535;
 $36 = $35 << 16 >> 16;
 $37 = Math_imul($33, $36)|0;
 $38 = $37 >> 16;
 $39 = (($31) + ($38))|0;
 $40 = (536870912 - ($39))|0;
 $41 = $40 << 3;
 $9 = $41;
 $42 = $10;
 $43 = $9;
 $44 = $43 >> 16;
 $45 = $7;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $9;
 $50 = $49 & 65535;
 $51 = $7;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($50, $53)|0;
 $55 = $54 >> 16;
 $56 = (($48) + ($55))|0;
 $57 = (($42) + ($56))|0;
 $58 = $9;
 $59 = $7;
 $60 = $59 >> 15;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = Math_imul($58, $62)|0;
 $64 = (($57) + ($63))|0;
 $10 = $64;
 $65 = $5;
 $66 = (61 - ($65))|0;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $6 = $68;
 $69 = $6;
 $70 = ($69|0)<=(0);
 $71 = $6;
 if (!($70)) {
  $113 = ($71|0)<(32);
  if ($113) {
   $114 = $10;
   $115 = $6;
   $116 = $114 >> $115;
   $2 = $116;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  } else {
   $2 = 0;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  }
 }
 $72 = (0 - ($71))|0;
 $73 = -2147483648 >> $72;
 $74 = $6;
 $75 = (0 - ($74))|0;
 $76 = 2147483647 >> $75;
 $77 = ($73|0)>($76|0);
 $78 = $10;
 $79 = $6;
 $80 = (0 - ($79))|0;
 do {
  if ($77) {
   $81 = -2147483648 >> $80;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $6;
    $84 = (0 - ($83))|0;
    $85 = -2147483648 >> $84;
    $112 = $85;
    break;
   }
   $86 = $10;
   $87 = $6;
   $88 = (0 - ($87))|0;
   $89 = 2147483647 >> $88;
   $90 = ($86|0)<($89|0);
   if ($90) {
    $91 = $6;
    $92 = (0 - ($91))|0;
    $93 = 2147483647 >> $92;
    $112 = $93;
    break;
   } else {
    $94 = $10;
    $112 = $94;
    break;
   }
  } else {
   $95 = 2147483647 >> $80;
   $96 = ($78|0)>($95|0);
   if ($96) {
    $97 = $6;
    $98 = (0 - ($97))|0;
    $99 = 2147483647 >> $98;
    $112 = $99;
    break;
   }
   $100 = $10;
   $101 = $6;
   $102 = (0 - ($101))|0;
   $103 = -2147483648 >> $102;
   $104 = ($100|0)<($103|0);
   if ($104) {
    $105 = $6;
    $106 = (0 - ($105))|0;
    $107 = -2147483648 >> $106;
    $112 = $107;
    break;
   } else {
    $108 = $10;
    $112 = $108;
    break;
   }
  }
 } while(0);
 $109 = $6;
 $110 = (0 - ($109))|0;
 $111 = $112 << $110;
 $2 = $111;
 $117 = $2;
 STACKTOP = sp;return ($117|0);
}
function _silk_DIV32_varQ_425($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)>(0);
 $16 = $4;
 $17 = (0 - ($16))|0;
 $18 = $15 ? $16 : $17;
 $19 = (_silk_CLZ32_426($18)|0);
 $20 = (($19) - 1)|0;
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = $21 << $22;
 $11 = $23;
 $24 = $5;
 $25 = ($24|0)>(0);
 $26 = $5;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $26 : $27;
 $29 = (_silk_CLZ32_426($28)|0);
 $30 = (($29) - 1)|0;
 $8 = $30;
 $31 = $5;
 $32 = $8;
 $33 = $31 << $32;
 $12 = $33;
 $34 = $12;
 $35 = $34 >> 16;
 $36 = (536870911 / ($35|0))&-1;
 $10 = $36;
 $37 = $11;
 $38 = $37 >> 16;
 $39 = $10;
 $40 = $39&65535;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($38, $41)|0;
 $43 = $11;
 $44 = $43 & 65535;
 $45 = $10;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $48 >> 16;
 $50 = (($42) + ($49))|0;
 $13 = $50;
 $51 = $11;
 $52 = $12;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = $13;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = tempRet0;
 $60 = (_bitshift64Ashr(($58|0),($59|0),32)|0);
 $61 = tempRet0;
 $62 = $60 << 3;
 $63 = (($51) - ($62))|0;
 $11 = $63;
 $64 = $13;
 $65 = $11;
 $66 = $65 >> 16;
 $67 = $10;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $11;
 $72 = $71 & 65535;
 $73 = $10;
 $74 = $73&65535;
 $75 = $74 << 16 >> 16;
 $76 = Math_imul($72, $75)|0;
 $77 = $76 >> 16;
 $78 = (($70) + ($77))|0;
 $79 = (($64) + ($78))|0;
 $13 = $79;
 $80 = $7;
 $81 = (29 + ($80))|0;
 $82 = $8;
 $83 = (($81) - ($82))|0;
 $84 = $6;
 $85 = (($83) - ($84))|0;
 $9 = $85;
 $86 = $9;
 $87 = ($86|0)<(0);
 $88 = $9;
 if (!($87)) {
  $130 = ($88|0)<(32);
  if ($130) {
   $131 = $13;
   $132 = $9;
   $133 = $131 >> $132;
   $3 = $133;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $3 = 0;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 }
 $89 = (0 - ($88))|0;
 $90 = -2147483648 >> $89;
 $91 = $9;
 $92 = (0 - ($91))|0;
 $93 = 2147483647 >> $92;
 $94 = ($90|0)>($93|0);
 $95 = $13;
 $96 = $9;
 $97 = (0 - ($96))|0;
 do {
  if ($94) {
   $98 = -2147483648 >> $97;
   $99 = ($95|0)>($98|0);
   if ($99) {
    $100 = $9;
    $101 = (0 - ($100))|0;
    $102 = -2147483648 >> $101;
    $129 = $102;
    break;
   }
   $103 = $13;
   $104 = $9;
   $105 = (0 - ($104))|0;
   $106 = 2147483647 >> $105;
   $107 = ($103|0)<($106|0);
   if ($107) {
    $108 = $9;
    $109 = (0 - ($108))|0;
    $110 = 2147483647 >> $109;
    $129 = $110;
    break;
   } else {
    $111 = $13;
    $129 = $111;
    break;
   }
  } else {
   $112 = 2147483647 >> $97;
   $113 = ($95|0)>($112|0);
   if ($113) {
    $114 = $9;
    $115 = (0 - ($114))|0;
    $116 = 2147483647 >> $115;
    $129 = $116;
    break;
   }
   $117 = $13;
   $118 = $9;
   $119 = (0 - ($118))|0;
   $120 = -2147483648 >> $119;
   $121 = ($117|0)<($120|0);
   if ($121) {
    $122 = $9;
    $123 = (0 - ($122))|0;
    $124 = -2147483648 >> $123;
    $129 = $124;
    break;
   } else {
    $125 = $13;
    $129 = $125;
    break;
   }
  }
 } while(0);
 $126 = $9;
 $127 = (0 - ($126))|0;
 $128 = $129 << $127;
 $3 = $128;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _silk_CLZ32_426($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_PLC_Reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 2328|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 7;
 $6 = $1;
 $7 = ((($6)) + 4168|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = ((($8)) + 4168|0);
 $10 = ((($9)) + 72|0);
 HEAP32[$10>>2] = 65536;
 $11 = $1;
 $12 = ((($11)) + 4168|0);
 $13 = ((($12)) + 72|0);
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = 65536;
 $15 = $1;
 $16 = ((($15)) + 4168|0);
 $17 = ((($16)) + 88|0);
 HEAP32[$17>>2] = 20;
 $18 = $1;
 $19 = ((($18)) + 4168|0);
 $20 = ((($19)) + 84|0);
 HEAP32[$20>>2] = 2;
 STACKTOP = sp;return;
}
function _silk_PLC($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = ((($10)) + 2316|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = ((($13)) + 4168|0);
 $15 = ((($14)) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($12|0)!=($16|0);
 if ($17) {
  $18 = $5;
  _silk_PLC_Reset($18);
  $19 = $5;
  $20 = ((($19)) + 2316|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $5;
  $23 = ((($22)) + 4168|0);
  $24 = ((($23)) + 80|0);
  HEAP32[$24>>2] = $21;
 }
 $25 = $8;
 $26 = ($25|0)!=(0);
 $27 = $5;
 $28 = $6;
 if ($26) {
  $29 = $7;
  $30 = $9;
  _silk_PLC_conceal($27,$28,$29,$30);
  $31 = $5;
  $32 = ((($31)) + 4160|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  STACKTOP = sp;return;
 } else {
  _silk_PLC_update($27,$28);
  STACKTOP = sp;return;
 }
}
function _silk_PLC_conceal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $$alloca_mul32 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = sp + 80|0;
 $15 = sp + 76|0;
 $20 = sp + 56|0;
 $21 = sp + 52|0;
 $29 = sp + 128|0;
 $31 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $35 = $4;
 $36 = ((($35)) + 4168|0);
 $30 = $36;
 $37 = $4;
 $38 = ((($37)) + 2336|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $4;
 $41 = ((($40)) + 2328|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($39) + ($42))|0;
 $44 = (_llvm_stacksave()|0);
 $32 = $44;
 $$alloca_mul = $43<<2;
 $45 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $46 = $4;
 $47 = ((($46)) + 2336|0);
 $48 = HEAP32[$47>>2]|0;
 $$alloca_mul32 = $48<<1;
 $49 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul32)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul32)|0)+15)&-16)|0);;
 $50 = $30;
 $51 = ((($50)) + 72|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $52 >> 6;
 HEAP32[$31>>2] = $53;
 $54 = $30;
 $55 = ((($54)) + 72|0);
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 >> 6;
 $59 = ((($31)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = $4;
 $61 = ((($60)) + 2376|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $30;
  $65 = ((($64)) + 14|0);
  dest=$65; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 }
 $66 = $4;
 $67 = ((($66)) + 4|0);
 $68 = $4;
 $69 = ((($68)) + 2332|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $4;
 $72 = ((($71)) + 2324|0);
 $73 = HEAP32[$72>>2]|0;
 _silk_PLC_energy($20,$14,$21,$15,$67,$31,$70,$73);
 $74 = HEAP32[$20>>2]|0;
 $75 = HEAP32[$15>>2]|0;
 $76 = $74 >> $75;
 $77 = HEAP32[$21>>2]|0;
 $78 = HEAP32[$14>>2]|0;
 $79 = $77 >> $78;
 $80 = ($76|0)<($79|0);
 $81 = $4;
 $82 = ((($81)) + 4|0);
 $83 = $30;
 $84 = ((($83)) + 84|0);
 $85 = HEAP32[$84>>2]|0;
 if ($80) {
  $86 = (($85) - 1)|0;
  $87 = $30;
  $88 = ((($87)) + 88|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = Math_imul($86, $89)|0;
  $91 = (($90) - 128)|0;
  $92 = (_silk_max_int_431(0,$91)|0);
  $93 = (($82) + ($92<<2)|0);
  $22 = $93;
 } else {
  $94 = $30;
  $95 = ((($94)) + 88|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = Math_imul($85, $96)|0;
  $98 = (($97) - 128)|0;
  $99 = (_silk_max_int_431(0,$98)|0);
  $100 = (($82) + ($99<<2)|0);
  $22 = $100;
 }
 $101 = $30;
 $102 = ((($101)) + 4|0);
 $27 = $102;
 $103 = $30;
 $104 = ((($103)) + 56|0);
 $105 = HEAP16[$104>>1]|0;
 $26 = $105;
 $106 = $4;
 $107 = ((($106)) + 4160|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (_silk_min_int_432(1,$108)|0);
 $110 = (25394 + ($109<<1)|0);
 $111 = HEAP16[$110>>1]|0;
 $112 = $111 << 16 >> 16;
 $17 = $112;
 $113 = $4;
 $114 = ((($113)) + 4164|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)==(2);
 $117 = $4;
 $118 = ((($117)) + 4160|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = (_silk_min_int_432(1,$119)|0);
 if ($116) {
  $121 = (25398 + ($120<<1)|0);
  $122 = HEAP16[$121>>1]|0;
  $123 = $122 << 16 >> 16;
  $18 = $123;
 } else {
  $124 = (25402 + ($120<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $18 = $126;
 }
 $127 = $30;
 $128 = ((($127)) + 14|0);
 $129 = $4;
 $130 = ((($129)) + 2340|0);
 $131 = HEAP32[$130>>2]|0;
 _silk_bwexpander($128,$131,64881);
 $132 = $30;
 $133 = ((($132)) + 14|0);
 $134 = $4;
 $135 = ((($134)) + 2340|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $136<<1;
 _memcpy(($29|0),($133|0),($137|0))|0;
 $138 = $4;
 $139 = ((($138)) + 4160|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)==(0);
 do {
  if ($141) {
   $26 = 16384;
   $142 = $4;
   $143 = ((($142)) + 4164|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = ($144|0)==(2);
   if (!($145)) {
    $170 = $30;
    $171 = ((($170)) + 14|0);
    $172 = $4;
    $173 = ((($172)) + 2340|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (_silk_LPC_inverse_pred_gain($171,$174)|0);
    $33 = $175;
    $176 = $33;
    $177 = (_silk_min_32_433(134217728,$176)|0);
    $34 = $177;
    $178 = $34;
    $179 = (_silk_max_32_434(4194304,$178)|0);
    $34 = $179;
    $180 = $34;
    $181 = $180 << 3;
    $34 = $181;
    $182 = $34;
    $183 = $182 >> 16;
    $184 = $18;
    $185 = $184&65535;
    $186 = $185 << 16 >> 16;
    $187 = Math_imul($183, $186)|0;
    $188 = $34;
    $189 = $188 & 65535;
    $190 = $18;
    $191 = $190&65535;
    $192 = $191 << 16 >> 16;
    $193 = Math_imul($189, $192)|0;
    $194 = $193 >> 16;
    $195 = (($187) + ($194))|0;
    $196 = $195 >> 14;
    $18 = $196;
    break;
   }
   $8 = 0;
   while(1) {
    $146 = $8;
    $147 = ($146|0)<(5);
    if (!($147)) {
     break;
    }
    $148 = $27;
    $149 = $8;
    $150 = (($148) + ($149<<1)|0);
    $151 = HEAP16[$150>>1]|0;
    $152 = $151 << 16 >> 16;
    $153 = $26;
    $154 = $153 << 16 >> 16;
    $155 = (($154) - ($152))|0;
    $156 = $155&65535;
    $26 = $156;
    $157 = $8;
    $158 = (($157) + 1)|0;
    $8 = $158;
   }
   $159 = $26;
   $160 = (_silk_max_16(3277,$159)|0);
   $26 = $160;
   $161 = $26;
   $162 = $161 << 16 >> 16;
   $163 = $30;
   $164 = ((($163)) + 68|0);
   $165 = HEAP16[$164>>1]|0;
   $166 = $165 << 16 >> 16;
   $167 = Math_imul($162, $166)|0;
   $168 = $167 >> 14;
   $169 = $168&65535;
   $26 = $169;
  }
 } while(0);
 $197 = $30;
 $198 = ((($197)) + 52|0);
 $199 = HEAP32[$198>>2]|0;
 $16 = $199;
 $200 = $30;
 $201 = HEAP32[$200>>2]|0;
 $202 = $201 >> 7;
 $203 = (($202) + 1)|0;
 $204 = $203 >> 1;
 $11 = $204;
 $205 = $4;
 $206 = ((($205)) + 2336|0);
 $207 = HEAP32[$206>>2]|0;
 $13 = $207;
 $208 = $4;
 $209 = ((($208)) + 2336|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $11;
 $212 = (($210) - ($211))|0;
 $213 = $4;
 $214 = ((($213)) + 2340|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = (($212) - ($215))|0;
 $217 = (($216) - 2)|0;
 $12 = $217;
 $218 = $12;
 $219 = (($49) + ($218<<1)|0);
 $220 = $4;
 $221 = ((($220)) + 1348|0);
 $222 = $12;
 $223 = (($221) + ($222<<1)|0);
 $224 = $4;
 $225 = ((($224)) + 2336|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = $12;
 $228 = (($226) - ($227))|0;
 $229 = $4;
 $230 = ((($229)) + 2340|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = $7;
 _silk_LPC_analysis_filter($219,$223,$29,$228,$231,$232);
 $233 = $30;
 $234 = ((($233)) + 72|0);
 $235 = ((($234)) + 4|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = (_silk_INVERSE32_varQ_435($236,46)|0);
 $19 = $237;
 $238 = $19;
 $239 = ($238|0)<(1073741823);
 $240 = $19;
 $241 = $239 ? $240 : 1073741823;
 $19 = $241;
 $242 = $12;
 $243 = $4;
 $244 = ((($243)) + 2340|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = (($242) + ($245))|0;
 $8 = $246;
 while(1) {
  $247 = $8;
  $248 = $4;
  $249 = ((($248)) + 2336|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = ($247|0)<($250|0);
  if (!($251)) {
   break;
  }
  $252 = $19;
  $253 = $252 >> 16;
  $254 = $8;
  $255 = (($49) + ($254<<1)|0);
  $256 = HEAP16[$255>>1]|0;
  $257 = $256 << 16 >> 16;
  $258 = Math_imul($253, $257)|0;
  $259 = $19;
  $260 = $259 & 65535;
  $261 = $8;
  $262 = (($49) + ($261<<1)|0);
  $263 = HEAP16[$262>>1]|0;
  $264 = $263 << 16 >> 16;
  $265 = Math_imul($260, $264)|0;
  $266 = $265 >> 16;
  $267 = (($258) + ($266))|0;
  $268 = $8;
  $269 = (($45) + ($268<<2)|0);
  HEAP32[$269>>2] = $267;
  $270 = $8;
  $271 = (($270) + 1)|0;
  $8 = $271;
 }
 $10 = 0;
 while(1) {
  $272 = $10;
  $273 = $4;
  $274 = ((($273)) + 2324|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = ($272|0)<($275|0);
  if (!($276)) {
   break;
  }
  $277 = $13;
  $278 = $11;
  $279 = (($277) - ($278))|0;
  $280 = (($279) + 2)|0;
  $281 = (($45) + ($280<<2)|0);
  $23 = $281;
  $8 = 0;
  while(1) {
   $282 = $8;
   $283 = $4;
   $284 = ((($283)) + 2332|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ($282|0)<($285|0);
   if (!($286)) {
    break;
   }
   $25 = 2;
   $287 = $25;
   $288 = $23;
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 >> 16;
   $291 = $27;
   $292 = HEAP16[$291>>1]|0;
   $293 = $292 << 16 >> 16;
   $294 = Math_imul($290, $293)|0;
   $295 = $23;
   $296 = HEAP32[$295>>2]|0;
   $297 = $296 & 65535;
   $298 = $27;
   $299 = HEAP16[$298>>1]|0;
   $300 = $299 << 16 >> 16;
   $301 = Math_imul($297, $300)|0;
   $302 = $301 >> 16;
   $303 = (($294) + ($302))|0;
   $304 = (($287) + ($303))|0;
   $25 = $304;
   $305 = $25;
   $306 = $23;
   $307 = ((($306)) + -4|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $308 >> 16;
   $310 = $27;
   $311 = ((($310)) + 2|0);
   $312 = HEAP16[$311>>1]|0;
   $313 = $312 << 16 >> 16;
   $314 = Math_imul($309, $313)|0;
   $315 = $23;
   $316 = ((($315)) + -4|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = $317 & 65535;
   $319 = $27;
   $320 = ((($319)) + 2|0);
   $321 = HEAP16[$320>>1]|0;
   $322 = $321 << 16 >> 16;
   $323 = Math_imul($318, $322)|0;
   $324 = $323 >> 16;
   $325 = (($314) + ($324))|0;
   $326 = (($305) + ($325))|0;
   $25 = $326;
   $327 = $25;
   $328 = $23;
   $329 = ((($328)) + -8|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $330 >> 16;
   $332 = $27;
   $333 = ((($332)) + 4|0);
   $334 = HEAP16[$333>>1]|0;
   $335 = $334 << 16 >> 16;
   $336 = Math_imul($331, $335)|0;
   $337 = $23;
   $338 = ((($337)) + -8|0);
   $339 = HEAP32[$338>>2]|0;
   $340 = $339 & 65535;
   $341 = $27;
   $342 = ((($341)) + 4|0);
   $343 = HEAP16[$342>>1]|0;
   $344 = $343 << 16 >> 16;
   $345 = Math_imul($340, $344)|0;
   $346 = $345 >> 16;
   $347 = (($336) + ($346))|0;
   $348 = (($327) + ($347))|0;
   $25 = $348;
   $349 = $25;
   $350 = $23;
   $351 = ((($350)) + -12|0);
   $352 = HEAP32[$351>>2]|0;
   $353 = $352 >> 16;
   $354 = $27;
   $355 = ((($354)) + 6|0);
   $356 = HEAP16[$355>>1]|0;
   $357 = $356 << 16 >> 16;
   $358 = Math_imul($353, $357)|0;
   $359 = $23;
   $360 = ((($359)) + -12|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $361 & 65535;
   $363 = $27;
   $364 = ((($363)) + 6|0);
   $365 = HEAP16[$364>>1]|0;
   $366 = $365 << 16 >> 16;
   $367 = Math_imul($362, $366)|0;
   $368 = $367 >> 16;
   $369 = (($358) + ($368))|0;
   $370 = (($349) + ($369))|0;
   $25 = $370;
   $371 = $25;
   $372 = $23;
   $373 = ((($372)) + -16|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = $374 >> 16;
   $376 = $27;
   $377 = ((($376)) + 8|0);
   $378 = HEAP16[$377>>1]|0;
   $379 = $378 << 16 >> 16;
   $380 = Math_imul($375, $379)|0;
   $381 = $23;
   $382 = ((($381)) + -16|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $383 & 65535;
   $385 = $27;
   $386 = ((($385)) + 8|0);
   $387 = HEAP16[$386>>1]|0;
   $388 = $387 << 16 >> 16;
   $389 = Math_imul($384, $388)|0;
   $390 = $389 >> 16;
   $391 = (($380) + ($390))|0;
   $392 = (($371) + ($391))|0;
   $25 = $392;
   $393 = $23;
   $394 = ((($393)) + 4|0);
   $23 = $394;
   $395 = $16;
   $396 = Math_imul($395, 196314165)|0;
   $397 = (907633515 + ($396))|0;
   $16 = $397;
   $398 = $16;
   $399 = $398 >> 25;
   $400 = $399 & 127;
   $12 = $400;
   $401 = $25;
   $402 = $22;
   $403 = $12;
   $404 = (($402) + ($403<<2)|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = $405 >> 16;
   $407 = $26;
   $408 = $407 << 16 >> 16;
   $409 = Math_imul($406, $408)|0;
   $410 = $22;
   $411 = $12;
   $412 = (($410) + ($411<<2)|0);
   $413 = HEAP32[$412>>2]|0;
   $414 = $413 & 65535;
   $415 = $26;
   $416 = $415 << 16 >> 16;
   $417 = Math_imul($414, $416)|0;
   $418 = $417 >> 16;
   $419 = (($409) + ($418))|0;
   $420 = (($401) + ($419))|0;
   $421 = $420 << 2;
   $422 = $13;
   $423 = (($45) + ($422<<2)|0);
   HEAP32[$423>>2] = $421;
   $424 = $13;
   $425 = (($424) + 1)|0;
   $13 = $425;
   $426 = $8;
   $427 = (($426) + 1)|0;
   $8 = $427;
  }
  $9 = 0;
  while(1) {
   $428 = $9;
   $429 = ($428|0)<(5);
   if (!($429)) {
    break;
   }
   $430 = $17;
   $431 = $430&65535;
   $432 = $431 << 16 >> 16;
   $433 = $27;
   $434 = $9;
   $435 = (($433) + ($434<<1)|0);
   $436 = HEAP16[$435>>1]|0;
   $437 = $436 << 16 >> 16;
   $438 = Math_imul($432, $437)|0;
   $439 = $438 >> 15;
   $440 = $439&65535;
   $441 = $27;
   $442 = $9;
   $443 = (($441) + ($442<<1)|0);
   HEAP16[$443>>1] = $440;
   $444 = $9;
   $445 = (($444) + 1)|0;
   $9 = $445;
  }
  $446 = $26;
  $447 = $446 << 16 >> 16;
  $448 = $18;
  $449 = $448&65535;
  $450 = $449 << 16 >> 16;
  $451 = Math_imul($447, $450)|0;
  $452 = $451 >> 15;
  $453 = $452&65535;
  $26 = $453;
  $454 = $30;
  $455 = HEAP32[$454>>2]|0;
  $456 = $30;
  $457 = HEAP32[$456>>2]|0;
  $458 = $457 >> 16;
  $459 = ($458*655)|0;
  $460 = $30;
  $461 = HEAP32[$460>>2]|0;
  $462 = $461 & 65535;
  $463 = ($462*655)|0;
  $464 = $463 >> 16;
  $465 = (($459) + ($464))|0;
  $466 = (($455) + ($465))|0;
  $467 = $30;
  HEAP32[$467>>2] = $466;
  $468 = $30;
  $469 = HEAP32[$468>>2]|0;
  $470 = $4;
  $471 = ((($470)) + 2316|0);
  $472 = HEAP32[$471>>2]|0;
  $473 = $472&65535;
  $474 = $473 << 16 >> 16;
  $475 = ($474*18)|0;
  $476 = $475 << 8;
  $477 = (_silk_min_32_433($469,$476)|0);
  $478 = $30;
  HEAP32[$478>>2] = $477;
  $479 = $30;
  $480 = HEAP32[$479>>2]|0;
  $481 = $480 >> 7;
  $482 = (($481) + 1)|0;
  $483 = $482 >> 1;
  $11 = $483;
  $484 = $10;
  $485 = (($484) + 1)|0;
  $10 = $485;
 }
 $486 = $4;
 $487 = ((($486)) + 2336|0);
 $488 = HEAP32[$487>>2]|0;
 $489 = (($488) - 16)|0;
 $490 = (($45) + ($489<<2)|0);
 $28 = $490;
 $491 = $28;
 $492 = $4;
 $493 = ((($492)) + 1284|0);
 dest=$491; src=$493; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = 0;
 while(1) {
  $494 = $8;
  $495 = $4;
  $496 = ((($495)) + 2328|0);
  $497 = HEAP32[$496>>2]|0;
  $498 = ($494|0)<($497|0);
  $499 = $4;
  if (!($498)) {
   break;
  }
  $500 = ((($499)) + 2340|0);
  $501 = HEAP32[$500>>2]|0;
  $502 = $501 >> 1;
  $24 = $502;
  $503 = $24;
  $504 = $28;
  $505 = $8;
  $506 = (16 + ($505))|0;
  $507 = (($506) - 1)|0;
  $508 = (($504) + ($507<<2)|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $509 >> 16;
  $511 = HEAP16[$29>>1]|0;
  $512 = $511 << 16 >> 16;
  $513 = Math_imul($510, $512)|0;
  $514 = $28;
  $515 = $8;
  $516 = (16 + ($515))|0;
  $517 = (($516) - 1)|0;
  $518 = (($514) + ($517<<2)|0);
  $519 = HEAP32[$518>>2]|0;
  $520 = $519 & 65535;
  $521 = HEAP16[$29>>1]|0;
  $522 = $521 << 16 >> 16;
  $523 = Math_imul($520, $522)|0;
  $524 = $523 >> 16;
  $525 = (($513) + ($524))|0;
  $526 = (($503) + ($525))|0;
  $24 = $526;
  $527 = $24;
  $528 = $28;
  $529 = $8;
  $530 = (16 + ($529))|0;
  $531 = (($530) - 2)|0;
  $532 = (($528) + ($531<<2)|0);
  $533 = HEAP32[$532>>2]|0;
  $534 = $533 >> 16;
  $535 = ((($29)) + 2|0);
  $536 = HEAP16[$535>>1]|0;
  $537 = $536 << 16 >> 16;
  $538 = Math_imul($534, $537)|0;
  $539 = $28;
  $540 = $8;
  $541 = (16 + ($540))|0;
  $542 = (($541) - 2)|0;
  $543 = (($539) + ($542<<2)|0);
  $544 = HEAP32[$543>>2]|0;
  $545 = $544 & 65535;
  $546 = ((($29)) + 2|0);
  $547 = HEAP16[$546>>1]|0;
  $548 = $547 << 16 >> 16;
  $549 = Math_imul($545, $548)|0;
  $550 = $549 >> 16;
  $551 = (($538) + ($550))|0;
  $552 = (($527) + ($551))|0;
  $24 = $552;
  $553 = $24;
  $554 = $28;
  $555 = $8;
  $556 = (16 + ($555))|0;
  $557 = (($556) - 3)|0;
  $558 = (($554) + ($557<<2)|0);
  $559 = HEAP32[$558>>2]|0;
  $560 = $559 >> 16;
  $561 = ((($29)) + 4|0);
  $562 = HEAP16[$561>>1]|0;
  $563 = $562 << 16 >> 16;
  $564 = Math_imul($560, $563)|0;
  $565 = $28;
  $566 = $8;
  $567 = (16 + ($566))|0;
  $568 = (($567) - 3)|0;
  $569 = (($565) + ($568<<2)|0);
  $570 = HEAP32[$569>>2]|0;
  $571 = $570 & 65535;
  $572 = ((($29)) + 4|0);
  $573 = HEAP16[$572>>1]|0;
  $574 = $573 << 16 >> 16;
  $575 = Math_imul($571, $574)|0;
  $576 = $575 >> 16;
  $577 = (($564) + ($576))|0;
  $578 = (($553) + ($577))|0;
  $24 = $578;
  $579 = $24;
  $580 = $28;
  $581 = $8;
  $582 = (16 + ($581))|0;
  $583 = (($582) - 4)|0;
  $584 = (($580) + ($583<<2)|0);
  $585 = HEAP32[$584>>2]|0;
  $586 = $585 >> 16;
  $587 = ((($29)) + 6|0);
  $588 = HEAP16[$587>>1]|0;
  $589 = $588 << 16 >> 16;
  $590 = Math_imul($586, $589)|0;
  $591 = $28;
  $592 = $8;
  $593 = (16 + ($592))|0;
  $594 = (($593) - 4)|0;
  $595 = (($591) + ($594<<2)|0);
  $596 = HEAP32[$595>>2]|0;
  $597 = $596 & 65535;
  $598 = ((($29)) + 6|0);
  $599 = HEAP16[$598>>1]|0;
  $600 = $599 << 16 >> 16;
  $601 = Math_imul($597, $600)|0;
  $602 = $601 >> 16;
  $603 = (($590) + ($602))|0;
  $604 = (($579) + ($603))|0;
  $24 = $604;
  $605 = $24;
  $606 = $28;
  $607 = $8;
  $608 = (16 + ($607))|0;
  $609 = (($608) - 5)|0;
  $610 = (($606) + ($609<<2)|0);
  $611 = HEAP32[$610>>2]|0;
  $612 = $611 >> 16;
  $613 = ((($29)) + 8|0);
  $614 = HEAP16[$613>>1]|0;
  $615 = $614 << 16 >> 16;
  $616 = Math_imul($612, $615)|0;
  $617 = $28;
  $618 = $8;
  $619 = (16 + ($618))|0;
  $620 = (($619) - 5)|0;
  $621 = (($617) + ($620<<2)|0);
  $622 = HEAP32[$621>>2]|0;
  $623 = $622 & 65535;
  $624 = ((($29)) + 8|0);
  $625 = HEAP16[$624>>1]|0;
  $626 = $625 << 16 >> 16;
  $627 = Math_imul($623, $626)|0;
  $628 = $627 >> 16;
  $629 = (($616) + ($628))|0;
  $630 = (($605) + ($629))|0;
  $24 = $630;
  $631 = $24;
  $632 = $28;
  $633 = $8;
  $634 = (16 + ($633))|0;
  $635 = (($634) - 6)|0;
  $636 = (($632) + ($635<<2)|0);
  $637 = HEAP32[$636>>2]|0;
  $638 = $637 >> 16;
  $639 = ((($29)) + 10|0);
  $640 = HEAP16[$639>>1]|0;
  $641 = $640 << 16 >> 16;
  $642 = Math_imul($638, $641)|0;
  $643 = $28;
  $644 = $8;
  $645 = (16 + ($644))|0;
  $646 = (($645) - 6)|0;
  $647 = (($643) + ($646<<2)|0);
  $648 = HEAP32[$647>>2]|0;
  $649 = $648 & 65535;
  $650 = ((($29)) + 10|0);
  $651 = HEAP16[$650>>1]|0;
  $652 = $651 << 16 >> 16;
  $653 = Math_imul($649, $652)|0;
  $654 = $653 >> 16;
  $655 = (($642) + ($654))|0;
  $656 = (($631) + ($655))|0;
  $24 = $656;
  $657 = $24;
  $658 = $28;
  $659 = $8;
  $660 = (16 + ($659))|0;
  $661 = (($660) - 7)|0;
  $662 = (($658) + ($661<<2)|0);
  $663 = HEAP32[$662>>2]|0;
  $664 = $663 >> 16;
  $665 = ((($29)) + 12|0);
  $666 = HEAP16[$665>>1]|0;
  $667 = $666 << 16 >> 16;
  $668 = Math_imul($664, $667)|0;
  $669 = $28;
  $670 = $8;
  $671 = (16 + ($670))|0;
  $672 = (($671) - 7)|0;
  $673 = (($669) + ($672<<2)|0);
  $674 = HEAP32[$673>>2]|0;
  $675 = $674 & 65535;
  $676 = ((($29)) + 12|0);
  $677 = HEAP16[$676>>1]|0;
  $678 = $677 << 16 >> 16;
  $679 = Math_imul($675, $678)|0;
  $680 = $679 >> 16;
  $681 = (($668) + ($680))|0;
  $682 = (($657) + ($681))|0;
  $24 = $682;
  $683 = $24;
  $684 = $28;
  $685 = $8;
  $686 = (16 + ($685))|0;
  $687 = (($686) - 8)|0;
  $688 = (($684) + ($687<<2)|0);
  $689 = HEAP32[$688>>2]|0;
  $690 = $689 >> 16;
  $691 = ((($29)) + 14|0);
  $692 = HEAP16[$691>>1]|0;
  $693 = $692 << 16 >> 16;
  $694 = Math_imul($690, $693)|0;
  $695 = $28;
  $696 = $8;
  $697 = (16 + ($696))|0;
  $698 = (($697) - 8)|0;
  $699 = (($695) + ($698<<2)|0);
  $700 = HEAP32[$699>>2]|0;
  $701 = $700 & 65535;
  $702 = ((($29)) + 14|0);
  $703 = HEAP16[$702>>1]|0;
  $704 = $703 << 16 >> 16;
  $705 = Math_imul($701, $704)|0;
  $706 = $705 >> 16;
  $707 = (($694) + ($706))|0;
  $708 = (($683) + ($707))|0;
  $24 = $708;
  $709 = $24;
  $710 = $28;
  $711 = $8;
  $712 = (16 + ($711))|0;
  $713 = (($712) - 9)|0;
  $714 = (($710) + ($713<<2)|0);
  $715 = HEAP32[$714>>2]|0;
  $716 = $715 >> 16;
  $717 = ((($29)) + 16|0);
  $718 = HEAP16[$717>>1]|0;
  $719 = $718 << 16 >> 16;
  $720 = Math_imul($716, $719)|0;
  $721 = $28;
  $722 = $8;
  $723 = (16 + ($722))|0;
  $724 = (($723) - 9)|0;
  $725 = (($721) + ($724<<2)|0);
  $726 = HEAP32[$725>>2]|0;
  $727 = $726 & 65535;
  $728 = ((($29)) + 16|0);
  $729 = HEAP16[$728>>1]|0;
  $730 = $729 << 16 >> 16;
  $731 = Math_imul($727, $730)|0;
  $732 = $731 >> 16;
  $733 = (($720) + ($732))|0;
  $734 = (($709) + ($733))|0;
  $24 = $734;
  $735 = $24;
  $736 = $28;
  $737 = $8;
  $738 = (16 + ($737))|0;
  $739 = (($738) - 10)|0;
  $740 = (($736) + ($739<<2)|0);
  $741 = HEAP32[$740>>2]|0;
  $742 = $741 >> 16;
  $743 = ((($29)) + 18|0);
  $744 = HEAP16[$743>>1]|0;
  $745 = $744 << 16 >> 16;
  $746 = Math_imul($742, $745)|0;
  $747 = $28;
  $748 = $8;
  $749 = (16 + ($748))|0;
  $750 = (($749) - 10)|0;
  $751 = (($747) + ($750<<2)|0);
  $752 = HEAP32[$751>>2]|0;
  $753 = $752 & 65535;
  $754 = ((($29)) + 18|0);
  $755 = HEAP16[$754>>1]|0;
  $756 = $755 << 16 >> 16;
  $757 = Math_imul($753, $756)|0;
  $758 = $757 >> 16;
  $759 = (($746) + ($758))|0;
  $760 = (($735) + ($759))|0;
  $24 = $760;
  $9 = 10;
  while(1) {
   $761 = $9;
   $762 = $4;
   $763 = ((($762)) + 2340|0);
   $764 = HEAP32[$763>>2]|0;
   $765 = ($761|0)<($764|0);
   if (!($765)) {
    break;
   }
   $766 = $24;
   $767 = $28;
   $768 = $8;
   $769 = (16 + ($768))|0;
   $770 = $9;
   $771 = (($769) - ($770))|0;
   $772 = (($771) - 1)|0;
   $773 = (($767) + ($772<<2)|0);
   $774 = HEAP32[$773>>2]|0;
   $775 = $774 >> 16;
   $776 = $9;
   $777 = (($29) + ($776<<1)|0);
   $778 = HEAP16[$777>>1]|0;
   $779 = $778 << 16 >> 16;
   $780 = Math_imul($775, $779)|0;
   $781 = $28;
   $782 = $8;
   $783 = (16 + ($782))|0;
   $784 = $9;
   $785 = (($783) - ($784))|0;
   $786 = (($785) - 1)|0;
   $787 = (($781) + ($786<<2)|0);
   $788 = HEAP32[$787>>2]|0;
   $789 = $788 & 65535;
   $790 = $9;
   $791 = (($29) + ($790<<1)|0);
   $792 = HEAP16[$791>>1]|0;
   $793 = $792 << 16 >> 16;
   $794 = Math_imul($789, $793)|0;
   $795 = $794 >> 16;
   $796 = (($780) + ($795))|0;
   $797 = (($766) + ($796))|0;
   $24 = $797;
   $798 = $9;
   $799 = (($798) + 1)|0;
   $9 = $799;
  }
  $800 = $28;
  $801 = $8;
  $802 = (16 + ($801))|0;
  $803 = (($800) + ($802<<2)|0);
  $804 = HEAP32[$803>>2]|0;
  $805 = $24;
  $806 = $805 << 4;
  $807 = (($804) + ($806))|0;
  $808 = $28;
  $809 = $8;
  $810 = (16 + ($809))|0;
  $811 = (($808) + ($810<<2)|0);
  HEAP32[$811>>2] = $807;
  $812 = $28;
  $813 = $8;
  $814 = (16 + ($813))|0;
  $815 = (($812) + ($814<<2)|0);
  $816 = HEAP32[$815>>2]|0;
  $817 = $816 >> 16;
  $818 = ((($31)) + 4|0);
  $819 = HEAP32[$818>>2]|0;
  $820 = $819&65535;
  $821 = $820 << 16 >> 16;
  $822 = Math_imul($817, $821)|0;
  $823 = $28;
  $824 = $8;
  $825 = (16 + ($824))|0;
  $826 = (($823) + ($825<<2)|0);
  $827 = HEAP32[$826>>2]|0;
  $828 = $827 & 65535;
  $829 = ((($31)) + 4|0);
  $830 = HEAP32[$829>>2]|0;
  $831 = $830&65535;
  $832 = $831 << 16 >> 16;
  $833 = Math_imul($828, $832)|0;
  $834 = $833 >> 16;
  $835 = (($822) + ($834))|0;
  $836 = $28;
  $837 = $8;
  $838 = (16 + ($837))|0;
  $839 = (($836) + ($838<<2)|0);
  $840 = HEAP32[$839>>2]|0;
  $841 = ((($31)) + 4|0);
  $842 = HEAP32[$841>>2]|0;
  $843 = $842 >> 15;
  $844 = (($843) + 1)|0;
  $845 = $844 >> 1;
  $846 = Math_imul($840, $845)|0;
  $847 = (($835) + ($846))|0;
  $848 = $847 >> 7;
  $849 = (($848) + 1)|0;
  $850 = $849 >> 1;
  $851 = ($850|0)>(32767);
  if ($851) {
   $931 = 32767;
  } else {
   $852 = $28;
   $853 = $8;
   $854 = (16 + ($853))|0;
   $855 = (($852) + ($854<<2)|0);
   $856 = HEAP32[$855>>2]|0;
   $857 = $856 >> 16;
   $858 = ((($31)) + 4|0);
   $859 = HEAP32[$858>>2]|0;
   $860 = $859&65535;
   $861 = $860 << 16 >> 16;
   $862 = Math_imul($857, $861)|0;
   $863 = $28;
   $864 = $8;
   $865 = (16 + ($864))|0;
   $866 = (($863) + ($865<<2)|0);
   $867 = HEAP32[$866>>2]|0;
   $868 = $867 & 65535;
   $869 = ((($31)) + 4|0);
   $870 = HEAP32[$869>>2]|0;
   $871 = $870&65535;
   $872 = $871 << 16 >> 16;
   $873 = Math_imul($868, $872)|0;
   $874 = $873 >> 16;
   $875 = (($862) + ($874))|0;
   $876 = $28;
   $877 = $8;
   $878 = (16 + ($877))|0;
   $879 = (($876) + ($878<<2)|0);
   $880 = HEAP32[$879>>2]|0;
   $881 = ((($31)) + 4|0);
   $882 = HEAP32[$881>>2]|0;
   $883 = $882 >> 15;
   $884 = (($883) + 1)|0;
   $885 = $884 >> 1;
   $886 = Math_imul($880, $885)|0;
   $887 = (($875) + ($886))|0;
   $888 = $887 >> 7;
   $889 = (($888) + 1)|0;
   $890 = $889 >> 1;
   $891 = ($890|0)<(-32768);
   if ($891) {
    $931 = -32768;
   } else {
    $892 = $28;
    $893 = $8;
    $894 = (16 + ($893))|0;
    $895 = (($892) + ($894<<2)|0);
    $896 = HEAP32[$895>>2]|0;
    $897 = $896 >> 16;
    $898 = ((($31)) + 4|0);
    $899 = HEAP32[$898>>2]|0;
    $900 = $899&65535;
    $901 = $900 << 16 >> 16;
    $902 = Math_imul($897, $901)|0;
    $903 = $28;
    $904 = $8;
    $905 = (16 + ($904))|0;
    $906 = (($903) + ($905<<2)|0);
    $907 = HEAP32[$906>>2]|0;
    $908 = $907 & 65535;
    $909 = ((($31)) + 4|0);
    $910 = HEAP32[$909>>2]|0;
    $911 = $910&65535;
    $912 = $911 << 16 >> 16;
    $913 = Math_imul($908, $912)|0;
    $914 = $913 >> 16;
    $915 = (($902) + ($914))|0;
    $916 = $28;
    $917 = $8;
    $918 = (16 + ($917))|0;
    $919 = (($916) + ($918<<2)|0);
    $920 = HEAP32[$919>>2]|0;
    $921 = ((($31)) + 4|0);
    $922 = HEAP32[$921>>2]|0;
    $923 = $922 >> 15;
    $924 = (($923) + 1)|0;
    $925 = $924 >> 1;
    $926 = Math_imul($920, $925)|0;
    $927 = (($915) + ($926))|0;
    $928 = $927 >> 7;
    $929 = (($928) + 1)|0;
    $930 = $929 >> 1;
    $931 = $930;
   }
  }
  $932 = ($931|0)>(32767);
  if ($932) {
   $1174 = 32767;
  } else {
   $933 = $28;
   $934 = $8;
   $935 = (16 + ($934))|0;
   $936 = (($933) + ($935<<2)|0);
   $937 = HEAP32[$936>>2]|0;
   $938 = $937 >> 16;
   $939 = ((($31)) + 4|0);
   $940 = HEAP32[$939>>2]|0;
   $941 = $940&65535;
   $942 = $941 << 16 >> 16;
   $943 = Math_imul($938, $942)|0;
   $944 = $28;
   $945 = $8;
   $946 = (16 + ($945))|0;
   $947 = (($944) + ($946<<2)|0);
   $948 = HEAP32[$947>>2]|0;
   $949 = $948 & 65535;
   $950 = ((($31)) + 4|0);
   $951 = HEAP32[$950>>2]|0;
   $952 = $951&65535;
   $953 = $952 << 16 >> 16;
   $954 = Math_imul($949, $953)|0;
   $955 = $954 >> 16;
   $956 = (($943) + ($955))|0;
   $957 = $28;
   $958 = $8;
   $959 = (16 + ($958))|0;
   $960 = (($957) + ($959<<2)|0);
   $961 = HEAP32[$960>>2]|0;
   $962 = ((($31)) + 4|0);
   $963 = HEAP32[$962>>2]|0;
   $964 = $963 >> 15;
   $965 = (($964) + 1)|0;
   $966 = $965 >> 1;
   $967 = Math_imul($961, $966)|0;
   $968 = (($956) + ($967))|0;
   $969 = $968 >> 7;
   $970 = (($969) + 1)|0;
   $971 = $970 >> 1;
   $972 = ($971|0)>(32767);
   if ($972) {
    $1052 = 32767;
   } else {
    $973 = $28;
    $974 = $8;
    $975 = (16 + ($974))|0;
    $976 = (($973) + ($975<<2)|0);
    $977 = HEAP32[$976>>2]|0;
    $978 = $977 >> 16;
    $979 = ((($31)) + 4|0);
    $980 = HEAP32[$979>>2]|0;
    $981 = $980&65535;
    $982 = $981 << 16 >> 16;
    $983 = Math_imul($978, $982)|0;
    $984 = $28;
    $985 = $8;
    $986 = (16 + ($985))|0;
    $987 = (($984) + ($986<<2)|0);
    $988 = HEAP32[$987>>2]|0;
    $989 = $988 & 65535;
    $990 = ((($31)) + 4|0);
    $991 = HEAP32[$990>>2]|0;
    $992 = $991&65535;
    $993 = $992 << 16 >> 16;
    $994 = Math_imul($989, $993)|0;
    $995 = $994 >> 16;
    $996 = (($983) + ($995))|0;
    $997 = $28;
    $998 = $8;
    $999 = (16 + ($998))|0;
    $1000 = (($997) + ($999<<2)|0);
    $1001 = HEAP32[$1000>>2]|0;
    $1002 = ((($31)) + 4|0);
    $1003 = HEAP32[$1002>>2]|0;
    $1004 = $1003 >> 15;
    $1005 = (($1004) + 1)|0;
    $1006 = $1005 >> 1;
    $1007 = Math_imul($1001, $1006)|0;
    $1008 = (($996) + ($1007))|0;
    $1009 = $1008 >> 7;
    $1010 = (($1009) + 1)|0;
    $1011 = $1010 >> 1;
    $1012 = ($1011|0)<(-32768);
    if ($1012) {
     $1052 = -32768;
    } else {
     $1013 = $28;
     $1014 = $8;
     $1015 = (16 + ($1014))|0;
     $1016 = (($1013) + ($1015<<2)|0);
     $1017 = HEAP32[$1016>>2]|0;
     $1018 = $1017 >> 16;
     $1019 = ((($31)) + 4|0);
     $1020 = HEAP32[$1019>>2]|0;
     $1021 = $1020&65535;
     $1022 = $1021 << 16 >> 16;
     $1023 = Math_imul($1018, $1022)|0;
     $1024 = $28;
     $1025 = $8;
     $1026 = (16 + ($1025))|0;
     $1027 = (($1024) + ($1026<<2)|0);
     $1028 = HEAP32[$1027>>2]|0;
     $1029 = $1028 & 65535;
     $1030 = ((($31)) + 4|0);
     $1031 = HEAP32[$1030>>2]|0;
     $1032 = $1031&65535;
     $1033 = $1032 << 16 >> 16;
     $1034 = Math_imul($1029, $1033)|0;
     $1035 = $1034 >> 16;
     $1036 = (($1023) + ($1035))|0;
     $1037 = $28;
     $1038 = $8;
     $1039 = (16 + ($1038))|0;
     $1040 = (($1037) + ($1039<<2)|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = ((($31)) + 4|0);
     $1043 = HEAP32[$1042>>2]|0;
     $1044 = $1043 >> 15;
     $1045 = (($1044) + 1)|0;
     $1046 = $1045 >> 1;
     $1047 = Math_imul($1041, $1046)|0;
     $1048 = (($1036) + ($1047))|0;
     $1049 = $1048 >> 7;
     $1050 = (($1049) + 1)|0;
     $1051 = $1050 >> 1;
     $1052 = $1051;
    }
   }
   $1053 = ($1052|0)<(-32768);
   if ($1053) {
    $1174 = -32768;
   } else {
    $1054 = $28;
    $1055 = $8;
    $1056 = (16 + ($1055))|0;
    $1057 = (($1054) + ($1056<<2)|0);
    $1058 = HEAP32[$1057>>2]|0;
    $1059 = $1058 >> 16;
    $1060 = ((($31)) + 4|0);
    $1061 = HEAP32[$1060>>2]|0;
    $1062 = $1061&65535;
    $1063 = $1062 << 16 >> 16;
    $1064 = Math_imul($1059, $1063)|0;
    $1065 = $28;
    $1066 = $8;
    $1067 = (16 + ($1066))|0;
    $1068 = (($1065) + ($1067<<2)|0);
    $1069 = HEAP32[$1068>>2]|0;
    $1070 = $1069 & 65535;
    $1071 = ((($31)) + 4|0);
    $1072 = HEAP32[$1071>>2]|0;
    $1073 = $1072&65535;
    $1074 = $1073 << 16 >> 16;
    $1075 = Math_imul($1070, $1074)|0;
    $1076 = $1075 >> 16;
    $1077 = (($1064) + ($1076))|0;
    $1078 = $28;
    $1079 = $8;
    $1080 = (16 + ($1079))|0;
    $1081 = (($1078) + ($1080<<2)|0);
    $1082 = HEAP32[$1081>>2]|0;
    $1083 = ((($31)) + 4|0);
    $1084 = HEAP32[$1083>>2]|0;
    $1085 = $1084 >> 15;
    $1086 = (($1085) + 1)|0;
    $1087 = $1086 >> 1;
    $1088 = Math_imul($1082, $1087)|0;
    $1089 = (($1077) + ($1088))|0;
    $1090 = $1089 >> 7;
    $1091 = (($1090) + 1)|0;
    $1092 = $1091 >> 1;
    $1093 = ($1092|0)>(32767);
    if ($1093) {
     $1174 = 32767;
    } else {
     $1094 = $28;
     $1095 = $8;
     $1096 = (16 + ($1095))|0;
     $1097 = (($1094) + ($1096<<2)|0);
     $1098 = HEAP32[$1097>>2]|0;
     $1099 = $1098 >> 16;
     $1100 = ((($31)) + 4|0);
     $1101 = HEAP32[$1100>>2]|0;
     $1102 = $1101&65535;
     $1103 = $1102 << 16 >> 16;
     $1104 = Math_imul($1099, $1103)|0;
     $1105 = $28;
     $1106 = $8;
     $1107 = (16 + ($1106))|0;
     $1108 = (($1105) + ($1107<<2)|0);
     $1109 = HEAP32[$1108>>2]|0;
     $1110 = $1109 & 65535;
     $1111 = ((($31)) + 4|0);
     $1112 = HEAP32[$1111>>2]|0;
     $1113 = $1112&65535;
     $1114 = $1113 << 16 >> 16;
     $1115 = Math_imul($1110, $1114)|0;
     $1116 = $1115 >> 16;
     $1117 = (($1104) + ($1116))|0;
     $1118 = $28;
     $1119 = $8;
     $1120 = (16 + ($1119))|0;
     $1121 = (($1118) + ($1120<<2)|0);
     $1122 = HEAP32[$1121>>2]|0;
     $1123 = ((($31)) + 4|0);
     $1124 = HEAP32[$1123>>2]|0;
     $1125 = $1124 >> 15;
     $1126 = (($1125) + 1)|0;
     $1127 = $1126 >> 1;
     $1128 = Math_imul($1122, $1127)|0;
     $1129 = (($1117) + ($1128))|0;
     $1130 = $1129 >> 7;
     $1131 = (($1130) + 1)|0;
     $1132 = $1131 >> 1;
     $1133 = ($1132|0)<(-32768);
     if ($1133) {
      $1174 = -32768;
     } else {
      $1134 = $28;
      $1135 = $8;
      $1136 = (16 + ($1135))|0;
      $1137 = (($1134) + ($1136<<2)|0);
      $1138 = HEAP32[$1137>>2]|0;
      $1139 = $1138 >> 16;
      $1140 = ((($31)) + 4|0);
      $1141 = HEAP32[$1140>>2]|0;
      $1142 = $1141&65535;
      $1143 = $1142 << 16 >> 16;
      $1144 = Math_imul($1139, $1143)|0;
      $1145 = $28;
      $1146 = $8;
      $1147 = (16 + ($1146))|0;
      $1148 = (($1145) + ($1147<<2)|0);
      $1149 = HEAP32[$1148>>2]|0;
      $1150 = $1149 & 65535;
      $1151 = ((($31)) + 4|0);
      $1152 = HEAP32[$1151>>2]|0;
      $1153 = $1152&65535;
      $1154 = $1153 << 16 >> 16;
      $1155 = Math_imul($1150, $1154)|0;
      $1156 = $1155 >> 16;
      $1157 = (($1144) + ($1156))|0;
      $1158 = $28;
      $1159 = $8;
      $1160 = (16 + ($1159))|0;
      $1161 = (($1158) + ($1160<<2)|0);
      $1162 = HEAP32[$1161>>2]|0;
      $1163 = ((($31)) + 4|0);
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = $1164 >> 15;
      $1166 = (($1165) + 1)|0;
      $1167 = $1166 >> 1;
      $1168 = Math_imul($1162, $1167)|0;
      $1169 = (($1157) + ($1168))|0;
      $1170 = $1169 >> 7;
      $1171 = (($1170) + 1)|0;
      $1172 = $1171 >> 1;
      $1174 = $1172;
     }
    }
   }
  }
  $1173 = $1174&65535;
  $1175 = $6;
  $1176 = $8;
  $1177 = (($1175) + ($1176<<1)|0);
  HEAP16[$1177>>1] = $1173;
  $1178 = $8;
  $1179 = (($1178) + 1)|0;
  $8 = $1179;
 }
 $1180 = ((($499)) + 1284|0);
 $1181 = $28;
 $1182 = $4;
 $1183 = ((($1182)) + 2328|0);
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = (($1181) + ($1184<<2)|0);
 dest=$1180; src=$1185; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1186 = $16;
 $1187 = $30;
 $1188 = ((($1187)) + 52|0);
 HEAP32[$1188>>2] = $1186;
 $1189 = $26;
 $1190 = $30;
 $1191 = ((($1190)) + 56|0);
 HEAP16[$1191>>1] = $1189;
 $8 = 0;
 while(1) {
  $1192 = $8;
  $1193 = ($1192|0)<(4);
  if (!($1193)) {
   break;
  }
  $1194 = $11;
  $1195 = $5;
  $1196 = $8;
  $1197 = (($1195) + ($1196<<2)|0);
  HEAP32[$1197>>2] = $1194;
  $1198 = $8;
  $1199 = (($1198) + 1)|0;
  $8 = $1199;
 }
 $1200 = $32;
 _llvm_stackrestore(($1200|0));
 STACKTOP = sp;return;
}
function _silk_PLC_update($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $13 = $2;
 $14 = ((($13)) + 4168|0);
 $8 = $14;
 $15 = $2;
 $16 = ((($15)) + 2736|0);
 $17 = ((($16)) + 29|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = $2;
 $21 = ((($20)) + 4164|0);
 HEAP32[$21>>2] = $19;
 $4 = 0;
 $22 = $2;
 $23 = ((($22)) + 2736|0);
 $24 = ((($23)) + 29|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = ($26|0)==(2);
 L1: do {
  if ($27) {
   $7 = 0;
   while(1) {
    $28 = $7;
    $29 = $2;
    $30 = ((($29)) + 2332|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = Math_imul($28, $31)|0;
    $33 = $3;
    $34 = $2;
    $35 = ((($34)) + 2324|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (($36) - 1)|0;
    $38 = (($33) + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($32|0)<($39|0);
    if (!($40)) {
     break;
    }
    $41 = $7;
    $42 = $2;
    $43 = ((($42)) + 2324|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($41|0)==($44|0);
    if ($45) {
     break;
    }
    $5 = 0;
    $6 = 0;
    while(1) {
     $46 = $6;
     $47 = ($46|0)<(5);
     if (!($47)) {
      break;
     }
     $48 = $3;
     $49 = ((($48)) + 96|0);
     $50 = $2;
     $51 = ((($50)) + 2324|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) - 1)|0;
     $54 = $7;
     $55 = (($53) - ($54))|0;
     $56 = ($55*5)|0;
     $57 = $6;
     $58 = (($56) + ($57))|0;
     $59 = (($49) + ($58<<1)|0);
     $60 = HEAP16[$59>>1]|0;
     $61 = $60 << 16 >> 16;
     $62 = $5;
     $63 = (($62) + ($61))|0;
     $5 = $63;
     $64 = $6;
     $65 = (($64) + 1)|0;
     $6 = $65;
    }
    $66 = $5;
    $67 = $4;
    $68 = ($66|0)>($67|0);
    if ($68) {
     $69 = $5;
     $4 = $69;
     $70 = $8;
     $71 = ((($70)) + 4|0);
     $72 = $3;
     $73 = ((($72)) + 96|0);
     $74 = $2;
     $75 = ((($74)) + 2324|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) - 1)|0;
     $78 = $7;
     $79 = (($77) - ($78))|0;
     $80 = $79&65535;
     $81 = $80 << 16 >> 16;
     $82 = ($81*5)|0;
     $83 = (($73) + ($82<<1)|0);
     ;HEAP16[$71>>1]=HEAP16[$83>>1]|0;HEAP16[$71+2>>1]=HEAP16[$83+2>>1]|0;HEAP16[$71+4>>1]=HEAP16[$83+4>>1]|0;HEAP16[$71+6>>1]=HEAP16[$83+6>>1]|0;HEAP16[$71+8>>1]=HEAP16[$83+8>>1]|0;
     $84 = $3;
     $85 = $2;
     $86 = ((($85)) + 2324|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (($87) - 1)|0;
     $89 = $7;
     $90 = (($88) - ($89))|0;
     $91 = (($84) + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92 << 8;
     $94 = $8;
     HEAP32[$94>>2] = $93;
    }
    $95 = $7;
    $96 = (($95) + 1)|0;
    $7 = $96;
   }
   $97 = $8;
   $98 = ((($97)) + 4|0);
   ;HEAP32[$98>>2]=0|0;HEAP32[$98+4>>2]=0|0;HEAP16[$98+8>>1]=0|0;
   $99 = $4;
   $100 = $99&65535;
   $101 = $8;
   $102 = ((($101)) + 4|0);
   $103 = ((($102)) + 4|0);
   HEAP16[$103>>1] = $100;
   $104 = $4;
   $105 = ($104|0)<(11469);
   if ($105) {
    $10 = 11744256;
    $106 = $10;
    $107 = $4;
    $108 = ($107|0)>(1);
    $109 = $4;
    $110 = $108 ? $109 : 1;
    $111 = (($106|0) / ($110|0))&-1;
    $9 = $111;
    $6 = 0;
    while(1) {
     $112 = $6;
     $113 = ($112|0)<(5);
     if (!($113)) {
      break L1;
     }
     $114 = $8;
     $115 = ((($114)) + 4|0);
     $116 = $6;
     $117 = (($115) + ($116<<1)|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118 << 16 >> 16;
     $120 = $9;
     $121 = $120&65535;
     $122 = $121 << 16 >> 16;
     $123 = Math_imul($119, $122)|0;
     $124 = $123 >> 10;
     $125 = $124&65535;
     $126 = $8;
     $127 = ((($126)) + 4|0);
     $128 = $6;
     $129 = (($127) + ($128<<1)|0);
     HEAP16[$129>>1] = $125;
     $130 = $6;
     $131 = (($130) + 1)|0;
     $6 = $131;
    }
   }
   $132 = $4;
   $133 = ($132|0)>(15565);
   if ($133) {
    $12 = 255016960;
    $134 = $12;
    $135 = $4;
    $136 = ($135|0)>(1);
    $137 = $4;
    $138 = $136 ? $137 : 1;
    $139 = (($134|0) / ($138|0))&-1;
    $11 = $139;
    $6 = 0;
    while(1) {
     $140 = $6;
     $141 = ($140|0)<(5);
     if (!($141)) {
      break L1;
     }
     $142 = $8;
     $143 = ((($142)) + 4|0);
     $144 = $6;
     $145 = (($143) + ($144<<1)|0);
     $146 = HEAP16[$145>>1]|0;
     $147 = $146 << 16 >> 16;
     $148 = $11;
     $149 = $148&65535;
     $150 = $149 << 16 >> 16;
     $151 = Math_imul($147, $150)|0;
     $152 = $151 >> 14;
     $153 = $152&65535;
     $154 = $8;
     $155 = ((($154)) + 4|0);
     $156 = $6;
     $157 = (($155) + ($156<<1)|0);
     HEAP16[$157>>1] = $153;
     $158 = $6;
     $159 = (($158) + 1)|0;
     $6 = $159;
    }
   }
  } else {
   $160 = $2;
   $161 = ((($160)) + 2316|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $162&65535;
   $164 = $163 << 16 >> 16;
   $165 = ($164*18)|0;
   $166 = $165 << 8;
   $167 = $8;
   HEAP32[$167>>2] = $166;
   $168 = $8;
   $169 = ((($168)) + 4|0);
   ;HEAP32[$169>>2]=0|0;HEAP32[$169+4>>2]=0|0;HEAP16[$169+8>>1]=0|0;
  }
 } while(0);
 $170 = $8;
 $171 = ((($170)) + 14|0);
 $172 = $3;
 $173 = ((($172)) + 32|0);
 $174 = ((($173)) + 32|0);
 $175 = $2;
 $176 = ((($175)) + 2340|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = $177<<1;
 _memcpy(($171|0),($174|0),($178|0))|0;
 $179 = $3;
 $180 = ((($179)) + 136|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = $181&65535;
 $183 = $8;
 $184 = ((($183)) + 68|0);
 HEAP16[$184>>1] = $182;
 $185 = $8;
 $186 = ((($185)) + 72|0);
 $187 = $3;
 $188 = ((($187)) + 16|0);
 $189 = $2;
 $190 = ((($189)) + 2324|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = (($191) - 2)|0;
 $193 = (($188) + ($192<<2)|0);
 ;HEAP32[$186>>2]=HEAP32[$193>>2]|0;HEAP32[$186+4>>2]=HEAP32[$193+4>>2]|0;
 $194 = $2;
 $195 = ((($194)) + 2332|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = $8;
 $198 = ((($197)) + 88|0);
 HEAP32[$198>>2] = $196;
 $199 = $2;
 $200 = ((($199)) + 2324|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $8;
 $203 = ((($202)) + 84|0);
 HEAP32[$203>>2] = $201;
 STACKTOP = sp;return;
}
function _silk_PLC_energy($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $20 = $14;
 $21 = $20<<1;
 $22 = (_llvm_stacksave()|0);
 $19 = $22;
 $$alloca_mul = $21<<1;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $18 = $23;
 $17 = 0;
 while(1) {
  $24 = $17;
  $25 = ($24|0)<(2);
  if (!($25)) {
   break;
  }
  $16 = 0;
  while(1) {
   $26 = $16;
   $27 = $14;
   $28 = ($26|0)<($27|0);
   if (!($28)) {
    break;
   }
   $29 = $12;
   $30 = $16;
   $31 = $17;
   $32 = $15;
   $33 = (($31) + ($32))|0;
   $34 = (($33) - 2)|0;
   $35 = $14;
   $36 = Math_imul($34, $35)|0;
   $37 = (($30) + ($36))|0;
   $38 = (($29) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 >> 16;
   $41 = $13;
   $42 = $17;
   $43 = (($41) + ($42<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44&65535;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($40, $46)|0;
   $48 = $12;
   $49 = $16;
   $50 = $17;
   $51 = $15;
   $52 = (($50) + ($51))|0;
   $53 = (($52) - 2)|0;
   $54 = $14;
   $55 = Math_imul($53, $54)|0;
   $56 = (($49) + ($55))|0;
   $57 = (($48) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 & 65535;
   $60 = $13;
   $61 = $17;
   $62 = (($60) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63&65535;
   $65 = $64 << 16 >> 16;
   $66 = Math_imul($59, $65)|0;
   $67 = $66 >> 16;
   $68 = (($47) + ($67))|0;
   $69 = $12;
   $70 = $16;
   $71 = $17;
   $72 = $15;
   $73 = (($71) + ($72))|0;
   $74 = (($73) - 2)|0;
   $75 = $14;
   $76 = Math_imul($74, $75)|0;
   $77 = (($70) + ($76))|0;
   $78 = (($69) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $13;
   $81 = $17;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 >> 15;
   $85 = (($84) + 1)|0;
   $86 = $85 >> 1;
   $87 = Math_imul($79, $86)|0;
   $88 = (($68) + ($87))|0;
   $89 = $88 >> 8;
   $90 = ($89|0)>(32767);
   if ($90) {
    $215 = 32767;
   } else {
    $91 = $12;
    $92 = $16;
    $93 = $17;
    $94 = $15;
    $95 = (($93) + ($94))|0;
    $96 = (($95) - 2)|0;
    $97 = $14;
    $98 = Math_imul($96, $97)|0;
    $99 = (($92) + ($98))|0;
    $100 = (($91) + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 >> 16;
    $103 = $13;
    $104 = $17;
    $105 = (($103) + ($104<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106&65535;
    $108 = $107 << 16 >> 16;
    $109 = Math_imul($102, $108)|0;
    $110 = $12;
    $111 = $16;
    $112 = $17;
    $113 = $15;
    $114 = (($112) + ($113))|0;
    $115 = (($114) - 2)|0;
    $116 = $14;
    $117 = Math_imul($115, $116)|0;
    $118 = (($111) + ($117))|0;
    $119 = (($110) + ($118<<2)|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $120 & 65535;
    $122 = $13;
    $123 = $17;
    $124 = (($122) + ($123<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $125&65535;
    $127 = $126 << 16 >> 16;
    $128 = Math_imul($121, $127)|0;
    $129 = $128 >> 16;
    $130 = (($109) + ($129))|0;
    $131 = $12;
    $132 = $16;
    $133 = $17;
    $134 = $15;
    $135 = (($133) + ($134))|0;
    $136 = (($135) - 2)|0;
    $137 = $14;
    $138 = Math_imul($136, $137)|0;
    $139 = (($132) + ($138))|0;
    $140 = (($131) + ($139<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $13;
    $143 = $17;
    $144 = (($142) + ($143<<2)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = $145 >> 15;
    $147 = (($146) + 1)|0;
    $148 = $147 >> 1;
    $149 = Math_imul($141, $148)|0;
    $150 = (($130) + ($149))|0;
    $151 = $150 >> 8;
    $152 = ($151|0)<(-32768);
    if ($152) {
     $215 = -32768;
    } else {
     $153 = $12;
     $154 = $16;
     $155 = $17;
     $156 = $15;
     $157 = (($155) + ($156))|0;
     $158 = (($157) - 2)|0;
     $159 = $14;
     $160 = Math_imul($158, $159)|0;
     $161 = (($154) + ($160))|0;
     $162 = (($153) + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $163 >> 16;
     $165 = $13;
     $166 = $17;
     $167 = (($165) + ($166<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $168&65535;
     $170 = $169 << 16 >> 16;
     $171 = Math_imul($164, $170)|0;
     $172 = $12;
     $173 = $16;
     $174 = $17;
     $175 = $15;
     $176 = (($174) + ($175))|0;
     $177 = (($176) - 2)|0;
     $178 = $14;
     $179 = Math_imul($177, $178)|0;
     $180 = (($173) + ($179))|0;
     $181 = (($172) + ($180<<2)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $182 & 65535;
     $184 = $13;
     $185 = $17;
     $186 = (($184) + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = $187&65535;
     $189 = $188 << 16 >> 16;
     $190 = Math_imul($183, $189)|0;
     $191 = $190 >> 16;
     $192 = (($171) + ($191))|0;
     $193 = $12;
     $194 = $16;
     $195 = $17;
     $196 = $15;
     $197 = (($195) + ($196))|0;
     $198 = (($197) - 2)|0;
     $199 = $14;
     $200 = Math_imul($198, $199)|0;
     $201 = (($194) + ($200))|0;
     $202 = (($193) + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $13;
     $205 = $17;
     $206 = (($204) + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $207 >> 15;
     $209 = (($208) + 1)|0;
     $210 = $209 >> 1;
     $211 = Math_imul($203, $210)|0;
     $212 = (($192) + ($211))|0;
     $213 = $212 >> 8;
     $215 = $213;
    }
   }
   $214 = $215&65535;
   $216 = $18;
   $217 = $16;
   $218 = (($216) + ($217<<1)|0);
   HEAP16[$218>>1] = $214;
   $219 = $16;
   $220 = (($219) + 1)|0;
   $16 = $220;
  }
  $221 = $14;
  $222 = $18;
  $223 = (($222) + ($221<<1)|0);
  $18 = $223;
  $224 = $17;
  $225 = (($224) + 1)|0;
  $17 = $225;
 }
 $226 = $8;
 $227 = $9;
 $228 = $14;
 _silk_sum_sqr_shift($226,$227,$23,$228);
 $229 = $10;
 $230 = $11;
 $231 = $14;
 $232 = (($23) + ($231<<1)|0);
 $233 = $14;
 _silk_sum_sqr_shift($229,$230,$232,$233);
 $234 = $19;
 _llvm_stackrestore(($234|0));
 STACKTOP = sp;return;
}
function _silk_max_int_431($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int_432($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_max_16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4 << 16 >> 16;
 $6 = $3;
 $7 = $6 << 16 >> 16;
 $8 = ($5|0)>($7|0);
 $9 = $3;
 $10 = $2;
 $$sink = $8 ? $10 : $9;
 $11 = $$sink << 16 >> 16;
 $12 = $11&65535;
 STACKTOP = sp;return ($12|0);
}
function _silk_min_32_433($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_max_32_434($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_INVERSE32_varQ_435($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)>(0);
 $13 = $3;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $16 = (_silk_CLZ32_436($15)|0);
 $17 = (($16) - 1)|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $18 << $19;
 $8 = $20;
 $21 = $8;
 $22 = $21 >> 16;
 $23 = (536870911 / ($22|0))&-1;
 $7 = $23;
 $24 = $7;
 $25 = $24 << 16;
 $10 = $25;
 $26 = $8;
 $27 = $26 >> 16;
 $28 = $7;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = Math_imul($27, $30)|0;
 $32 = $8;
 $33 = $32 & 65535;
 $34 = $7;
 $35 = $34&65535;
 $36 = $35 << 16 >> 16;
 $37 = Math_imul($33, $36)|0;
 $38 = $37 >> 16;
 $39 = (($31) + ($38))|0;
 $40 = (536870912 - ($39))|0;
 $41 = $40 << 3;
 $9 = $41;
 $42 = $10;
 $43 = $9;
 $44 = $43 >> 16;
 $45 = $7;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $9;
 $50 = $49 & 65535;
 $51 = $7;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($50, $53)|0;
 $55 = $54 >> 16;
 $56 = (($48) + ($55))|0;
 $57 = (($42) + ($56))|0;
 $58 = $9;
 $59 = $7;
 $60 = $59 >> 15;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = Math_imul($58, $62)|0;
 $64 = (($57) + ($63))|0;
 $10 = $64;
 $65 = $5;
 $66 = (61 - ($65))|0;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $6 = $68;
 $69 = $6;
 $70 = ($69|0)<=(0);
 $71 = $6;
 if (!($70)) {
  $113 = ($71|0)<(32);
  if ($113) {
   $114 = $10;
   $115 = $6;
   $116 = $114 >> $115;
   $2 = $116;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  } else {
   $2 = 0;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  }
 }
 $72 = (0 - ($71))|0;
 $73 = -2147483648 >> $72;
 $74 = $6;
 $75 = (0 - ($74))|0;
 $76 = 2147483647 >> $75;
 $77 = ($73|0)>($76|0);
 $78 = $10;
 $79 = $6;
 $80 = (0 - ($79))|0;
 do {
  if ($77) {
   $81 = -2147483648 >> $80;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $6;
    $84 = (0 - ($83))|0;
    $85 = -2147483648 >> $84;
    $112 = $85;
    break;
   }
   $86 = $10;
   $87 = $6;
   $88 = (0 - ($87))|0;
   $89 = 2147483647 >> $88;
   $90 = ($86|0)<($89|0);
   if ($90) {
    $91 = $6;
    $92 = (0 - ($91))|0;
    $93 = 2147483647 >> $92;
    $112 = $93;
    break;
   } else {
    $94 = $10;
    $112 = $94;
    break;
   }
  } else {
   $95 = 2147483647 >> $80;
   $96 = ($78|0)>($95|0);
   if ($96) {
    $97 = $6;
    $98 = (0 - ($97))|0;
    $99 = 2147483647 >> $98;
    $112 = $99;
    break;
   }
   $100 = $10;
   $101 = $6;
   $102 = (0 - ($101))|0;
   $103 = -2147483648 >> $102;
   $104 = ($100|0)<($103|0);
   if ($104) {
    $105 = $6;
    $106 = (0 - ($105))|0;
    $107 = -2147483648 >> $106;
    $112 = $107;
    break;
   } else {
    $108 = $10;
    $112 = $108;
    break;
   }
  }
 } while(0);
 $109 = $6;
 $110 = (0 - ($109))|0;
 $111 = $112 << $110;
 $2 = $111;
 $117 = $2;
 STACKTOP = sp;return ($117|0);
}
function _silk_CLZ32_436($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_PLC_glue_frames($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $3;
 $15 = ((($14)) + 4168|0);
 $9 = $15;
 $16 = $3;
 $17 = ((($16)) + 4160|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $9;
  $21 = ((($20)) + 60|0);
  $22 = $9;
  $23 = ((($22)) + 64|0);
  $24 = $4;
  $25 = $5;
  _silk_sum_sqr_shift($21,$23,$24,$25);
  $26 = $9;
  $$sink = 1;$$sink2 = $26;
  $135 = ((($$sink2)) + 48|0);
  HEAP32[$135>>2] = $$sink;
  STACKTOP = sp;return;
 }
 $27 = $3;
 $28 = ((($27)) + 4168|0);
 $29 = ((($28)) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(0);
 L5: do {
  if ($31) {
   $32 = $4;
   $33 = $5;
   _silk_sum_sqr_shift($8,$7,$32,$33);
   $34 = HEAP32[$7>>2]|0;
   $35 = $9;
   $36 = ((($35)) + 64|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($34|0)>($37|0);
   if ($38) {
    $39 = $9;
    $40 = ((($39)) + 60|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$7>>2]|0;
    $43 = $9;
    $44 = ((($43)) + 64|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($42) - ($45))|0;
    $47 = $41 >> $46;
    $48 = $9;
    $49 = ((($48)) + 60|0);
    HEAP32[$49>>2] = $47;
   } else {
    $50 = HEAP32[$7>>2]|0;
    $51 = $9;
    $52 = ((($51)) + 64|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($50|0)<($53|0);
    if ($54) {
     $55 = HEAP32[$8>>2]|0;
     $56 = $9;
     $57 = ((($56)) + 64|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = HEAP32[$7>>2]|0;
     $60 = (($58) - ($59))|0;
     $61 = $55 >> $60;
     HEAP32[$8>>2] = $61;
    }
   }
   $62 = HEAP32[$8>>2]|0;
   $63 = $9;
   $64 = ((($63)) + 60|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($62|0)>($65|0);
   if ($66) {
    $67 = $9;
    $68 = ((($67)) + 60|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (_silk_CLZ32_436($69)|0);
    $11 = $70;
    $71 = $11;
    $72 = (($71) - 1)|0;
    $11 = $72;
    $73 = $9;
    $74 = ((($73)) + 60|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $11;
    $77 = $75 << $76;
    $78 = $9;
    $79 = ((($78)) + 60|0);
    HEAP32[$79>>2] = $77;
    $80 = HEAP32[$8>>2]|0;
    $81 = $11;
    $82 = (24 - ($81))|0;
    $83 = (_silk_max_32_434($82,0)|0);
    $84 = $80 >> $83;
    HEAP32[$8>>2] = $84;
    $85 = $9;
    $86 = ((($85)) + 60|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = HEAP32[$8>>2]|0;
    $89 = ($88|0)>(1);
    $90 = HEAP32[$8>>2]|0;
    $91 = $89 ? $90 : 1;
    $92 = (($87|0) / ($91|0))&-1;
    $10 = $92;
    $93 = $10;
    $94 = (_silk_SQRT_APPROX_439($93)|0);
    $95 = $94 << 4;
    $12 = $95;
    $96 = $12;
    $97 = (65536 - ($96))|0;
    $98 = $5;
    $99 = (($97|0) / ($98|0))&-1;
    $13 = $99;
    $100 = $13;
    $101 = $100 << 2;
    $13 = $101;
    $6 = 0;
    while(1) {
     $102 = $6;
     $103 = $5;
     $104 = ($102|0)<($103|0);
     if (!($104)) {
      break L5;
     }
     $105 = $12;
     $106 = $105 >> 16;
     $107 = $4;
     $108 = $6;
     $109 = (($107) + ($108<<1)|0);
     $110 = HEAP16[$109>>1]|0;
     $111 = $110 << 16 >> 16;
     $112 = Math_imul($106, $111)|0;
     $113 = $12;
     $114 = $113 & 65535;
     $115 = $4;
     $116 = $6;
     $117 = (($115) + ($116<<1)|0);
     $118 = HEAP16[$117>>1]|0;
     $119 = $118 << 16 >> 16;
     $120 = Math_imul($114, $119)|0;
     $121 = $120 >> 16;
     $122 = (($112) + ($121))|0;
     $123 = $122&65535;
     $124 = $4;
     $125 = $6;
     $126 = (($124) + ($125<<1)|0);
     HEAP16[$126>>1] = $123;
     $127 = $13;
     $128 = $12;
     $129 = (($128) + ($127))|0;
     $12 = $129;
     $130 = $12;
     $131 = ($130|0)>(65536);
     if ($131) {
      break L5;
     }
     $132 = $6;
     $133 = (($132) + 1)|0;
     $6 = $133;
    }
   }
  }
 } while(0);
 $134 = $9;
 $$sink = 0;$$sink2 = $134;
 $135 = ((($$sink2)) + 48|0);
 HEAP32[$135>>2] = $$sink;
 STACKTOP = sp;return;
}
function _silk_SQRT_APPROX_439($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_440($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CLZ_FRAC_440($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_436($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_441($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_ROR32_441($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_VAD_Init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = $1;
 dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = (($7) + 1)|0;
  $9 = (50 / ($8|0))&-1;
  $10 = (_silk_max_32_448($9,1)|0);
  $11 = $1;
  $12 = ((($11)) + 92|0);
  $13 = $2;
  $14 = (($12) + ($13<<2)|0);
  HEAP32[$14>>2] = $10;
  $15 = $2;
  $16 = (($15) + 1)|0;
  $2 = $16;
 }
 $2 = 0;
 while(1) {
  $17 = $2;
  $18 = ($17|0)<(4);
  $19 = $1;
  if (!($18)) {
   break;
  }
  $20 = ((($19)) + 92|0);
  $21 = $2;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23*100)|0;
  $25 = $1;
  $26 = ((($25)) + 60|0);
  $27 = $2;
  $28 = (($26) + ($27<<2)|0);
  HEAP32[$28>>2] = $24;
  $29 = $1;
  $30 = ((($29)) + 60|0);
  $31 = $2;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (2147483647 / ($33|0))&-1;
  $35 = $1;
  $36 = ((($35)) + 76|0);
  $37 = $2;
  $38 = (($36) + ($37<<2)|0);
  HEAP32[$38>>2] = $34;
  $39 = $2;
  $40 = (($39) + 1)|0;
  $2 = $40;
 }
 $41 = ((($19)) + 108|0);
 HEAP32[$41>>2] = 15;
 $2 = 0;
 while(1) {
  $42 = $2;
  $43 = ($42|0)<(4);
  if (!($43)) {
   break;
  }
  $44 = $1;
  $45 = ((($44)) + 40|0);
  $46 = $2;
  $47 = (($45) + ($46<<2)|0);
  HEAP32[$47>>2] = 25600;
  $48 = $2;
  $49 = (($48) + 1)|0;
  $2 = $49;
 }
 $50 = $3;
 STACKTOP = sp;return ($50|0);
}
function _silk_max_32_448($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_VAD_GetSA_Q8_c($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$alloca_mul = 0, $$sink = 0, $$sink2 = 0, $$sink3 = 0, $$sink5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 56|0;
 $20 = sp + 40|0;
 $23 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $24 = 0;
 $27 = $2;
 $28 = ((($27)) + 32|0);
 $25 = $28;
 $29 = $2;
 $30 = ((($29)) + 4608|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >> 1;
 $7 = $32;
 $33 = $2;
 $34 = ((($33)) + 4608|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >> 2;
 $8 = $36;
 $37 = $2;
 $38 = ((($37)) + 4608|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >> 3;
 $9 = $40;
 HEAP32[$23>>2] = 0;
 $41 = $9;
 $42 = $8;
 $43 = (($41) + ($42))|0;
 $44 = ((($23)) + 4|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($23)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $9;
 $48 = (($46) + ($47))|0;
 $49 = ((($23)) + 8|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($23)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $8;
 $53 = (($51) + ($52))|0;
 $54 = ((($23)) + 12|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($23)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $7;
 $58 = (($56) + ($57))|0;
 $59 = (_llvm_stacksave()|0);
 $26 = $59;
 $$alloca_mul = $58<<1;
 $60 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $61 = $3;
 $62 = $25;
 $63 = ((($23)) + 12|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($60) + ($64<<1)|0);
 $66 = $2;
 $67 = ((($66)) + 4608|0);
 $68 = HEAP32[$67>>2]|0;
 _silk_ana_filt_bank_1($61,$62,$60,$65,$68);
 $69 = $25;
 $70 = ((($69)) + 8|0);
 $71 = ((($23)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($60) + ($72<<1)|0);
 $74 = $7;
 _silk_ana_filt_bank_1($60,$70,$60,$73,$74);
 $75 = $25;
 $76 = ((($75)) + 16|0);
 $77 = ((($23)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (($60) + ($78<<1)|0);
 $80 = $8;
 _silk_ana_filt_bank_1($60,$76,$60,$79,$80);
 $81 = $9;
 $82 = (($81) - 1)|0;
 $83 = (($60) + ($82<<1)|0);
 $84 = HEAP16[$83>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = $85 >> 1;
 $87 = $86&65535;
 $88 = $9;
 $89 = (($88) - 1)|0;
 $90 = (($60) + ($89<<1)|0);
 HEAP16[$90>>1] = $87;
 $91 = $9;
 $92 = (($91) - 1)|0;
 $93 = (($60) + ($92<<1)|0);
 $94 = HEAP16[$93>>1]|0;
 $18 = $94;
 $95 = $9;
 $96 = (($95) - 1)|0;
 $13 = $96;
 while(1) {
  $97 = $13;
  $98 = ($97|0)>(0);
  if (!($98)) {
   break;
  }
  $99 = $13;
  $100 = (($99) - 1)|0;
  $101 = (($60) + ($100<<1)|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = $103 >> 1;
  $105 = $104&65535;
  $106 = $13;
  $107 = (($106) - 1)|0;
  $108 = (($60) + ($107<<1)|0);
  HEAP16[$108>>1] = $105;
  $109 = $13;
  $110 = (($109) - 1)|0;
  $111 = (($60) + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112 << 16 >> 16;
  $114 = $13;
  $115 = (($60) + ($114<<1)|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116 << 16 >> 16;
  $118 = (($117) - ($113))|0;
  $119 = $118&65535;
  HEAP16[$115>>1] = $119;
  $120 = $13;
  $121 = (($120) + -1)|0;
  $13 = $121;
 }
 $122 = $25;
 $123 = ((($122)) + 56|0);
 $124 = HEAP16[$123>>1]|0;
 $125 = $124 << 16 >> 16;
 $126 = HEAP16[$60>>1]|0;
 $127 = $126 << 16 >> 16;
 $128 = (($127) - ($125))|0;
 $129 = $128&65535;
 HEAP16[$60>>1] = $129;
 $130 = $18;
 $131 = $25;
 $132 = ((($131)) + 56|0);
 HEAP16[$132>>1] = $130;
 $14 = 0;
 while(1) {
  $133 = $14;
  $134 = ($133|0)<(4);
  if (!($134)) {
   break;
  }
  $135 = $2;
  $136 = ((($135)) + 4608|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $14;
  $139 = (4 - ($138))|0;
  $140 = (_silk_min_int_451($139,3)|0);
  $141 = $137 >> $140;
  $9 = $141;
  $142 = $9;
  $143 = $142 >> 2;
  $10 = $143;
  $11 = 0;
  $144 = $25;
  $145 = ((($144)) + 24|0);
  $146 = $14;
  $147 = (($145) + ($146<<2)|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $14;
  $150 = (($19) + ($149<<2)|0);
  HEAP32[$150>>2] = $148;
  $15 = 0;
  while(1) {
   $151 = $15;
   $152 = ($151|0)<(4);
   if (!($152)) {
    break;
   }
   $16 = 0;
   $13 = 0;
   while(1) {
    $153 = $13;
    $154 = $10;
    $155 = ($153|0)<($154|0);
    if (!($155)) {
     break;
    }
    $156 = $14;
    $157 = (($23) + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = $13;
    $160 = (($158) + ($159))|0;
    $161 = $11;
    $162 = (($160) + ($161))|0;
    $163 = (($60) + ($162<<1)|0);
    $164 = HEAP16[$163>>1]|0;
    $165 = $164 << 16 >> 16;
    $166 = $165 >> 3;
    $22 = $166;
    $167 = $16;
    $168 = $22;
    $169 = $168&65535;
    $170 = $169 << 16 >> 16;
    $171 = $22;
    $172 = $171&65535;
    $173 = $172 << 16 >> 16;
    $174 = Math_imul($170, $173)|0;
    $175 = (($167) + ($174))|0;
    $16 = $175;
    $176 = $13;
    $177 = (($176) + 1)|0;
    $13 = $177;
   }
   $178 = $15;
   $179 = ($178|0)<(3);
   $180 = $14;
   $181 = (($19) + ($180<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $16;
   if ($179) {
    $184 = (($182) + ($183))|0;
    $185 = $184 & -2147483648;
    $186 = ($185|0)!=(0);
    if ($186) {
     $519 = 2147483647;
    } else {
     $187 = $14;
     $188 = (($19) + ($187<<2)|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = $16;
     $191 = (($189) + ($190))|0;
     $519 = $191;
    }
    $192 = $14;
    $$sink = $519;$$sink2 = $192;
   } else {
    $193 = $183 >> 1;
    $194 = (($182) + ($193))|0;
    $195 = $194 & -2147483648;
    $196 = ($195|0)!=(0);
    if ($196) {
     $520 = 2147483647;
    } else {
     $197 = $14;
     $198 = (($19) + ($197<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = $16;
     $201 = $200 >> 1;
     $202 = (($199) + ($201))|0;
     $520 = $202;
    }
    $203 = $14;
    $$sink = $520;$$sink2 = $203;
   }
   $204 = (($19) + ($$sink2<<2)|0);
   HEAP32[$204>>2] = $$sink;
   $205 = $10;
   $206 = $11;
   $207 = (($206) + ($205))|0;
   $11 = $207;
   $208 = $15;
   $209 = (($208) + 1)|0;
   $15 = $209;
  }
  $210 = $16;
  $211 = $25;
  $212 = ((($211)) + 24|0);
  $213 = $14;
  $214 = (($212) + ($213<<2)|0);
  HEAP32[$214>>2] = $210;
  $215 = $14;
  $216 = (($215) + 1)|0;
  $14 = $216;
 }
 $217 = $25;
 _silk_VAD_GetNoiseLevels($19,$217);
 $16 = 0;
 $6 = 0;
 $14 = 0;
 while(1) {
  $218 = $14;
  $219 = ($218|0)<(4);
  if (!($219)) {
   break;
  }
  $220 = $14;
  $221 = (($19) + ($220<<2)|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $25;
  $224 = ((($223)) + 60|0);
  $225 = $14;
  $226 = (($224) + ($225<<2)|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($222) - ($227))|0;
  $21 = $228;
  $229 = $21;
  $230 = ($229|0)>(0);
  $231 = $14;
  if ($230) {
   $232 = (($19) + ($231<<2)|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = $233 & -8388608;
   $235 = ($234|0)==(0);
   $236 = $14;
   $237 = (($19) + ($236<<2)|0);
   $238 = HEAP32[$237>>2]|0;
   if ($235) {
    $239 = $238 << 8;
    $240 = $25;
    $241 = ((($240)) + 60|0);
    $242 = $14;
    $243 = (($241) + ($242<<2)|0);
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) + 1)|0;
    $246 = (($239|0) / ($245|0))&-1;
    $247 = $14;
    $$sink3 = $246;$$sink5 = $247;
   } else {
    $248 = $25;
    $249 = ((($248)) + 60|0);
    $250 = $14;
    $251 = (($249) + ($250<<2)|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = $252 >> 8;
    $254 = (($253) + 1)|0;
    $255 = (($238|0) / ($254|0))&-1;
    $256 = $14;
    $$sink3 = $255;$$sink5 = $256;
   }
   $257 = (($20) + ($$sink5<<2)|0);
   HEAP32[$257>>2] = $$sink3;
   $258 = $14;
   $259 = (($20) + ($258<<2)|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (_silk_lin2log($260)|0);
   $262 = (($261) - 1024)|0;
   $12 = $262;
   $263 = $16;
   $264 = $12;
   $265 = $264&65535;
   $266 = $265 << 16 >> 16;
   $267 = $12;
   $268 = $267&65535;
   $269 = $268 << 16 >> 16;
   $270 = Math_imul($266, $269)|0;
   $271 = (($263) + ($270))|0;
   $16 = $271;
   $272 = $21;
   $273 = ($272|0)<(1048576);
   if ($273) {
    $274 = $21;
    $275 = (_silk_SQRT_APPROX_452($274)|0);
    $276 = $275 << 6;
    $277 = $276 >> 16;
    $278 = $12;
    $279 = $278&65535;
    $280 = $279 << 16 >> 16;
    $281 = Math_imul($277, $280)|0;
    $282 = $21;
    $283 = (_silk_SQRT_APPROX_452($282)|0);
    $284 = $283 << 6;
    $285 = $284 & 65535;
    $286 = $12;
    $287 = $286&65535;
    $288 = $287 << 16 >> 16;
    $289 = Math_imul($285, $288)|0;
    $290 = $289 >> 16;
    $291 = (($281) + ($290))|0;
    $12 = $291;
   }
   $292 = $6;
   $293 = $14;
   $294 = (22288 + ($293<<2)|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $295 >> 16;
   $297 = $12;
   $298 = $297&65535;
   $299 = $298 << 16 >> 16;
   $300 = Math_imul($296, $299)|0;
   $301 = $14;
   $302 = (22288 + ($301<<2)|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = $303 & 65535;
   $305 = $12;
   $306 = $305&65535;
   $307 = $306 << 16 >> 16;
   $308 = Math_imul($304, $307)|0;
   $309 = $308 >> 16;
   $310 = (($300) + ($309))|0;
   $311 = (($292) + ($310))|0;
   $6 = $311;
  } else {
   $312 = (($20) + ($231<<2)|0);
   HEAP32[$312>>2] = 256;
  }
  $313 = $14;
  $314 = (($313) + 1)|0;
  $14 = $314;
 }
 $315 = $16;
 $316 = (($315|0) / 4)&-1;
 $16 = $316;
 $317 = $16;
 $318 = (_silk_SQRT_APPROX_452($317)|0);
 $319 = ($318*3)|0;
 $320 = $319&65535;
 $321 = $320 << 16 >> 16;
 $5 = $321;
 $322 = $5;
 $323 = $322&65535;
 $324 = $323 << 16 >> 16;
 $325 = 0;
 $326 = $5;
 $327 = $326&65535;
 $328 = $327 << 16 >> 16;
 $329 = ($328*45000)|0;
 $330 = $329 >> 16;
 $331 = (($325) + ($330))|0;
 $332 = (($331) - 128)|0;
 $333 = (_silk_sigm_Q15($332)|0);
 $4 = $333;
 $334 = $6;
 $335 = (_silk_sigm_Q15($334)|0);
 $336 = (($335) - 16384)|0;
 $337 = $336 << 1;
 $338 = $2;
 $339 = ((($338)) + 4744|0);
 HEAP32[$339>>2] = $337;
 $21 = 0;
 $14 = 0;
 while(1) {
  $340 = $14;
  $341 = ($340|0)<(4);
  if (!($341)) {
   break;
  }
  $342 = $14;
  $343 = (($342) + 1)|0;
  $344 = $14;
  $345 = (($19) + ($344<<2)|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = $25;
  $348 = ((($347)) + 60|0);
  $349 = $14;
  $350 = (($348) + ($349<<2)|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = (($346) - ($351))|0;
  $353 = $352 >> 4;
  $354 = Math_imul($343, $353)|0;
  $355 = $21;
  $356 = (($355) + ($354))|0;
  $21 = $356;
  $357 = $14;
  $358 = (($357) + 1)|0;
  $14 = $358;
 }
 $359 = $21;
 $360 = ($359|0)<=(0);
 if ($360) {
  $361 = $4;
  $362 = $361 >> 1;
  $4 = $362;
 } else {
  $363 = $21;
  $364 = ($363|0)<(32768);
  if ($364) {
   $365 = $2;
   $366 = ((($365)) + 4608|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = $2;
   $369 = ((($368)) + 4600|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = ($370*10)|0;
   $372 = ($367|0)==($371|0);
   $373 = $21;
   if ($372) {
    $374 = ($373|0)>(32767);
    if ($374) {
     $380 = 32767;
    } else {
     $375 = $21;
     $376 = ($375|0)<(-32768);
     $377 = $21;
     $378 = $376 ? -32768 : $377;
     $380 = $378;
    }
    $379 = $380 << 16;
    $21 = $379;
   } else {
    $381 = ($373|0)>(65535);
    if ($381) {
     $387 = 65535;
    } else {
     $382 = $21;
     $383 = ($382|0)<(-65536);
     $384 = $21;
     $385 = $383 ? -65536 : $384;
     $387 = $385;
    }
    $386 = $387 << 15;
    $21 = $386;
   }
   $388 = $21;
   $389 = (_silk_SQRT_APPROX_452($388)|0);
   $21 = $389;
   $390 = $21;
   $391 = (32768 + ($390))|0;
   $392 = $391 >> 16;
   $393 = $4;
   $394 = $393&65535;
   $395 = $394 << 16 >> 16;
   $396 = Math_imul($392, $395)|0;
   $397 = $21;
   $398 = (32768 + ($397))|0;
   $399 = $398 & 65535;
   $400 = $4;
   $401 = $400&65535;
   $402 = $401 << 16 >> 16;
   $403 = Math_imul($399, $402)|0;
   $404 = $403 >> 16;
   $405 = (($396) + ($404))|0;
   $4 = $405;
  }
 }
 $406 = $4;
 $407 = $406 >> 7;
 $408 = (_silk_min_int_451($407,255)|0);
 $409 = $2;
 $410 = ((($409)) + 4556|0);
 HEAP32[$410>>2] = $408;
 $411 = $4;
 $412 = $411 >> 16;
 $413 = $4;
 $414 = $413&65535;
 $415 = $414 << 16 >> 16;
 $416 = Math_imul($412, $415)|0;
 $417 = $4;
 $418 = $417 & 65535;
 $419 = $4;
 $420 = $419&65535;
 $421 = $420 << 16 >> 16;
 $422 = Math_imul($418, $421)|0;
 $423 = $422 >> 16;
 $424 = (($416) + ($423))|0;
 $425 = $424&65535;
 $426 = $425 << 16 >> 16;
 $427 = 0;
 $428 = $4;
 $429 = $428 >> 16;
 $430 = $4;
 $431 = $430&65535;
 $432 = $431 << 16 >> 16;
 $433 = Math_imul($429, $432)|0;
 $434 = $4;
 $435 = $434 & 65535;
 $436 = $4;
 $437 = $436&65535;
 $438 = $437 << 16 >> 16;
 $439 = Math_imul($435, $438)|0;
 $440 = $439 >> 16;
 $441 = (($433) + ($440))|0;
 $442 = $441&65535;
 $443 = $442 << 16 >> 16;
 $444 = $443<<12;
 $445 = $444 >> 16;
 $446 = (($427) + ($445))|0;
 $17 = $446;
 $447 = $2;
 $448 = ((($447)) + 4608|0);
 $449 = HEAP32[$448>>2]|0;
 $450 = $2;
 $451 = ((($450)) + 4600|0);
 $452 = HEAP32[$451>>2]|0;
 $453 = ($452*10)|0;
 $454 = ($449|0)==($453|0);
 if ($454) {
  $455 = $17;
  $456 = $455 >> 1;
  $17 = $456;
 }
 $14 = 0;
 while(1) {
  $457 = $14;
  $458 = ($457|0)<(4);
  if (!($458)) {
   break;
  }
  $459 = $25;
  $460 = ((($459)) + 40|0);
  $461 = $14;
  $462 = (($460) + ($461<<2)|0);
  $463 = HEAP32[$462>>2]|0;
  $464 = $14;
  $465 = (($20) + ($464<<2)|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = $25;
  $468 = ((($467)) + 40|0);
  $469 = $14;
  $470 = (($468) + ($469<<2)|0);
  $471 = HEAP32[$470>>2]|0;
  $472 = (($466) - ($471))|0;
  $473 = $472 >> 16;
  $474 = $17;
  $475 = $474&65535;
  $476 = $475 << 16 >> 16;
  $477 = Math_imul($473, $476)|0;
  $478 = $14;
  $479 = (($20) + ($478<<2)|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $25;
  $482 = ((($481)) + 40|0);
  $483 = $14;
  $484 = (($482) + ($483<<2)|0);
  $485 = HEAP32[$484>>2]|0;
  $486 = (($480) - ($485))|0;
  $487 = $486 & 65535;
  $488 = $17;
  $489 = $488&65535;
  $490 = $489 << 16 >> 16;
  $491 = Math_imul($487, $490)|0;
  $492 = $491 >> 16;
  $493 = (($477) + ($492))|0;
  $494 = (($463) + ($493))|0;
  $495 = $25;
  $496 = ((($495)) + 40|0);
  $497 = $14;
  $498 = (($496) + ($497<<2)|0);
  HEAP32[$498>>2] = $494;
  $499 = $25;
  $500 = ((($499)) + 40|0);
  $501 = $14;
  $502 = (($500) + ($501<<2)|0);
  $503 = HEAP32[$502>>2]|0;
  $504 = (_silk_lin2log($503)|0);
  $505 = (($504) - 1024)|0;
  $506 = ($505*3)|0;
  $12 = $506;
  $507 = $12;
  $508 = (($507) - 2048)|0;
  $509 = $508 >> 4;
  $510 = (_silk_sigm_Q15($509)|0);
  $511 = $2;
  $512 = ((($511)) + 4728|0);
  $513 = $14;
  $514 = (($512) + ($513<<2)|0);
  HEAP32[$514>>2] = $510;
  $515 = $14;
  $516 = (($515) + 1)|0;
  $14 = $516;
 }
 $517 = $24;
 $518 = $26;
 _llvm_stackrestore(($518|0));
 STACKTOP = sp;return ($517|0);
}
function _silk_min_int_451($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_VAD_GetNoiseLevels($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $10 = $3;
 $11 = ((($10)) + 108|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(1000);
 if ($13) {
  $14 = $3;
  $15 = ((($14)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 >> 4;
  $18 = (($17) + 1)|0;
  $19 = (32767 / ($18|0))&-1;
  $9 = $19;
 } else {
  $9 = 0;
 }
 $4 = 0;
 while(1) {
  $20 = $4;
  $21 = ($20|0)<(4);
  $22 = $3;
  if (!($21)) {
   break;
  }
  $23 = ((($22)) + 60|0);
  $24 = $4;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $5 = $26;
  $27 = $2;
  $28 = $4;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $3;
  $32 = ((($31)) + 92|0);
  $33 = $4;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($30) + ($35))|0;
  $37 = $36 & -2147483648;
  $38 = ($37|0)!=(0);
  if ($38) {
   $49 = 2147483647;
  } else {
   $39 = $2;
   $40 = $4;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $3;
   $44 = ((($43)) + 92|0);
   $45 = $4;
   $46 = (($44) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($42) + ($47))|0;
   $49 = $48;
  }
  $6 = $49;
  $50 = $6;
  $51 = (2147483647 / ($50|0))&-1;
  $7 = $51;
  $52 = $6;
  $53 = $5;
  $54 = $53 << 3;
  $55 = ($52|0)>($54|0);
  do {
   if ($55) {
    $8 = 128;
   } else {
    $56 = $6;
    $57 = $5;
    $58 = ($56|0)<($57|0);
    if ($58) {
     $8 = 1024;
     break;
    } else {
     $59 = $7;
     $60 = $59 >> 16;
     $61 = $5;
     $62 = $61&65535;
     $63 = $62 << 16 >> 16;
     $64 = Math_imul($60, $63)|0;
     $65 = $7;
     $66 = $65 & 65535;
     $67 = $5;
     $68 = $67&65535;
     $69 = $68 << 16 >> 16;
     $70 = Math_imul($66, $69)|0;
     $71 = $70 >> 16;
     $72 = (($64) + ($71))|0;
     $73 = $7;
     $74 = $5;
     $75 = $74 >> 15;
     $76 = (($75) + 1)|0;
     $77 = $76 >> 1;
     $78 = Math_imul($73, $77)|0;
     $79 = (($72) + ($78))|0;
     $80 = $79 >> 16;
     $81 = $80<<11;
     $82 = $7;
     $83 = $82 >> 16;
     $84 = $5;
     $85 = $84&65535;
     $86 = $85 << 16 >> 16;
     $87 = Math_imul($83, $86)|0;
     $88 = $7;
     $89 = $88 & 65535;
     $90 = $5;
     $91 = $90&65535;
     $92 = $91 << 16 >> 16;
     $93 = Math_imul($89, $92)|0;
     $94 = $93 >> 16;
     $95 = (($87) + ($94))|0;
     $96 = $7;
     $97 = $5;
     $98 = $97 >> 15;
     $99 = (($98) + 1)|0;
     $100 = $99 >> 1;
     $101 = Math_imul($96, $100)|0;
     $102 = (($95) + ($101))|0;
     $103 = $102 & 65535;
     $104 = $103<<11;
     $105 = $104 >> 16;
     $106 = (($81) + ($105))|0;
     $8 = $106;
     break;
    }
   }
  } while(0);
  $107 = $8;
  $108 = $9;
  $109 = (_silk_max_int_456($107,$108)|0);
  $8 = $109;
  $110 = $3;
  $111 = ((($110)) + 76|0);
  $112 = $4;
  $113 = (($111) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $7;
  $116 = $3;
  $117 = ((($116)) + 76|0);
  $118 = $4;
  $119 = (($117) + ($118<<2)|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($115) - ($120))|0;
  $122 = $121 >> 16;
  $123 = $8;
  $124 = $123&65535;
  $125 = $124 << 16 >> 16;
  $126 = Math_imul($122, $125)|0;
  $127 = $7;
  $128 = $3;
  $129 = ((($128)) + 76|0);
  $130 = $4;
  $131 = (($129) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($127) - ($132))|0;
  $134 = $133 & 65535;
  $135 = $8;
  $136 = $135&65535;
  $137 = $136 << 16 >> 16;
  $138 = Math_imul($134, $137)|0;
  $139 = $138 >> 16;
  $140 = (($126) + ($139))|0;
  $141 = (($114) + ($140))|0;
  $142 = $3;
  $143 = ((($142)) + 76|0);
  $144 = $4;
  $145 = (($143) + ($144<<2)|0);
  HEAP32[$145>>2] = $141;
  $146 = $3;
  $147 = ((($146)) + 76|0);
  $148 = $4;
  $149 = (($147) + ($148<<2)|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (2147483647 / ($150|0))&-1;
  $5 = $151;
  $152 = $5;
  $153 = ($152|0)<(16777215);
  $154 = $5;
  $155 = $153 ? $154 : 16777215;
  $5 = $155;
  $156 = $5;
  $157 = $3;
  $158 = ((($157)) + 60|0);
  $159 = $4;
  $160 = (($158) + ($159<<2)|0);
  HEAP32[$160>>2] = $156;
  $161 = $4;
  $162 = (($161) + 1)|0;
  $4 = $162;
 }
 $163 = ((($22)) + 108|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = (($164) + 1)|0;
 HEAP32[$163>>2] = $165;
 STACKTOP = sp;return;
}
function _silk_SQRT_APPROX_452($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_453($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CLZ_FRAC_453($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_454($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_455($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_454($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32_455($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_max_int_456($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_control_audio_bandwidth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 4600|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = $9&65535;
 $11 = $10 << 16 >> 16;
 $12 = ($11*1000)|0;
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $2;
  $16 = ((($15)) + 4596|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  $19 = ((($18)) + 4580|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  $22 = $2;
  $23 = ((($22)) + 4580|0);
  $24 = ((($22)) + 4596|0);
  $$sink = $21 ? $24 : $23;
  $25 = HEAP32[$$sink>>2]|0;
  $5 = $25;
  $26 = $5;
  $27 = (($26|0) / 1000)&-1;
  $4 = $27;
  $193 = $4;
  STACKTOP = sp;return ($193|0);
 }
 $28 = $5;
 $29 = $2;
 $30 = ((($29)) + 4580|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28|0)>($31|0);
 if (!($32)) {
  $33 = $5;
  $34 = $2;
  $35 = ((($34)) + 4588|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)>($36|0);
  if (!($37)) {
   $38 = $5;
   $39 = $2;
   $40 = ((($39)) + 4592|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($38|0)<($41|0);
   if (!($42)) {
    $68 = $2;
    $69 = ((($68)) + 16|0);
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)>=(256);
    if ($72) {
     $73 = $2;
     $74 = ((($73)) + 16|0);
     $75 = ((($74)) + 12|0);
     HEAP32[$75>>2] = 0;
    }
    $76 = $2;
    $77 = ((($76)) + 4560|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)!=(0);
    if (!($79)) {
     $80 = $3;
     $81 = ((($80)) + 60|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)!=(0);
     if (!($83)) {
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     }
    }
    $84 = $2;
    $85 = ((($84)) + 4600|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86&65535;
    $88 = $87 << 16 >> 16;
    $89 = ($88*1000)|0;
    $90 = $2;
    $91 = ((($90)) + 4596|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($89|0)>($92|0);
    $94 = $2;
    if ($93) {
     $95 = ((($94)) + 16|0);
     $96 = ((($95)) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(0);
     if ($98) {
      $99 = $2;
      $100 = ((($99)) + 16|0);
      $101 = ((($100)) + 8|0);
      HEAP32[$101>>2] = 256;
      $102 = $2;
      $103 = ((($102)) + 16|0);
      ;HEAP32[$103>>2]=0|0;HEAP32[$103+4>>2]=0|0;
     }
     $104 = $3;
     $105 = ((($104)) + 60|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)!=(0);
     $108 = $2;
     $109 = ((($108)) + 16|0);
     if ($107) {
      $110 = ((($109)) + 12|0);
      HEAP32[$110>>2] = 0;
      $111 = $2;
      $112 = ((($111)) + 4600|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(16);
      $115 = $114 ? 12 : 8;
      $4 = $115;
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     }
     $116 = ((($109)) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = ($117|0)<=(0);
     if ($118) {
      $119 = $3;
      $120 = ((($119)) + 84|0);
      HEAP32[$120>>2] = 1;
      $121 = $3;
      $122 = ((($121)) + 52|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123*5)|0;
      $125 = $3;
      $126 = ((($125)) + 24|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (($127) + 5)|0;
      $129 = (($124|0) / ($128|0))&-1;
      $130 = $3;
      $131 = ((($130)) + 52|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($132) - ($129))|0;
      HEAP32[$131>>2] = $133;
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     } else {
      $134 = $2;
      $135 = ((($134)) + 16|0);
      $136 = ((($135)) + 12|0);
      HEAP32[$136>>2] = -2;
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     }
    }
    $137 = ((($94)) + 4600|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $138&65535;
    $140 = $139 << 16 >> 16;
    $141 = ($140*1000)|0;
    $142 = $2;
    $143 = ((($142)) + 4596|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($141|0)<($144|0);
    if (!($145)) {
     $185 = $2;
     $186 = ((($185)) + 16|0);
     $187 = ((($186)) + 12|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)<(0);
     if (!($189)) {
      $193 = $4;
      STACKTOP = sp;return ($193|0);
     }
     $190 = $2;
     $191 = ((($190)) + 16|0);
     $192 = ((($191)) + 12|0);
     HEAP32[$192>>2] = 1;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    }
    $146 = $3;
    $147 = ((($146)) + 60|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)!=(0);
    $150 = $2;
    if ($149) {
     $151 = ((($150)) + 4600|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(8);
     $154 = $153 ? 12 : 16;
     $4 = $154;
     $155 = $2;
     $156 = ((($155)) + 16|0);
     $157 = ((($156)) + 8|0);
     HEAP32[$157>>2] = 0;
     $158 = $2;
     $159 = ((($158)) + 16|0);
     ;HEAP32[$159>>2]=0|0;HEAP32[$159+4>>2]=0|0;
     $160 = $2;
     $161 = ((($160)) + 16|0);
     $162 = ((($161)) + 12|0);
     HEAP32[$162>>2] = 1;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    }
    $163 = ((($150)) + 16|0);
    $164 = ((($163)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==(0);
    if ($166) {
     $167 = $3;
     $168 = ((($167)) + 84|0);
     HEAP32[$168>>2] = 1;
     $169 = $3;
     $170 = ((($169)) + 52|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($171*5)|0;
     $173 = $3;
     $174 = ((($173)) + 24|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($175) + 5)|0;
     $177 = (($172|0) / ($176|0))&-1;
     $178 = $3;
     $179 = ((($178)) + 52|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) - ($177))|0;
     HEAP32[$179>>2] = $181;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    } else {
     $182 = $2;
     $183 = ((($182)) + 16|0);
     $184 = ((($183)) + 12|0);
     HEAP32[$184>>2] = 1;
     $193 = $4;
     STACKTOP = sp;return ($193|0);
    }
   }
  }
 }
 $43 = $2;
 $44 = ((($43)) + 4580|0);
 $45 = HEAP32[$44>>2]|0;
 $5 = $45;
 $46 = $5;
 $47 = $2;
 $48 = ((($47)) + 4588|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($46|0)<($49|0);
 if ($50) {
  $51 = $5;
  $55 = $51;
 } else {
  $52 = $2;
  $53 = ((($52)) + 4588|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54;
 }
 $5 = $55;
 $56 = $5;
 $57 = $2;
 $58 = ((($57)) + 4592|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($56|0)>($59|0);
 if ($60) {
  $61 = $5;
  $65 = $61;
 } else {
  $62 = $2;
  $63 = ((($62)) + 4592|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64;
 }
 $5 = $65;
 $66 = $5;
 $67 = (($66|0) / 1000)&-1;
 $4 = $67;
 $193 = $4;
 STACKTOP = sp;return ($193|0);
}
function _silk_quant_LTP_gains($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $21 = sp + 100|0;
 $27 = sp + 28|0;
 $33 = sp + 4|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $29 = 2147483647;
 $31 = 0;
 $19 = 0;
 while(1) {
  $35 = $19;
  $36 = ($35|0)<(3);
  if (!($36)) {
   break;
  }
  $34 = 51;
  $37 = $19;
  $38 = (16672 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $22 = $39;
  $40 = $19;
  $41 = (16684 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $23 = $42;
  $43 = $19;
  $44 = (16696 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $24 = $45;
  $46 = $19;
  $47 = (27654 + ($46)|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48 << 24 >> 24;
  $20 = $49;
  $50 = $13;
  $26 = $50;
  $51 = $9;
  $25 = $51;
  $28 = 0;
  $52 = $12;
  $53 = HEAP32[$52>>2]|0;
  $30 = $53;
  $18 = 0;
  while(1) {
   $54 = $18;
   $55 = $16;
   $56 = ($54|0)<($55|0);
   if (!($56)) {
    break;
   }
   $57 = $30;
   $58 = (5333 - ($57))|0;
   $59 = (($58) + 896)|0;
   $60 = (_silk_log2lin($59)|0);
   $61 = $34;
   $62 = (($60) - ($61))|0;
   $32 = $62;
   $63 = $18;
   $64 = (($21) + ($63)|0);
   $65 = $25;
   $66 = $26;
   $67 = $23;
   $68 = $24;
   $69 = $22;
   $70 = $14;
   $71 = $32;
   $72 = $20;
   _silk_VQ_WMat_EC_c($64,$27,$33,$65,$66,$67,$68,$69,$70,$71,$72);
   $73 = $28;
   $74 = HEAP32[$27>>2]|0;
   $75 = (($73) + ($74))|0;
   $76 = $75 & -2147483648;
   $77 = ($76|0)!=(0);
   if ($77) {
    $81 = 2147483647;
   } else {
    $78 = $28;
    $79 = HEAP32[$27>>2]|0;
    $80 = (($78) + ($79))|0;
    $81 = $80;
   }
   $28 = $81;
   $82 = $30;
   $83 = $34;
   $84 = HEAP32[$33>>2]|0;
   $85 = (($83) + ($84))|0;
   $86 = (_silk_lin2log($85)|0);
   $87 = (($82) + ($86))|0;
   $88 = (($87) - 896)|0;
   $89 = (0)>($88|0);
   if ($89) {
    $97 = 0;
   } else {
    $90 = $30;
    $91 = $34;
    $92 = HEAP32[$33>>2]|0;
    $93 = (($91) + ($92))|0;
    $94 = (_silk_lin2log($93)|0);
    $95 = (($90) + ($94))|0;
    $96 = (($95) - 896)|0;
    $97 = $96;
   }
   $30 = $97;
   $98 = $25;
   $99 = ((($98)) + 10|0);
   $25 = $99;
   $100 = $26;
   $101 = ((($100)) + 100|0);
   $26 = $101;
   $102 = $18;
   $103 = (($102) + 1)|0;
   $18 = $103;
  }
  $104 = $28;
  $105 = (2147483646)<($104|0);
  $106 = $28;
  $107 = $105 ? 2147483646 : $106;
  $28 = $107;
  $108 = $28;
  $109 = $29;
  $110 = ($108|0)<($109|0);
  if ($110) {
   $111 = $28;
   $29 = $111;
   $112 = $19;
   $113 = $112&255;
   $114 = $11;
   HEAP8[$114>>0] = $113;
   $115 = $10;
   $116 = $16;
   $117 = $116;
   _memcpy(($115|0),($21|0),($117|0))|0;
   $118 = $30;
   $31 = $118;
  }
  $119 = $15;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $28;
   $122 = HEAP16[12474]|0;
   $123 = $122 << 16 >> 16;
   $124 = ($121|0)<($123|0);
   if ($124) {
    break;
   }
  }
  $125 = $19;
  $126 = (($125) + 1)|0;
  $19 = $126;
 }
 $127 = $11;
 $128 = HEAP8[$127>>0]|0;
 $129 = $128 << 24 >> 24;
 $130 = (16684 + ($129<<2)|0);
 $131 = HEAP32[$130>>2]|0;
 $23 = $131;
 $18 = 0;
 while(1) {
  $132 = $18;
  $133 = $16;
  $134 = ($132|0)<($133|0);
  if (!($134)) {
   break;
  }
  $19 = 0;
  while(1) {
   $135 = $19;
   $136 = ($135|0)<(5);
   if (!($136)) {
    break;
   }
   $137 = $23;
   $138 = $10;
   $139 = $18;
   $140 = (($138) + ($139)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141 << 24 >> 24;
   $143 = ($142*5)|0;
   $144 = $19;
   $145 = (($143) + ($144))|0;
   $146 = (($137) + ($145)|0);
   $147 = HEAP8[$146>>0]|0;
   $148 = $147 << 24 >> 24;
   $149 = $148 << 7;
   $150 = $149&65535;
   $151 = $9;
   $152 = $18;
   $153 = ($152*5)|0;
   $154 = $19;
   $155 = (($153) + ($154))|0;
   $156 = (($151) + ($155<<1)|0);
   HEAP16[$156>>1] = $150;
   $157 = $19;
   $158 = (($157) + 1)|0;
   $19 = $158;
  }
  $159 = $18;
  $160 = (($159) + 1)|0;
  $18 = $160;
 }
 $161 = $31;
 $162 = $12;
 HEAP32[$162>>2] = $161;
 STACKTOP = sp;return;
}
function _silk_VQ_WMat_EC_c($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $25 = sp + 64|0;
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $28 = $12;
 HEAP32[$28>>2] = 2147483647;
 $29 = $16;
 $24 = $29;
 $22 = 0;
 while(1) {
  $30 = $22;
  $31 = $21;
  $32 = ($30|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $17;
  $34 = $22;
  $35 = (($33) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $23 = $37;
  $38 = $14;
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $24;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = $43 << 7;
  $45 = (($40) - ($44))|0;
  $46 = $45&65535;
  HEAP16[$25>>1] = $46;
  $47 = $14;
  $48 = ((($47)) + 2|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $51 = $24;
  $52 = ((($51)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 << 24 >> 24;
  $55 = $54 << 7;
  $56 = (($50) - ($55))|0;
  $57 = $56&65535;
  $58 = ((($25)) + 2|0);
  HEAP16[$58>>1] = $57;
  $59 = $14;
  $60 = ((($59)) + 4|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = $24;
  $64 = ((($63)) + 2|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = $66 << 7;
  $68 = (($62) - ($67))|0;
  $69 = $68&65535;
  $70 = ((($25)) + 4|0);
  HEAP16[$70>>1] = $69;
  $71 = $14;
  $72 = ((($71)) + 6|0);
  $73 = HEAP16[$72>>1]|0;
  $74 = $73 << 16 >> 16;
  $75 = $24;
  $76 = ((($75)) + 3|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77 << 24 >> 24;
  $79 = $78 << 7;
  $80 = (($74) - ($79))|0;
  $81 = $80&65535;
  $82 = ((($25)) + 6|0);
  HEAP16[$82>>1] = $81;
  $83 = $14;
  $84 = ((($83)) + 8|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85 << 16 >> 16;
  $87 = $24;
  $88 = ((($87)) + 4|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89 << 24 >> 24;
  $91 = $90 << 7;
  $92 = (($86) - ($91))|0;
  $93 = $92&65535;
  $94 = ((($25)) + 8|0);
  HEAP16[$94>>1] = $93;
  $95 = $19;
  $96 = $95&65535;
  $97 = $96 << 16 >> 16;
  $98 = $18;
  $99 = $22;
  $100 = (($98) + ($99)|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $102 << 16 >> 16;
  $104 = Math_imul($97, $103)|0;
  $26 = $104;
  $105 = $26;
  $106 = $23;
  $107 = $20;
  $108 = (($106) - ($107))|0;
  $109 = ($108|0)>(0);
  if ($109) {
   $110 = $23;
   $111 = $20;
   $112 = (($110) - ($111))|0;
   $114 = $112;
  } else {
   $114 = 0;
  }
  $113 = $114 << 10;
  $115 = (($105) + ($113))|0;
  $26 = $115;
  $116 = $15;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $118 >> 16;
  $120 = ((($25)) + 2|0);
  $121 = HEAP16[$120>>1]|0;
  $122 = $121 << 16 >> 16;
  $123 = Math_imul($119, $122)|0;
  $124 = $15;
  $125 = ((($124)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $126 & 65535;
  $128 = ((($25)) + 2|0);
  $129 = HEAP16[$128>>1]|0;
  $130 = $129 << 16 >> 16;
  $131 = Math_imul($127, $130)|0;
  $132 = $131 >> 16;
  $133 = (($123) + ($132))|0;
  $27 = $133;
  $134 = $27;
  $135 = $15;
  $136 = ((($135)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 >> 16;
  $139 = ((($25)) + 4|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = Math_imul($138, $141)|0;
  $143 = $15;
  $144 = ((($143)) + 8|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 & 65535;
  $147 = ((($25)) + 4|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = Math_imul($146, $149)|0;
  $151 = $150 >> 16;
  $152 = (($142) + ($151))|0;
  $153 = (($134) + ($152))|0;
  $27 = $153;
  $154 = $27;
  $155 = $15;
  $156 = ((($155)) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $157 >> 16;
  $159 = ((($25)) + 6|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $160 << 16 >> 16;
  $162 = Math_imul($158, $161)|0;
  $163 = $15;
  $164 = ((($163)) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = $165 & 65535;
  $167 = ((($25)) + 6|0);
  $168 = HEAP16[$167>>1]|0;
  $169 = $168 << 16 >> 16;
  $170 = Math_imul($166, $169)|0;
  $171 = $170 >> 16;
  $172 = (($162) + ($171))|0;
  $173 = (($154) + ($172))|0;
  $27 = $173;
  $174 = $27;
  $175 = $15;
  $176 = ((($175)) + 16|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $177 >> 16;
  $179 = ((($25)) + 8|0);
  $180 = HEAP16[$179>>1]|0;
  $181 = $180 << 16 >> 16;
  $182 = Math_imul($178, $181)|0;
  $183 = $15;
  $184 = ((($183)) + 16|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = $185 & 65535;
  $187 = ((($25)) + 8|0);
  $188 = HEAP16[$187>>1]|0;
  $189 = $188 << 16 >> 16;
  $190 = Math_imul($186, $189)|0;
  $191 = $190 >> 16;
  $192 = (($182) + ($191))|0;
  $193 = (($174) + ($192))|0;
  $27 = $193;
  $194 = $27;
  $195 = $194 << 1;
  $27 = $195;
  $196 = $27;
  $197 = $15;
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 >> 16;
  $200 = HEAP16[$25>>1]|0;
  $201 = $200 << 16 >> 16;
  $202 = Math_imul($199, $201)|0;
  $203 = $15;
  $204 = HEAP32[$203>>2]|0;
  $205 = $204 & 65535;
  $206 = HEAP16[$25>>1]|0;
  $207 = $206 << 16 >> 16;
  $208 = Math_imul($205, $207)|0;
  $209 = $208 >> 16;
  $210 = (($202) + ($209))|0;
  $211 = (($196) + ($210))|0;
  $27 = $211;
  $212 = $26;
  $213 = $27;
  $214 = $213 >> 16;
  $215 = HEAP16[$25>>1]|0;
  $216 = $215 << 16 >> 16;
  $217 = Math_imul($214, $216)|0;
  $218 = $27;
  $219 = $218 & 65535;
  $220 = HEAP16[$25>>1]|0;
  $221 = $220 << 16 >> 16;
  $222 = Math_imul($219, $221)|0;
  $223 = $222 >> 16;
  $224 = (($217) + ($223))|0;
  $225 = (($212) + ($224))|0;
  $26 = $225;
  $226 = $15;
  $227 = ((($226)) + 28|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 >> 16;
  $230 = ((($25)) + 4|0);
  $231 = HEAP16[$230>>1]|0;
  $232 = $231 << 16 >> 16;
  $233 = Math_imul($229, $232)|0;
  $234 = $15;
  $235 = ((($234)) + 28|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = $236 & 65535;
  $238 = ((($25)) + 4|0);
  $239 = HEAP16[$238>>1]|0;
  $240 = $239 << 16 >> 16;
  $241 = Math_imul($237, $240)|0;
  $242 = $241 >> 16;
  $243 = (($233) + ($242))|0;
  $27 = $243;
  $244 = $27;
  $245 = $15;
  $246 = ((($245)) + 32|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $247 >> 16;
  $249 = ((($25)) + 6|0);
  $250 = HEAP16[$249>>1]|0;
  $251 = $250 << 16 >> 16;
  $252 = Math_imul($248, $251)|0;
  $253 = $15;
  $254 = ((($253)) + 32|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $255 & 65535;
  $257 = ((($25)) + 6|0);
  $258 = HEAP16[$257>>1]|0;
  $259 = $258 << 16 >> 16;
  $260 = Math_imul($256, $259)|0;
  $261 = $260 >> 16;
  $262 = (($252) + ($261))|0;
  $263 = (($244) + ($262))|0;
  $27 = $263;
  $264 = $27;
  $265 = $15;
  $266 = ((($265)) + 36|0);
  $267 = HEAP32[$266>>2]|0;
  $268 = $267 >> 16;
  $269 = ((($25)) + 8|0);
  $270 = HEAP16[$269>>1]|0;
  $271 = $270 << 16 >> 16;
  $272 = Math_imul($268, $271)|0;
  $273 = $15;
  $274 = ((($273)) + 36|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $275 & 65535;
  $277 = ((($25)) + 8|0);
  $278 = HEAP16[$277>>1]|0;
  $279 = $278 << 16 >> 16;
  $280 = Math_imul($276, $279)|0;
  $281 = $280 >> 16;
  $282 = (($272) + ($281))|0;
  $283 = (($264) + ($282))|0;
  $27 = $283;
  $284 = $27;
  $285 = $284 << 1;
  $27 = $285;
  $286 = $27;
  $287 = $15;
  $288 = ((($287)) + 24|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $289 >> 16;
  $291 = ((($25)) + 2|0);
  $292 = HEAP16[$291>>1]|0;
  $293 = $292 << 16 >> 16;
  $294 = Math_imul($290, $293)|0;
  $295 = $15;
  $296 = ((($295)) + 24|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = $297 & 65535;
  $299 = ((($25)) + 2|0);
  $300 = HEAP16[$299>>1]|0;
  $301 = $300 << 16 >> 16;
  $302 = Math_imul($298, $301)|0;
  $303 = $302 >> 16;
  $304 = (($294) + ($303))|0;
  $305 = (($286) + ($304))|0;
  $27 = $305;
  $306 = $26;
  $307 = $27;
  $308 = $307 >> 16;
  $309 = ((($25)) + 2|0);
  $310 = HEAP16[$309>>1]|0;
  $311 = $310 << 16 >> 16;
  $312 = Math_imul($308, $311)|0;
  $313 = $27;
  $314 = $313 & 65535;
  $315 = ((($25)) + 2|0);
  $316 = HEAP16[$315>>1]|0;
  $317 = $316 << 16 >> 16;
  $318 = Math_imul($314, $317)|0;
  $319 = $318 >> 16;
  $320 = (($312) + ($319))|0;
  $321 = (($306) + ($320))|0;
  $26 = $321;
  $322 = $15;
  $323 = ((($322)) + 52|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = $324 >> 16;
  $326 = ((($25)) + 6|0);
  $327 = HEAP16[$326>>1]|0;
  $328 = $327 << 16 >> 16;
  $329 = Math_imul($325, $328)|0;
  $330 = $15;
  $331 = ((($330)) + 52|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = $332 & 65535;
  $334 = ((($25)) + 6|0);
  $335 = HEAP16[$334>>1]|0;
  $336 = $335 << 16 >> 16;
  $337 = Math_imul($333, $336)|0;
  $338 = $337 >> 16;
  $339 = (($329) + ($338))|0;
  $27 = $339;
  $340 = $27;
  $341 = $15;
  $342 = ((($341)) + 56|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $343 >> 16;
  $345 = ((($25)) + 8|0);
  $346 = HEAP16[$345>>1]|0;
  $347 = $346 << 16 >> 16;
  $348 = Math_imul($344, $347)|0;
  $349 = $15;
  $350 = ((($349)) + 56|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $351 & 65535;
  $353 = ((($25)) + 8|0);
  $354 = HEAP16[$353>>1]|0;
  $355 = $354 << 16 >> 16;
  $356 = Math_imul($352, $355)|0;
  $357 = $356 >> 16;
  $358 = (($348) + ($357))|0;
  $359 = (($340) + ($358))|0;
  $27 = $359;
  $360 = $27;
  $361 = $360 << 1;
  $27 = $361;
  $362 = $27;
  $363 = $15;
  $364 = ((($363)) + 48|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = $365 >> 16;
  $367 = ((($25)) + 4|0);
  $368 = HEAP16[$367>>1]|0;
  $369 = $368 << 16 >> 16;
  $370 = Math_imul($366, $369)|0;
  $371 = $15;
  $372 = ((($371)) + 48|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = $373 & 65535;
  $375 = ((($25)) + 4|0);
  $376 = HEAP16[$375>>1]|0;
  $377 = $376 << 16 >> 16;
  $378 = Math_imul($374, $377)|0;
  $379 = $378 >> 16;
  $380 = (($370) + ($379))|0;
  $381 = (($362) + ($380))|0;
  $27 = $381;
  $382 = $26;
  $383 = $27;
  $384 = $383 >> 16;
  $385 = ((($25)) + 4|0);
  $386 = HEAP16[$385>>1]|0;
  $387 = $386 << 16 >> 16;
  $388 = Math_imul($384, $387)|0;
  $389 = $27;
  $390 = $389 & 65535;
  $391 = ((($25)) + 4|0);
  $392 = HEAP16[$391>>1]|0;
  $393 = $392 << 16 >> 16;
  $394 = Math_imul($390, $393)|0;
  $395 = $394 >> 16;
  $396 = (($388) + ($395))|0;
  $397 = (($382) + ($396))|0;
  $26 = $397;
  $398 = $15;
  $399 = ((($398)) + 76|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = $400 >> 16;
  $402 = ((($25)) + 8|0);
  $403 = HEAP16[$402>>1]|0;
  $404 = $403 << 16 >> 16;
  $405 = Math_imul($401, $404)|0;
  $406 = $15;
  $407 = ((($406)) + 76|0);
  $408 = HEAP32[$407>>2]|0;
  $409 = $408 & 65535;
  $410 = ((($25)) + 8|0);
  $411 = HEAP16[$410>>1]|0;
  $412 = $411 << 16 >> 16;
  $413 = Math_imul($409, $412)|0;
  $414 = $413 >> 16;
  $415 = (($405) + ($414))|0;
  $27 = $415;
  $416 = $27;
  $417 = $416 << 1;
  $27 = $417;
  $418 = $27;
  $419 = $15;
  $420 = ((($419)) + 72|0);
  $421 = HEAP32[$420>>2]|0;
  $422 = $421 >> 16;
  $423 = ((($25)) + 6|0);
  $424 = HEAP16[$423>>1]|0;
  $425 = $424 << 16 >> 16;
  $426 = Math_imul($422, $425)|0;
  $427 = $15;
  $428 = ((($427)) + 72|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = $429 & 65535;
  $431 = ((($25)) + 6|0);
  $432 = HEAP16[$431>>1]|0;
  $433 = $432 << 16 >> 16;
  $434 = Math_imul($430, $433)|0;
  $435 = $434 >> 16;
  $436 = (($426) + ($435))|0;
  $437 = (($418) + ($436))|0;
  $27 = $437;
  $438 = $26;
  $439 = $27;
  $440 = $439 >> 16;
  $441 = ((($25)) + 6|0);
  $442 = HEAP16[$441>>1]|0;
  $443 = $442 << 16 >> 16;
  $444 = Math_imul($440, $443)|0;
  $445 = $27;
  $446 = $445 & 65535;
  $447 = ((($25)) + 6|0);
  $448 = HEAP16[$447>>1]|0;
  $449 = $448 << 16 >> 16;
  $450 = Math_imul($446, $449)|0;
  $451 = $450 >> 16;
  $452 = (($444) + ($451))|0;
  $453 = (($438) + ($452))|0;
  $26 = $453;
  $454 = $15;
  $455 = ((($454)) + 96|0);
  $456 = HEAP32[$455>>2]|0;
  $457 = $456 >> 16;
  $458 = ((($25)) + 8|0);
  $459 = HEAP16[$458>>1]|0;
  $460 = $459 << 16 >> 16;
  $461 = Math_imul($457, $460)|0;
  $462 = $15;
  $463 = ((($462)) + 96|0);
  $464 = HEAP32[$463>>2]|0;
  $465 = $464 & 65535;
  $466 = ((($25)) + 8|0);
  $467 = HEAP16[$466>>1]|0;
  $468 = $467 << 16 >> 16;
  $469 = Math_imul($465, $468)|0;
  $470 = $469 >> 16;
  $471 = (($461) + ($470))|0;
  $27 = $471;
  $472 = $26;
  $473 = $27;
  $474 = $473 >> 16;
  $475 = ((($25)) + 8|0);
  $476 = HEAP16[$475>>1]|0;
  $477 = $476 << 16 >> 16;
  $478 = Math_imul($474, $477)|0;
  $479 = $27;
  $480 = $479 & 65535;
  $481 = ((($25)) + 8|0);
  $482 = HEAP16[$481>>1]|0;
  $483 = $482 << 16 >> 16;
  $484 = Math_imul($480, $483)|0;
  $485 = $484 >> 16;
  $486 = (($478) + ($485))|0;
  $487 = (($472) + ($486))|0;
  $26 = $487;
  $488 = $26;
  $489 = $12;
  $490 = HEAP32[$489>>2]|0;
  $491 = ($488|0)<($490|0);
  if ($491) {
   $492 = $26;
   $493 = $12;
   HEAP32[$493>>2] = $492;
   $494 = $22;
   $495 = $494&255;
   $496 = $11;
   HEAP8[$496>>0] = $495;
   $497 = $23;
   $498 = $13;
   HEAP32[$498>>2] = $497;
  }
  $499 = $24;
  $500 = ((($499)) + 5|0);
  $24 = $500;
  $501 = $22;
  $502 = (($501) + 1)|0;
  $22 = $502;
 }
 STACKTOP = sp;return;
}
function _silk_process_NLSFs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $12 = sp + 96|0;
 $13 = sp + 64|0;
 $14 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $4;
 $16 = ((($15)) + 4556|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 $19 = $18 << 16 >> 16;
 $20 = Math_imul(-5, $19)|0;
 $21 = $4;
 $22 = ((($21)) + 4556|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23&65535;
 $25 = $24 << 16 >> 16;
 $26 = ($25*59246)|0;
 $27 = $26 >> 16;
 $28 = (($20) + ($27))|0;
 $29 = (3146 + ($28))|0;
 $10 = $29;
 $30 = $4;
 $31 = ((($30)) + 4604|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(2);
 if ($33) {
  $34 = $10;
  $35 = $10;
  $36 = $35 >> 1;
  $37 = (($34) + ($36))|0;
  $10 = $37;
 }
 $38 = $6;
 $39 = $4;
 $40 = ((($39)) + 4664|0);
 $41 = HEAP32[$40>>2]|0;
 _silk_NLSF_VQ_weights_laroia($13,$38,$41);
 $42 = $4;
 $43 = ((($42)) + 4656|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(1);
 if ($45) {
  $46 = $4;
  $47 = ((($46)) + 4768|0);
  $48 = ((($47)) + 31|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)<(4);
  $53 = $51;
 } else {
  $53 = 0;
 }
 $52 = $53&1;
 $9 = $52;
 $54 = $9;
 $55 = ($54|0)!=(0);
 L7: do {
  if ($55) {
   $56 = $7;
   $57 = $6;
   $58 = $4;
   $59 = ((($58)) + 4768|0);
   $60 = ((($59)) + 31|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 << 24 >> 24;
   $63 = $4;
   $64 = ((($63)) + 4664|0);
   $65 = HEAP32[$64>>2]|0;
   _silk_interpolate($12,$56,$57,$62,$65);
   $66 = $4;
   $67 = ((($66)) + 4664|0);
   $68 = HEAP32[$67>>2]|0;
   _silk_NLSF_VQ_weights_laroia($14,$12,$68);
   $69 = $4;
   $70 = ((($69)) + 4768|0);
   $71 = ((($70)) + 31|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = $73 << 16 >> 16;
   $75 = $4;
   $76 = ((($75)) + 4768|0);
   $77 = ((($76)) + 31|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78 << 24 >> 24;
   $80 = $79 << 16 >> 16;
   $81 = Math_imul($74, $80)|0;
   $82 = $81 << 11;
   $11 = $82;
   $8 = 0;
   while(1) {
    $83 = $8;
    $84 = $4;
    $85 = ((($84)) + 4664|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($83|0)<($86|0);
    if (!($87)) {
     break L7;
    }
    $88 = $8;
    $89 = (($13) + ($88<<1)|0);
    $90 = HEAP16[$89>>1]|0;
    $91 = $90 << 16 >> 16;
    $92 = $91 >> 1;
    $93 = $8;
    $94 = (($14) + ($93<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95 << 16 >> 16;
    $97 = $96 >> 16;
    $98 = $11;
    $99 = $98&65535;
    $100 = $99 << 16 >> 16;
    $101 = Math_imul($97, $100)|0;
    $102 = $8;
    $103 = (($14) + ($102<<1)|0);
    $104 = HEAP16[$103>>1]|0;
    $105 = $104 << 16 >> 16;
    $106 = $105 & 65535;
    $107 = $11;
    $108 = $107&65535;
    $109 = $108 << 16 >> 16;
    $110 = Math_imul($106, $109)|0;
    $111 = $110 >> 16;
    $112 = (($101) + ($111))|0;
    $113 = (($92) + ($112))|0;
    $114 = $113&65535;
    $115 = $8;
    $116 = (($13) + ($115<<1)|0);
    HEAP16[$116>>1] = $114;
    $117 = $8;
    $118 = (($117) + 1)|0;
    $8 = $118;
   }
  }
 } while(0);
 $119 = $4;
 $120 = ((($119)) + 4768|0);
 $121 = ((($120)) + 8|0);
 $122 = $6;
 $123 = $4;
 $124 = ((($123)) + 4724|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $10;
 $127 = $4;
 $128 = ((($127)) + 4692|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = $4;
 $131 = ((($130)) + 4768|0);
 $132 = ((($131)) + 29|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133 << 24 >> 24;
 (_silk_NLSF_encode($121,$122,$125,$13,$126,$129,$134)|0);
 $135 = $5;
 $136 = ((($135)) + 32|0);
 $137 = $6;
 $138 = $4;
 $139 = ((($138)) + 4664|0);
 $140 = HEAP32[$139>>2]|0;
 _silk_NLSF2A($136,$137,$140);
 $141 = $9;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = $7;
  $144 = $6;
  $145 = $4;
  $146 = ((($145)) + 4768|0);
  $147 = ((($146)) + 31|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148 << 24 >> 24;
  $150 = $4;
  $151 = ((($150)) + 4664|0);
  $152 = HEAP32[$151>>2]|0;
  _silk_interpolate($12,$143,$144,$149,$152);
  $153 = $5;
  $154 = $4;
  $155 = ((($154)) + 4664|0);
  $156 = HEAP32[$155>>2]|0;
  _silk_NLSF2A($153,$12,$156);
  STACKTOP = sp;return;
 } else {
  $157 = $5;
  $158 = $5;
  $159 = ((($158)) + 32|0);
  $160 = $4;
  $161 = ((($160)) + 4664|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $162<<1;
  _memcpy(($157|0),($159|0),($163|0))|0;
  STACKTOP = sp;return;
 }
}
function _silk_A2NLSF($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $21 = sp + 52|0;
 $22 = sp + 16|0;
 $23 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$23>>2] = $21;
 $25 = ((($23)) + 4|0);
 HEAP32[$25>>2] = $22;
 $26 = $5;
 $27 = $26 >> 1;
 $9 = $27;
 $28 = $4;
 $29 = $9;
 _silk_A2NLSF_init($28,$21,$22,$29);
 $24 = $21;
 $30 = HEAP16[12731]|0;
 $31 = $30 << 16 >> 16;
 $12 = $31;
 $32 = $24;
 $33 = $12;
 $34 = $9;
 $35 = (_silk_A2NLSF_eval_poly($32,$33,$34)|0);
 $15 = $35;
 $36 = $15;
 $37 = ($36|0)<(0);
 if ($37) {
  $38 = $3;
  HEAP16[$38>>1] = 0;
  $24 = $22;
  $39 = $24;
  $40 = $12;
  $41 = $9;
  $42 = (_silk_A2NLSF_eval_poly($39,$40,$41)|0);
  $15 = $42;
  $10 = 1;
 } else {
  $10 = 0;
 }
 $7 = 1;
 $6 = 0;
 $18 = 0;
 L5: while(1) {
  $43 = $7;
  $44 = (25462 + ($43<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $13 = $46;
  $47 = $24;
  $48 = $13;
  $49 = $9;
  $50 = (_silk_A2NLSF_eval_poly($47,$48,$49)|0);
  $16 = $50;
  $51 = $15;
  $52 = ($51|0)<=(0);
  if ($52) {
   $53 = $16;
   $54 = $18;
   $55 = ($53|0)>=($54|0);
   if (!($55)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  do {
   if ((label|0) == 7) {
    label = 0;
    $56 = $15;
    $57 = ($56|0)>=(0);
    if ($57) {
     $58 = $16;
     $59 = $18;
     $60 = (0 - ($59))|0;
     $61 = ($58|0)<=($60|0);
     if ($61) {
      break;
     }
    }
    $152 = $7;
    $153 = (($152) + 1)|0;
    $7 = $153;
    $154 = $13;
    $12 = $154;
    $155 = $16;
    $15 = $155;
    $18 = 0;
    $156 = $7;
    $157 = ($156|0)>(128);
    if (!($157)) {
     continue L5;
    }
    $158 = $6;
    $159 = (($158) + 1)|0;
    $6 = $159;
    $160 = $6;
    $161 = ($160|0)>(30);
    if ($161) {
     break L5;
    }
    $184 = $4;
    $185 = $5;
    $186 = $6;
    $187 = (10 + ($186))|0;
    $188 = $187&65535;
    $189 = $188 << 16 >> 16;
    $190 = $6;
    $191 = $190&65535;
    $192 = $191 << 16 >> 16;
    $193 = Math_imul($189, $192)|0;
    $194 = (65536 - ($193))|0;
    _silk_bwexpander_32($184,$185,$194);
    $195 = $4;
    $196 = $9;
    _silk_A2NLSF_init($195,$21,$22,$196);
    $24 = $21;
    $197 = HEAP16[12731]|0;
    $198 = $197 << 16 >> 16;
    $12 = $198;
    $199 = $24;
    $200 = $12;
    $201 = $9;
    $202 = (_silk_A2NLSF_eval_poly($199,$200,$201)|0);
    $15 = $202;
    $203 = $15;
    $204 = ($203|0)<(0);
    if ($204) {
     $205 = $3;
     HEAP16[$205>>1] = 0;
     $24 = $22;
     $206 = $24;
     $207 = $12;
     $208 = $9;
     $209 = (_silk_A2NLSF_eval_poly($206,$207,$208)|0);
     $15 = $209;
     $10 = 1;
    } else {
     $10 = 0;
    }
    $7 = 1;
    continue L5;
   }
  } while(0);
  $62 = $16;
  $63 = ($62|0)==(0);
  if ($63) {
   $18 = 1;
  } else {
   $18 = 0;
  }
  $11 = -256;
  $8 = 0;
  while(1) {
   $64 = $8;
   $65 = ($64|0)<(3);
   if (!($65)) {
    break;
   }
   $66 = $12;
   $67 = $13;
   $68 = (($66) + ($67))|0;
   $69 = $68 >> 1;
   $70 = $12;
   $71 = $13;
   $72 = (($70) + ($71))|0;
   $73 = $72 & 1;
   $74 = (($69) + ($73))|0;
   $14 = $74;
   $75 = $24;
   $76 = $14;
   $77 = $9;
   $78 = (_silk_A2NLSF_eval_poly($75,$76,$77)|0);
   $17 = $78;
   $79 = $15;
   $80 = ($79|0)<=(0);
   $81 = $17;
   $82 = ($81|0)>=(0);
   $or$cond = $80 & $82;
   if ($or$cond) {
    label = 16;
   } else {
    $83 = $15;
    $84 = ($83|0)>=(0);
    $85 = $17;
    $86 = ($85|0)<=(0);
    $or$cond3 = $84 & $86;
    if ($or$cond3) {
     label = 16;
    } else {
     $89 = $14;
     $12 = $89;
     $90 = $17;
     $15 = $90;
     $91 = $11;
     $92 = $8;
     $93 = 128 >> $92;
     $94 = (($91) + ($93))|0;
     $11 = $94;
    }
   }
   if ((label|0) == 16) {
    label = 0;
    $87 = $14;
    $13 = $87;
    $88 = $17;
    $16 = $88;
   }
   $95 = $8;
   $96 = (($95) + 1)|0;
   $8 = $96;
  }
  $97 = $15;
  $98 = ($97|0)>(0);
  $99 = $15;
  $100 = (0 - ($99))|0;
  $101 = $98 ? $99 : $100;
  $102 = ($101|0)<(65536);
  $103 = $15;
  if ($102) {
   $104 = $16;
   $105 = (($103) - ($104))|0;
   $20 = $105;
   $106 = $15;
   $107 = $106 << 5;
   $108 = $20;
   $109 = $108 >> 1;
   $110 = (($107) + ($109))|0;
   $19 = $110;
   $111 = $20;
   $112 = ($111|0)!=(0);
   if ($112) {
    $113 = $19;
    $114 = $20;
    $115 = (($113|0) / ($114|0))&-1;
    $116 = $11;
    $117 = (($116) + ($115))|0;
    $11 = $117;
   }
  } else {
   $118 = $15;
   $119 = $16;
   $120 = (($118) - ($119))|0;
   $121 = $120 >> 5;
   $122 = (($103|0) / ($121|0))&-1;
   $123 = $11;
   $124 = (($123) + ($122))|0;
   $11 = $124;
  }
  $125 = $7;
  $126 = $125 << 8;
  $127 = $11;
  $128 = (($126) + ($127))|0;
  $129 = (_silk_min_32_467($128,32767)|0);
  $130 = $129&65535;
  $131 = $3;
  $132 = $10;
  $133 = (($131) + ($132<<1)|0);
  HEAP16[$133>>1] = $130;
  $134 = $10;
  $135 = (($134) + 1)|0;
  $10 = $135;
  $136 = $10;
  $137 = $5;
  $138 = ($136|0)>=($137|0);
  if ($138) {
   label = 34;
   break;
  }
  $139 = $10;
  $140 = $139 & 1;
  $141 = (($23) + ($140<<2)|0);
  $142 = HEAP32[$141>>2]|0;
  $24 = $142;
  $143 = $7;
  $144 = (($143) - 1)|0;
  $145 = (25462 + ($144<<1)|0);
  $146 = HEAP16[$145>>1]|0;
  $147 = $146 << 16 >> 16;
  $12 = $147;
  $148 = $10;
  $149 = $148 & 2;
  $150 = (1 - ($149))|0;
  $151 = $150 << 12;
  $15 = $151;
 }
 if ((label|0) == 34) {
  STACKTOP = sp;return;
 }
 $162 = $5;
 $163 = (($162) + 1)|0;
 $164 = (32768 / ($163|0))&-1;
 $165 = $164&65535;
 $166 = $3;
 HEAP16[$166>>1] = $165;
 $7 = 1;
 while(1) {
  $167 = $7;
  $168 = $5;
  $169 = ($167|0)<($168|0);
  if (!($169)) {
   break;
  }
  $170 = $7;
  $171 = (($170) + 1)|0;
  $172 = $171&65535;
  $173 = $172 << 16 >> 16;
  $174 = $3;
  $175 = HEAP16[$174>>1]|0;
  $176 = $175 << 16 >> 16;
  $177 = Math_imul($173, $176)|0;
  $178 = $177&65535;
  $179 = $3;
  $180 = $7;
  $181 = (($179) + ($180<<1)|0);
  HEAP16[$181>>1] = $178;
  $182 = $7;
  $183 = (($182) + 1)|0;
  $7 = $183;
 }
 STACKTOP = sp;return;
}
function _silk_A2NLSF_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$11>>2] = 65536;
 $12 = $6;
 $13 = $7;
 $14 = (($12) + ($13<<2)|0);
 HEAP32[$14>>2] = 65536;
 $8 = 0;
 while(1) {
  $15 = $8;
  $16 = $7;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = $7;
  $20 = $8;
  $21 = (($19) - ($20))|0;
  $22 = (($21) - 1)|0;
  $23 = (($18) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (0 - ($24))|0;
  $26 = $4;
  $27 = $7;
  $28 = $8;
  $29 = (($27) + ($28))|0;
  $30 = (($26) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($25) - ($31))|0;
  $33 = $5;
  $34 = $8;
  $35 = (($33) + ($34<<2)|0);
  HEAP32[$35>>2] = $32;
  $36 = $4;
  $37 = $7;
  $38 = $8;
  $39 = (($37) - ($38))|0;
  $40 = (($39) - 1)|0;
  $41 = (($36) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (0 - ($42))|0;
  $44 = $4;
  $45 = $7;
  $46 = $8;
  $47 = (($45) + ($46))|0;
  $48 = (($44) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($43) + ($49))|0;
  $51 = $6;
  $52 = $8;
  $53 = (($51) + ($52<<2)|0);
  HEAP32[$53>>2] = $50;
  $54 = $8;
  $55 = (($54) + 1)|0;
  $8 = $55;
 }
 $56 = $7;
 $8 = $56;
 while(1) {
  $57 = $8;
  $58 = ($57|0)>(0);
  $59 = $5;
  if (!($58)) {
   break;
  }
  $60 = $8;
  $61 = (($59) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $5;
  $64 = $8;
  $65 = (($64) - 1)|0;
  $66 = (($63) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) - ($62))|0;
  HEAP32[$66>>2] = $68;
  $69 = $6;
  $70 = $8;
  $71 = (($69) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $6;
  $74 = $8;
  $75 = (($74) - 1)|0;
  $76 = (($73) + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($72))|0;
  HEAP32[$76>>2] = $78;
  $79 = $8;
  $80 = (($79) + -1)|0;
  $8 = $80;
 }
 $81 = $7;
 _silk_A2NLSF_trans_poly($59,$81);
 $82 = $6;
 $83 = $7;
 _silk_A2NLSF_trans_poly($82,$83);
 STACKTOP = sp;return;
}
function _silk_A2NLSF_eval_poly($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = $5;
 $11 = (($9) + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $4;
 $14 = $13 << 4;
 $7 = $14;
 $15 = $5;
 $16 = (8)==($15|0);
 $17 = $16 ^ 1;
 $18 = $17 ^ 1;
 if ($18) {
  $19 = $3;
  $20 = ((($19)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $8;
  $23 = $22 >> 16;
  $24 = $7;
  $25 = $24&65535;
  $26 = $25 << 16 >> 16;
  $27 = Math_imul($23, $26)|0;
  $28 = $8;
  $29 = $28 & 65535;
  $30 = $7;
  $31 = $30&65535;
  $32 = $31 << 16 >> 16;
  $33 = Math_imul($29, $32)|0;
  $34 = $33 >> 16;
  $35 = (($27) + ($34))|0;
  $36 = (($21) + ($35))|0;
  $37 = $8;
  $38 = $7;
  $39 = $38 >> 15;
  $40 = (($39) + 1)|0;
  $41 = $40 >> 1;
  $42 = Math_imul($37, $41)|0;
  $43 = (($36) + ($42))|0;
  $8 = $43;
  $44 = $3;
  $45 = ((($44)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $8;
  $48 = $47 >> 16;
  $49 = $7;
  $50 = $49&65535;
  $51 = $50 << 16 >> 16;
  $52 = Math_imul($48, $51)|0;
  $53 = $8;
  $54 = $53 & 65535;
  $55 = $7;
  $56 = $55&65535;
  $57 = $56 << 16 >> 16;
  $58 = Math_imul($54, $57)|0;
  $59 = $58 >> 16;
  $60 = (($52) + ($59))|0;
  $61 = (($46) + ($60))|0;
  $62 = $8;
  $63 = $7;
  $64 = $63 >> 15;
  $65 = (($64) + 1)|0;
  $66 = $65 >> 1;
  $67 = Math_imul($62, $66)|0;
  $68 = (($61) + ($67))|0;
  $8 = $68;
  $69 = $3;
  $70 = ((($69)) + 20|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $8;
  $73 = $72 >> 16;
  $74 = $7;
  $75 = $74&65535;
  $76 = $75 << 16 >> 16;
  $77 = Math_imul($73, $76)|0;
  $78 = $8;
  $79 = $78 & 65535;
  $80 = $7;
  $81 = $80&65535;
  $82 = $81 << 16 >> 16;
  $83 = Math_imul($79, $82)|0;
  $84 = $83 >> 16;
  $85 = (($77) + ($84))|0;
  $86 = (($71) + ($85))|0;
  $87 = $8;
  $88 = $7;
  $89 = $88 >> 15;
  $90 = (($89) + 1)|0;
  $91 = $90 >> 1;
  $92 = Math_imul($87, $91)|0;
  $93 = (($86) + ($92))|0;
  $8 = $93;
  $94 = $3;
  $95 = ((($94)) + 16|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $8;
  $98 = $97 >> 16;
  $99 = $7;
  $100 = $99&65535;
  $101 = $100 << 16 >> 16;
  $102 = Math_imul($98, $101)|0;
  $103 = $8;
  $104 = $103 & 65535;
  $105 = $7;
  $106 = $105&65535;
  $107 = $106 << 16 >> 16;
  $108 = Math_imul($104, $107)|0;
  $109 = $108 >> 16;
  $110 = (($102) + ($109))|0;
  $111 = (($96) + ($110))|0;
  $112 = $8;
  $113 = $7;
  $114 = $113 >> 15;
  $115 = (($114) + 1)|0;
  $116 = $115 >> 1;
  $117 = Math_imul($112, $116)|0;
  $118 = (($111) + ($117))|0;
  $8 = $118;
  $119 = $3;
  $120 = ((($119)) + 12|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $8;
  $123 = $122 >> 16;
  $124 = $7;
  $125 = $124&65535;
  $126 = $125 << 16 >> 16;
  $127 = Math_imul($123, $126)|0;
  $128 = $8;
  $129 = $128 & 65535;
  $130 = $7;
  $131 = $130&65535;
  $132 = $131 << 16 >> 16;
  $133 = Math_imul($129, $132)|0;
  $134 = $133 >> 16;
  $135 = (($127) + ($134))|0;
  $136 = (($121) + ($135))|0;
  $137 = $8;
  $138 = $7;
  $139 = $138 >> 15;
  $140 = (($139) + 1)|0;
  $141 = $140 >> 1;
  $142 = Math_imul($137, $141)|0;
  $143 = (($136) + ($142))|0;
  $8 = $143;
  $144 = $3;
  $145 = ((($144)) + 8|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = $8;
  $148 = $147 >> 16;
  $149 = $7;
  $150 = $149&65535;
  $151 = $150 << 16 >> 16;
  $152 = Math_imul($148, $151)|0;
  $153 = $8;
  $154 = $153 & 65535;
  $155 = $7;
  $156 = $155&65535;
  $157 = $156 << 16 >> 16;
  $158 = Math_imul($154, $157)|0;
  $159 = $158 >> 16;
  $160 = (($152) + ($159))|0;
  $161 = (($146) + ($160))|0;
  $162 = $8;
  $163 = $7;
  $164 = $163 >> 15;
  $165 = (($164) + 1)|0;
  $166 = $165 >> 1;
  $167 = Math_imul($162, $166)|0;
  $168 = (($161) + ($167))|0;
  $8 = $168;
  $169 = $3;
  $170 = ((($169)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $8;
  $173 = $172 >> 16;
  $174 = $7;
  $175 = $174&65535;
  $176 = $175 << 16 >> 16;
  $177 = Math_imul($173, $176)|0;
  $178 = $8;
  $179 = $178 & 65535;
  $180 = $7;
  $181 = $180&65535;
  $182 = $181 << 16 >> 16;
  $183 = Math_imul($179, $182)|0;
  $184 = $183 >> 16;
  $185 = (($177) + ($184))|0;
  $186 = (($171) + ($185))|0;
  $187 = $8;
  $188 = $7;
  $189 = $188 >> 15;
  $190 = (($189) + 1)|0;
  $191 = $190 >> 1;
  $192 = Math_imul($187, $191)|0;
  $193 = (($186) + ($192))|0;
  $8 = $193;
  $194 = $3;
  $195 = HEAP32[$194>>2]|0;
  $196 = $8;
  $197 = $196 >> 16;
  $198 = $7;
  $199 = $198&65535;
  $200 = $199 << 16 >> 16;
  $201 = Math_imul($197, $200)|0;
  $202 = $8;
  $203 = $202 & 65535;
  $204 = $7;
  $205 = $204&65535;
  $206 = $205 << 16 >> 16;
  $207 = Math_imul($203, $206)|0;
  $208 = $207 >> 16;
  $209 = (($201) + ($208))|0;
  $210 = (($195) + ($209))|0;
  $211 = $8;
  $212 = $7;
  $213 = $212 >> 15;
  $214 = (($213) + 1)|0;
  $215 = $214 >> 1;
  $216 = Math_imul($211, $215)|0;
  $217 = (($210) + ($216))|0;
  $8 = $217;
  $250 = $8;
  STACKTOP = sp;return ($250|0);
 }
 $218 = $5;
 $219 = (($218) - 1)|0;
 $6 = $219;
 while(1) {
  $220 = $6;
  $221 = ($220|0)>=(0);
  if (!($221)) {
   break;
  }
  $222 = $3;
  $223 = $6;
  $224 = (($222) + ($223<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $8;
  $227 = $226 >> 16;
  $228 = $7;
  $229 = $228&65535;
  $230 = $229 << 16 >> 16;
  $231 = Math_imul($227, $230)|0;
  $232 = $8;
  $233 = $232 & 65535;
  $234 = $7;
  $235 = $234&65535;
  $236 = $235 << 16 >> 16;
  $237 = Math_imul($233, $236)|0;
  $238 = $237 >> 16;
  $239 = (($231) + ($238))|0;
  $240 = (($225) + ($239))|0;
  $241 = $8;
  $242 = $7;
  $243 = $242 >> 15;
  $244 = (($243) + 1)|0;
  $245 = $244 >> 1;
  $246 = Math_imul($241, $245)|0;
  $247 = (($240) + ($246))|0;
  $8 = $247;
  $248 = $6;
  $249 = (($248) + -1)|0;
  $6 = $249;
 }
 $250 = $8;
 STACKTOP = sp;return ($250|0);
}
function _silk_min_32_467($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_A2NLSF_trans_poly($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 2;
 while(1) {
  $6 = $4;
  $7 = $3;
  $8 = ($6|0)<=($7|0);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $5 = $9;
  while(1) {
   $10 = $5;
   $11 = $4;
   $12 = ($10|0)>($11|0);
   $13 = $2;
   if (!($12)) {
    break;
   }
   $14 = $5;
   $15 = (($13) + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $2;
   $18 = $5;
   $19 = (($18) - 2)|0;
   $20 = (($17) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) - ($16))|0;
   HEAP32[$20>>2] = $22;
   $23 = $5;
   $24 = (($23) + -1)|0;
   $5 = $24;
  }
  $25 = $4;
  $26 = (($13) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 << 1;
  $29 = $2;
  $30 = $4;
  $31 = (($30) - 2)|0;
  $32 = (($29) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) - ($28))|0;
  HEAP32[$32>>2] = $34;
  $35 = $4;
  $36 = (($35) + 1)|0;
  $4 = $36;
 }
 STACKTOP = sp;return;
}
function _silk_ana_filt_bank_1($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $17 = $9;
 $18 = $17 >> 1;
 $11 = $18;
 $10 = 0;
 while(1) {
  $19 = $10;
  $20 = $11;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $5;
  $23 = $10;
  $24 = $23<<1;
  $25 = (($22) + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $27 << 10;
  $12 = $28;
  $29 = $12;
  $30 = $6;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) - ($31))|0;
  $14 = $32;
  $33 = $14;
  $34 = $14;
  $35 = $34 >> 16;
  $36 = -24290 << 16 >> 16;
  $37 = Math_imul($35, $36)|0;
  $38 = $14;
  $39 = $38 & 65535;
  $40 = -24290 << 16 >> 16;
  $41 = Math_imul($39, $40)|0;
  $42 = $41 >> 16;
  $43 = (($37) + ($42))|0;
  $44 = (($33) + ($43))|0;
  $13 = $44;
  $45 = $6;
  $46 = HEAP32[$45>>2]|0;
  $47 = $13;
  $48 = (($46) + ($47))|0;
  $15 = $48;
  $49 = $12;
  $50 = $13;
  $51 = (($49) + ($50))|0;
  $52 = $6;
  HEAP32[$52>>2] = $51;
  $53 = $5;
  $54 = $10;
  $55 = $54<<1;
  $56 = (($55) + 1)|0;
  $57 = (($53) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = $59 << 10;
  $12 = $60;
  $61 = $12;
  $62 = $6;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) - ($64))|0;
  $14 = $65;
  $66 = $14;
  $67 = $66 >> 16;
  $68 = 10788 << 16 >> 16;
  $69 = Math_imul($67, $68)|0;
  $70 = $14;
  $71 = $70 & 65535;
  $72 = 10788 << 16 >> 16;
  $73 = Math_imul($71, $72)|0;
  $74 = $73 >> 16;
  $75 = (($69) + ($74))|0;
  $13 = $75;
  $76 = $6;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $13;
  $80 = (($78) + ($79))|0;
  $16 = $80;
  $81 = $12;
  $82 = $13;
  $83 = (($81) + ($82))|0;
  $84 = $6;
  $85 = ((($84)) + 4|0);
  HEAP32[$85>>2] = $83;
  $86 = $16;
  $87 = $15;
  $88 = (($86) + ($87))|0;
  $89 = $88 >> 10;
  $90 = (($89) + 1)|0;
  $91 = $90 >> 1;
  $92 = ($91|0)>(32767);
  if ($92) {
   $107 = 32767;
  } else {
   $93 = $16;
   $94 = $15;
   $95 = (($93) + ($94))|0;
   $96 = $95 >> 10;
   $97 = (($96) + 1)|0;
   $98 = $97 >> 1;
   $99 = ($98|0)<(-32768);
   if ($99) {
    $107 = -32768;
   } else {
    $100 = $16;
    $101 = $15;
    $102 = (($100) + ($101))|0;
    $103 = $102 >> 10;
    $104 = (($103) + 1)|0;
    $105 = $104 >> 1;
    $107 = $105;
   }
  }
  $106 = $107&65535;
  $108 = $7;
  $109 = $10;
  $110 = (($108) + ($109<<1)|0);
  HEAP16[$110>>1] = $106;
  $111 = $16;
  $112 = $15;
  $113 = (($111) - ($112))|0;
  $114 = $113 >> 10;
  $115 = (($114) + 1)|0;
  $116 = $115 >> 1;
  $117 = ($116|0)>(32767);
  if ($117) {
   $132 = 32767;
  } else {
   $118 = $16;
   $119 = $15;
   $120 = (($118) - ($119))|0;
   $121 = $120 >> 10;
   $122 = (($121) + 1)|0;
   $123 = $122 >> 1;
   $124 = ($123|0)<(-32768);
   if ($124) {
    $132 = -32768;
   } else {
    $125 = $16;
    $126 = $15;
    $127 = (($125) - ($126))|0;
    $128 = $127 >> 10;
    $129 = (($128) + 1)|0;
    $130 = $129 >> 1;
    $132 = $130;
   }
  }
  $131 = $132&65535;
  $133 = $8;
  $134 = $10;
  $135 = (($133) + ($134<<1)|0);
  HEAP16[$135>>1] = $131;
  $136 = $10;
  $137 = (($136) + 1)|0;
  $10 = $137;
 }
 STACKTOP = sp;return;
}
function _silk_biquad_alt($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 $23 = (0 - ($22))|0;
 $24 = $23 & 16383;
 $17 = $24;
 $25 = $9;
 $26 = HEAP32[$25>>2]|0;
 $27 = (0 - ($26))|0;
 $28 = $27 >> 14;
 $16 = $28;
 $29 = $9;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (0 - ($31))|0;
 $33 = $32 & 16383;
 $19 = $33;
 $34 = $9;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (0 - ($36))|0;
 $38 = $37 >> 14;
 $18 = $38;
 $14 = 0;
 while(1) {
  $39 = $14;
  $40 = $12;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $7;
  $43 = $14;
  $44 = $13;
  $45 = Math_imul($43, $44)|0;
  $46 = (($42) + ($45<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $15 = $48;
  $49 = $10;
  $50 = HEAP32[$49>>2]|0;
  $51 = $8;
  $52 = HEAP32[$51>>2]|0;
  $53 = $52 >> 16;
  $54 = $15;
  $55 = $54&65535;
  $56 = $55 << 16 >> 16;
  $57 = Math_imul($53, $56)|0;
  $58 = $8;
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 & 65535;
  $61 = $15;
  $62 = $61&65535;
  $63 = $62 << 16 >> 16;
  $64 = Math_imul($60, $63)|0;
  $65 = $64 >> 16;
  $66 = (($57) + ($65))|0;
  $67 = (($50) + ($66))|0;
  $68 = $67 << 2;
  $20 = $68;
  $69 = $10;
  $70 = ((($69)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $20;
  $73 = $72 >> 16;
  $74 = $17;
  $75 = $74&65535;
  $76 = $75 << 16 >> 16;
  $77 = Math_imul($73, $76)|0;
  $78 = $20;
  $79 = $78 & 65535;
  $80 = $17;
  $81 = $80&65535;
  $82 = $81 << 16 >> 16;
  $83 = Math_imul($79, $82)|0;
  $84 = $83 >> 16;
  $85 = (($77) + ($84))|0;
  $86 = $85 >> 13;
  $87 = (($86) + 1)|0;
  $88 = $87 >> 1;
  $89 = (($71) + ($88))|0;
  $90 = $10;
  HEAP32[$90>>2] = $89;
  $91 = $10;
  $92 = HEAP32[$91>>2]|0;
  $93 = $20;
  $94 = $93 >> 16;
  $95 = $16;
  $96 = $95&65535;
  $97 = $96 << 16 >> 16;
  $98 = Math_imul($94, $97)|0;
  $99 = $20;
  $100 = $99 & 65535;
  $101 = $16;
  $102 = $101&65535;
  $103 = $102 << 16 >> 16;
  $104 = Math_imul($100, $103)|0;
  $105 = $104 >> 16;
  $106 = (($98) + ($105))|0;
  $107 = (($92) + ($106))|0;
  $108 = $10;
  HEAP32[$108>>2] = $107;
  $109 = $10;
  $110 = HEAP32[$109>>2]|0;
  $111 = $8;
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 >> 16;
  $115 = $15;
  $116 = $115&65535;
  $117 = $116 << 16 >> 16;
  $118 = Math_imul($114, $117)|0;
  $119 = $8;
  $120 = ((($119)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 & 65535;
  $123 = $15;
  $124 = $123&65535;
  $125 = $124 << 16 >> 16;
  $126 = Math_imul($122, $125)|0;
  $127 = $126 >> 16;
  $128 = (($118) + ($127))|0;
  $129 = (($110) + ($128))|0;
  $130 = $10;
  HEAP32[$130>>2] = $129;
  $131 = $20;
  $132 = $131 >> 16;
  $133 = $19;
  $134 = $133&65535;
  $135 = $134 << 16 >> 16;
  $136 = Math_imul($132, $135)|0;
  $137 = $20;
  $138 = $137 & 65535;
  $139 = $19;
  $140 = $139&65535;
  $141 = $140 << 16 >> 16;
  $142 = Math_imul($138, $141)|0;
  $143 = $142 >> 16;
  $144 = (($136) + ($143))|0;
  $145 = $144 >> 13;
  $146 = (($145) + 1)|0;
  $147 = $146 >> 1;
  $148 = $10;
  $149 = ((($148)) + 4|0);
  HEAP32[$149>>2] = $147;
  $150 = $10;
  $151 = ((($150)) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $20;
  $154 = $153 >> 16;
  $155 = $18;
  $156 = $155&65535;
  $157 = $156 << 16 >> 16;
  $158 = Math_imul($154, $157)|0;
  $159 = $20;
  $160 = $159 & 65535;
  $161 = $18;
  $162 = $161&65535;
  $163 = $162 << 16 >> 16;
  $164 = Math_imul($160, $163)|0;
  $165 = $164 >> 16;
  $166 = (($158) + ($165))|0;
  $167 = (($152) + ($166))|0;
  $168 = $10;
  $169 = ((($168)) + 4|0);
  HEAP32[$169>>2] = $167;
  $170 = $10;
  $171 = ((($170)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $8;
  $174 = ((($173)) + 8|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $175 >> 16;
  $177 = $15;
  $178 = $177&65535;
  $179 = $178 << 16 >> 16;
  $180 = Math_imul($176, $179)|0;
  $181 = $8;
  $182 = ((($181)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183 & 65535;
  $185 = $15;
  $186 = $185&65535;
  $187 = $186 << 16 >> 16;
  $188 = Math_imul($184, $187)|0;
  $189 = $188 >> 16;
  $190 = (($180) + ($189))|0;
  $191 = (($172) + ($190))|0;
  $192 = $10;
  $193 = ((($192)) + 4|0);
  HEAP32[$193>>2] = $191;
  $194 = $20;
  $195 = (($194) + 16384)|0;
  $196 = (($195) - 1)|0;
  $197 = $196 >> 14;
  $198 = ($197|0)>(32767);
  if ($198) {
   $209 = 32767;
  } else {
   $199 = $20;
   $200 = (($199) + 16384)|0;
   $201 = (($200) - 1)|0;
   $202 = $201 >> 14;
   $203 = ($202|0)<(-32768);
   if ($203) {
    $209 = -32768;
   } else {
    $204 = $20;
    $205 = (($204) + 16384)|0;
    $206 = (($205) - 1)|0;
    $207 = $206 >> 14;
    $209 = $207;
   }
  }
  $208 = $209&65535;
  $210 = $11;
  $211 = $14;
  $212 = $13;
  $213 = Math_imul($211, $212)|0;
  $214 = (($210) + ($213<<1)|0);
  HEAP16[$214>>1] = $208;
  $215 = $14;
  $216 = (($215) + 1)|0;
  $14 = $216;
 }
 STACKTOP = sp;return;
}
function _silk_bwexpander_32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = (($8) - 65536)|0;
 $7 = $9;
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $4;
  $12 = (($11) - 1)|0;
  $13 = ($10|0)<($12|0);
  $14 = $5;
  $15 = $14 >> 16;
  $16 = $3;
  if (!($13)) {
   break;
  }
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  $21 = $20 << 16 >> 16;
  $22 = Math_imul($15, $21)|0;
  $23 = $5;
  $24 = $23 & 65535;
  $25 = $3;
  $26 = $6;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28&65535;
  $30 = $29 << 16 >> 16;
  $31 = Math_imul($24, $30)|0;
  $32 = $31 >> 16;
  $33 = (($22) + ($32))|0;
  $34 = $5;
  $35 = $3;
  $36 = $6;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 >> 15;
  $40 = (($39) + 1)|0;
  $41 = $40 >> 1;
  $42 = Math_imul($34, $41)|0;
  $43 = (($33) + ($42))|0;
  $44 = $3;
  $45 = $6;
  $46 = (($44) + ($45<<2)|0);
  HEAP32[$46>>2] = $43;
  $47 = $5;
  $48 = $7;
  $49 = Math_imul($47, $48)|0;
  $50 = $49 >> 15;
  $51 = (($50) + 1)|0;
  $52 = $51 >> 1;
  $53 = $5;
  $54 = (($53) + ($52))|0;
  $5 = $54;
  $55 = $6;
  $56 = (($55) + 1)|0;
  $6 = $56;
 }
 $57 = $4;
 $58 = (($57) - 1)|0;
 $59 = (($16) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60&65535;
 $62 = $61 << 16 >> 16;
 $63 = Math_imul($15, $62)|0;
 $64 = $5;
 $65 = $64 & 65535;
 $66 = $3;
 $67 = $4;
 $68 = (($67) - 1)|0;
 $69 = (($66) + ($68<<2)|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70&65535;
 $72 = $71 << 16 >> 16;
 $73 = Math_imul($65, $72)|0;
 $74 = $73 >> 16;
 $75 = (($63) + ($74))|0;
 $76 = $5;
 $77 = $3;
 $78 = $4;
 $79 = (($78) - 1)|0;
 $80 = (($77) + ($79<<2)|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $81 >> 15;
 $83 = (($82) + 1)|0;
 $84 = $83 >> 1;
 $85 = Math_imul($76, $84)|0;
 $86 = (($75) + ($85))|0;
 $87 = $3;
 $88 = $4;
 $89 = (($88) - 1)|0;
 $90 = (($87) + ($89<<2)|0);
 HEAP32[$90>>2] = $86;
 STACKTOP = sp;return;
}
function _silk_bwexpander($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = (($8) - 65536)|0;
 $7 = $9;
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $4;
  $12 = (($11) - 1)|0;
  $13 = ($10|0)<($12|0);
  $14 = $5;
  $15 = $3;
  if (!($13)) {
   break;
  }
  $16 = $6;
  $17 = (($15) + ($16<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = Math_imul($14, $19)|0;
  $21 = $20 >> 15;
  $22 = (($21) + 1)|0;
  $23 = $22 >> 1;
  $24 = $23&65535;
  $25 = $3;
  $26 = $6;
  $27 = (($25) + ($26<<1)|0);
  HEAP16[$27>>1] = $24;
  $28 = $5;
  $29 = $7;
  $30 = Math_imul($28, $29)|0;
  $31 = $30 >> 15;
  $32 = (($31) + 1)|0;
  $33 = $32 >> 1;
  $34 = $5;
  $35 = (($34) + ($33))|0;
  $5 = $35;
  $36 = $6;
  $37 = (($36) + 1)|0;
  $6 = $37;
 }
 $38 = $4;
 $39 = (($38) - 1)|0;
 $40 = (($15) + ($39<<1)|0);
 $41 = HEAP16[$40>>1]|0;
 $42 = $41 << 16 >> 16;
 $43 = Math_imul($14, $42)|0;
 $44 = $43 >> 15;
 $45 = (($44) + 1)|0;
 $46 = $45 >> 1;
 $47 = $46&65535;
 $48 = $3;
 $49 = $4;
 $50 = (($49) - 1)|0;
 $51 = (($48) + ($50<<1)|0);
 HEAP16[$51>>1] = $47;
 STACKTOP = sp;return;
}
function _silk_decode_pitch($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $8;
 $17 = ($16|0)==(8);
 $18 = $9;
 $19 = ($18|0)==(4);
 do {
  if ($17) {
   if ($19) {
    $15 = 30771;
    $14 = 11;
    break;
   } else {
    $15 = 30737;
    $14 = 3;
    break;
   }
  } else {
   if ($19) {
    $15 = 30815;
    $14 = 34;
    break;
   } else {
    $15 = 30743;
    $14 = 12;
    break;
   }
  }
 } while(0);
 $20 = $8;
 $21 = $20&65535;
 $22 = $21 << 16 >> 16;
 $23 = $22<<1;
 $12 = $23;
 $24 = $8;
 $25 = $24&65535;
 $26 = $25 << 16 >> 16;
 $27 = ($26*18)|0;
 $13 = $27;
 $28 = $12;
 $29 = $5;
 $30 = $29 << 16 >> 16;
 $31 = (($28) + ($30))|0;
 $10 = $31;
 $11 = 0;
 while(1) {
  $32 = $11;
  $33 = $9;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $10;
  $36 = $15;
  $37 = $11;
  $38 = $14;
  $39 = Math_imul($37, $38)|0;
  $40 = $6;
  $41 = $40 << 24 >> 24;
  $42 = (($39) + ($41))|0;
  $43 = (($36) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = (($35) + ($45))|0;
  $47 = $7;
  $48 = $11;
  $49 = (($47) + ($48<<2)|0);
  HEAP32[$49>>2] = $46;
  $50 = $12;
  $51 = $13;
  $52 = ($50|0)>($51|0);
  $53 = $7;
  $54 = $11;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  do {
   if ($52) {
    $57 = $12;
    $58 = ($56|0)>($57|0);
    if ($58) {
     $59 = $12;
     $88 = $59;
     break;
    }
    $60 = $7;
    $61 = $11;
    $62 = (($60) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $13;
    $65 = ($63|0)<($64|0);
    if ($65) {
     $66 = $13;
     $88 = $66;
     break;
    } else {
     $67 = $7;
     $68 = $11;
     $69 = (($67) + ($68<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $88 = $70;
     break;
    }
   } else {
    $71 = $13;
    $72 = ($56|0)>($71|0);
    if ($72) {
     $73 = $13;
     $88 = $73;
     break;
    }
    $74 = $7;
    $75 = $11;
    $76 = (($74) + ($75<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = $12;
    $79 = ($77|0)<($78|0);
    if ($79) {
     $80 = $12;
     $88 = $80;
     break;
    } else {
     $81 = $7;
     $82 = $11;
     $83 = (($81) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $88 = $84;
     break;
    }
   }
  } while(0);
  $85 = $7;
  $86 = $11;
  $87 = (($85) + ($86<<2)|0);
  HEAP32[$87>>2] = $88;
  $89 = $11;
  $90 = (($89) + 1)|0;
  $11 = $90;
 }
 STACKTOP = sp;return;
}
function _silk_inner_prod_aligned_scale($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $7;
  $12 = ($10|0)<($11|0);
  $13 = $9;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = $8;
  $16 = (($14) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = $5;
  $20 = $8;
  $21 = (($19) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = Math_imul($18, $23)|0;
  $25 = $6;
  $26 = $24 >> $25;
  $27 = (($13) + ($26))|0;
  $9 = $27;
  $28 = $8;
  $29 = (($28) + 1)|0;
  $8 = $29;
 }
 STACKTOP = sp;return ($13|0);
}
function _silk_LPC_analysis_filter($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $10;
 $13 = $17;
 while(1) {
  $18 = $13;
  $19 = $9;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $7;
  $22 = $13;
  $23 = (($22) - 1)|0;
  $24 = (($21) + ($23<<1)|0);
  $16 = $24;
  $25 = $16;
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $8;
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = Math_imul($27, $30)|0;
  $14 = $31;
  $32 = $14;
  $33 = $16;
  $34 = ((($33)) + -2|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $8;
  $38 = ((($37)) + 2|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = Math_imul($36, $40)|0;
  $42 = (($32) + ($41))|0;
  $14 = $42;
  $43 = $14;
  $44 = $16;
  $45 = ((($44)) + -4|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $8;
  $49 = ((($48)) + 4|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = Math_imul($47, $51)|0;
  $53 = (($43) + ($52))|0;
  $14 = $53;
  $54 = $14;
  $55 = $16;
  $56 = ((($55)) + -6|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = $57 << 16 >> 16;
  $59 = $8;
  $60 = ((($59)) + 6|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = Math_imul($58, $62)|0;
  $64 = (($54) + ($63))|0;
  $14 = $64;
  $65 = $14;
  $66 = $16;
  $67 = ((($66)) + -8|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = $8;
  $71 = ((($70)) + 8|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = Math_imul($69, $73)|0;
  $75 = (($65) + ($74))|0;
  $14 = $75;
  $76 = $14;
  $77 = $16;
  $78 = ((($77)) + -10|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79 << 16 >> 16;
  $81 = $8;
  $82 = ((($81)) + 10|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 << 16 >> 16;
  $85 = Math_imul($80, $84)|0;
  $86 = (($76) + ($85))|0;
  $14 = $86;
  $12 = 6;
  while(1) {
   $87 = $12;
   $88 = $10;
   $89 = ($87|0)<($88|0);
   if (!($89)) {
    break;
   }
   $90 = $14;
   $91 = $16;
   $92 = $12;
   $93 = (0 - ($92))|0;
   $94 = (($91) + ($93<<1)|0);
   $95 = HEAP16[$94>>1]|0;
   $96 = $95 << 16 >> 16;
   $97 = $8;
   $98 = $12;
   $99 = (($97) + ($98<<1)|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = $100 << 16 >> 16;
   $102 = Math_imul($96, $101)|0;
   $103 = (($90) + ($102))|0;
   $14 = $103;
   $104 = $14;
   $105 = $16;
   $106 = $12;
   $107 = (0 - ($106))|0;
   $108 = (($107) - 1)|0;
   $109 = (($105) + ($108<<1)|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110 << 16 >> 16;
   $112 = $8;
   $113 = $12;
   $114 = (($113) + 1)|0;
   $115 = (($112) + ($114<<1)|0);
   $116 = HEAP16[$115>>1]|0;
   $117 = $116 << 16 >> 16;
   $118 = Math_imul($111, $117)|0;
   $119 = (($104) + ($118))|0;
   $14 = $119;
   $120 = $12;
   $121 = (($120) + 2)|0;
   $12 = $121;
  }
  $122 = $16;
  $123 = ((($122)) + 2|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = $124 << 16 >> 16;
  $126 = $125 << 12;
  $127 = $14;
  $128 = (($126) - ($127))|0;
  $14 = $128;
  $129 = $14;
  $130 = $129 >> 11;
  $131 = (($130) + 1)|0;
  $132 = $131 >> 1;
  $15 = $132;
  $133 = $15;
  $134 = ($133|0)>(32767);
  if ($134) {
   $140 = 32767;
  } else {
   $135 = $15;
   $136 = ($135|0)<(-32768);
   $137 = $15;
   $138 = $136 ? -32768 : $137;
   $140 = $138;
  }
  $139 = $140&65535;
  $141 = $6;
  $142 = $13;
  $143 = (($141) + ($142<<1)|0);
  HEAP16[$143>>1] = $139;
  $144 = $13;
  $145 = (($144) + 1)|0;
  $13 = $145;
 }
 $146 = $6;
 $147 = $10;
 $148 = $147<<1;
 _memset(($146|0),0,($148|0))|0;
 STACKTOP = sp;return;
}
function _silk_LPC_inverse_pred_gain($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $6 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $8 = 0;
 $9 = $4;
 $10 = $9 & 1;
 $11 = (($6) + ($10<<6)|0);
 $7 = $11;
 $5 = 0;
 while(1) {
  $12 = $5;
  $13 = $4;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $5;
  $17 = (($15) + ($16<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $8;
  $21 = (($20) + ($19))|0;
  $8 = $21;
  $22 = $3;
  $23 = $5;
  $24 = (($22) + ($23<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = $26 << 12;
  $28 = $7;
  $29 = $5;
  $30 = (($28) + ($29<<2)|0);
  HEAP32[$30>>2] = $27;
  $31 = $5;
  $32 = (($31) + 1)|0;
  $5 = $32;
 }
 $33 = $8;
 $34 = ($33|0)>=(4096);
 if ($34) {
  $2 = 0;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 } else {
  $35 = $4;
  $36 = (_LPC_inverse_pred_gain_QA($6,$35)|0);
  $2 = $36;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _LPC_inverse_pred_gain_QA($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $15 = $3;
 $16 = $4;
 $17 = $16 & 1;
 $18 = (($15) + ($17<<6)|0);
 $14 = $18;
 $8 = 1073741824;
 $19 = $4;
 $20 = (($19) - 1)|0;
 $5 = $20;
 while(1) {
  $21 = $5;
  $22 = ($21|0)>(0);
  $23 = $14;
  if (!($22)) {
   break;
  }
  $24 = $5;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(16773022);
  if ($27) {
   label = 5;
   break;
  }
  $28 = $14;
  $29 = $5;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)<(-16773022);
  if ($32) {
   label = 5;
   break;
  }
  $33 = $14;
  $34 = $5;
  $35 = (($33) + ($34<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 << 7;
  $38 = (0 - ($37))|0;
  $9 = $38;
  $39 = $9;
  $40 = ($39|0)<(0);
  $41 = $40 << 31 >> 31;
  $42 = $9;
  $43 = ($42|0)<(0);
  $44 = $43 << 31 >> 31;
  $45 = (___muldi3(($39|0),($41|0),($42|0),($44|0))|0);
  $46 = tempRet0;
  $47 = (_bitshift64Ashr(($45|0),($46|0),32)|0);
  $48 = tempRet0;
  $49 = (1073741824 - ($47))|0;
  $10 = $49;
  $50 = $10;
  $51 = ($50|0)>(0);
  $52 = $10;
  $53 = (0 - ($52))|0;
  $54 = $51 ? $52 : $53;
  $55 = (_silk_CLZ32_484($54)|0);
  $56 = (32 - ($55))|0;
  $7 = $56;
  $57 = $10;
  $58 = $7;
  $59 = (($58) + 30)|0;
  $60 = (_silk_INVERSE32_varQ_485($57,$59)|0);
  $11 = $60;
  $61 = $8;
  $62 = ($61|0)<(0);
  $63 = $62 << 31 >> 31;
  $64 = $10;
  $65 = ($64|0)<(0);
  $66 = $65 << 31 >> 31;
  $67 = (___muldi3(($61|0),($63|0),($64|0),($66|0))|0);
  $68 = tempRet0;
  $69 = (_bitshift64Ashr(($67|0),($68|0),32)|0);
  $70 = tempRet0;
  $71 = $69 << 2;
  $8 = $71;
  $72 = $14;
  $13 = $72;
  $73 = $3;
  $74 = $5;
  $75 = $74 & 1;
  $76 = (($73) + ($75<<6)|0);
  $14 = $76;
  $6 = 0;
  while(1) {
   $77 = $6;
   $78 = $5;
   $79 = ($77|0)<($78|0);
   if (!($79)) {
    break;
   }
   $80 = $13;
   $81 = $6;
   $82 = (($80) + ($81<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $13;
   $85 = $5;
   $86 = $6;
   $87 = (($85) - ($86))|0;
   $88 = (($87) - 1)|0;
   $89 = (($84) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)<(0);
   $92 = $91 << 31 >> 31;
   $93 = $9;
   $94 = ($93|0)<(0);
   $95 = $94 << 31 >> 31;
   $96 = (___muldi3(($90|0),($92|0),($93|0),($95|0))|0);
   $97 = tempRet0;
   $98 = (_bitshift64Ashr(($96|0),($97|0),30)|0);
   $99 = tempRet0;
   $100 = (_i64Add(($98|0),($99|0),1,0)|0);
   $101 = tempRet0;
   $102 = (_bitshift64Ashr(($100|0),($101|0),1)|0);
   $103 = tempRet0;
   $104 = (($83) - ($102))|0;
   $12 = $104;
   $105 = $7;
   $106 = ($105|0)==(1);
   $107 = $12;
   $108 = ($107|0)<(0);
   $109 = $108 << 31 >> 31;
   $110 = $11;
   $111 = ($110|0)<(0);
   $112 = $111 << 31 >> 31;
   $113 = (___muldi3(($107|0),($109|0),($110|0),($112|0))|0);
   $114 = tempRet0;
   if ($106) {
    $115 = (_bitshift64Ashr(($113|0),($114|0),1)|0);
    $116 = tempRet0;
    $117 = $12;
    $118 = ($117|0)<(0);
    $119 = $118 << 31 >> 31;
    $120 = $11;
    $121 = ($120|0)<(0);
    $122 = $121 << 31 >> 31;
    $123 = (___muldi3(($117|0),($119|0),($120|0),($122|0))|0);
    $124 = tempRet0;
    $125 = $123 & 1;
    $126 = (_i64Add(($115|0),($116|0),($125|0),0)|0);
    $127 = tempRet0;
    $139 = $126;$177 = $127;
   } else {
    $128 = $7;
    $129 = (($128) - 1)|0;
    $130 = (_bitshift64Ashr(($113|0),($114|0),($129|0))|0);
    $131 = tempRet0;
    $132 = (_i64Add(($130|0),($131|0),1,0)|0);
    $133 = tempRet0;
    $134 = (_bitshift64Ashr(($132|0),($133|0),1)|0);
    $135 = tempRet0;
    $139 = $134;$177 = $135;
   }
   $136 = $14;
   $137 = $6;
   $138 = (($136) + ($137<<2)|0);
   HEAP32[$138>>2] = $139;
   $140 = $6;
   $141 = (($140) + 1)|0;
   $6 = $141;
  }
  $142 = $5;
  $143 = (($142) + -1)|0;
  $5 = $143;
 }
 if ((label|0) == 5) {
  $2 = 0;
  $176 = $2;
  STACKTOP = sp;return ($176|0);
 }
 $144 = HEAP32[$23>>2]|0;
 $145 = ($144|0)>(16773022);
 if (!($145)) {
  $146 = $14;
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)<(-16773022);
  if (!($148)) {
   $149 = $14;
   $150 = HEAP32[$149>>2]|0;
   $151 = $150 << 7;
   $152 = (0 - ($151))|0;
   $9 = $152;
   $153 = $9;
   $154 = ($153|0)<(0);
   $155 = $154 << 31 >> 31;
   $156 = $9;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = (___muldi3(($153|0),($155|0),($156|0),($158|0))|0);
   $160 = tempRet0;
   $161 = (_bitshift64Ashr(($159|0),($160|0),32)|0);
   $162 = tempRet0;
   $163 = (1073741824 - ($161))|0;
   $10 = $163;
   $164 = $8;
   $165 = ($164|0)<(0);
   $166 = $165 << 31 >> 31;
   $167 = $10;
   $168 = ($167|0)<(0);
   $169 = $168 << 31 >> 31;
   $170 = (___muldi3(($164|0),($166|0),($167|0),($169|0))|0);
   $171 = tempRet0;
   $172 = (_bitshift64Ashr(($170|0),($171|0),32)|0);
   $173 = tempRet0;
   $174 = $172 << 2;
   $8 = $174;
   $175 = $8;
   $2 = $175;
   $176 = $2;
   STACKTOP = sp;return ($176|0);
  }
 }
 $2 = 0;
 $176 = $2;
 STACKTOP = sp;return ($176|0);
}
function _silk_CLZ32_484($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_INVERSE32_varQ_485($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)>(0);
 $13 = $3;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $16 = (_silk_CLZ32_484($15)|0);
 $17 = (($16) - 1)|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $18 << $19;
 $8 = $20;
 $21 = $8;
 $22 = $21 >> 16;
 $23 = (536870911 / ($22|0))&-1;
 $7 = $23;
 $24 = $7;
 $25 = $24 << 16;
 $10 = $25;
 $26 = $8;
 $27 = $26 >> 16;
 $28 = $7;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = Math_imul($27, $30)|0;
 $32 = $8;
 $33 = $32 & 65535;
 $34 = $7;
 $35 = $34&65535;
 $36 = $35 << 16 >> 16;
 $37 = Math_imul($33, $36)|0;
 $38 = $37 >> 16;
 $39 = (($31) + ($38))|0;
 $40 = (536870912 - ($39))|0;
 $41 = $40 << 3;
 $9 = $41;
 $42 = $10;
 $43 = $9;
 $44 = $43 >> 16;
 $45 = $7;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $9;
 $50 = $49 & 65535;
 $51 = $7;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($50, $53)|0;
 $55 = $54 >> 16;
 $56 = (($48) + ($55))|0;
 $57 = (($42) + ($56))|0;
 $58 = $9;
 $59 = $7;
 $60 = $59 >> 15;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = Math_imul($58, $62)|0;
 $64 = (($57) + ($63))|0;
 $10 = $64;
 $65 = $5;
 $66 = (61 - ($65))|0;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $6 = $68;
 $69 = $6;
 $70 = ($69|0)<=(0);
 $71 = $6;
 if (!($70)) {
  $113 = ($71|0)<(32);
  if ($113) {
   $114 = $10;
   $115 = $6;
   $116 = $114 >> $115;
   $2 = $116;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  } else {
   $2 = 0;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  }
 }
 $72 = (0 - ($71))|0;
 $73 = -2147483648 >> $72;
 $74 = $6;
 $75 = (0 - ($74))|0;
 $76 = 2147483647 >> $75;
 $77 = ($73|0)>($76|0);
 $78 = $10;
 $79 = $6;
 $80 = (0 - ($79))|0;
 do {
  if ($77) {
   $81 = -2147483648 >> $80;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $6;
    $84 = (0 - ($83))|0;
    $85 = -2147483648 >> $84;
    $112 = $85;
    break;
   }
   $86 = $10;
   $87 = $6;
   $88 = (0 - ($87))|0;
   $89 = 2147483647 >> $88;
   $90 = ($86|0)<($89|0);
   if ($90) {
    $91 = $6;
    $92 = (0 - ($91))|0;
    $93 = 2147483647 >> $92;
    $112 = $93;
    break;
   } else {
    $94 = $10;
    $112 = $94;
    break;
   }
  } else {
   $95 = 2147483647 >> $80;
   $96 = ($78|0)>($95|0);
   if ($96) {
    $97 = $6;
    $98 = (0 - ($97))|0;
    $99 = 2147483647 >> $98;
    $112 = $99;
    break;
   }
   $100 = $10;
   $101 = $6;
   $102 = (0 - ($101))|0;
   $103 = -2147483648 >> $102;
   $104 = ($100|0)<($103|0);
   if ($104) {
    $105 = $6;
    $106 = (0 - ($105))|0;
    $107 = -2147483648 >> $106;
    $112 = $107;
    break;
   } else {
    $108 = $10;
    $112 = $108;
    break;
   }
  }
 } while(0);
 $109 = $6;
 $110 = (0 - ($109))|0;
 $111 = $112 << $110;
 $2 = $111;
 $117 = $2;
 STACKTOP = sp;return ($117|0);
}
function _silk_NLSF2A($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $10 = sp + 176|0;
 $11 = sp + 140|0;
 $12 = sp + 104|0;
 $19 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $22 = 0;
 $24 = $5;
 $25 = ($24|0)==(16);
 $26 = $25 ? 30711 : 30727;
 $6 = $26;
 $7 = 0;
 while(1) {
  $27 = $7;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $4;
  $31 = $7;
  $32 = (($30) + ($31<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = $34 >> 8;
  $15 = $35;
  $36 = $4;
  $37 = $7;
  $38 = (($36) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $15;
  $42 = $41 << 8;
  $43 = (($40) - ($42))|0;
  $16 = $43;
  $44 = $15;
  $45 = (25462 + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $17 = $47;
  $48 = $15;
  $49 = (($48) + 1)|0;
  $50 = (25462 + ($49<<1)|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = $17;
  $54 = (($52) - ($53))|0;
  $18 = $54;
  $55 = $17;
  $56 = $55 << 8;
  $57 = $18;
  $58 = $16;
  $59 = Math_imul($57, $58)|0;
  $60 = (($56) + ($59))|0;
  $61 = $60 >> 3;
  $62 = (($61) + 1)|0;
  $63 = $62 >> 1;
  $64 = $6;
  $65 = $7;
  $66 = (($64) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = (($10) + ($68<<2)|0);
  HEAP32[$69>>2] = $63;
  $70 = $7;
  $71 = (($70) + 1)|0;
  $7 = $71;
 }
 $72 = $5;
 $73 = $72 >> 1;
 $9 = $73;
 $74 = $9;
 _silk_NLSF2A_find_poly($11,$10,$74);
 $75 = ((($10)) + 4|0);
 $76 = $9;
 _silk_NLSF2A_find_poly($12,$75,$76);
 $7 = 0;
 while(1) {
  $77 = $7;
  $78 = $9;
  $79 = ($77|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = $7;
  $81 = (($80) + 1)|0;
  $82 = (($11) + ($81<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $7;
  $85 = (($11) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($83) + ($86))|0;
  $13 = $87;
  $88 = $7;
  $89 = (($88) + 1)|0;
  $90 = (($12) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $7;
  $93 = (($12) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($91) - ($94))|0;
  $14 = $95;
  $96 = $14;
  $97 = (0 - ($96))|0;
  $98 = $13;
  $99 = (($97) - ($98))|0;
  $100 = $7;
  $101 = (($19) + ($100<<2)|0);
  HEAP32[$101>>2] = $99;
  $102 = $14;
  $103 = $13;
  $104 = (($102) - ($103))|0;
  $105 = $5;
  $106 = $7;
  $107 = (($105) - ($106))|0;
  $108 = (($107) - 1)|0;
  $109 = (($19) + ($108<<2)|0);
  HEAP32[$109>>2] = $104;
  $110 = $7;
  $111 = (($110) + 1)|0;
  $7 = $111;
 }
 $8 = 0;
 while(1) {
  $112 = $8;
  $113 = ($112|0)<(10);
  if (!($113)) {
   break;
  }
  $20 = 0;
  $7 = 0;
  while(1) {
   $114 = $7;
   $115 = $5;
   $116 = ($114|0)<($115|0);
   if (!($116)) {
    break;
   }
   $117 = $7;
   $118 = (($19) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($119|0)>(0);
   $121 = $7;
   $122 = (($19) + ($121<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (0 - ($123))|0;
   $125 = $120 ? $123 : $124;
   $21 = $125;
   $126 = $21;
   $127 = $20;
   $128 = ($126|0)>($127|0);
   if ($128) {
    $129 = $21;
    $20 = $129;
    $130 = $7;
    $22 = $130;
   }
   $131 = $7;
   $132 = (($131) + 1)|0;
   $7 = $132;
  }
  $133 = $20;
  $134 = $133 >> 4;
  $135 = (($134) + 1)|0;
  $136 = $135 >> 1;
  $20 = $136;
  $137 = $20;
  $138 = ($137|0)>(32767);
  if (!($138)) {
   break;
  }
  $139 = $20;
  $140 = ($139|0)<(163838);
  $141 = $20;
  $142 = $140 ? $141 : 163838;
  $20 = $142;
  $143 = $20;
  $144 = (($143) - 32767)|0;
  $145 = $144 << 14;
  $146 = $20;
  $147 = $22;
  $148 = (($147) + 1)|0;
  $149 = Math_imul($146, $148)|0;
  $150 = $149 >> 2;
  $151 = (($145|0) / ($150|0))&-1;
  $152 = (65470 - ($151))|0;
  $23 = $152;
  $153 = $5;
  $154 = $23;
  _silk_bwexpander_32($19,$153,$154);
  $155 = $8;
  $156 = (($155) + 1)|0;
  $8 = $156;
 }
 $157 = $8;
 $158 = ($157|0)==(10);
 $7 = 0;
 L21: do {
  if ($158) {
   while(1) {
    $159 = $7;
    $160 = $5;
    $161 = ($159|0)<($160|0);
    if (!($161)) {
     break L21;
    }
    $162 = $7;
    $163 = (($19) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164 >> 4;
    $166 = (($165) + 1)|0;
    $167 = $166 >> 1;
    $168 = ($167|0)>(32767);
    if ($168) {
     $183 = 32767;
    } else {
     $169 = $7;
     $170 = (($19) + ($169<<2)|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = $171 >> 4;
     $173 = (($172) + 1)|0;
     $174 = $173 >> 1;
     $175 = ($174|0)<(-32768);
     if ($175) {
      $183 = -32768;
     } else {
      $176 = $7;
      $177 = (($19) + ($176<<2)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 >> 4;
      $180 = (($179) + 1)|0;
      $181 = $180 >> 1;
      $183 = $181;
     }
    }
    $182 = $183&65535;
    $184 = $3;
    $185 = $7;
    $186 = (($184) + ($185<<1)|0);
    HEAP16[$186>>1] = $182;
    $187 = $3;
    $188 = $7;
    $189 = (($187) + ($188<<1)|0);
    $190 = HEAP16[$189>>1]|0;
    $191 = $190 << 16 >> 16;
    $192 = $191 << 5;
    $193 = $7;
    $194 = (($19) + ($193<<2)|0);
    HEAP32[$194>>2] = $192;
    $195 = $7;
    $196 = (($195) + 1)|0;
    $7 = $196;
   }
  } else {
   while(1) {
    $197 = $7;
    $198 = $5;
    $199 = ($197|0)<($198|0);
    if (!($199)) {
     break L21;
    }
    $200 = $7;
    $201 = (($19) + ($200<<2)|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $202 >> 4;
    $204 = (($203) + 1)|0;
    $205 = $204 >> 1;
    $206 = $205&65535;
    $207 = $3;
    $208 = $7;
    $209 = (($207) + ($208<<1)|0);
    HEAP16[$209>>1] = $206;
    $210 = $7;
    $211 = (($210) + 1)|0;
    $7 = $211;
   }
  }
 } while(0);
 $8 = 0;
 while(1) {
  $212 = $8;
  $213 = ($212|0)<(16);
  if (!($213)) {
   label = 31;
   break;
  }
  $214 = $3;
  $215 = $5;
  $216 = (_silk_LPC_inverse_pred_gain($214,$215)|0);
  $217 = ($216|0)<(107374);
  if (!($217)) {
   label = 31;
   break;
  }
  $218 = $5;
  $219 = $8;
  $220 = 2 << $219;
  $221 = (65536 - ($220))|0;
  _silk_bwexpander_32($19,$218,$221);
  $7 = 0;
  while(1) {
   $222 = $7;
   $223 = $5;
   $224 = ($222|0)<($223|0);
   if (!($224)) {
    break;
   }
   $225 = $7;
   $226 = (($19) + ($225<<2)|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = $227 >> 4;
   $229 = (($228) + 1)|0;
   $230 = $229 >> 1;
   $231 = $230&65535;
   $232 = $3;
   $233 = $7;
   $234 = (($232) + ($233<<1)|0);
   HEAP16[$234>>1] = $231;
   $235 = $7;
   $236 = (($235) + 1)|0;
   $7 = $236;
  }
  $237 = $8;
  $238 = (($237) + 1)|0;
  $8 = $238;
 }
 if ((label|0) == 31) {
  STACKTOP = sp;return;
 }
}
function _silk_NLSF2A_find_poly($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 HEAP32[$9>>2] = 65536;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $12 = (0 - ($11))|0;
 $13 = $3;
 $14 = ((($13)) + 4|0);
 HEAP32[$14>>2] = $12;
 $6 = 1;
 while(1) {
  $15 = $6;
  $16 = $5;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = $6;
  $20 = $19<<1;
  $21 = (($18) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $8 = $22;
  $23 = $3;
  $24 = $6;
  $25 = (($24) - 1)|0;
  $26 = (($23) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 << 1;
  $29 = $8;
  $30 = ($29|0)<(0);
  $31 = $30 << 31 >> 31;
  $32 = $3;
  $33 = $6;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)<(0);
  $37 = $36 << 31 >> 31;
  $38 = (___muldi3(($29|0),($31|0),($35|0),($37|0))|0);
  $39 = tempRet0;
  $40 = (_bitshift64Ashr(($38|0),($39|0),15)|0);
  $41 = tempRet0;
  $42 = (_i64Add(($40|0),($41|0),1,0)|0);
  $43 = tempRet0;
  $44 = (_bitshift64Ashr(($42|0),($43|0),1)|0);
  $45 = tempRet0;
  $46 = (($28) - ($44))|0;
  $47 = $3;
  $48 = $6;
  $49 = (($48) + 1)|0;
  $50 = (($47) + ($49<<2)|0);
  HEAP32[$50>>2] = $46;
  $51 = $6;
  $7 = $51;
  while(1) {
   $52 = $7;
   $53 = ($52|0)>(1);
   if (!($53)) {
    break;
   }
   $54 = $3;
   $55 = $7;
   $56 = (($55) - 2)|0;
   $57 = (($54) + ($56<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $8;
   $60 = ($59|0)<(0);
   $61 = $60 << 31 >> 31;
   $62 = $3;
   $63 = $7;
   $64 = (($63) - 1)|0;
   $65 = (($62) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)<(0);
   $68 = $67 << 31 >> 31;
   $69 = (___muldi3(($59|0),($61|0),($66|0),($68|0))|0);
   $70 = tempRet0;
   $71 = (_bitshift64Ashr(($69|0),($70|0),15)|0);
   $72 = tempRet0;
   $73 = (_i64Add(($71|0),($72|0),1,0)|0);
   $74 = tempRet0;
   $75 = (_bitshift64Ashr(($73|0),($74|0),1)|0);
   $76 = tempRet0;
   $77 = (($58) - ($75))|0;
   $78 = $3;
   $79 = $7;
   $80 = (($78) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + ($77))|0;
   HEAP32[$80>>2] = $82;
   $83 = $7;
   $84 = (($83) + -1)|0;
   $7 = $84;
  }
  $85 = $8;
  $86 = $3;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) - ($85))|0;
  HEAP32[$87>>2] = $89;
  $90 = $6;
  $91 = (($90) + 1)|0;
  $6 = $91;
 }
 STACKTOP = sp;return;
}
function _silk_NLSF_stabilize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $9 = 0;
 while(1) {
  $15 = $9;
  $16 = ($15|0)<(20);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $4;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = (($19) - ($22))|0;
  $12 = $23;
  $7 = 0;
  $6 = 1;
  while(1) {
   $24 = $6;
   $25 = $5;
   $26 = (($25) - 1)|0;
   $27 = ($24|0)<=($26|0);
   $28 = $3;
   if (!($27)) {
    break;
   }
   $29 = $6;
   $30 = (($28) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31 << 16 >> 16;
   $33 = $3;
   $34 = $6;
   $35 = (($34) - 1)|0;
   $36 = (($33) + ($35<<1)|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37 << 16 >> 16;
   $39 = $4;
   $40 = $6;
   $41 = (($39) + ($40<<1)|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (($38) + ($43))|0;
   $45 = (($32) - ($44))|0;
   $11 = $45;
   $46 = $11;
   $47 = $12;
   $48 = ($46|0)<($47|0);
   if ($48) {
    $49 = $11;
    $12 = $49;
    $50 = $6;
    $7 = $50;
   }
   $51 = $6;
   $52 = (($51) + 1)|0;
   $6 = $52;
  }
  $53 = $5;
  $54 = (($53) - 1)|0;
  $55 = (($28) + ($54<<1)|0);
  $56 = HEAP16[$55>>1]|0;
  $57 = $56 << 16 >> 16;
  $58 = $4;
  $59 = $5;
  $60 = (($58) + ($59<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = (($57) + ($62))|0;
  $64 = (32768 - ($63))|0;
  $11 = $64;
  $65 = $11;
  $66 = $12;
  $67 = ($65|0)<($66|0);
  if ($67) {
   $68 = $11;
   $12 = $68;
   $69 = $5;
   $7 = $69;
  }
  $70 = $12;
  $71 = ($70|0)>=(0);
  if ($71) {
   label = 42;
   break;
  }
  $72 = $7;
  $73 = ($72|0)==(0);
  if ($73) {
   $74 = $4;
   $75 = HEAP16[$74>>1]|0;
   $76 = $3;
   HEAP16[$76>>1] = $75;
  } else {
   $77 = $7;
   $78 = $5;
   $79 = ($77|0)==($78|0);
   if ($79) {
    $80 = $4;
    $81 = $5;
    $82 = (($80) + ($81<<1)|0);
    $83 = HEAP16[$82>>1]|0;
    $84 = $83 << 16 >> 16;
    $85 = (32768 - ($84))|0;
    $86 = $85&65535;
    $87 = $3;
    $88 = $5;
    $89 = (($88) - 1)|0;
    $90 = (($87) + ($89<<1)|0);
    $$sink = $86;$$sink1 = $90;
   } else {
    $13 = 0;
    $8 = 0;
    while(1) {
     $91 = $8;
     $92 = $7;
     $93 = ($91|0)<($92|0);
     $94 = $4;
     if (!($93)) {
      break;
     }
     $95 = $8;
     $96 = (($94) + ($95<<1)|0);
     $97 = HEAP16[$96>>1]|0;
     $98 = $97 << 16 >> 16;
     $99 = $13;
     $100 = (($99) + ($98))|0;
     $13 = $100;
     $101 = $8;
     $102 = (($101) + 1)|0;
     $8 = $102;
    }
    $103 = $7;
    $104 = (($94) + ($103<<1)|0);
    $105 = HEAP16[$104>>1]|0;
    $106 = $105 << 16 >> 16;
    $107 = $106 >> 1;
    $108 = $13;
    $109 = (($108) + ($107))|0;
    $13 = $109;
    $14 = 32768;
    $110 = $5;
    $8 = $110;
    while(1) {
     $111 = $8;
     $112 = $7;
     $113 = ($111|0)>($112|0);
     $114 = $4;
     if (!($113)) {
      break;
     }
     $115 = $8;
     $116 = (($114) + ($115<<1)|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = $14;
     $120 = (($119) - ($118))|0;
     $14 = $120;
     $121 = $8;
     $122 = (($121) + -1)|0;
     $8 = $122;
    }
    $123 = $7;
    $124 = (($114) + ($123<<1)|0);
    $125 = HEAP16[$124>>1]|0;
    $126 = $125 << 16 >> 16;
    $127 = $126 >> 1;
    $128 = $14;
    $129 = (($128) - ($127))|0;
    $14 = $129;
    $130 = $13;
    $131 = $14;
    $132 = ($130|0)>($131|0);
    $133 = $3;
    $134 = $7;
    $135 = (($134) - 1)|0;
    $136 = (($133) + ($135<<1)|0);
    $137 = HEAP16[$136>>1]|0;
    $138 = $137 << 16 >> 16;
    $139 = $3;
    $140 = $7;
    $141 = (($139) + ($140<<1)|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = $142 << 16 >> 16;
    $144 = (($138) + ($143))|0;
    $145 = $144 >> 1;
    $146 = $3;
    $147 = $7;
    $148 = (($147) - 1)|0;
    $149 = (($146) + ($148<<1)|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = $150 << 16 >> 16;
    $152 = $3;
    $153 = $7;
    $154 = (($152) + ($153<<1)|0);
    $155 = HEAP16[$154>>1]|0;
    $156 = $155 << 16 >> 16;
    $157 = (($151) + ($156))|0;
    $158 = $157 & 1;
    $159 = (($145) + ($158))|0;
    do {
     if ($132) {
      $160 = $13;
      $161 = ($159|0)>($160|0);
      if ($161) {
       $162 = $13;
       $281 = $162;
       break;
      }
      $163 = $3;
      $164 = $7;
      $165 = (($164) - 1)|0;
      $166 = (($163) + ($165<<1)|0);
      $167 = HEAP16[$166>>1]|0;
      $168 = $167 << 16 >> 16;
      $169 = $3;
      $170 = $7;
      $171 = (($169) + ($170<<1)|0);
      $172 = HEAP16[$171>>1]|0;
      $173 = $172 << 16 >> 16;
      $174 = (($168) + ($173))|0;
      $175 = $174 >> 1;
      $176 = $3;
      $177 = $7;
      $178 = (($177) - 1)|0;
      $179 = (($176) + ($178<<1)|0);
      $180 = HEAP16[$179>>1]|0;
      $181 = $180 << 16 >> 16;
      $182 = $3;
      $183 = $7;
      $184 = (($182) + ($183<<1)|0);
      $185 = HEAP16[$184>>1]|0;
      $186 = $185 << 16 >> 16;
      $187 = (($181) + ($186))|0;
      $188 = $187 & 1;
      $189 = (($175) + ($188))|0;
      $190 = $14;
      $191 = ($189|0)<($190|0);
      if ($191) {
       $192 = $14;
       $281 = $192;
       break;
      } else {
       $193 = $3;
       $194 = $7;
       $195 = (($194) - 1)|0;
       $196 = (($193) + ($195<<1)|0);
       $197 = HEAP16[$196>>1]|0;
       $198 = $197 << 16 >> 16;
       $199 = $3;
       $200 = $7;
       $201 = (($199) + ($200<<1)|0);
       $202 = HEAP16[$201>>1]|0;
       $203 = $202 << 16 >> 16;
       $204 = (($198) + ($203))|0;
       $205 = $204 >> 1;
       $206 = $3;
       $207 = $7;
       $208 = (($207) - 1)|0;
       $209 = (($206) + ($208<<1)|0);
       $210 = HEAP16[$209>>1]|0;
       $211 = $210 << 16 >> 16;
       $212 = $3;
       $213 = $7;
       $214 = (($212) + ($213<<1)|0);
       $215 = HEAP16[$214>>1]|0;
       $216 = $215 << 16 >> 16;
       $217 = (($211) + ($216))|0;
       $218 = $217 & 1;
       $219 = (($205) + ($218))|0;
       $281 = $219;
       break;
      }
     } else {
      $220 = $14;
      $221 = ($159|0)>($220|0);
      if ($221) {
       $222 = $14;
       $281 = $222;
       break;
      }
      $223 = $3;
      $224 = $7;
      $225 = (($224) - 1)|0;
      $226 = (($223) + ($225<<1)|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = $227 << 16 >> 16;
      $229 = $3;
      $230 = $7;
      $231 = (($229) + ($230<<1)|0);
      $232 = HEAP16[$231>>1]|0;
      $233 = $232 << 16 >> 16;
      $234 = (($228) + ($233))|0;
      $235 = $234 >> 1;
      $236 = $3;
      $237 = $7;
      $238 = (($237) - 1)|0;
      $239 = (($236) + ($238<<1)|0);
      $240 = HEAP16[$239>>1]|0;
      $241 = $240 << 16 >> 16;
      $242 = $3;
      $243 = $7;
      $244 = (($242) + ($243<<1)|0);
      $245 = HEAP16[$244>>1]|0;
      $246 = $245 << 16 >> 16;
      $247 = (($241) + ($246))|0;
      $248 = $247 & 1;
      $249 = (($235) + ($248))|0;
      $250 = $13;
      $251 = ($249|0)<($250|0);
      if ($251) {
       $252 = $13;
       $281 = $252;
       break;
      } else {
       $253 = $3;
       $254 = $7;
       $255 = (($254) - 1)|0;
       $256 = (($253) + ($255<<1)|0);
       $257 = HEAP16[$256>>1]|0;
       $258 = $257 << 16 >> 16;
       $259 = $3;
       $260 = $7;
       $261 = (($259) + ($260<<1)|0);
       $262 = HEAP16[$261>>1]|0;
       $263 = $262 << 16 >> 16;
       $264 = (($258) + ($263))|0;
       $265 = $264 >> 1;
       $266 = $3;
       $267 = $7;
       $268 = (($267) - 1)|0;
       $269 = (($266) + ($268<<1)|0);
       $270 = HEAP16[$269>>1]|0;
       $271 = $270 << 16 >> 16;
       $272 = $3;
       $273 = $7;
       $274 = (($272) + ($273<<1)|0);
       $275 = HEAP16[$274>>1]|0;
       $276 = $275 << 16 >> 16;
       $277 = (($271) + ($276))|0;
       $278 = $277 & 1;
       $279 = (($265) + ($278))|0;
       $281 = $279;
       break;
      }
     }
    } while(0);
    $280 = $281&65535;
    $10 = $280;
    $282 = $10;
    $283 = $282 << 16 >> 16;
    $284 = $4;
    $285 = $7;
    $286 = (($284) + ($285<<1)|0);
    $287 = HEAP16[$286>>1]|0;
    $288 = $287 << 16 >> 16;
    $289 = $288 >> 1;
    $290 = (($283) - ($289))|0;
    $291 = $290&65535;
    $292 = $3;
    $293 = $7;
    $294 = (($293) - 1)|0;
    $295 = (($292) + ($294<<1)|0);
    HEAP16[$295>>1] = $291;
    $296 = $3;
    $297 = $7;
    $298 = (($297) - 1)|0;
    $299 = (($296) + ($298<<1)|0);
    $300 = HEAP16[$299>>1]|0;
    $301 = $300 << 16 >> 16;
    $302 = $4;
    $303 = $7;
    $304 = (($302) + ($303<<1)|0);
    $305 = HEAP16[$304>>1]|0;
    $306 = $305 << 16 >> 16;
    $307 = (($301) + ($306))|0;
    $308 = $307&65535;
    $309 = $3;
    $310 = $7;
    $311 = (($309) + ($310<<1)|0);
    $$sink = $308;$$sink1 = $311;
   }
   HEAP16[$$sink1>>1] = $$sink;
  }
  $312 = $9;
  $313 = (($312) + 1)|0;
  $9 = $313;
 }
 if ((label|0) == 42) {
  STACKTOP = sp;return;
 }
 $314 = $9;
 $315 = ($314|0)==(20);
 if (!($315)) {
  STACKTOP = sp;return;
 }
 $316 = $3;
 $317 = $5;
 _silk_insertion_sort_increasing_all_values_int16($316,$317);
 $318 = $3;
 $319 = HEAP16[$318>>1]|0;
 $320 = $319 << 16 >> 16;
 $321 = $4;
 $322 = HEAP16[$321>>1]|0;
 $323 = $322 << 16 >> 16;
 $324 = (_silk_max_int_492($320,$323)|0);
 $325 = $324&65535;
 $326 = $3;
 HEAP16[$326>>1] = $325;
 $6 = 1;
 while(1) {
  $327 = $6;
  $328 = $5;
  $329 = ($327|0)<($328|0);
  $330 = $3;
  if (!($329)) {
   break;
  }
  $331 = $6;
  $332 = (($330) + ($331<<1)|0);
  $333 = HEAP16[$332>>1]|0;
  $334 = $333 << 16 >> 16;
  $335 = $3;
  $336 = $6;
  $337 = (($336) - 1)|0;
  $338 = (($335) + ($337<<1)|0);
  $339 = HEAP16[$338>>1]|0;
  $340 = $339 << 16 >> 16;
  $341 = $4;
  $342 = $6;
  $343 = (($341) + ($342<<1)|0);
  $344 = HEAP16[$343>>1]|0;
  $345 = $344 << 16 >> 16;
  $346 = (($340) + ($345))|0;
  $347 = (_silk_max_int_492($334,$346)|0);
  $348 = $347&65535;
  $349 = $3;
  $350 = $6;
  $351 = (($349) + ($350<<1)|0);
  HEAP16[$351>>1] = $348;
  $352 = $6;
  $353 = (($352) + 1)|0;
  $6 = $353;
 }
 $354 = $5;
 $355 = (($354) - 1)|0;
 $356 = (($330) + ($355<<1)|0);
 $357 = HEAP16[$356>>1]|0;
 $358 = $357 << 16 >> 16;
 $359 = $4;
 $360 = $5;
 $361 = (($359) + ($360<<1)|0);
 $362 = HEAP16[$361>>1]|0;
 $363 = $362 << 16 >> 16;
 $364 = (32768 - ($363))|0;
 $365 = (_silk_min_int_493($358,$364)|0);
 $366 = $365&65535;
 $367 = $3;
 $368 = $5;
 $369 = (($368) - 1)|0;
 $370 = (($367) + ($369<<1)|0);
 HEAP16[$370>>1] = $366;
 $371 = $5;
 $372 = (($371) - 2)|0;
 $6 = $372;
 while(1) {
  $373 = $6;
  $374 = ($373|0)>=(0);
  if (!($374)) {
   break;
  }
  $375 = $3;
  $376 = $6;
  $377 = (($375) + ($376<<1)|0);
  $378 = HEAP16[$377>>1]|0;
  $379 = $378 << 16 >> 16;
  $380 = $3;
  $381 = $6;
  $382 = (($381) + 1)|0;
  $383 = (($380) + ($382<<1)|0);
  $384 = HEAP16[$383>>1]|0;
  $385 = $384 << 16 >> 16;
  $386 = $4;
  $387 = $6;
  $388 = (($387) + 1)|0;
  $389 = (($386) + ($388<<1)|0);
  $390 = HEAP16[$389>>1]|0;
  $391 = $390 << 16 >> 16;
  $392 = (($385) - ($391))|0;
  $393 = (_silk_min_int_493($379,$392)|0);
  $394 = $393&65535;
  $395 = $3;
  $396 = $6;
  $397 = (($395) + ($396<<1)|0);
  HEAP16[$397>>1] = $394;
  $398 = $6;
  $399 = (($398) + -1)|0;
  $6 = $399;
 }
 STACKTOP = sp;return;
}
function _silk_max_int_492($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int_493($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_NLSF_VQ_weights_laroia($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = (_silk_max_int_496($11,1)|0);
 $7 = $12;
 $13 = $7;
 $14 = (131072 / ($13|0))&-1;
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = $4;
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (($18) - ($21))|0;
 $23 = (_silk_max_int_496($22,1)|0);
 $8 = $23;
 $24 = $8;
 $25 = (131072 / ($24|0))&-1;
 $8 = $25;
 $26 = $7;
 $27 = $8;
 $28 = (($26) + ($27))|0;
 $29 = (_silk_min_int_497($28,32767)|0);
 $30 = $29&65535;
 $31 = $3;
 HEAP16[$31>>1] = $30;
 $6 = 1;
 while(1) {
  $32 = $6;
  $33 = $5;
  $34 = (($33) - 1)|0;
  $35 = ($32|0)<($34|0);
  $36 = $4;
  if (!($35)) {
   break;
  }
  $37 = $6;
  $38 = (($37) + 1)|0;
  $39 = (($36) + ($38<<1)|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = $40 << 16 >> 16;
  $42 = $4;
  $43 = $6;
  $44 = (($42) + ($43<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = (($41) - ($46))|0;
  $48 = (_silk_max_int_496($47,1)|0);
  $7 = $48;
  $49 = $7;
  $50 = (131072 / ($49|0))&-1;
  $7 = $50;
  $51 = $7;
  $52 = $8;
  $53 = (($51) + ($52))|0;
  $54 = (_silk_min_int_497($53,32767)|0);
  $55 = $54&65535;
  $56 = $3;
  $57 = $6;
  $58 = (($56) + ($57<<1)|0);
  HEAP16[$58>>1] = $55;
  $59 = $4;
  $60 = $6;
  $61 = (($60) + 2)|0;
  $62 = (($59) + ($61<<1)|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = $4;
  $66 = $6;
  $67 = (($66) + 1)|0;
  $68 = (($65) + ($67<<1)|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = (($64) - ($70))|0;
  $72 = (_silk_max_int_496($71,1)|0);
  $8 = $72;
  $73 = $8;
  $74 = (131072 / ($73|0))&-1;
  $8 = $74;
  $75 = $7;
  $76 = $8;
  $77 = (($75) + ($76))|0;
  $78 = (_silk_min_int_497($77,32767)|0);
  $79 = $78&65535;
  $80 = $3;
  $81 = $6;
  $82 = (($81) + 1)|0;
  $83 = (($80) + ($82<<1)|0);
  HEAP16[$83>>1] = $79;
  $84 = $6;
  $85 = (($84) + 2)|0;
  $6 = $85;
 }
 $86 = $5;
 $87 = (($86) - 1)|0;
 $88 = (($36) + ($87<<1)|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = $89 << 16 >> 16;
 $91 = (32768 - ($90))|0;
 $92 = (_silk_max_int_496($91,1)|0);
 $7 = $92;
 $93 = $7;
 $94 = (131072 / ($93|0))&-1;
 $7 = $94;
 $95 = $7;
 $96 = $8;
 $97 = (($95) + ($96))|0;
 $98 = (_silk_min_int_497($97,32767)|0);
 $99 = $98&65535;
 $100 = $3;
 $101 = $5;
 $102 = (($101) - 1)|0;
 $103 = (($100) + ($102<<1)|0);
 HEAP16[$103>>1] = $99;
 STACKTOP = sp;return;
}
function _silk_max_int_496($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)>($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_min_int_497($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ($4|0)<($5|0);
 $7 = $2;
 $8 = $3;
 $9 = $6 ? $7 : $8;
 STACKTOP = sp;return ($9|0);
}
function _silk_resampler_down2_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1968|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1968|0);
 $12 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$13+12>>2]|0;
 while(1) {
  $14 = $7;
  $15 = ($14|0)<(480);
  $16 = $7;
  $17 = $15 ? $16 : 480;
  $8 = $17;
  $18 = $4;
  $19 = ((($18)) + 16|0);
  $20 = ((($12)) + 16|0);
  $21 = $6;
  $22 = $8;
  _silk_resampler_private_AR2($19,$20,$21,25270,$22);
  $11 = $12;
  $23 = $8;
  $9 = $23;
  while(1) {
   $24 = $9;
   $25 = ($24|0)>(2);
   if (!($25)) {
    break;
   }
   $26 = $11;
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 >> 16;
   $29 = HEAP16[(25274)>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = Math_imul($28, $30)|0;
   $32 = $11;
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 & 65535;
   $35 = HEAP16[(25274)>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = Math_imul($34, $36)|0;
   $38 = $37 >> 16;
   $39 = (($31) + ($38))|0;
   $10 = $39;
   $40 = $10;
   $41 = $11;
   $42 = ((($41)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 >> 16;
   $45 = HEAP16[(25276)>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = Math_imul($44, $46)|0;
   $48 = $11;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $50 & 65535;
   $52 = HEAP16[(25276)>>1]|0;
   $53 = $52 << 16 >> 16;
   $54 = Math_imul($51, $53)|0;
   $55 = $54 >> 16;
   $56 = (($47) + ($55))|0;
   $57 = (($40) + ($56))|0;
   $10 = $57;
   $58 = $10;
   $59 = $11;
   $60 = ((($59)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 >> 16;
   $63 = HEAP16[(25280)>>1]|0;
   $64 = $63 << 16 >> 16;
   $65 = Math_imul($62, $64)|0;
   $66 = $11;
   $67 = ((($66)) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 & 65535;
   $70 = HEAP16[(25280)>>1]|0;
   $71 = $70 << 16 >> 16;
   $72 = Math_imul($69, $71)|0;
   $73 = $72 >> 16;
   $74 = (($65) + ($73))|0;
   $75 = (($58) + ($74))|0;
   $10 = $75;
   $76 = $10;
   $77 = $11;
   $78 = ((($77)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $79 >> 16;
   $81 = HEAP16[(25278)>>1]|0;
   $82 = $81 << 16 >> 16;
   $83 = Math_imul($80, $82)|0;
   $84 = $11;
   $85 = ((($84)) + 12|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $86 & 65535;
   $88 = HEAP16[(25278)>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = Math_imul($87, $89)|0;
   $91 = $90 >> 16;
   $92 = (($83) + ($91))|0;
   $93 = (($76) + ($92))|0;
   $10 = $93;
   $94 = $10;
   $95 = $94 >> 5;
   $96 = (($95) + 1)|0;
   $97 = $96 >> 1;
   $98 = ($97|0)>(32767);
   if ($98) {
    $109 = 32767;
   } else {
    $99 = $10;
    $100 = $99 >> 5;
    $101 = (($100) + 1)|0;
    $102 = $101 >> 1;
    $103 = ($102|0)<(-32768);
    if ($103) {
     $109 = -32768;
    } else {
     $104 = $10;
     $105 = $104 >> 5;
     $106 = (($105) + 1)|0;
     $107 = $106 >> 1;
     $109 = $107;
    }
   }
   $108 = $109&65535;
   $110 = $5;
   $111 = ((($110)) + 2|0);
   $5 = $111;
   HEAP16[$110>>1] = $108;
   $112 = $11;
   $113 = ((($112)) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $114 >> 16;
   $116 = HEAP16[(25278)>>1]|0;
   $117 = $116 << 16 >> 16;
   $118 = Math_imul($115, $117)|0;
   $119 = $11;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $121 & 65535;
   $123 = HEAP16[(25278)>>1]|0;
   $124 = $123 << 16 >> 16;
   $125 = Math_imul($122, $124)|0;
   $126 = $125 >> 16;
   $127 = (($118) + ($126))|0;
   $10 = $127;
   $128 = $10;
   $129 = $11;
   $130 = ((($129)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 >> 16;
   $133 = HEAP16[(25280)>>1]|0;
   $134 = $133 << 16 >> 16;
   $135 = Math_imul($132, $134)|0;
   $136 = $11;
   $137 = ((($136)) + 8|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 & 65535;
   $140 = HEAP16[(25280)>>1]|0;
   $141 = $140 << 16 >> 16;
   $142 = Math_imul($139, $141)|0;
   $143 = $142 >> 16;
   $144 = (($135) + ($143))|0;
   $145 = (($128) + ($144))|0;
   $10 = $145;
   $146 = $10;
   $147 = $11;
   $148 = ((($147)) + 12|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $149 >> 16;
   $151 = HEAP16[(25276)>>1]|0;
   $152 = $151 << 16 >> 16;
   $153 = Math_imul($150, $152)|0;
   $154 = $11;
   $155 = ((($154)) + 12|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $156 & 65535;
   $158 = HEAP16[(25276)>>1]|0;
   $159 = $158 << 16 >> 16;
   $160 = Math_imul($157, $159)|0;
   $161 = $160 >> 16;
   $162 = (($153) + ($161))|0;
   $163 = (($146) + ($162))|0;
   $10 = $163;
   $164 = $10;
   $165 = $11;
   $166 = ((($165)) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = $167 >> 16;
   $169 = HEAP16[(25274)>>1]|0;
   $170 = $169 << 16 >> 16;
   $171 = Math_imul($168, $170)|0;
   $172 = $11;
   $173 = ((($172)) + 16|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = $174 & 65535;
   $176 = HEAP16[(25274)>>1]|0;
   $177 = $176 << 16 >> 16;
   $178 = Math_imul($175, $177)|0;
   $179 = $178 >> 16;
   $180 = (($171) + ($179))|0;
   $181 = (($164) + ($180))|0;
   $10 = $181;
   $182 = $10;
   $183 = $182 >> 5;
   $184 = (($183) + 1)|0;
   $185 = $184 >> 1;
   $186 = ($185|0)>(32767);
   if ($186) {
    $197 = 32767;
   } else {
    $187 = $10;
    $188 = $187 >> 5;
    $189 = (($188) + 1)|0;
    $190 = $189 >> 1;
    $191 = ($190|0)<(-32768);
    if ($191) {
     $197 = -32768;
    } else {
     $192 = $10;
     $193 = $192 >> 5;
     $194 = (($193) + 1)|0;
     $195 = $194 >> 1;
     $197 = $195;
    }
   }
   $196 = $197&65535;
   $198 = $5;
   $199 = ((($198)) + 2|0);
   $5 = $199;
   HEAP16[$198>>1] = $196;
   $200 = $11;
   $201 = ((($200)) + 12|0);
   $11 = $201;
   $202 = $9;
   $203 = (($202) - 3)|0;
   $9 = $203;
  }
  $204 = $8;
  $205 = $6;
  $206 = (($205) + ($204<<1)|0);
  $6 = $206;
  $207 = $8;
  $208 = $7;
  $209 = (($208) - ($207))|0;
  $7 = $209;
  $210 = $7;
  $211 = ($210|0)>(0);
  if (!($211)) {
   break;
  }
  $212 = $8;
  $213 = (($12) + ($212<<2)|0);
  ;HEAP32[$12>>2]=HEAP32[$213>>2]|0;HEAP32[$12+4>>2]=HEAP32[$213+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$213+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$213+12>>2]|0;
 }
 $214 = $4;
 $215 = $8;
 $216 = (($12) + ($215<<2)|0);
 ;HEAP32[$214>>2]=HEAP32[$216>>2]|0;HEAP32[$214+4>>2]=HEAP32[$216+4>>2]|0;HEAP32[$214+8>>2]=HEAP32[$216+8>>2]|0;HEAP32[$214+12>>2]=HEAP32[$216+12>>2]|0;
 STACKTOP = sp;return;
}
function _silk_resampler_down2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $7;
 $15 = $14 >> 1;
 $9 = $15;
 $8 = 0;
 while(1) {
  $16 = $8;
  $17 = $9;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = $8;
  $21 = $20<<1;
  $22 = (($19) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = $24 << 10;
  $10 = $25;
  $26 = $10;
  $27 = $4;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) - ($28))|0;
  $12 = $29;
  $30 = $12;
  $31 = $12;
  $32 = $31 >> 16;
  $33 = Math_imul($32, -25727)|0;
  $34 = $12;
  $35 = $34 & 65535;
  $36 = Math_imul($35, -25727)|0;
  $37 = $36 >> 16;
  $38 = (($33) + ($37))|0;
  $39 = (($30) + ($38))|0;
  $13 = $39;
  $40 = $4;
  $41 = HEAP32[$40>>2]|0;
  $42 = $13;
  $43 = (($41) + ($42))|0;
  $11 = $43;
  $44 = $10;
  $45 = $13;
  $46 = (($44) + ($45))|0;
  $47 = $4;
  HEAP32[$47>>2] = $46;
  $48 = $6;
  $49 = $8;
  $50 = $49<<1;
  $51 = (($50) + 1)|0;
  $52 = (($48) + ($51<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = $54 << 10;
  $10 = $55;
  $56 = $10;
  $57 = $4;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($56) - ($59))|0;
  $12 = $60;
  $61 = $12;
  $62 = $61 >> 16;
  $63 = ($62*9872)|0;
  $64 = $12;
  $65 = $64 & 65535;
  $66 = ($65*9872)|0;
  $67 = $66 >> 16;
  $68 = (($63) + ($67))|0;
  $13 = $68;
  $69 = $11;
  $70 = $4;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($69) + ($72))|0;
  $11 = $73;
  $74 = $11;
  $75 = $13;
  $76 = (($74) + ($75))|0;
  $11 = $76;
  $77 = $10;
  $78 = $13;
  $79 = (($77) + ($78))|0;
  $80 = $4;
  $81 = ((($80)) + 4|0);
  HEAP32[$81>>2] = $79;
  $82 = $11;
  $83 = $82 >> 10;
  $84 = (($83) + 1)|0;
  $85 = $84 >> 1;
  $86 = ($85|0)>(32767);
  if ($86) {
   $97 = 32767;
  } else {
   $87 = $11;
   $88 = $87 >> 10;
   $89 = (($88) + 1)|0;
   $90 = $89 >> 1;
   $91 = ($90|0)<(-32768);
   if ($91) {
    $97 = -32768;
   } else {
    $92 = $11;
    $93 = $92 >> 10;
    $94 = (($93) + 1)|0;
    $95 = $94 >> 1;
    $97 = $95;
   }
  }
  $96 = $97&65535;
  $98 = $5;
  $99 = $8;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = $96;
  $101 = $8;
  $102 = (($101) + 1)|0;
  $8 = $102;
 }
 STACKTOP = sp;return;
}
function _silk_resampler_private_AR2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $9;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = HEAP32[$15>>2]|0;
  $17 = $7;
  $18 = $10;
  $19 = (($17) + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = $21 << 8;
  $23 = (($16) + ($22))|0;
  $11 = $23;
  $24 = $11;
  $25 = $6;
  $26 = $10;
  $27 = (($25) + ($26<<2)|0);
  HEAP32[$27>>2] = $24;
  $28 = $11;
  $29 = $28 << 2;
  $11 = $29;
  $30 = $5;
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $11;
  $34 = $33 >> 16;
  $35 = $8;
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = Math_imul($34, $37)|0;
  $39 = $11;
  $40 = $39 & 65535;
  $41 = $8;
  $42 = HEAP16[$41>>1]|0;
  $43 = $42 << 16 >> 16;
  $44 = Math_imul($40, $43)|0;
  $45 = $44 >> 16;
  $46 = (($38) + ($45))|0;
  $47 = (($32) + ($46))|0;
  $48 = $5;
  HEAP32[$48>>2] = $47;
  $49 = $11;
  $50 = $49 >> 16;
  $51 = $8;
  $52 = ((($51)) + 2|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $55 = Math_imul($50, $54)|0;
  $56 = $11;
  $57 = $56 & 65535;
  $58 = $8;
  $59 = ((($58)) + 2|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = Math_imul($57, $61)|0;
  $63 = $62 >> 16;
  $64 = (($55) + ($63))|0;
  $65 = $5;
  $66 = ((($65)) + 4|0);
  HEAP32[$66>>2] = $64;
  $67 = $10;
  $68 = (($67) + 1)|0;
  $10 = $68;
 }
 STACKTOP = sp;return;
}
function _silk_sigm_Q15($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)<(0);
 $6 = $2;
 if ($5) {
  $7 = (0 - ($6))|0;
  $2 = $7;
  $8 = $2;
  $9 = ($8|0)>=(192);
  if ($9) {
   $1 = 0;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  } else {
   $10 = $2;
   $11 = $10 >> 5;
   $3 = $11;
   $12 = $3;
   $13 = (22304 + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $16 = (22328 + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17&65535;
   $19 = $18 << 16 >> 16;
   $20 = $2;
   $21 = $20 & 31;
   $22 = $21&65535;
   $23 = $22 << 16 >> 16;
   $24 = Math_imul($19, $23)|0;
   $25 = (($14) - ($24))|0;
   $1 = $25;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  }
 } else {
  $26 = ($6|0)>=(192);
  if ($26) {
   $1 = 32767;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  } else {
   $27 = $2;
   $28 = $27 >> 5;
   $3 = $28;
   $29 = $3;
   $30 = (22352 + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   $33 = (22328 + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34&65535;
   $36 = $35 << 16 >> 16;
   $37 = $2;
   $38 = $37 & 31;
   $39 = $38&65535;
   $40 = $39 << 16 >> 16;
   $41 = Math_imul($36, $40)|0;
   $42 = (($31) + ($41))|0;
   $1 = $42;
   $43 = $1;
   STACKTOP = sp;return ($43|0);
  }
 }
 return (0)|0;
}
function _silk_insertion_sort_increasing($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = 0;
 while(1) {
  $11 = $9;
  $12 = $7;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $9;
  $15 = $5;
  $16 = $9;
  $17 = (($15) + ($16<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = $9;
  $19 = (($18) + 1)|0;
  $9 = $19;
 }
 $9 = 1;
 while(1) {
  $20 = $9;
  $21 = $7;
  $22 = ($20|0)<($21|0);
  if (!($22)) {
   break;
  }
  $23 = $4;
  $24 = $9;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $8 = $26;
  $27 = $9;
  $28 = (($27) - 1)|0;
  $10 = $28;
  while(1) {
   $29 = $10;
   $30 = ($29|0)>=(0);
   if (!($30)) {
    break;
   }
   $31 = $8;
   $32 = $4;
   $33 = $10;
   $34 = (($32) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($31|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $4;
   $38 = $10;
   $39 = (($37) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $4;
   $42 = $10;
   $43 = (($42) + 1)|0;
   $44 = (($41) + ($43<<2)|0);
   HEAP32[$44>>2] = $40;
   $45 = $5;
   $46 = $10;
   $47 = (($45) + ($46<<2)|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $5;
   $50 = $10;
   $51 = (($50) + 1)|0;
   $52 = (($49) + ($51<<2)|0);
   HEAP32[$52>>2] = $48;
   $53 = $10;
   $54 = (($53) + -1)|0;
   $10 = $54;
  }
  $55 = $8;
  $56 = $4;
  $57 = $10;
  $58 = (($57) + 1)|0;
  $59 = (($56) + ($58<<2)|0);
  HEAP32[$59>>2] = $55;
  $60 = $9;
  $61 = $5;
  $62 = $10;
  $63 = (($62) + 1)|0;
  $64 = (($61) + ($63<<2)|0);
  HEAP32[$64>>2] = $60;
  $65 = $9;
  $66 = (($65) + 1)|0;
  $9 = $66;
 }
 $67 = $7;
 $9 = $67;
 while(1) {
  $68 = $9;
  $69 = $6;
  $70 = ($68|0)<($69|0);
  if (!($70)) {
   break;
  }
  $71 = $4;
  $72 = $9;
  $73 = (($71) + ($72<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $8 = $74;
  $75 = $8;
  $76 = $4;
  $77 = $7;
  $78 = (($77) - 1)|0;
  $79 = (($76) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($75|0)<($80|0);
  if ($81) {
   $82 = $7;
   $83 = (($82) - 2)|0;
   $10 = $83;
   while(1) {
    $84 = $10;
    $85 = ($84|0)>=(0);
    if (!($85)) {
     break;
    }
    $86 = $8;
    $87 = $4;
    $88 = $10;
    $89 = (($87) + ($88<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($86|0)<($90|0);
    if (!($91)) {
     break;
    }
    $92 = $4;
    $93 = $10;
    $94 = (($92) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $4;
    $97 = $10;
    $98 = (($97) + 1)|0;
    $99 = (($96) + ($98<<2)|0);
    HEAP32[$99>>2] = $95;
    $100 = $5;
    $101 = $10;
    $102 = (($100) + ($101<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $5;
    $105 = $10;
    $106 = (($105) + 1)|0;
    $107 = (($104) + ($106<<2)|0);
    HEAP32[$107>>2] = $103;
    $108 = $10;
    $109 = (($108) + -1)|0;
    $10 = $109;
   }
   $110 = $8;
   $111 = $4;
   $112 = $10;
   $113 = (($112) + 1)|0;
   $114 = (($111) + ($113<<2)|0);
   HEAP32[$114>>2] = $110;
   $115 = $9;
   $116 = $5;
   $117 = $10;
   $118 = (($117) + 1)|0;
   $119 = (($116) + ($118<<2)|0);
   HEAP32[$119>>2] = $115;
  }
  $120 = $9;
  $121 = (($120) + 1)|0;
  $9 = $121;
 }
 STACKTOP = sp;return;
}
function _silk_insertion_sort_increasing_all_values_int16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = 1;
 while(1) {
  $7 = $5;
  $8 = $3;
  $9 = ($7|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = $5;
  $12 = (($10) + ($11<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $4 = $14;
  $15 = $5;
  $16 = (($15) - 1)|0;
  $6 = $16;
  while(1) {
   $17 = $6;
   $18 = ($17|0)>=(0);
   if (!($18)) {
    break;
   }
   $19 = $4;
   $20 = $2;
   $21 = $6;
   $22 = (($20) + ($21<<1)|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = ($19|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $2;
   $27 = $6;
   $28 = (($26) + ($27<<1)|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $2;
   $31 = $6;
   $32 = (($31) + 1)|0;
   $33 = (($30) + ($32<<1)|0);
   HEAP16[$33>>1] = $29;
   $34 = $6;
   $35 = (($34) + -1)|0;
   $6 = $35;
  }
  $36 = $4;
  $37 = $36&65535;
  $38 = $2;
  $39 = $6;
  $40 = (($39) + 1)|0;
  $41 = (($38) + ($40<<1)|0);
  HEAP16[$41>>1] = $37;
  $42 = $5;
  $43 = (($42) + 1)|0;
  $5 = $43;
 }
 STACKTOP = sp;return;
}
function _silk_sum_sqr_shift($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = 0;
 $9 = 0;
 $12 = $7;
 $13 = (($12) + -1)|0;
 $7 = $13;
 $8 = 0;
 while(1) {
  $14 = $8;
  $15 = $7;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $11;
  $18 = $6;
  $19 = $8;
  $20 = (($18) + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = $6;
  $24 = $8;
  $25 = (($23) + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = Math_imul($22, $27)|0;
  $29 = (($17) + ($28))|0;
  $11 = $29;
  $30 = $11;
  $31 = $6;
  $32 = $8;
  $33 = (($32) + 1)|0;
  $34 = (($31) + ($33<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $6;
  $38 = $8;
  $39 = (($38) + 1)|0;
  $40 = (($37) + ($39<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  $43 = Math_imul($36, $42)|0;
  $44 = (($30) + ($43))|0;
  $11 = $44;
  $45 = $11;
  $46 = ($45|0)<(0);
  if ($46) {
   label = 4;
   break;
  }
  $51 = $8;
  $52 = (($51) + 2)|0;
  $8 = $52;
 }
 if ((label|0) == 4) {
  $47 = $11;
  $48 = $47 >>> 2;
  $11 = $48;
  $9 = 2;
  $49 = $8;
  $50 = (($49) + 2)|0;
  $8 = $50;
 }
 while(1) {
  $53 = $8;
  $54 = $7;
  $55 = ($53|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = $6;
  $57 = $8;
  $58 = (($56) + ($57<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $6;
  $62 = $8;
  $63 = (($61) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = Math_imul($60, $65)|0;
  $10 = $66;
  $67 = $10;
  $68 = $6;
  $69 = $8;
  $70 = (($69) + 1)|0;
  $71 = (($68) + ($70<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = $6;
  $75 = $8;
  $76 = (($75) + 1)|0;
  $77 = (($74) + ($76<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = Math_imul($73, $79)|0;
  $81 = (($67) + ($80))|0;
  $10 = $81;
  $82 = $11;
  $83 = $10;
  $84 = $9;
  $85 = $83 >>> $84;
  $86 = (($82) + ($85))|0;
  $11 = $86;
  $87 = $11;
  $88 = ($87|0)<(0);
  if ($88) {
   $89 = $11;
   $90 = $89 >>> 2;
   $11 = $90;
   $91 = $9;
   $92 = (($91) + 2)|0;
   $9 = $92;
  }
  $93 = $8;
  $94 = (($93) + 2)|0;
  $8 = $94;
 }
 $95 = $8;
 $96 = $7;
 $97 = ($95|0)==($96|0);
 if ($97) {
  $98 = $6;
  $99 = $8;
  $100 = (($98) + ($99<<1)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $6;
  $104 = $8;
  $105 = (($103) + ($104<<1)|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 << 16 >> 16;
  $108 = Math_imul($102, $107)|0;
  $10 = $108;
  $109 = $11;
  $110 = $10;
  $111 = $9;
  $112 = $110 >> $111;
  $113 = (($109) + ($112))|0;
  $11 = $113;
 }
 $114 = $11;
 $115 = $114 & -1073741824;
 $116 = ($115|0)!=(0);
 if (!($116)) {
  $121 = $9;
  $122 = $5;
  HEAP32[$122>>2] = $121;
  $123 = $11;
  $124 = $4;
  HEAP32[$124>>2] = $123;
  STACKTOP = sp;return;
 }
 $117 = $11;
 $118 = $117 >>> 2;
 $11 = $118;
 $119 = $9;
 $120 = (($119) + 2)|0;
 $9 = $120;
 $121 = $9;
 $122 = $5;
 HEAP32[$122>>2] = $121;
 $123 = $11;
 $124 = $4;
 HEAP32[$124>>2] = $123;
 STACKTOP = sp;return;
}
function _silk_apply_sine_window_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $7;
 $14 = (($13) + 1)|0;
 $15 = (+($14|0));
 $16 = 3.1415927410125732 / $15;
 $9 = $16;
 $17 = $9;
 $18 = $9;
 $19 = $17 * $18;
 $20 = 2.0 - $19;
 $10 = $20;
 $21 = $6;
 $22 = ($21|0)<(2);
 if ($22) {
  $11 = 0.0;
  $23 = $9;
  $12 = $23;
 } else {
  $11 = 1.0;
  $24 = $10;
  $25 = 0.5 * $24;
  $12 = $25;
 }
 $8 = 0;
 while(1) {
  $26 = $8;
  $27 = $7;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $5;
  $30 = $8;
  $31 = (($30) + 0)|0;
  $32 = (($29) + ($31<<2)|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $33 * 0.5;
  $35 = $11;
  $36 = $12;
  $37 = $35 + $36;
  $38 = $34 * $37;
  $39 = $4;
  $40 = $8;
  $41 = (($40) + 0)|0;
  $42 = (($39) + ($41<<2)|0);
  HEAPF32[$42>>2] = $38;
  $43 = $5;
  $44 = $8;
  $45 = (($44) + 1)|0;
  $46 = (($43) + ($45<<2)|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $12;
  $49 = $47 * $48;
  $50 = $4;
  $51 = $8;
  $52 = (($51) + 1)|0;
  $53 = (($50) + ($52<<2)|0);
  HEAPF32[$53>>2] = $49;
  $54 = $10;
  $55 = $12;
  $56 = $54 * $55;
  $57 = $11;
  $58 = $56 - $57;
  $11 = $58;
  $59 = $5;
  $60 = $8;
  $61 = (($60) + 2)|0;
  $62 = (($59) + ($61<<2)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $63 * 0.5;
  $65 = $12;
  $66 = $11;
  $67 = $65 + $66;
  $68 = $64 * $67;
  $69 = $4;
  $70 = $8;
  $71 = (($70) + 2)|0;
  $72 = (($69) + ($71<<2)|0);
  HEAPF32[$72>>2] = $68;
  $73 = $5;
  $74 = $8;
  $75 = (($74) + 3)|0;
  $76 = (($73) + ($75<<2)|0);
  $77 = +HEAPF32[$76>>2];
  $78 = $11;
  $79 = $77 * $78;
  $80 = $4;
  $81 = $8;
  $82 = (($81) + 3)|0;
  $83 = (($80) + ($82<<2)|0);
  HEAPF32[$83>>2] = $79;
  $84 = $10;
  $85 = $11;
  $86 = $84 * $85;
  $87 = $12;
  $88 = $86 - $87;
  $12 = $88;
  $89 = $8;
  $90 = (($89) + 4)|0;
  $8 = $90;
 }
 STACKTOP = sp;return;
}
function _silk_find_LPC_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1744|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1744|0);
 $10 = sp + 1616|0;
 $14 = sp + 1704|0;
 $15 = sp + 1536|0;
 $16 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $17 = $4;
 $18 = ((($17)) + 4612|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $4;
 $21 = ((($20)) + 4664|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) + ($22))|0;
 $9 = $23;
 $24 = $4;
 $25 = ((($24)) + 4768|0);
 $26 = ((($25)) + 31|0);
 HEAP8[$26>>0] = 4;
 $27 = $6;
 $28 = $7;
 $29 = $9;
 $30 = $4;
 $31 = ((($30)) + 4604|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $4;
 $34 = ((($33)) + 4664|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (+_silk_burg_modified_FLP($10,$27,$28,$29,$32,$35));
 $11 = $36;
 $37 = $4;
 $38 = ((($37)) + 4656|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0);
 L1: do {
  if ($40) {
   $41 = $4;
   $42 = ((($41)) + 4696|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $45 = $4;
    $46 = ((($45)) + 4604|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(4);
    if ($48) {
     $49 = $6;
     $50 = $9;
     $51 = $50<<1;
     $52 = (($49) + ($51<<2)|0);
     $53 = $7;
     $54 = $9;
     $55 = $4;
     $56 = ((($55)) + 4664|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (+_silk_burg_modified_FLP($15,$52,$53,$54,2,$57));
     $59 = $11;
     $60 = $59 - $58;
     $11 = $60;
     $61 = $5;
     $62 = $4;
     $63 = ((($62)) + 4664|0);
     $64 = HEAP32[$63>>2]|0;
     _silk_A2NLSF_FLP($61,$15,$64);
     $12 = 3.4028234663852886E+38;
     $8 = 3;
     while(1) {
      $65 = $8;
      $66 = ($65|0)>=(0);
      if (!($66)) {
       break L1;
      }
      $67 = $4;
      $68 = ((($67)) + 4524|0);
      $69 = $5;
      $70 = $8;
      $71 = $4;
      $72 = ((($71)) + 4664|0);
      $73 = HEAP32[$72>>2]|0;
      _silk_interpolate($14,$68,$69,$70,$73);
      $74 = $4;
      $75 = ((($74)) + 4664|0);
      $76 = HEAP32[$75>>2]|0;
      _silk_NLSF2A_FLP($15,$14,$76);
      $77 = $6;
      $78 = $9;
      $79 = $78<<1;
      $80 = $4;
      $81 = ((($80)) + 4664|0);
      $82 = HEAP32[$81>>2]|0;
      _silk_LPC_analysis_filter_FLP($16,$15,$77,$79,$82);
      $83 = $4;
      $84 = ((($83)) + 4664|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (($16) + ($85<<2)|0);
      $87 = $9;
      $88 = $4;
      $89 = ((($88)) + 4664|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($87) - ($90))|0;
      $92 = (+_silk_energy_FLP($86,$91));
      $93 = $4;
      $94 = ((($93)) + 4664|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($16) + ($95<<2)|0);
      $97 = $9;
      $98 = (($96) + ($97<<2)|0);
      $99 = $9;
      $100 = $4;
      $101 = ((($100)) + 4664|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($99) - ($102))|0;
      $104 = (+_silk_energy_FLP($98,$103));
      $105 = $92 + $104;
      $106 = $105;
      $13 = $106;
      $107 = $13;
      $108 = $11;
      $109 = $107 < $108;
      $110 = $13;
      if ($109) {
       $11 = $110;
       $111 = $8;
       $112 = $111&255;
       $113 = $4;
       $114 = ((($113)) + 4768|0);
       $115 = ((($114)) + 31|0);
       HEAP8[$115>>0] = $112;
      } else {
       $116 = $12;
       $117 = $110 > $116;
       if ($117) {
        break L1;
       }
      }
      $118 = $13;
      $12 = $118;
      $119 = $8;
      $120 = (($119) + -1)|0;
      $8 = $120;
     }
    }
   }
  }
 } while(0);
 $121 = $4;
 $122 = ((($121)) + 4768|0);
 $123 = ((($122)) + 31|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = $124 << 24 >> 24;
 $126 = ($125|0)==(4);
 if (!($126)) {
  STACKTOP = sp;return;
 }
 $127 = $5;
 $128 = $4;
 $129 = ((($128)) + 4664|0);
 $130 = HEAP32[$129>>2]|0;
 _silk_A2NLSF_FLP($127,$10,$130);
 STACKTOP = sp;return;
}
function _silk_find_LTP_FLP($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0.0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0.0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $25 = sp + 112|0;
 $28 = sp + 80|0;
 $29 = sp + 64|0;
 $30 = sp + 48|0;
 $32 = sp + 24|0;
 $33 = sp + 8|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $36 = $9;
 $20 = $36;
 $37 = $10;
 $22 = $37;
 $38 = $12;
 $39 = $17;
 $40 = (($38) + ($39<<2)|0);
 $34 = $40;
 $19 = 0;
 while(1) {
  $41 = $19;
  $42 = $16;
  $43 = ($41|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $34;
  $45 = $13;
  $46 = $19;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 2)|0;
  $50 = (0 - ($49))|0;
  $51 = (($44) + ($50<<2)|0);
  $35 = $51;
  $52 = $35;
  $53 = $15;
  $54 = $22;
  _silk_corrMatrix_FLP($52,$53,5,$54);
  $55 = $35;
  $56 = $34;
  $57 = $15;
  _silk_corrVector_FLP($55,$56,$57,5,$32);
  $58 = $34;
  $59 = $15;
  $60 = (+_silk_energy_FLP($58,$59));
  $61 = $60;
  $62 = $19;
  $63 = (($33) + ($62<<2)|0);
  HEAPF32[$63>>2] = $61;
  $64 = $19;
  $65 = (($33) + ($64<<2)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = 1.0 + $66;
  $68 = $22;
  $69 = +HEAPF32[$68>>2];
  $70 = $67 + $69;
  $71 = $22;
  $72 = ((($71)) + 96|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $70 + $73;
  $31 = $74;
  $75 = $31;
  $76 = $75 * 0.01666666753590107;
  $31 = $76;
  $77 = $22;
  $78 = $19;
  $79 = (($33) + ($78<<2)|0);
  $80 = $31;
  _silk_regularize_correlations_FLP($77,$79,$80,5);
  $81 = $22;
  $82 = $20;
  _silk_solve_LDL_FLP($81,5,$32,$82);
  $83 = $20;
  $84 = $22;
  $85 = $19;
  $86 = (($33) + ($85<<2)|0);
  $87 = +HEAPF32[$86>>2];
  $88 = (+_silk_residual_energy_covar_FLP($83,$84,$32,$87,5));
  $89 = $19;
  $90 = (($30) + ($89<<2)|0);
  HEAPF32[$90>>2] = $88;
  $91 = $14;
  $92 = $19;
  $93 = (($91) + ($92<<2)|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $19;
  $96 = (($30) + ($95<<2)|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $14;
  $99 = $19;
  $100 = (($98) + ($99<<2)|0);
  $101 = +HEAPF32[$100>>2];
  $102 = $97 * $101;
  $103 = $15;
  $104 = (+($103|0));
  $105 = 0.0099999997764825821 * $104;
  $106 = $102 + $105;
  $107 = $94 / $106;
  $21 = $107;
  $108 = $22;
  $109 = $21;
  _silk_scale_vector_FLP($108,$109,25);
  $110 = $22;
  $111 = ((($110)) + 48|0);
  $112 = +HEAPF32[$111>>2];
  $113 = $19;
  $114 = (($29) + ($113<<2)|0);
  HEAPF32[$114>>2] = $112;
  $115 = $15;
  $116 = $34;
  $117 = (($116) + ($115<<2)|0);
  $34 = $117;
  $118 = $20;
  $119 = ((($118)) + 20|0);
  $20 = $119;
  $120 = $22;
  $121 = ((($120)) + 100|0);
  $22 = $121;
  $122 = $19;
  $123 = (($122) + 1)|0;
  $19 = $123;
 }
 $124 = $11;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $24 = 9.9999999747524271E-7;
  $23 = 0.0;
  $19 = 0;
  while(1) {
   $126 = $19;
   $127 = $16;
   $128 = ($126|0)<($127|0);
   if (!($128)) {
    break;
   }
   $129 = $19;
   $130 = (($33) + ($129<<2)|0);
   $131 = +HEAPF32[$130>>2];
   $132 = $14;
   $133 = $19;
   $134 = (($132) + ($133<<2)|0);
   $135 = +HEAPF32[$134>>2];
   $136 = $131 * $135;
   $137 = $23;
   $138 = $137 + $136;
   $23 = $138;
   $139 = $19;
   $140 = (($30) + ($139<<2)|0);
   $141 = +HEAPF32[$140>>2];
   $142 = $14;
   $143 = $19;
   $144 = (($142) + ($143<<2)|0);
   $145 = +HEAPF32[$144>>2];
   $146 = $141 * $145;
   $147 = $24;
   $148 = $147 + $146;
   $24 = $148;
   $149 = $19;
   $150 = (($149) + 1)|0;
   $19 = $150;
  }
  $151 = $23;
  $152 = $24;
  $153 = $151 / $152;
  $154 = $153;
  $155 = (+_silk_log2_530($154));
  $156 = 3.0 * $155;
  $157 = $11;
  HEAPF32[$157>>2] = $156;
 }
 $158 = $9;
 $20 = $158;
 $19 = 0;
 while(1) {
  $159 = $19;
  $160 = $16;
  $161 = ($159|0)<($160|0);
  if (!($161)) {
   break;
  }
  $162 = $19;
  $163 = (($25) + ($162<<2)|0);
  HEAPF32[$163>>2] = 0.0;
  $18 = 0;
  while(1) {
   $164 = $18;
   $165 = ($164|0)<(5);
   $166 = $20;
   if (!($165)) {
    break;
   }
   $167 = $18;
   $168 = (($166) + ($167<<2)|0);
   $169 = +HEAPF32[$168>>2];
   $170 = $19;
   $171 = (($25) + ($170<<2)|0);
   $172 = +HEAPF32[$171>>2];
   $173 = $172 + $169;
   HEAPF32[$171>>2] = $173;
   $174 = $18;
   $175 = (($174) + 1)|0;
   $18 = $175;
  }
  $176 = ((($166)) + 20|0);
  $20 = $176;
  $177 = $19;
  $178 = (($177) + 1)|0;
  $19 = $178;
 }
 $21 = 0.0010000000474974513;
 $19 = 0;
 while(1) {
  $179 = $19;
  $180 = $16;
  $181 = ($179|0)<($180|0);
  if (!($181)) {
   break;
  }
  $182 = $19;
  $183 = (($29) + ($182<<2)|0);
  $184 = +HEAPF32[$183>>2];
  $185 = $21;
  $186 = $185 + $184;
  $21 = $186;
  $187 = $19;
  $188 = (($187) + 1)|0;
  $19 = $188;
 }
 $26 = 0.0;
 $19 = 0;
 while(1) {
  $189 = $19;
  $190 = $16;
  $191 = ($189|0)<($190|0);
  if (!($191)) {
   break;
  }
  $192 = $19;
  $193 = (($25) + ($192<<2)|0);
  $194 = +HEAPF32[$193>>2];
  $195 = $19;
  $196 = (($29) + ($195<<2)|0);
  $197 = +HEAPF32[$196>>2];
  $198 = $194 * $197;
  $199 = $26;
  $200 = $199 + $198;
  $26 = $200;
  $201 = $19;
  $202 = (($201) + 1)|0;
  $19 = $202;
 }
 $203 = $26;
 $204 = $21;
 $205 = $203 / $204;
 $26 = $205;
 $206 = $9;
 $20 = $206;
 $19 = 0;
 while(1) {
  $207 = $19;
  $208 = $16;
  $209 = ($207|0)<($208|0);
  if (!($209)) {
   break;
  }
  $210 = $19;
  $211 = (($29) + ($210<<2)|0);
  $212 = +HEAPF32[$211>>2];
  $213 = 0.10000000149011612 + $212;
  $214 = 0.10000000149011612 / $213;
  $215 = $26;
  $216 = $19;
  $217 = (($25) + ($216<<2)|0);
  $218 = +HEAPF32[$217>>2];
  $219 = $215 - $218;
  $220 = $214 * $219;
  $27 = $220;
  $21 = 0.0;
  $18 = 0;
  while(1) {
   $221 = $18;
   $222 = ($221|0)<(5);
   if (!($222)) {
    break;
   }
   $223 = $20;
   $224 = $18;
   $225 = (($223) + ($224<<2)|0);
   $226 = +HEAPF32[$225>>2];
   $227 = $226 > 0.10000000149011612;
   if ($227) {
    $228 = $20;
    $229 = $18;
    $230 = (($228) + ($229<<2)|0);
    $231 = +HEAPF32[$230>>2];
    $234 = $231;
   } else {
    $234 = 0.10000000149011612;
   }
   $232 = $18;
   $233 = (($28) + ($232<<2)|0);
   HEAPF32[$233>>2] = $234;
   $235 = $18;
   $236 = (($28) + ($235<<2)|0);
   $237 = +HEAPF32[$236>>2];
   $238 = $21;
   $239 = $238 + $237;
   $21 = $239;
   $240 = $18;
   $241 = (($240) + 1)|0;
   $18 = $241;
  }
  $242 = $27;
  $243 = $21;
  $244 = $242 / $243;
  $21 = $244;
  $18 = 0;
  while(1) {
   $245 = $18;
   $246 = ($245|0)<(5);
   $247 = $20;
   if (!($246)) {
    break;
   }
   $248 = $18;
   $249 = (($247) + ($248<<2)|0);
   $250 = +HEAPF32[$249>>2];
   $251 = $18;
   $252 = (($28) + ($251<<2)|0);
   $253 = +HEAPF32[$252>>2];
   $254 = $21;
   $255 = $253 * $254;
   $256 = $250 + $255;
   $257 = $20;
   $258 = $18;
   $259 = (($257) + ($258<<2)|0);
   HEAPF32[$259>>2] = $256;
   $260 = $18;
   $261 = (($260) + 1)|0;
   $18 = $261;
  }
  $262 = ((($247)) + 20|0);
  $20 = $262;
  $263 = $19;
  $264 = (($263) + 1)|0;
  $19 = $264;
 }
 STACKTOP = sp;return;
}
function _silk_log2_530($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+_log10($2));
 $4 = 3.32192809488736 * $3;
 $5 = $4;
 STACKTOP = sp;return (+$5);
}
function _silk_regularize_correlations_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = $7;
  $11 = ($9|0)<($10|0);
  $12 = $6;
  if (!($11)) {
   break;
  }
  $13 = $4;
  $14 = $8;
  $15 = $7;
  $16 = Math_imul($14, $15)|0;
  $17 = $8;
  $18 = (($16) + ($17))|0;
  $19 = (($13) + ($18<<2)|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20 + $12;
  HEAPF32[$19>>2] = $21;
  $22 = $8;
  $23 = (($22) + 1)|0;
  $8 = $23;
 }
 $24 = $5;
 $25 = +HEAPF32[$24>>2];
 $26 = $25 + $12;
 HEAPF32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _silk_solve_LDL_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1184|0);
 $9 = sp + 128|0;
 $10 = sp + 64|0;
 $11 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $4;
 $13 = $5;
 _silk_LDL_FLP($12,$13,$9,$11);
 $14 = $5;
 $15 = $6;
 _silk_SolveWithLowerTriangularWdiagOnes_FLP($9,$14,$15,$10);
 $8 = 0;
 while(1) {
  $16 = $8;
  $17 = $5;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $20 = (($10) + ($19<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $8;
  $23 = (($11) + ($22<<2)|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $21 * $24;
  $26 = $8;
  $27 = (($10) + ($26<<2)|0);
  HEAPF32[$27>>2] = $25;
  $28 = $8;
  $29 = (($28) + 1)|0;
  $8 = $29;
 }
 $30 = $5;
 $31 = $7;
 _silk_SolveWithUpperTriangularFromLowerWdiagOnes_FLP($9,$30,$10,$31);
 STACKTOP = sp;return;
}
function _silk_LDL_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0.0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $17 = sp + 80|0;
 $18 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = 1;
 $19 = $4;
 $20 = +HEAPF32[$19>>2];
 $21 = $4;
 $22 = $5;
 $23 = $5;
 $24 = Math_imul($22, $23)|0;
 $25 = (($24) - 1)|0;
 $26 = (($21) + ($25<<2)|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $20 + $27;
 $29 = 4.9999998736893758E-6 * $28;
 $30 = $29;
 $16 = $30;
 $11 = 0;
 while(1) {
  $31 = $11;
  $32 = $5;
  $33 = ($31|0)<($32|0);
  $34 = $12;
  $35 = ($34|0)==(1);
  $36 = $33 ? $35 : 0;
  if (!($36)) {
   break;
  }
  $12 = 0;
  $9 = 0;
  while(1) {
   $37 = $9;
   $38 = $5;
   $39 = ($37|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = $6;
   $41 = $9;
   $42 = $5;
   $43 = Math_imul($41, $42)|0;
   $44 = (($43) + 0)|0;
   $45 = (($40) + ($44<<2)|0);
   $13 = $45;
   $46 = $4;
   $47 = $9;
   $48 = $5;
   $49 = Math_imul($47, $48)|0;
   $50 = $9;
   $51 = (($49) + ($50))|0;
   $52 = (($46) + ($51<<2)|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $53;
   $15 = $54;
   $8 = 0;
   while(1) {
    $55 = $8;
    $56 = $9;
    $57 = ($55|0)<($56|0);
    if (!($57)) {
     break;
    }
    $58 = $13;
    $59 = $8;
    $60 = (($58) + ($59<<2)|0);
    $61 = +HEAPF32[$60>>2];
    $62 = $8;
    $63 = (($18) + ($62<<2)|0);
    $64 = +HEAPF32[$63>>2];
    $65 = $61 * $64;
    $66 = $8;
    $67 = (($17) + ($66<<2)|0);
    HEAPF32[$67>>2] = $65;
    $68 = $13;
    $69 = $8;
    $70 = (($68) + ($69<<2)|0);
    $71 = +HEAPF32[$70>>2];
    $72 = $8;
    $73 = (($17) + ($72<<2)|0);
    $74 = +HEAPF32[$73>>2];
    $75 = $71 * $74;
    $76 = $75;
    $77 = $15;
    $78 = $77 - $76;
    $15 = $78;
    $79 = $8;
    $80 = (($79) + 1)|0;
    $8 = $80;
   }
   $81 = $15;
   $82 = $16;
   $83 = $81 < $82;
   if ($83) {
    label = 9;
    break;
   }
   $107 = $15;
   $108 = $107;
   $109 = $9;
   $110 = (($18) + ($109<<2)|0);
   HEAPF32[$110>>2] = $108;
   $111 = $15;
   $112 = 1.0 / $111;
   $113 = $112;
   $114 = $7;
   $115 = $9;
   $116 = (($114) + ($115<<2)|0);
   HEAPF32[$116>>2] = $113;
   $117 = $6;
   $118 = $9;
   $119 = $5;
   $120 = Math_imul($118, $119)|0;
   $121 = $9;
   $122 = (($120) + ($121))|0;
   $123 = (($117) + ($122<<2)|0);
   HEAPF32[$123>>2] = 1.0;
   $124 = $4;
   $125 = $9;
   $126 = $5;
   $127 = Math_imul($125, $126)|0;
   $128 = (($127) + 0)|0;
   $129 = (($124) + ($128<<2)|0);
   $13 = $129;
   $130 = $6;
   $131 = $9;
   $132 = (($131) + 1)|0;
   $133 = $5;
   $134 = Math_imul($132, $133)|0;
   $135 = (($134) + 0)|0;
   $136 = (($130) + ($135<<2)|0);
   $14 = $136;
   $137 = $9;
   $138 = (($137) + 1)|0;
   $8 = $138;
   while(1) {
    $139 = $8;
    $140 = $5;
    $141 = ($139|0)<($140|0);
    if (!($141)) {
     break;
    }
    $15 = 0.0;
    $10 = 0;
    while(1) {
     $142 = $10;
     $143 = $9;
     $144 = ($142|0)<($143|0);
     if (!($144)) {
      break;
     }
     $145 = $14;
     $146 = $10;
     $147 = (($145) + ($146<<2)|0);
     $148 = +HEAPF32[$147>>2];
     $149 = $10;
     $150 = (($17) + ($149<<2)|0);
     $151 = +HEAPF32[$150>>2];
     $152 = $148 * $151;
     $153 = $152;
     $154 = $15;
     $155 = $154 + $153;
     $15 = $155;
     $156 = $10;
     $157 = (($156) + 1)|0;
     $10 = $157;
    }
    $158 = $13;
    $159 = $8;
    $160 = (($158) + ($159<<2)|0);
    $161 = +HEAPF32[$160>>2];
    $162 = $161;
    $163 = $15;
    $164 = $162 - $163;
    $165 = $7;
    $166 = $9;
    $167 = (($165) + ($166<<2)|0);
    $168 = +HEAPF32[$167>>2];
    $169 = $168;
    $170 = $164 * $169;
    $171 = $170;
    $172 = $6;
    $173 = $8;
    $174 = $5;
    $175 = Math_imul($173, $174)|0;
    $176 = $9;
    $177 = (($175) + ($176))|0;
    $178 = (($172) + ($177<<2)|0);
    HEAPF32[$178>>2] = $171;
    $179 = $5;
    $180 = $14;
    $181 = (($180) + ($179<<2)|0);
    $14 = $181;
    $182 = $8;
    $183 = (($182) + 1)|0;
    $8 = $183;
   }
   $184 = $9;
   $185 = (($184) + 1)|0;
   $9 = $185;
  }
  if ((label|0) == 9) {
   label = 0;
   $84 = $11;
   $85 = (($84) + 1)|0;
   $86 = (+($85|0));
   $87 = $16;
   $88 = $86 * $87;
   $89 = $15;
   $90 = $88 - $89;
   $15 = $90;
   $8 = 0;
   while(1) {
    $91 = $8;
    $92 = $5;
    $93 = ($91|0)<($92|0);
    if (!($93)) {
     break;
    }
    $94 = $15;
    $95 = $94;
    $96 = $4;
    $97 = $8;
    $98 = $5;
    $99 = Math_imul($97, $98)|0;
    $100 = $8;
    $101 = (($99) + ($100))|0;
    $102 = (($96) + ($101<<2)|0);
    $103 = +HEAPF32[$102>>2];
    $104 = $103 + $95;
    HEAPF32[$102>>2] = $104;
    $105 = $8;
    $106 = (($105) + 1)|0;
    $8 = $106;
   }
   $12 = 1;
  }
  $186 = $11;
  $187 = (($186) + 1)|0;
  $11 = $187;
 }
 STACKTOP = sp;return;
}
function _silk_SolveWithLowerTriangularWdiagOnes_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $12 = $8;
  $13 = $5;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $4;
  $16 = $8;
  $17 = $5;
  $18 = Math_imul($16, $17)|0;
  $19 = (($18) + 0)|0;
  $20 = (($15) + ($19<<2)|0);
  $11 = $20;
  $10 = 0.0;
  $9 = 0;
  while(1) {
   $21 = $9;
   $22 = $8;
   $23 = ($21|0)<($22|0);
   if (!($23)) {
    break;
   }
   $24 = $11;
   $25 = $9;
   $26 = (($24) + ($25<<2)|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $7;
   $29 = $9;
   $30 = (($28) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $27 * $31;
   $33 = $10;
   $34 = $33 + $32;
   $10 = $34;
   $35 = $9;
   $36 = (($35) + 1)|0;
   $9 = $36;
  }
  $37 = $6;
  $38 = $8;
  $39 = (($37) + ($38<<2)|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $10;
  $42 = $40 - $41;
  $10 = $42;
  $43 = $10;
  $44 = $7;
  $45 = $8;
  $46 = (($44) + ($45<<2)|0);
  HEAPF32[$46>>2] = $43;
  $47 = $8;
  $48 = (($47) + 1)|0;
  $8 = $48;
 }
 STACKTOP = sp;return;
}
function _silk_SolveWithUpperTriangularFromLowerWdiagOnes_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $5;
 $13 = (($12) - 1)|0;
 $8 = $13;
 while(1) {
  $14 = $8;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $5;
  $18 = 0;
  $19 = $8;
  $20 = (($18) + ($19))|0;
  $21 = (($16) + ($20<<2)|0);
  $11 = $21;
  $10 = 0.0;
  $22 = $5;
  $23 = (($22) - 1)|0;
  $9 = $23;
  while(1) {
   $24 = $9;
   $25 = $8;
   $26 = ($24|0)>($25|0);
   if (!($26)) {
    break;
   }
   $27 = $11;
   $28 = $9;
   $29 = $5;
   $30 = Math_imul($28, $29)|0;
   $31 = (($27) + ($30<<2)|0);
   $32 = +HEAPF32[$31>>2];
   $33 = $7;
   $34 = $9;
   $35 = (($33) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $32 * $36;
   $38 = $10;
   $39 = $38 + $37;
   $10 = $39;
   $40 = $9;
   $41 = (($40) + -1)|0;
   $9 = $41;
  }
  $42 = $6;
  $43 = $8;
  $44 = (($42) + ($43<<2)|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $10;
  $47 = $45 - $46;
  $10 = $47;
  $48 = $10;
  $49 = $7;
  $50 = $8;
  $51 = (($49) + ($50<<2)|0);
  HEAPF32[$51>>2] = $48;
  $52 = $8;
  $53 = (($52) + -1)|0;
  $8 = $53;
 }
 STACKTOP = sp;return;
}
function _silk_burg_modified_FLP($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0.0, $335 = 0.0;
 var $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0;
 var $372 = 0.0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0.0, $399 = 0.0, $40 = 0, $400 = 0.0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0.0;
 var $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $26 = sp + 528|0;
 $27 = sp + 400|0;
 $28 = sp + 264|0;
 $29 = sp + 128|0;
 $30 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $31 = $7;
 $32 = $10;
 $33 = $9;
 $34 = Math_imul($32, $33)|0;
 $35 = (+_silk_energy_FLP($31,$34));
 $16 = $35;
 dest=$26; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $14 = 0;
 while(1) {
  $36 = $14;
  $37 = $10;
  $38 = ($36|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $7;
  $40 = $14;
  $41 = $9;
  $42 = Math_imul($40, $41)|0;
  $43 = (($39) + ($42<<2)|0);
  $25 = $43;
  $13 = 1;
  while(1) {
   $44 = $13;
   $45 = $11;
   $46 = (($45) + 1)|0;
   $47 = ($44|0)<($46|0);
   if (!($47)) {
    break;
   }
   $48 = $25;
   $49 = $25;
   $50 = $13;
   $51 = (($49) + ($50<<2)|0);
   $52 = $9;
   $53 = $13;
   $54 = (($52) - ($53))|0;
   $55 = (+_silk_inner_product_FLP($48,$51,$54));
   $56 = $13;
   $57 = (($56) - 1)|0;
   $58 = (($26) + ($57<<3)|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $59 + $55;
   HEAPF64[$58>>3] = $60;
   $61 = $13;
   $62 = (($61) + 1)|0;
   $13 = $62;
  }
  $63 = $14;
  $64 = (($63) + 1)|0;
  $14 = $64;
 }
 dest=$27; src=$26; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $65 = $16;
 $66 = $16;
 $67 = 9.9999997473787516E-6 * $66;
 $68 = $65 + $67;
 $69 = $68 + 9.9999997171806853E-10;
 HEAPF64[$28>>3] = $69;
 HEAPF64[$29>>3] = $69;
 $17 = 1.0;
 $15 = 0;
 $13 = 0;
 while(1) {
  $70 = $13;
  $71 = $11;
  $72 = ($70|0)<($71|0);
  if (!($72)) {
   break;
  }
  $14 = 0;
  while(1) {
   $73 = $14;
   $74 = $10;
   $75 = ($73|0)<($74|0);
   if (!($75)) {
    break;
   }
   $76 = $7;
   $77 = $14;
   $78 = $9;
   $79 = Math_imul($77, $78)|0;
   $80 = (($76) + ($79<<2)|0);
   $25 = $80;
   $81 = $25;
   $82 = $13;
   $83 = (($81) + ($82<<2)|0);
   $84 = +HEAPF32[$83>>2];
   $85 = $84;
   $23 = $85;
   $86 = $25;
   $87 = $9;
   $88 = $13;
   $89 = (($87) - ($88))|0;
   $90 = (($89) - 1)|0;
   $91 = (($86) + ($90<<2)|0);
   $92 = +HEAPF32[$91>>2];
   $93 = $92;
   $24 = $93;
   $12 = 0;
   while(1) {
    $94 = $12;
    $95 = $13;
    $96 = ($94|0)<($95|0);
    if (!($96)) {
     break;
    }
    $97 = $25;
    $98 = $13;
    $99 = (($97) + ($98<<2)|0);
    $100 = +HEAPF32[$99>>2];
    $101 = $25;
    $102 = $13;
    $103 = $12;
    $104 = (($102) - ($103))|0;
    $105 = (($104) - 1)|0;
    $106 = (($101) + ($105<<2)|0);
    $107 = +HEAPF32[$106>>2];
    $108 = $100 * $107;
    $109 = $108;
    $110 = $12;
    $111 = (($26) + ($110<<3)|0);
    $112 = +HEAPF64[$111>>3];
    $113 = $112 - $109;
    HEAPF64[$111>>3] = $113;
    $114 = $25;
    $115 = $9;
    $116 = $13;
    $117 = (($115) - ($116))|0;
    $118 = (($117) - 1)|0;
    $119 = (($114) + ($118<<2)|0);
    $120 = +HEAPF32[$119>>2];
    $121 = $25;
    $122 = $9;
    $123 = $13;
    $124 = (($122) - ($123))|0;
    $125 = $12;
    $126 = (($124) + ($125))|0;
    $127 = (($121) + ($126<<2)|0);
    $128 = +HEAPF32[$127>>2];
    $129 = $120 * $128;
    $130 = $129;
    $131 = $12;
    $132 = (($27) + ($131<<3)|0);
    $133 = +HEAPF64[$132>>3];
    $134 = $133 - $130;
    HEAPF64[$132>>3] = $134;
    $135 = $12;
    $136 = (($30) + ($135<<3)|0);
    $137 = +HEAPF64[$136>>3];
    $22 = $137;
    $138 = $25;
    $139 = $13;
    $140 = $12;
    $141 = (($139) - ($140))|0;
    $142 = (($141) - 1)|0;
    $143 = (($138) + ($142<<2)|0);
    $144 = +HEAPF32[$143>>2];
    $145 = $144;
    $146 = $22;
    $147 = $145 * $146;
    $148 = $23;
    $149 = $148 + $147;
    $23 = $149;
    $150 = $25;
    $151 = $9;
    $152 = $13;
    $153 = (($151) - ($152))|0;
    $154 = $12;
    $155 = (($153) + ($154))|0;
    $156 = (($150) + ($155<<2)|0);
    $157 = +HEAPF32[$156>>2];
    $158 = $157;
    $159 = $22;
    $160 = $158 * $159;
    $161 = $24;
    $162 = $161 + $160;
    $24 = $162;
    $163 = $12;
    $164 = (($163) + 1)|0;
    $12 = $164;
   }
   $12 = 0;
   while(1) {
    $165 = $12;
    $166 = $13;
    $167 = ($165|0)<=($166|0);
    if (!($167)) {
     break;
    }
    $168 = $23;
    $169 = $25;
    $170 = $13;
    $171 = $12;
    $172 = (($170) - ($171))|0;
    $173 = (($169) + ($172<<2)|0);
    $174 = +HEAPF32[$173>>2];
    $175 = $174;
    $176 = $168 * $175;
    $177 = $12;
    $178 = (($28) + ($177<<3)|0);
    $179 = +HEAPF64[$178>>3];
    $180 = $179 - $176;
    HEAPF64[$178>>3] = $180;
    $181 = $24;
    $182 = $25;
    $183 = $9;
    $184 = $13;
    $185 = (($183) - ($184))|0;
    $186 = $12;
    $187 = (($185) + ($186))|0;
    $188 = (($187) - 1)|0;
    $189 = (($182) + ($188<<2)|0);
    $190 = +HEAPF32[$189>>2];
    $191 = $190;
    $192 = $181 * $191;
    $193 = $12;
    $194 = (($29) + ($193<<3)|0);
    $195 = +HEAPF64[$194>>3];
    $196 = $195 - $192;
    HEAPF64[$194>>3] = $196;
    $197 = $12;
    $198 = (($197) + 1)|0;
    $12 = $198;
   }
   $199 = $14;
   $200 = (($199) + 1)|0;
   $14 = $200;
  }
  $201 = $13;
  $202 = (($26) + ($201<<3)|0);
  $203 = +HEAPF64[$202>>3];
  $23 = $203;
  $204 = $13;
  $205 = (($27) + ($204<<3)|0);
  $206 = +HEAPF64[$205>>3];
  $24 = $206;
  $12 = 0;
  while(1) {
   $207 = $12;
   $208 = $13;
   $209 = ($207|0)<($208|0);
   if (!($209)) {
    break;
   }
   $210 = $12;
   $211 = (($30) + ($210<<3)|0);
   $212 = +HEAPF64[$211>>3];
   $22 = $212;
   $213 = $13;
   $214 = $12;
   $215 = (($213) - ($214))|0;
   $216 = (($215) - 1)|0;
   $217 = (($27) + ($216<<3)|0);
   $218 = +HEAPF64[$217>>3];
   $219 = $22;
   $220 = $218 * $219;
   $221 = $23;
   $222 = $221 + $220;
   $23 = $222;
   $223 = $13;
   $224 = $12;
   $225 = (($223) - ($224))|0;
   $226 = (($225) - 1)|0;
   $227 = (($26) + ($226<<3)|0);
   $228 = +HEAPF64[$227>>3];
   $229 = $22;
   $230 = $228 * $229;
   $231 = $24;
   $232 = $231 + $230;
   $24 = $232;
   $233 = $12;
   $234 = (($233) + 1)|0;
   $12 = $234;
  }
  $235 = $23;
  $236 = $13;
  $237 = (($236) + 1)|0;
  $238 = (($28) + ($237<<3)|0);
  HEAPF64[$238>>3] = $235;
  $239 = $24;
  $240 = $13;
  $241 = (($240) + 1)|0;
  $242 = (($29) + ($241<<3)|0);
  HEAPF64[$242>>3] = $239;
  $243 = $13;
  $244 = (($243) + 1)|0;
  $245 = (($29) + ($244<<3)|0);
  $246 = +HEAPF64[$245>>3];
  $18 = $246;
  $247 = +HEAPF64[$29>>3];
  $20 = $247;
  $248 = +HEAPF64[$28>>3];
  $19 = $248;
  $12 = 0;
  while(1) {
   $249 = $12;
   $250 = $13;
   $251 = ($249|0)<($250|0);
   if (!($251)) {
    break;
   }
   $252 = $12;
   $253 = (($30) + ($252<<3)|0);
   $254 = +HEAPF64[$253>>3];
   $22 = $254;
   $255 = $13;
   $256 = $12;
   $257 = (($255) - ($256))|0;
   $258 = (($29) + ($257<<3)|0);
   $259 = +HEAPF64[$258>>3];
   $260 = $22;
   $261 = $259 * $260;
   $262 = $18;
   $263 = $262 + $261;
   $18 = $263;
   $264 = $12;
   $265 = (($264) + 1)|0;
   $266 = (($29) + ($265<<3)|0);
   $267 = +HEAPF64[$266>>3];
   $268 = $22;
   $269 = $267 * $268;
   $270 = $20;
   $271 = $270 + $269;
   $20 = $271;
   $272 = $12;
   $273 = (($272) + 1)|0;
   $274 = (($28) + ($273<<3)|0);
   $275 = +HEAPF64[$274>>3];
   $276 = $22;
   $277 = $275 * $276;
   $278 = $19;
   $279 = $278 + $277;
   $19 = $279;
   $280 = $12;
   $281 = (($280) + 1)|0;
   $12 = $281;
  }
  $282 = $18;
  $283 = -2.0 * $282;
  $284 = $19;
  $285 = $20;
  $286 = $284 + $285;
  $287 = $283 / $286;
  $21 = $287;
  $288 = $17;
  $289 = $21;
  $290 = $21;
  $291 = $289 * $290;
  $292 = 1.0 - $291;
  $293 = $288 * $292;
  $23 = $293;
  $294 = $23;
  $295 = $8;
  $296 = $295;
  $297 = $294 <= $296;
  if ($297) {
   $298 = $8;
   $299 = $298;
   $300 = $17;
   $301 = $299 / $300;
   $302 = 1.0 - $301;
   $303 = (+Math_sqrt((+$302)));
   $21 = $303;
   $304 = $18;
   $305 = $304 > 0.0;
   if ($305) {
    $306 = $21;
    $307 = - $306;
    $21 = $307;
   }
   $308 = $8;
   $309 = $308;
   $17 = $309;
   $15 = 1;
  } else {
   $310 = $23;
   $17 = $310;
  }
  $12 = 0;
  while(1) {
   $311 = $12;
   $312 = $13;
   $313 = (($312) + 1)|0;
   $314 = $313 >> 1;
   $315 = ($311|0)<($314|0);
   if (!($315)) {
    break;
   }
   $316 = $12;
   $317 = (($30) + ($316<<3)|0);
   $318 = +HEAPF64[$317>>3];
   $23 = $318;
   $319 = $13;
   $320 = $12;
   $321 = (($319) - ($320))|0;
   $322 = (($321) - 1)|0;
   $323 = (($30) + ($322<<3)|0);
   $324 = +HEAPF64[$323>>3];
   $24 = $324;
   $325 = $23;
   $326 = $21;
   $327 = $24;
   $328 = $326 * $327;
   $329 = $325 + $328;
   $330 = $12;
   $331 = (($30) + ($330<<3)|0);
   HEAPF64[$331>>3] = $329;
   $332 = $24;
   $333 = $21;
   $334 = $23;
   $335 = $333 * $334;
   $336 = $332 + $335;
   $337 = $13;
   $338 = $12;
   $339 = (($337) - ($338))|0;
   $340 = (($339) - 1)|0;
   $341 = (($30) + ($340<<3)|0);
   HEAPF64[$341>>3] = $336;
   $342 = $12;
   $343 = (($342) + 1)|0;
   $12 = $343;
  }
  $344 = $21;
  $345 = $13;
  $346 = (($30) + ($345<<3)|0);
  HEAPF64[$346>>3] = $344;
  $347 = $15;
  $348 = ($347|0)!=(0);
  if ($348) {
   label = 33;
   break;
  }
  $12 = 0;
  while(1) {
   $358 = $12;
   $359 = $13;
   $360 = (($359) + 1)|0;
   $361 = ($358|0)<=($360|0);
   if (!($361)) {
    break;
   }
   $362 = $12;
   $363 = (($28) + ($362<<3)|0);
   $364 = +HEAPF64[$363>>3];
   $23 = $364;
   $365 = $21;
   $366 = $13;
   $367 = $12;
   $368 = (($366) - ($367))|0;
   $369 = (($368) + 1)|0;
   $370 = (($29) + ($369<<3)|0);
   $371 = +HEAPF64[$370>>3];
   $372 = $365 * $371;
   $373 = $12;
   $374 = (($28) + ($373<<3)|0);
   $375 = +HEAPF64[$374>>3];
   $376 = $375 + $372;
   HEAPF64[$374>>3] = $376;
   $377 = $21;
   $378 = $23;
   $379 = $377 * $378;
   $380 = $13;
   $381 = $12;
   $382 = (($380) - ($381))|0;
   $383 = (($382) + 1)|0;
   $384 = (($29) + ($383<<3)|0);
   $385 = +HEAPF64[$384>>3];
   $386 = $385 + $379;
   HEAPF64[$384>>3] = $386;
   $387 = $12;
   $388 = (($387) + 1)|0;
   $12 = $388;
  }
  $389 = $13;
  $390 = (($389) + 1)|0;
  $13 = $390;
 }
 L48: do {
  if ((label|0) == 33) {
   $349 = $13;
   $350 = (($349) + 1)|0;
   $12 = $350;
   while(1) {
    $351 = $12;
    $352 = $11;
    $353 = ($351|0)<($352|0);
    if (!($353)) {
     break L48;
    }
    $354 = $12;
    $355 = (($30) + ($354<<3)|0);
    HEAPF64[$355>>3] = 0.0;
    $356 = $12;
    $357 = (($356) + 1)|0;
    $12 = $357;
   }
  }
 } while(0);
 $391 = $15;
 $392 = ($391|0)!=(0);
 if (!($392)) {
  $423 = +HEAPF64[$28>>3];
  $19 = $423;
  $23 = 1.0;
  $12 = 0;
  while(1) {
   $424 = $12;
   $425 = $11;
   $426 = ($424|0)<($425|0);
   if (!($426)) {
    break;
   }
   $427 = $12;
   $428 = (($30) + ($427<<3)|0);
   $429 = +HEAPF64[$428>>3];
   $22 = $429;
   $430 = $12;
   $431 = (($430) + 1)|0;
   $432 = (($28) + ($431<<3)|0);
   $433 = +HEAPF64[$432>>3];
   $434 = $22;
   $435 = $433 * $434;
   $436 = $19;
   $437 = $436 + $435;
   $19 = $437;
   $438 = $22;
   $439 = $22;
   $440 = $438 * $439;
   $441 = $23;
   $442 = $441 + $440;
   $23 = $442;
   $443 = $22;
   $444 = - $443;
   $445 = $444;
   $446 = $6;
   $447 = $12;
   $448 = (($446) + ($447<<2)|0);
   HEAPF32[$448>>2] = $445;
   $449 = $12;
   $450 = (($449) + 1)|0;
   $12 = $450;
  }
  $451 = $16;
  $452 = 9.9999997473787516E-6 * $451;
  $453 = $23;
  $454 = $452 * $453;
  $455 = $19;
  $456 = $455 - $454;
  $19 = $456;
  $457 = $19;
  $458 = $457;
  STACKTOP = sp;return (+$458);
 }
 $12 = 0;
 while(1) {
  $393 = $12;
  $394 = $11;
  $395 = ($393|0)<($394|0);
  if (!($395)) {
   break;
  }
  $396 = $12;
  $397 = (($30) + ($396<<3)|0);
  $398 = +HEAPF64[$397>>3];
  $399 = - $398;
  $400 = $399;
  $401 = $6;
  $402 = $12;
  $403 = (($401) + ($402<<2)|0);
  HEAPF32[$403>>2] = $400;
  $404 = $12;
  $405 = (($404) + 1)|0;
  $12 = $405;
 }
 $14 = 0;
 while(1) {
  $406 = $14;
  $407 = $10;
  $408 = ($406|0)<($407|0);
  if (!($408)) {
   break;
  }
  $409 = $7;
  $410 = $14;
  $411 = $9;
  $412 = Math_imul($410, $411)|0;
  $413 = (($409) + ($412<<2)|0);
  $414 = $11;
  $415 = (+_silk_energy_FLP($413,$414));
  $416 = $16;
  $417 = $416 - $415;
  $16 = $417;
  $418 = $14;
  $419 = (($418) + 1)|0;
  $14 = $419;
 }
 $420 = $16;
 $421 = $17;
 $422 = $420 * $421;
 $19 = $422;
 $457 = $19;
 $458 = $457;
 STACKTOP = sp;return (+$458);
}
function _silk_scale_vector_FLP($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = $8 & 65532;
 $7 = $9;
 $6 = 0;
 while(1) {
  $10 = $6;
  $11 = $7;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $3;
  $15 = $6;
  $16 = (($15) + 0)|0;
  $17 = (($14) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $18 * $13;
  HEAPF32[$17>>2] = $19;
  $20 = $4;
  $21 = $3;
  $22 = $6;
  $23 = (($22) + 1)|0;
  $24 = (($21) + ($23<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 * $20;
  HEAPF32[$24>>2] = $26;
  $27 = $4;
  $28 = $3;
  $29 = $6;
  $30 = (($29) + 2)|0;
  $31 = (($28) + ($30<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = $32 * $27;
  HEAPF32[$31>>2] = $33;
  $34 = $4;
  $35 = $3;
  $36 = $6;
  $37 = (($36) + 3)|0;
  $38 = (($35) + ($37<<2)|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $39 * $34;
  HEAPF32[$38>>2] = $40;
  $41 = $6;
  $42 = (($41) + 4)|0;
  $6 = $42;
 }
 while(1) {
  $43 = $6;
  $44 = $5;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $4;
  $47 = $3;
  $48 = $6;
  $49 = (($47) + ($48<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 * $46;
  HEAPF32[$49>>2] = $51;
  $52 = $6;
  $53 = (($52) + 1)|0;
  $6 = $53;
 }
 STACKTOP = sp;return;
}
function _silk_CNG_Reset($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 2340|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = (32767 / ($8|0))&-1;
 $3 = $9;
 $4 = 0;
 $2 = 0;
 while(1) {
  $10 = $2;
  $11 = $1;
  $12 = ((($11)) + 2340|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = (($16) + ($15))|0;
  $4 = $17;
  $18 = $4;
  $19 = $18&65535;
  $20 = $1;
  $21 = ((($20)) + 2772|0);
  $22 = ((($21)) + 1280|0);
  $23 = $2;
  $24 = (($22) + ($23<<1)|0);
  HEAP16[$24>>1] = $19;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
 }
 $27 = $1;
 $28 = ((($27)) + 2772|0);
 $29 = ((($28)) + 1376|0);
 HEAP32[$29>>2] = 0;
 $30 = $1;
 $31 = ((($30)) + 2772|0);
 $32 = ((($31)) + 1380|0);
 HEAP32[$32>>2] = 3176576;
 STACKTOP = sp;return;
}
function _silk_CNG($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = ((($16)) + 2772|0);
 $14 = $17;
 $18 = $4;
 $19 = ((($18)) + 2316|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $14;
 $22 = ((($21)) + 1384|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)!=($23|0);
 if ($24) {
  $25 = $4;
  _silk_CNG_Reset($25);
  $26 = $4;
  $27 = ((($26)) + 2316|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $14;
  $30 = ((($29)) + 1384|0);
  HEAP32[$30>>2] = $28;
 }
 $31 = $4;
 $32 = ((($31)) + 4160|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 L4: do {
  if ($34) {
   $35 = $4;
   $36 = ((($35)) + 4164|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $8 = 0;
    while(1) {
     $39 = $8;
     $40 = $4;
     $41 = ((($40)) + 2340|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($39|0)<($42|0);
     if (!($43)) {
      break;
     }
     $44 = $4;
     $45 = ((($44)) + 2344|0);
     $46 = $8;
     $47 = (($45) + ($46<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48 << 16 >> 16;
     $50 = $14;
     $51 = ((($50)) + 1280|0);
     $52 = $8;
     $53 = (($51) + ($52<<1)|0);
     $54 = HEAP16[$53>>1]|0;
     $55 = $54 << 16 >> 16;
     $56 = (($49) - ($55))|0;
     $57 = $56 >> 16;
     $58 = ($57*16348)|0;
     $59 = $4;
     $60 = ((($59)) + 2344|0);
     $61 = $8;
     $62 = (($60) + ($61<<1)|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $63 << 16 >> 16;
     $65 = $14;
     $66 = ((($65)) + 1280|0);
     $67 = $8;
     $68 = (($66) + ($67<<1)|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = (($64) - ($70))|0;
     $72 = $71 & 65535;
     $73 = ($72*16348)|0;
     $74 = $73 >> 16;
     $75 = (($58) + ($74))|0;
     $76 = $14;
     $77 = ((($76)) + 1280|0);
     $78 = $8;
     $79 = (($77) + ($78<<1)|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = $80 << 16 >> 16;
     $82 = (($81) + ($75))|0;
     $83 = $82&65535;
     HEAP16[$79>>1] = $83;
     $84 = $8;
     $85 = (($84) + 1)|0;
     $8 = $85;
    }
    $11 = 0;
    $9 = 0;
    $8 = 0;
    while(1) {
     $86 = $8;
     $87 = $4;
     $88 = ((($87)) + 2324|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($86|0)<($89|0);
     if (!($90)) {
      break;
     }
     $91 = $5;
     $92 = ((($91)) + 16|0);
     $93 = $8;
     $94 = (($92) + ($93<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $11;
     $97 = ($95|0)>($96|0);
     if ($97) {
      $98 = $5;
      $99 = ((($98)) + 16|0);
      $100 = $8;
      $101 = (($99) + ($100<<2)|0);
      $102 = HEAP32[$101>>2]|0;
      $11 = $102;
      $103 = $8;
      $9 = $103;
     }
     $104 = $8;
     $105 = (($104) + 1)|0;
     $8 = $105;
    }
    $106 = $14;
    $107 = $4;
    $108 = ((($107)) + 2332|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($106) + ($109<<2)|0);
    $111 = $14;
    $112 = $4;
    $113 = ((($112)) + 2324|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) - 1)|0;
    $116 = $4;
    $117 = ((($116)) + 2332|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = Math_imul($115, $118)|0;
    $120 = $119<<2;
    _memmove(($110|0),($111|0),($120|0))|0;
    $121 = $14;
    $122 = $4;
    $123 = ((($122)) + 4|0);
    $124 = $9;
    $125 = $4;
    $126 = ((($125)) + 2332|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = Math_imul($124, $127)|0;
    $129 = (($123) + ($128<<2)|0);
    $130 = $4;
    $131 = ((($130)) + 2332|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $132<<2;
    _memcpy(($121|0),($129|0),($133|0))|0;
    $8 = 0;
    while(1) {
     $134 = $8;
     $135 = $4;
     $136 = ((($135)) + 2324|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($134|0)<($137|0);
     if (!($138)) {
      break L4;
     }
     $139 = $5;
     $140 = ((($139)) + 16|0);
     $141 = $8;
     $142 = (($140) + ($141<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $14;
     $145 = ((($144)) + 1376|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($143) - ($146))|0;
     $148 = $147 >> 16;
     $149 = ($148*4634)|0;
     $150 = $5;
     $151 = ((($150)) + 16|0);
     $152 = $8;
     $153 = (($151) + ($152<<2)|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = $14;
     $156 = ((($155)) + 1376|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (($154) - ($157))|0;
     $159 = $158 & 65535;
     $160 = ($159*4634)|0;
     $161 = $160 >> 16;
     $162 = (($149) + ($161))|0;
     $163 = $14;
     $164 = ((($163)) + 1376|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (($165) + ($162))|0;
     HEAP32[$164>>2] = $166;
     $167 = $8;
     $168 = (($167) + 1)|0;
     $8 = $168;
    }
   }
  }
 } while(0);
 $169 = $4;
 $170 = ((($169)) + 4160|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)!=(0);
 if (!($172)) {
  $777 = $14;
  $778 = ((($777)) + 1312|0);
  $779 = $4;
  $780 = ((($779)) + 2340|0);
  $781 = HEAP32[$780>>2]|0;
  $782 = $781<<2;
  _memset(($778|0),0,($782|0))|0;
  STACKTOP = sp;return;
 }
 $173 = $7;
 $174 = (($173) + 16)|0;
 $175 = (_llvm_stacksave()|0);
 $15 = $175;
 $$alloca_mul = $174<<2;
 $176 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $177 = $4;
 $178 = ((($177)) + 4168|0);
 $179 = ((($178)) + 56|0);
 $180 = HEAP16[$179>>1]|0;
 $181 = $180 << 16 >> 16;
 $182 = $181 >> 16;
 $183 = $4;
 $184 = ((($183)) + 4168|0);
 $185 = ((($184)) + 72|0);
 $186 = ((($185)) + 4|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = $187&65535;
 $189 = $188 << 16 >> 16;
 $190 = Math_imul($182, $189)|0;
 $191 = $4;
 $192 = ((($191)) + 4168|0);
 $193 = ((($192)) + 56|0);
 $194 = HEAP16[$193>>1]|0;
 $195 = $194 << 16 >> 16;
 $196 = $195 & 65535;
 $197 = $4;
 $198 = ((($197)) + 4168|0);
 $199 = ((($198)) + 72|0);
 $200 = ((($199)) + 4|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = $201&65535;
 $203 = $202 << 16 >> 16;
 $204 = Math_imul($196, $203)|0;
 $205 = $204 >> 16;
 $206 = (($190) + ($205))|0;
 $207 = $4;
 $208 = ((($207)) + 4168|0);
 $209 = ((($208)) + 56|0);
 $210 = HEAP16[$209>>1]|0;
 $211 = $210 << 16 >> 16;
 $212 = $4;
 $213 = ((($212)) + 4168|0);
 $214 = ((($213)) + 72|0);
 $215 = ((($214)) + 4|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $216 >> 15;
 $218 = (($217) + 1)|0;
 $219 = $218 >> 1;
 $220 = Math_imul($211, $219)|0;
 $221 = (($206) + ($220))|0;
 $12 = $221;
 $222 = $12;
 $223 = ($222|0)>=(2097152);
 if ($223) {
  label = 19;
 } else {
  $224 = $14;
  $225 = ((($224)) + 1376|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = ($226|0)>(8388608);
  if ($227) {
   label = 19;
  } else {
   $248 = $12;
   $249 = $248 >> 16;
   $250 = $12;
   $251 = $250&65535;
   $252 = $251 << 16 >> 16;
   $253 = Math_imul($249, $252)|0;
   $254 = $12;
   $255 = $254 & 65535;
   $256 = $12;
   $257 = $256&65535;
   $258 = $257 << 16 >> 16;
   $259 = Math_imul($255, $258)|0;
   $260 = $259 >> 16;
   $261 = (($253) + ($260))|0;
   $262 = $12;
   $263 = $12;
   $264 = $263 >> 15;
   $265 = (($264) + 1)|0;
   $266 = $265 >> 1;
   $267 = Math_imul($262, $266)|0;
   $268 = (($261) + ($267))|0;
   $12 = $268;
   $269 = $14;
   $270 = ((($269)) + 1376|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = $271 >> 16;
   $273 = $14;
   $274 = ((($273)) + 1376|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $275&65535;
   $277 = $276 << 16 >> 16;
   $278 = Math_imul($272, $277)|0;
   $279 = $14;
   $280 = ((($279)) + 1376|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = $281 & 65535;
   $283 = $14;
   $284 = ((($283)) + 1376|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = $285&65535;
   $287 = $286 << 16 >> 16;
   $288 = Math_imul($282, $287)|0;
   $289 = $288 >> 16;
   $290 = (($278) + ($289))|0;
   $291 = $14;
   $292 = ((($291)) + 1376|0);
   $293 = HEAP32[$292>>2]|0;
   $294 = $14;
   $295 = ((($294)) + 1376|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = $296 >> 15;
   $298 = (($297) + 1)|0;
   $299 = $298 >> 1;
   $300 = Math_imul($293, $299)|0;
   $301 = (($290) + ($300))|0;
   $302 = $12;
   $303 = $302 << 5;
   $304 = (($301) - ($303))|0;
   $12 = $304;
   $305 = $12;
   $306 = (_silk_SQRT_APPROX_543($305)|0);
   $307 = $306 << 8;
   $12 = $307;
  }
 }
 if ((label|0) == 19) {
  $228 = $12;
  $229 = $228 >> 16;
  $230 = $12;
  $231 = $230 >> 16;
  $232 = Math_imul($229, $231)|0;
  $12 = $232;
  $233 = $14;
  $234 = ((($233)) + 1376|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $235 >> 16;
  $237 = $14;
  $238 = ((($237)) + 1376|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = $239 >> 16;
  $241 = Math_imul($236, $240)|0;
  $242 = $12;
  $243 = $242 << 5;
  $244 = (($241) - ($243))|0;
  $12 = $244;
  $245 = $12;
  $246 = (_silk_SQRT_APPROX_543($245)|0);
  $247 = $246 << 16;
  $12 = $247;
 }
 $308 = ((($176)) + 64|0);
 $309 = $14;
 $310 = $12;
 $311 = $7;
 $312 = $14;
 $313 = ((($312)) + 1380|0);
 _silk_CNG_exc($308,$309,$310,$311,$313);
 $314 = $14;
 $315 = ((($314)) + 1280|0);
 $316 = $4;
 $317 = ((($316)) + 2340|0);
 $318 = HEAP32[$317>>2]|0;
 _silk_NLSF2A($13,$315,$318);
 $319 = $14;
 $320 = ((($319)) + 1312|0);
 dest=$176; src=$320; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = 0;
 while(1) {
  $321 = $8;
  $322 = $7;
  $323 = ($321|0)<($322|0);
  if (!($323)) {
   break;
  }
  $324 = $4;
  $325 = ((($324)) + 2340|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = $326 >> 1;
  $10 = $327;
  $328 = $10;
  $329 = $8;
  $330 = (16 + ($329))|0;
  $331 = (($330) - 1)|0;
  $332 = (($176) + ($331<<2)|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = $333 >> 16;
  $335 = HEAP16[$13>>1]|0;
  $336 = $335 << 16 >> 16;
  $337 = Math_imul($334, $336)|0;
  $338 = $8;
  $339 = (16 + ($338))|0;
  $340 = (($339) - 1)|0;
  $341 = (($176) + ($340<<2)|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = $342 & 65535;
  $344 = HEAP16[$13>>1]|0;
  $345 = $344 << 16 >> 16;
  $346 = Math_imul($343, $345)|0;
  $347 = $346 >> 16;
  $348 = (($337) + ($347))|0;
  $349 = (($328) + ($348))|0;
  $10 = $349;
  $350 = $10;
  $351 = $8;
  $352 = (16 + ($351))|0;
  $353 = (($352) - 2)|0;
  $354 = (($176) + ($353<<2)|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = $355 >> 16;
  $357 = ((($13)) + 2|0);
  $358 = HEAP16[$357>>1]|0;
  $359 = $358 << 16 >> 16;
  $360 = Math_imul($356, $359)|0;
  $361 = $8;
  $362 = (16 + ($361))|0;
  $363 = (($362) - 2)|0;
  $364 = (($176) + ($363<<2)|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = $365 & 65535;
  $367 = ((($13)) + 2|0);
  $368 = HEAP16[$367>>1]|0;
  $369 = $368 << 16 >> 16;
  $370 = Math_imul($366, $369)|0;
  $371 = $370 >> 16;
  $372 = (($360) + ($371))|0;
  $373 = (($350) + ($372))|0;
  $10 = $373;
  $374 = $10;
  $375 = $8;
  $376 = (16 + ($375))|0;
  $377 = (($376) - 3)|0;
  $378 = (($176) + ($377<<2)|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = $379 >> 16;
  $381 = ((($13)) + 4|0);
  $382 = HEAP16[$381>>1]|0;
  $383 = $382 << 16 >> 16;
  $384 = Math_imul($380, $383)|0;
  $385 = $8;
  $386 = (16 + ($385))|0;
  $387 = (($386) - 3)|0;
  $388 = (($176) + ($387<<2)|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = $389 & 65535;
  $391 = ((($13)) + 4|0);
  $392 = HEAP16[$391>>1]|0;
  $393 = $392 << 16 >> 16;
  $394 = Math_imul($390, $393)|0;
  $395 = $394 >> 16;
  $396 = (($384) + ($395))|0;
  $397 = (($374) + ($396))|0;
  $10 = $397;
  $398 = $10;
  $399 = $8;
  $400 = (16 + ($399))|0;
  $401 = (($400) - 4)|0;
  $402 = (($176) + ($401<<2)|0);
  $403 = HEAP32[$402>>2]|0;
  $404 = $403 >> 16;
  $405 = ((($13)) + 6|0);
  $406 = HEAP16[$405>>1]|0;
  $407 = $406 << 16 >> 16;
  $408 = Math_imul($404, $407)|0;
  $409 = $8;
  $410 = (16 + ($409))|0;
  $411 = (($410) - 4)|0;
  $412 = (($176) + ($411<<2)|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = $413 & 65535;
  $415 = ((($13)) + 6|0);
  $416 = HEAP16[$415>>1]|0;
  $417 = $416 << 16 >> 16;
  $418 = Math_imul($414, $417)|0;
  $419 = $418 >> 16;
  $420 = (($408) + ($419))|0;
  $421 = (($398) + ($420))|0;
  $10 = $421;
  $422 = $10;
  $423 = $8;
  $424 = (16 + ($423))|0;
  $425 = (($424) - 5)|0;
  $426 = (($176) + ($425<<2)|0);
  $427 = HEAP32[$426>>2]|0;
  $428 = $427 >> 16;
  $429 = ((($13)) + 8|0);
  $430 = HEAP16[$429>>1]|0;
  $431 = $430 << 16 >> 16;
  $432 = Math_imul($428, $431)|0;
  $433 = $8;
  $434 = (16 + ($433))|0;
  $435 = (($434) - 5)|0;
  $436 = (($176) + ($435<<2)|0);
  $437 = HEAP32[$436>>2]|0;
  $438 = $437 & 65535;
  $439 = ((($13)) + 8|0);
  $440 = HEAP16[$439>>1]|0;
  $441 = $440 << 16 >> 16;
  $442 = Math_imul($438, $441)|0;
  $443 = $442 >> 16;
  $444 = (($432) + ($443))|0;
  $445 = (($422) + ($444))|0;
  $10 = $445;
  $446 = $10;
  $447 = $8;
  $448 = (16 + ($447))|0;
  $449 = (($448) - 6)|0;
  $450 = (($176) + ($449<<2)|0);
  $451 = HEAP32[$450>>2]|0;
  $452 = $451 >> 16;
  $453 = ((($13)) + 10|0);
  $454 = HEAP16[$453>>1]|0;
  $455 = $454 << 16 >> 16;
  $456 = Math_imul($452, $455)|0;
  $457 = $8;
  $458 = (16 + ($457))|0;
  $459 = (($458) - 6)|0;
  $460 = (($176) + ($459<<2)|0);
  $461 = HEAP32[$460>>2]|0;
  $462 = $461 & 65535;
  $463 = ((($13)) + 10|0);
  $464 = HEAP16[$463>>1]|0;
  $465 = $464 << 16 >> 16;
  $466 = Math_imul($462, $465)|0;
  $467 = $466 >> 16;
  $468 = (($456) + ($467))|0;
  $469 = (($446) + ($468))|0;
  $10 = $469;
  $470 = $10;
  $471 = $8;
  $472 = (16 + ($471))|0;
  $473 = (($472) - 7)|0;
  $474 = (($176) + ($473<<2)|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = $475 >> 16;
  $477 = ((($13)) + 12|0);
  $478 = HEAP16[$477>>1]|0;
  $479 = $478 << 16 >> 16;
  $480 = Math_imul($476, $479)|0;
  $481 = $8;
  $482 = (16 + ($481))|0;
  $483 = (($482) - 7)|0;
  $484 = (($176) + ($483<<2)|0);
  $485 = HEAP32[$484>>2]|0;
  $486 = $485 & 65535;
  $487 = ((($13)) + 12|0);
  $488 = HEAP16[$487>>1]|0;
  $489 = $488 << 16 >> 16;
  $490 = Math_imul($486, $489)|0;
  $491 = $490 >> 16;
  $492 = (($480) + ($491))|0;
  $493 = (($470) + ($492))|0;
  $10 = $493;
  $494 = $10;
  $495 = $8;
  $496 = (16 + ($495))|0;
  $497 = (($496) - 8)|0;
  $498 = (($176) + ($497<<2)|0);
  $499 = HEAP32[$498>>2]|0;
  $500 = $499 >> 16;
  $501 = ((($13)) + 14|0);
  $502 = HEAP16[$501>>1]|0;
  $503 = $502 << 16 >> 16;
  $504 = Math_imul($500, $503)|0;
  $505 = $8;
  $506 = (16 + ($505))|0;
  $507 = (($506) - 8)|0;
  $508 = (($176) + ($507<<2)|0);
  $509 = HEAP32[$508>>2]|0;
  $510 = $509 & 65535;
  $511 = ((($13)) + 14|0);
  $512 = HEAP16[$511>>1]|0;
  $513 = $512 << 16 >> 16;
  $514 = Math_imul($510, $513)|0;
  $515 = $514 >> 16;
  $516 = (($504) + ($515))|0;
  $517 = (($494) + ($516))|0;
  $10 = $517;
  $518 = $10;
  $519 = $8;
  $520 = (16 + ($519))|0;
  $521 = (($520) - 9)|0;
  $522 = (($176) + ($521<<2)|0);
  $523 = HEAP32[$522>>2]|0;
  $524 = $523 >> 16;
  $525 = ((($13)) + 16|0);
  $526 = HEAP16[$525>>1]|0;
  $527 = $526 << 16 >> 16;
  $528 = Math_imul($524, $527)|0;
  $529 = $8;
  $530 = (16 + ($529))|0;
  $531 = (($530) - 9)|0;
  $532 = (($176) + ($531<<2)|0);
  $533 = HEAP32[$532>>2]|0;
  $534 = $533 & 65535;
  $535 = ((($13)) + 16|0);
  $536 = HEAP16[$535>>1]|0;
  $537 = $536 << 16 >> 16;
  $538 = Math_imul($534, $537)|0;
  $539 = $538 >> 16;
  $540 = (($528) + ($539))|0;
  $541 = (($518) + ($540))|0;
  $10 = $541;
  $542 = $10;
  $543 = $8;
  $544 = (16 + ($543))|0;
  $545 = (($544) - 10)|0;
  $546 = (($176) + ($545<<2)|0);
  $547 = HEAP32[$546>>2]|0;
  $548 = $547 >> 16;
  $549 = ((($13)) + 18|0);
  $550 = HEAP16[$549>>1]|0;
  $551 = $550 << 16 >> 16;
  $552 = Math_imul($548, $551)|0;
  $553 = $8;
  $554 = (16 + ($553))|0;
  $555 = (($554) - 10)|0;
  $556 = (($176) + ($555<<2)|0);
  $557 = HEAP32[$556>>2]|0;
  $558 = $557 & 65535;
  $559 = ((($13)) + 18|0);
  $560 = HEAP16[$559>>1]|0;
  $561 = $560 << 16 >> 16;
  $562 = Math_imul($558, $561)|0;
  $563 = $562 >> 16;
  $564 = (($552) + ($563))|0;
  $565 = (($542) + ($564))|0;
  $10 = $565;
  $566 = $4;
  $567 = ((($566)) + 2340|0);
  $568 = HEAP32[$567>>2]|0;
  $569 = ($568|0)==(16);
  if ($569) {
   $570 = $10;
   $571 = $8;
   $572 = (16 + ($571))|0;
   $573 = (($572) - 11)|0;
   $574 = (($176) + ($573<<2)|0);
   $575 = HEAP32[$574>>2]|0;
   $576 = $575 >> 16;
   $577 = ((($13)) + 20|0);
   $578 = HEAP16[$577>>1]|0;
   $579 = $578 << 16 >> 16;
   $580 = Math_imul($576, $579)|0;
   $581 = $8;
   $582 = (16 + ($581))|0;
   $583 = (($582) - 11)|0;
   $584 = (($176) + ($583<<2)|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = $585 & 65535;
   $587 = ((($13)) + 20|0);
   $588 = HEAP16[$587>>1]|0;
   $589 = $588 << 16 >> 16;
   $590 = Math_imul($586, $589)|0;
   $591 = $590 >> 16;
   $592 = (($580) + ($591))|0;
   $593 = (($570) + ($592))|0;
   $10 = $593;
   $594 = $10;
   $595 = $8;
   $596 = (16 + ($595))|0;
   $597 = (($596) - 12)|0;
   $598 = (($176) + ($597<<2)|0);
   $599 = HEAP32[$598>>2]|0;
   $600 = $599 >> 16;
   $601 = ((($13)) + 22|0);
   $602 = HEAP16[$601>>1]|0;
   $603 = $602 << 16 >> 16;
   $604 = Math_imul($600, $603)|0;
   $605 = $8;
   $606 = (16 + ($605))|0;
   $607 = (($606) - 12)|0;
   $608 = (($176) + ($607<<2)|0);
   $609 = HEAP32[$608>>2]|0;
   $610 = $609 & 65535;
   $611 = ((($13)) + 22|0);
   $612 = HEAP16[$611>>1]|0;
   $613 = $612 << 16 >> 16;
   $614 = Math_imul($610, $613)|0;
   $615 = $614 >> 16;
   $616 = (($604) + ($615))|0;
   $617 = (($594) + ($616))|0;
   $10 = $617;
   $618 = $10;
   $619 = $8;
   $620 = (16 + ($619))|0;
   $621 = (($620) - 13)|0;
   $622 = (($176) + ($621<<2)|0);
   $623 = HEAP32[$622>>2]|0;
   $624 = $623 >> 16;
   $625 = ((($13)) + 24|0);
   $626 = HEAP16[$625>>1]|0;
   $627 = $626 << 16 >> 16;
   $628 = Math_imul($624, $627)|0;
   $629 = $8;
   $630 = (16 + ($629))|0;
   $631 = (($630) - 13)|0;
   $632 = (($176) + ($631<<2)|0);
   $633 = HEAP32[$632>>2]|0;
   $634 = $633 & 65535;
   $635 = ((($13)) + 24|0);
   $636 = HEAP16[$635>>1]|0;
   $637 = $636 << 16 >> 16;
   $638 = Math_imul($634, $637)|0;
   $639 = $638 >> 16;
   $640 = (($628) + ($639))|0;
   $641 = (($618) + ($640))|0;
   $10 = $641;
   $642 = $10;
   $643 = $8;
   $644 = (16 + ($643))|0;
   $645 = (($644) - 14)|0;
   $646 = (($176) + ($645<<2)|0);
   $647 = HEAP32[$646>>2]|0;
   $648 = $647 >> 16;
   $649 = ((($13)) + 26|0);
   $650 = HEAP16[$649>>1]|0;
   $651 = $650 << 16 >> 16;
   $652 = Math_imul($648, $651)|0;
   $653 = $8;
   $654 = (16 + ($653))|0;
   $655 = (($654) - 14)|0;
   $656 = (($176) + ($655<<2)|0);
   $657 = HEAP32[$656>>2]|0;
   $658 = $657 & 65535;
   $659 = ((($13)) + 26|0);
   $660 = HEAP16[$659>>1]|0;
   $661 = $660 << 16 >> 16;
   $662 = Math_imul($658, $661)|0;
   $663 = $662 >> 16;
   $664 = (($652) + ($663))|0;
   $665 = (($642) + ($664))|0;
   $10 = $665;
   $666 = $10;
   $667 = $8;
   $668 = (16 + ($667))|0;
   $669 = (($668) - 15)|0;
   $670 = (($176) + ($669<<2)|0);
   $671 = HEAP32[$670>>2]|0;
   $672 = $671 >> 16;
   $673 = ((($13)) + 28|0);
   $674 = HEAP16[$673>>1]|0;
   $675 = $674 << 16 >> 16;
   $676 = Math_imul($672, $675)|0;
   $677 = $8;
   $678 = (16 + ($677))|0;
   $679 = (($678) - 15)|0;
   $680 = (($176) + ($679<<2)|0);
   $681 = HEAP32[$680>>2]|0;
   $682 = $681 & 65535;
   $683 = ((($13)) + 28|0);
   $684 = HEAP16[$683>>1]|0;
   $685 = $684 << 16 >> 16;
   $686 = Math_imul($682, $685)|0;
   $687 = $686 >> 16;
   $688 = (($676) + ($687))|0;
   $689 = (($666) + ($688))|0;
   $10 = $689;
   $690 = $10;
   $691 = $8;
   $692 = (16 + ($691))|0;
   $693 = (($692) - 16)|0;
   $694 = (($176) + ($693<<2)|0);
   $695 = HEAP32[$694>>2]|0;
   $696 = $695 >> 16;
   $697 = ((($13)) + 30|0);
   $698 = HEAP16[$697>>1]|0;
   $699 = $698 << 16 >> 16;
   $700 = Math_imul($696, $699)|0;
   $701 = $8;
   $702 = (16 + ($701))|0;
   $703 = (($702) - 16)|0;
   $704 = (($176) + ($703<<2)|0);
   $705 = HEAP32[$704>>2]|0;
   $706 = $705 & 65535;
   $707 = ((($13)) + 30|0);
   $708 = HEAP16[$707>>1]|0;
   $709 = $708 << 16 >> 16;
   $710 = Math_imul($706, $709)|0;
   $711 = $710 >> 16;
   $712 = (($700) + ($711))|0;
   $713 = (($690) + ($712))|0;
   $10 = $713;
  }
  $714 = $8;
  $715 = (16 + ($714))|0;
  $716 = (($176) + ($715<<2)|0);
  $717 = HEAP32[$716>>2]|0;
  $718 = $10;
  $719 = $718 << 4;
  $720 = (($717) + ($719))|0;
  $721 = $8;
  $722 = (16 + ($721))|0;
  $723 = (($176) + ($722<<2)|0);
  HEAP32[$723>>2] = $720;
  $724 = $6;
  $725 = $8;
  $726 = (($724) + ($725<<1)|0);
  $727 = HEAP16[$726>>1]|0;
  $728 = $727 << 16 >> 16;
  $729 = $8;
  $730 = (16 + ($729))|0;
  $731 = (($176) + ($730<<2)|0);
  $732 = HEAP32[$731>>2]|0;
  $733 = $732 >> 9;
  $734 = (($733) + 1)|0;
  $735 = $734 >> 1;
  $736 = (($728) + ($735))|0;
  $737 = ($736|0)>(32767);
  if ($737) {
   $766 = 32767;
  } else {
   $738 = $6;
   $739 = $8;
   $740 = (($738) + ($739<<1)|0);
   $741 = HEAP16[$740>>1]|0;
   $742 = $741 << 16 >> 16;
   $743 = $8;
   $744 = (16 + ($743))|0;
   $745 = (($176) + ($744<<2)|0);
   $746 = HEAP32[$745>>2]|0;
   $747 = $746 >> 9;
   $748 = (($747) + 1)|0;
   $749 = $748 >> 1;
   $750 = (($742) + ($749))|0;
   $751 = ($750|0)<(-32768);
   if ($751) {
    $766 = -32768;
   } else {
    $752 = $6;
    $753 = $8;
    $754 = (($752) + ($753<<1)|0);
    $755 = HEAP16[$754>>1]|0;
    $756 = $755 << 16 >> 16;
    $757 = $8;
    $758 = (16 + ($757))|0;
    $759 = (($176) + ($758<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = $760 >> 9;
    $762 = (($761) + 1)|0;
    $763 = $762 >> 1;
    $764 = (($756) + ($763))|0;
    $766 = $764;
   }
  }
  $765 = $766&65535;
  $767 = $6;
  $768 = $8;
  $769 = (($767) + ($768<<1)|0);
  HEAP16[$769>>1] = $765;
  $770 = $8;
  $771 = (($770) + 1)|0;
  $8 = $771;
 }
 $772 = $14;
 $773 = ((($772)) + 1312|0);
 $774 = $7;
 $775 = (($176) + ($774<<2)|0);
 dest=$773; src=$775; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $776 = $15;
 _llvm_stackrestore(($776|0));
 STACKTOP = sp;return;
}
function _silk_SQRT_APPROX_543($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_544($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CNG_exc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $13 = 255;
 while(1) {
  $14 = $13;
  $15 = $8;
  $16 = ($14|0)>($15|0);
  if (!($16)) {
   break;
  }
  $17 = $13;
  $18 = $17 >> 1;
  $13 = $18;
 }
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 $10 = $20;
 $11 = 0;
 while(1) {
  $21 = $11;
  $22 = $8;
  $23 = ($21|0)<($22|0);
  $24 = $10;
  if (!($23)) {
   break;
  }
  $25 = Math_imul($24, 196314165)|0;
  $26 = (907633515 + ($25))|0;
  $10 = $26;
  $27 = $10;
  $28 = $27 >> 24;
  $29 = $13;
  $30 = $28 & $29;
  $12 = $30;
  $31 = $6;
  $32 = $12;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 >> 16;
  $36 = $7;
  $37 = $36 >> 4;
  $38 = $37&65535;
  $39 = $38 << 16 >> 16;
  $40 = Math_imul($35, $39)|0;
  $41 = $6;
  $42 = $12;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 & 65535;
  $46 = $7;
  $47 = $46 >> 4;
  $48 = $47&65535;
  $49 = $48 << 16 >> 16;
  $50 = Math_imul($45, $49)|0;
  $51 = $50 >> 16;
  $52 = (($40) + ($51))|0;
  $53 = $6;
  $54 = $12;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $7;
  $58 = $57 >> 4;
  $59 = $58 >> 15;
  $60 = (($59) + 1)|0;
  $61 = $60 >> 1;
  $62 = Math_imul($56, $61)|0;
  $63 = (($52) + ($62))|0;
  $64 = ($63|0)>(32767);
  if ($64) {
   $133 = 32767;
  } else {
   $65 = $6;
   $66 = $12;
   $67 = (($65) + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 >> 16;
   $70 = $7;
   $71 = $70 >> 4;
   $72 = $71&65535;
   $73 = $72 << 16 >> 16;
   $74 = Math_imul($69, $73)|0;
   $75 = $6;
   $76 = $12;
   $77 = (($75) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 & 65535;
   $80 = $7;
   $81 = $80 >> 4;
   $82 = $81&65535;
   $83 = $82 << 16 >> 16;
   $84 = Math_imul($79, $83)|0;
   $85 = $84 >> 16;
   $86 = (($74) + ($85))|0;
   $87 = $6;
   $88 = $12;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $7;
   $92 = $91 >> 4;
   $93 = $92 >> 15;
   $94 = (($93) + 1)|0;
   $95 = $94 >> 1;
   $96 = Math_imul($90, $95)|0;
   $97 = (($86) + ($96))|0;
   $98 = ($97|0)<(-32768);
   if ($98) {
    $133 = -32768;
   } else {
    $99 = $6;
    $100 = $12;
    $101 = (($99) + ($100<<2)|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 >> 16;
    $104 = $7;
    $105 = $104 >> 4;
    $106 = $105&65535;
    $107 = $106 << 16 >> 16;
    $108 = Math_imul($103, $107)|0;
    $109 = $6;
    $110 = $12;
    $111 = (($109) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 & 65535;
    $114 = $7;
    $115 = $114 >> 4;
    $116 = $115&65535;
    $117 = $116 << 16 >> 16;
    $118 = Math_imul($113, $117)|0;
    $119 = $118 >> 16;
    $120 = (($108) + ($119))|0;
    $121 = $6;
    $122 = $12;
    $123 = (($121) + ($122<<2)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $7;
    $126 = $125 >> 4;
    $127 = $126 >> 15;
    $128 = (($127) + 1)|0;
    $129 = $128 >> 1;
    $130 = Math_imul($124, $129)|0;
    $131 = (($120) + ($130))|0;
    $133 = $131;
   }
  }
  $132 = $133&65535;
  $134 = $132 << 16 >> 16;
  $135 = $5;
  $136 = $11;
  $137 = (($135) + ($136<<2)|0);
  HEAP32[$137>>2] = $134;
  $138 = $11;
  $139 = (($138) + 1)|0;
  $11 = $139;
 }
 $140 = $9;
 HEAP32[$140>>2] = $24;
 STACKTOP = sp;return;
}
function _silk_CLZ_FRAC_544($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_545($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_546($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_545($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32_546($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_decode_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul31 = 0, $$alloca_mul33 = 0, $$alloca_mul35 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
 var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
 var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
 var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
 var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
 var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
 var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $20 = sp + 104|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = 0;
 $32 = $5;
 $33 = ((($32)) + 2336|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (_llvm_stacksave()|0);
 $31 = $35;
 $$alloca_mul = $34<<1;
 $36 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $37 = $5;
 $38 = ((($37)) + 2336|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $5;
 $41 = ((($40)) + 2328|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($39) + ($42))|0;
 $$alloca_mul31 = $43<<2;
 $44 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul31)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul31)|0)+15)&-16)|0);;
 $45 = $5;
 $46 = ((($45)) + 2332|0);
 $47 = HEAP32[$46>>2]|0;
 $$alloca_mul33 = $47<<2;
 $48 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul33)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul33)|0)+15)&-16)|0);;
 $49 = $5;
 $50 = ((($49)) + 2332|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 16)|0;
 $$alloca_mul35 = $52<<2;
 $53 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul35)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul35)|0)+15)&-16)|0);;
 $54 = $5;
 $55 = ((($54)) + 2736|0);
 $56 = ((($55)) + 29|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = $58 >> 1;
 $60 = (24998 + ($59<<2)|0);
 $61 = $5;
 $62 = ((($61)) + 2736|0);
 $63 = ((($62)) + 30|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64 << 24 >> 24;
 $66 = (($60) + ($65<<1)|0);
 $67 = HEAP16[$66>>1]|0;
 $68 = $67 << 16 >> 16;
 $27 = $68;
 $69 = $5;
 $70 = ((($69)) + 2736|0);
 $71 = ((($70)) + 31|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72 << 24 >> 24;
 $74 = ($73|0)<(4);
 if ($74) {
  $15 = 1;
 } else {
  $15 = 0;
 }
 $75 = $5;
 $76 = ((($75)) + 2736|0);
 $77 = ((($76)) + 34|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78 << 24 >> 24;
 $26 = $79;
 $10 = 0;
 while(1) {
  $80 = $10;
  $81 = $5;
  $82 = ((($81)) + 2328|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($80|0)<($83|0);
  if (!($84)) {
   break;
  }
  $85 = $26;
  $86 = Math_imul($85, 196314165)|0;
  $87 = (907633515 + ($86))|0;
  $26 = $87;
  $88 = $8;
  $89 = $10;
  $90 = (($88) + ($89<<1)|0);
  $91 = HEAP16[$90>>1]|0;
  $92 = $91 << 16 >> 16;
  $93 = $92 << 14;
  $94 = $5;
  $95 = ((($94)) + 4|0);
  $96 = $10;
  $97 = (($95) + ($96<<2)|0);
  HEAP32[$97>>2] = $93;
  $98 = $5;
  $99 = ((($98)) + 4|0);
  $100 = $10;
  $101 = (($99) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)>(0);
  $104 = $5;
  $105 = ((($104)) + 4|0);
  $106 = $10;
  $107 = (($105) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  if ($103) {
   $109 = (($108) - 1280)|0;
   HEAP32[$107>>2] = $109;
  } else {
   $110 = ($108|0)<(0);
   if ($110) {
    $111 = $5;
    $112 = ((($111)) + 4|0);
    $113 = $10;
    $114 = (($112) + ($113<<2)|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + 1280)|0;
    HEAP32[$114>>2] = $116;
   }
  }
  $117 = $27;
  $118 = $117 << 4;
  $119 = $5;
  $120 = ((($119)) + 4|0);
  $121 = $10;
  $122 = (($120) + ($121<<2)|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + ($118))|0;
  HEAP32[$122>>2] = $124;
  $125 = $26;
  $126 = ($125|0)<(0);
  if ($126) {
   $127 = $5;
   $128 = ((($127)) + 4|0);
   $129 = $10;
   $130 = (($128) + ($129<<2)|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (0 - ($131))|0;
   $133 = $5;
   $134 = ((($133)) + 4|0);
   $135 = $10;
   $136 = (($134) + ($135<<2)|0);
   HEAP32[$136>>2] = $132;
  }
  $137 = $26;
  $138 = $8;
  $139 = $10;
  $140 = (($138) + ($139<<1)|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = (($137) + ($142))|0;
  $26 = $143;
  $144 = $10;
  $145 = (($144) + 1)|0;
  $10 = $145;
 }
 $146 = $5;
 $147 = ((($146)) + 1284|0);
 dest=$53; src=$147; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $148 = $5;
 $149 = ((($148)) + 4|0);
 $29 = $149;
 $150 = $7;
 $19 = $150;
 $151 = $5;
 $152 = ((($151)) + 2336|0);
 $153 = HEAP32[$152>>2]|0;
 $14 = $153;
 $11 = 0;
 while(1) {
  $154 = $11;
  $155 = $5;
  $156 = ((($155)) + 2324|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  if (!($158)) {
   break;
  }
  $30 = $48;
  $159 = $6;
  $160 = ((($159)) + 32|0);
  $161 = $11;
  $162 = $161 >> 1;
  $163 = (($160) + ($162<<5)|0);
  $17 = $163;
  $164 = $17;
  $165 = $5;
  $166 = ((($165)) + 2340|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $167<<1;
  _memcpy(($20|0),($164|0),($168|0))|0;
  $169 = $6;
  $170 = ((($169)) + 96|0);
  $171 = $11;
  $172 = ($171*5)|0;
  $173 = (($170) + ($172<<1)|0);
  $18 = $173;
  $174 = $5;
  $175 = ((($174)) + 2736|0);
  $176 = ((($175)) + 29|0);
  $177 = HEAP8[$176>>0]|0;
  $178 = $177 << 24 >> 24;
  $16 = $178;
  $179 = $6;
  $180 = ((($179)) + 16|0);
  $181 = $11;
  $182 = (($180) + ($181<<2)|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $183 >> 6;
  $23 = $184;
  $185 = $6;
  $186 = ((($185)) + 16|0);
  $187 = $11;
  $188 = (($186) + ($187<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (_silk_INVERSE32_varQ_549($189,47)|0);
  $24 = $190;
  $191 = $6;
  $192 = ((($191)) + 16|0);
  $193 = $11;
  $194 = (($192) + ($193<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  $196 = $5;
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195|0)!=($197|0);
  L20: do {
   if ($198) {
    $199 = $5;
    $200 = HEAP32[$199>>2]|0;
    $201 = $6;
    $202 = ((($201)) + 16|0);
    $203 = $11;
    $204 = (($202) + ($203<<2)|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (_silk_DIV32_varQ_550($200,$205,16)|0);
    $25 = $206;
    $10 = 0;
    while(1) {
     $207 = $10;
     $208 = ($207|0)<(16);
     if (!($208)) {
      break L20;
     }
     $209 = $25;
     $210 = $209 >> 16;
     $211 = $10;
     $212 = (($53) + ($211<<2)|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213&65535;
     $215 = $214 << 16 >> 16;
     $216 = Math_imul($210, $215)|0;
     $217 = $25;
     $218 = $217 & 65535;
     $219 = $10;
     $220 = (($53) + ($219<<2)|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = $221&65535;
     $223 = $222 << 16 >> 16;
     $224 = Math_imul($218, $223)|0;
     $225 = $224 >> 16;
     $226 = (($216) + ($225))|0;
     $227 = $25;
     $228 = $10;
     $229 = (($53) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $230 >> 15;
     $232 = (($231) + 1)|0;
     $233 = $232 >> 1;
     $234 = Math_imul($227, $233)|0;
     $235 = (($226) + ($234))|0;
     $236 = $10;
     $237 = (($53) + ($236<<2)|0);
     HEAP32[$237>>2] = $235;
     $238 = $10;
     $239 = (($238) + 1)|0;
     $10 = $239;
    }
   } else {
    $25 = 65536;
   }
  } while(0);
  $240 = $6;
  $241 = ((($240)) + 16|0);
  $242 = $11;
  $243 = (($241) + ($242<<2)|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = $5;
  HEAP32[$245>>2] = $244;
  $246 = $5;
  $247 = ((($246)) + 4160|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = ($248|0)!=(0);
  if ($249) {
   $250 = $5;
   $251 = ((($250)) + 4164|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($252|0)==(2);
   if ($253) {
    $254 = $5;
    $255 = ((($254)) + 2736|0);
    $256 = ((($255)) + 29|0);
    $257 = HEAP8[$256>>0]|0;
    $258 = $257 << 24 >> 24;
    $259 = ($258|0)!=(2);
    $260 = $11;
    $261 = ($260|0)<(2);
    $or$cond = $259 & $261;
    if ($or$cond) {
     $262 = $18;
     ;HEAP16[$262>>1]=0|0;HEAP16[$262+2>>1]=0|0;HEAP16[$262+4>>1]=0|0;HEAP16[$262+6>>1]=0|0;HEAP16[$262+8>>1]=0|0;
     $263 = $18;
     $264 = ((($263)) + 4|0);
     HEAP16[$264>>1] = 4096;
     $16 = 2;
     $265 = $5;
     $266 = ((($265)) + 2308|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = $6;
     $269 = $11;
     $270 = (($268) + ($269<<2)|0);
     HEAP32[$270>>2] = $267;
    }
   }
  }
  $271 = $16;
  $272 = ($271|0)==(2);
  L32: do {
   if ($272) {
    $273 = $6;
    $274 = $11;
    $275 = (($273) + ($274<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $12 = $276;
    $277 = $11;
    $278 = ($277|0)==(0);
    if (!($278)) {
     $279 = $11;
     $280 = ($279|0)==(2);
     $281 = $15;
     $282 = ($281|0)!=(0);
     $or$cond3 = $280 & $282;
     if (!($or$cond3)) {
      $387 = $25;
      $388 = ($387|0)!=(65536);
      if (!($388)) {
       break;
      }
      $10 = 0;
      while(1) {
       $389 = $10;
       $390 = $12;
       $391 = (($390) + 2)|0;
       $392 = ($389|0)<($391|0);
       if (!($392)) {
        break L32;
       }
       $393 = $25;
       $394 = $393 >> 16;
       $395 = $14;
       $396 = $10;
       $397 = (($395) - ($396))|0;
       $398 = (($397) - 1)|0;
       $399 = (($44) + ($398<<2)|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = $400&65535;
       $402 = $401 << 16 >> 16;
       $403 = Math_imul($394, $402)|0;
       $404 = $25;
       $405 = $404 & 65535;
       $406 = $14;
       $407 = $10;
       $408 = (($406) - ($407))|0;
       $409 = (($408) - 1)|0;
       $410 = (($44) + ($409<<2)|0);
       $411 = HEAP32[$410>>2]|0;
       $412 = $411&65535;
       $413 = $412 << 16 >> 16;
       $414 = Math_imul($405, $413)|0;
       $415 = $414 >> 16;
       $416 = (($403) + ($415))|0;
       $417 = $25;
       $418 = $14;
       $419 = $10;
       $420 = (($418) - ($419))|0;
       $421 = (($420) - 1)|0;
       $422 = (($44) + ($421<<2)|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = $423 >> 15;
       $425 = (($424) + 1)|0;
       $426 = $425 >> 1;
       $427 = Math_imul($417, $426)|0;
       $428 = (($416) + ($427))|0;
       $429 = $14;
       $430 = $10;
       $431 = (($429) - ($430))|0;
       $432 = (($431) - 1)|0;
       $433 = (($44) + ($432<<2)|0);
       HEAP32[$433>>2] = $428;
       $434 = $10;
       $435 = (($434) + 1)|0;
       $10 = $435;
      }
     }
    }
    $283 = $5;
    $284 = ((($283)) + 2336|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = $12;
    $287 = (($285) - ($286))|0;
    $288 = $5;
    $289 = ((($288)) + 2340|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (($287) - ($290))|0;
    $292 = (($291) - 2)|0;
    $13 = $292;
    $293 = $11;
    $294 = ($293|0)==(2);
    if ($294) {
     $295 = $5;
     $296 = ((($295)) + 1348|0);
     $297 = $5;
     $298 = ((($297)) + 2336|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = (($296) + ($299<<1)|0);
     $301 = $7;
     $302 = $5;
     $303 = ((($302)) + 2332|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = $304<<1;
     $306 = $305<<1;
     _memcpy(($300|0),($301|0),($306|0))|0;
    }
    $307 = $13;
    $308 = (($36) + ($307<<1)|0);
    $309 = $5;
    $310 = ((($309)) + 1348|0);
    $311 = $13;
    $312 = $11;
    $313 = $5;
    $314 = ((($313)) + 2332|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = Math_imul($312, $315)|0;
    $317 = (($311) + ($316))|0;
    $318 = (($310) + ($317<<1)|0);
    $319 = $17;
    $320 = $5;
    $321 = ((($320)) + 2336|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = $13;
    $324 = (($322) - ($323))|0;
    $325 = $5;
    $326 = ((($325)) + 2340|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = $9;
    _silk_LPC_analysis_filter($308,$318,$319,$324,$327,$328);
    $329 = $11;
    $330 = ($329|0)==(0);
    if ($330) {
     $331 = $24;
     $332 = $331 >> 16;
     $333 = $6;
     $334 = ((($333)) + 136|0);
     $335 = HEAP32[$334>>2]|0;
     $336 = $335&65535;
     $337 = $336 << 16 >> 16;
     $338 = Math_imul($332, $337)|0;
     $339 = $24;
     $340 = $339 & 65535;
     $341 = $6;
     $342 = ((($341)) + 136|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = $343&65535;
     $345 = $344 << 16 >> 16;
     $346 = Math_imul($340, $345)|0;
     $347 = $346 >> 16;
     $348 = (($338) + ($347))|0;
     $349 = $348 << 2;
     $24 = $349;
    }
    $10 = 0;
    while(1) {
     $350 = $10;
     $351 = $12;
     $352 = (($351) + 2)|0;
     $353 = ($350|0)<($352|0);
     if (!($353)) {
      break L32;
     }
     $354 = $24;
     $355 = $354 >> 16;
     $356 = $5;
     $357 = ((($356)) + 2336|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = $10;
     $360 = (($358) - ($359))|0;
     $361 = (($360) - 1)|0;
     $362 = (($36) + ($361<<1)|0);
     $363 = HEAP16[$362>>1]|0;
     $364 = $363 << 16 >> 16;
     $365 = Math_imul($355, $364)|0;
     $366 = $24;
     $367 = $366 & 65535;
     $368 = $5;
     $369 = ((($368)) + 2336|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = $10;
     $372 = (($370) - ($371))|0;
     $373 = (($372) - 1)|0;
     $374 = (($36) + ($373<<1)|0);
     $375 = HEAP16[$374>>1]|0;
     $376 = $375 << 16 >> 16;
     $377 = Math_imul($367, $376)|0;
     $378 = $377 >> 16;
     $379 = (($365) + ($378))|0;
     $380 = $14;
     $381 = $10;
     $382 = (($380) - ($381))|0;
     $383 = (($382) - 1)|0;
     $384 = (($44) + ($383<<2)|0);
     HEAP32[$384>>2] = $379;
     $385 = $10;
     $386 = (($385) + 1)|0;
     $10 = $386;
    }
   }
  } while(0);
  $436 = $16;
  $437 = ($436|0)==(2);
  L52: do {
   if ($437) {
    $438 = $14;
    $439 = $12;
    $440 = (($438) - ($439))|0;
    $441 = (($440) + 2)|0;
    $442 = (($44) + ($441<<2)|0);
    $28 = $442;
    $10 = 0;
    while(1) {
     $443 = $10;
     $444 = $5;
     $445 = ((($444)) + 2332|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = ($443|0)<($446|0);
     if (!($447)) {
      break L52;
     }
     $21 = 2;
     $448 = $21;
     $449 = $28;
     $450 = HEAP32[$449>>2]|0;
     $451 = $450 >> 16;
     $452 = $18;
     $453 = HEAP16[$452>>1]|0;
     $454 = $453 << 16 >> 16;
     $455 = Math_imul($451, $454)|0;
     $456 = $28;
     $457 = HEAP32[$456>>2]|0;
     $458 = $457 & 65535;
     $459 = $18;
     $460 = HEAP16[$459>>1]|0;
     $461 = $460 << 16 >> 16;
     $462 = Math_imul($458, $461)|0;
     $463 = $462 >> 16;
     $464 = (($455) + ($463))|0;
     $465 = (($448) + ($464))|0;
     $21 = $465;
     $466 = $21;
     $467 = $28;
     $468 = ((($467)) + -4|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = $469 >> 16;
     $471 = $18;
     $472 = ((($471)) + 2|0);
     $473 = HEAP16[$472>>1]|0;
     $474 = $473 << 16 >> 16;
     $475 = Math_imul($470, $474)|0;
     $476 = $28;
     $477 = ((($476)) + -4|0);
     $478 = HEAP32[$477>>2]|0;
     $479 = $478 & 65535;
     $480 = $18;
     $481 = ((($480)) + 2|0);
     $482 = HEAP16[$481>>1]|0;
     $483 = $482 << 16 >> 16;
     $484 = Math_imul($479, $483)|0;
     $485 = $484 >> 16;
     $486 = (($475) + ($485))|0;
     $487 = (($466) + ($486))|0;
     $21 = $487;
     $488 = $21;
     $489 = $28;
     $490 = ((($489)) + -8|0);
     $491 = HEAP32[$490>>2]|0;
     $492 = $491 >> 16;
     $493 = $18;
     $494 = ((($493)) + 4|0);
     $495 = HEAP16[$494>>1]|0;
     $496 = $495 << 16 >> 16;
     $497 = Math_imul($492, $496)|0;
     $498 = $28;
     $499 = ((($498)) + -8|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = $500 & 65535;
     $502 = $18;
     $503 = ((($502)) + 4|0);
     $504 = HEAP16[$503>>1]|0;
     $505 = $504 << 16 >> 16;
     $506 = Math_imul($501, $505)|0;
     $507 = $506 >> 16;
     $508 = (($497) + ($507))|0;
     $509 = (($488) + ($508))|0;
     $21 = $509;
     $510 = $21;
     $511 = $28;
     $512 = ((($511)) + -12|0);
     $513 = HEAP32[$512>>2]|0;
     $514 = $513 >> 16;
     $515 = $18;
     $516 = ((($515)) + 6|0);
     $517 = HEAP16[$516>>1]|0;
     $518 = $517 << 16 >> 16;
     $519 = Math_imul($514, $518)|0;
     $520 = $28;
     $521 = ((($520)) + -12|0);
     $522 = HEAP32[$521>>2]|0;
     $523 = $522 & 65535;
     $524 = $18;
     $525 = ((($524)) + 6|0);
     $526 = HEAP16[$525>>1]|0;
     $527 = $526 << 16 >> 16;
     $528 = Math_imul($523, $527)|0;
     $529 = $528 >> 16;
     $530 = (($519) + ($529))|0;
     $531 = (($510) + ($530))|0;
     $21 = $531;
     $532 = $21;
     $533 = $28;
     $534 = ((($533)) + -16|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 >> 16;
     $537 = $18;
     $538 = ((($537)) + 8|0);
     $539 = HEAP16[$538>>1]|0;
     $540 = $539 << 16 >> 16;
     $541 = Math_imul($536, $540)|0;
     $542 = $28;
     $543 = ((($542)) + -16|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = $544 & 65535;
     $546 = $18;
     $547 = ((($546)) + 8|0);
     $548 = HEAP16[$547>>1]|0;
     $549 = $548 << 16 >> 16;
     $550 = Math_imul($545, $549)|0;
     $551 = $550 >> 16;
     $552 = (($541) + ($551))|0;
     $553 = (($532) + ($552))|0;
     $21 = $553;
     $554 = $28;
     $555 = ((($554)) + 4|0);
     $28 = $555;
     $556 = $29;
     $557 = $10;
     $558 = (($556) + ($557<<2)|0);
     $559 = HEAP32[$558>>2]|0;
     $560 = $21;
     $561 = $560 << 1;
     $562 = (($559) + ($561))|0;
     $563 = $30;
     $564 = $10;
     $565 = (($563) + ($564<<2)|0);
     HEAP32[$565>>2] = $562;
     $566 = $30;
     $567 = $10;
     $568 = (($566) + ($567<<2)|0);
     $569 = HEAP32[$568>>2]|0;
     $570 = $569 << 1;
     $571 = $14;
     $572 = (($44) + ($571<<2)|0);
     HEAP32[$572>>2] = $570;
     $573 = $14;
     $574 = (($573) + 1)|0;
     $14 = $574;
     $575 = $10;
     $576 = (($575) + 1)|0;
     $10 = $576;
    }
   } else {
    $577 = $29;
    $30 = $577;
   }
  } while(0);
  $10 = 0;
  while(1) {
   $578 = $10;
   $579 = $5;
   $580 = ((($579)) + 2332|0);
   $581 = HEAP32[$580>>2]|0;
   $582 = ($578|0)<($581|0);
   if (!($582)) {
    break;
   }
   $583 = $5;
   $584 = ((($583)) + 2340|0);
   $585 = HEAP32[$584>>2]|0;
   $586 = $585 >> 1;
   $22 = $586;
   $587 = $22;
   $588 = $10;
   $589 = (16 + ($588))|0;
   $590 = (($589) - 1)|0;
   $591 = (($53) + ($590<<2)|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = $592 >> 16;
   $594 = HEAP16[$20>>1]|0;
   $595 = $594 << 16 >> 16;
   $596 = Math_imul($593, $595)|0;
   $597 = $10;
   $598 = (16 + ($597))|0;
   $599 = (($598) - 1)|0;
   $600 = (($53) + ($599<<2)|0);
   $601 = HEAP32[$600>>2]|0;
   $602 = $601 & 65535;
   $603 = HEAP16[$20>>1]|0;
   $604 = $603 << 16 >> 16;
   $605 = Math_imul($602, $604)|0;
   $606 = $605 >> 16;
   $607 = (($596) + ($606))|0;
   $608 = (($587) + ($607))|0;
   $22 = $608;
   $609 = $22;
   $610 = $10;
   $611 = (16 + ($610))|0;
   $612 = (($611) - 2)|0;
   $613 = (($53) + ($612<<2)|0);
   $614 = HEAP32[$613>>2]|0;
   $615 = $614 >> 16;
   $616 = ((($20)) + 2|0);
   $617 = HEAP16[$616>>1]|0;
   $618 = $617 << 16 >> 16;
   $619 = Math_imul($615, $618)|0;
   $620 = $10;
   $621 = (16 + ($620))|0;
   $622 = (($621) - 2)|0;
   $623 = (($53) + ($622<<2)|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = $624 & 65535;
   $626 = ((($20)) + 2|0);
   $627 = HEAP16[$626>>1]|0;
   $628 = $627 << 16 >> 16;
   $629 = Math_imul($625, $628)|0;
   $630 = $629 >> 16;
   $631 = (($619) + ($630))|0;
   $632 = (($609) + ($631))|0;
   $22 = $632;
   $633 = $22;
   $634 = $10;
   $635 = (16 + ($634))|0;
   $636 = (($635) - 3)|0;
   $637 = (($53) + ($636<<2)|0);
   $638 = HEAP32[$637>>2]|0;
   $639 = $638 >> 16;
   $640 = ((($20)) + 4|0);
   $641 = HEAP16[$640>>1]|0;
   $642 = $641 << 16 >> 16;
   $643 = Math_imul($639, $642)|0;
   $644 = $10;
   $645 = (16 + ($644))|0;
   $646 = (($645) - 3)|0;
   $647 = (($53) + ($646<<2)|0);
   $648 = HEAP32[$647>>2]|0;
   $649 = $648 & 65535;
   $650 = ((($20)) + 4|0);
   $651 = HEAP16[$650>>1]|0;
   $652 = $651 << 16 >> 16;
   $653 = Math_imul($649, $652)|0;
   $654 = $653 >> 16;
   $655 = (($643) + ($654))|0;
   $656 = (($633) + ($655))|0;
   $22 = $656;
   $657 = $22;
   $658 = $10;
   $659 = (16 + ($658))|0;
   $660 = (($659) - 4)|0;
   $661 = (($53) + ($660<<2)|0);
   $662 = HEAP32[$661>>2]|0;
   $663 = $662 >> 16;
   $664 = ((($20)) + 6|0);
   $665 = HEAP16[$664>>1]|0;
   $666 = $665 << 16 >> 16;
   $667 = Math_imul($663, $666)|0;
   $668 = $10;
   $669 = (16 + ($668))|0;
   $670 = (($669) - 4)|0;
   $671 = (($53) + ($670<<2)|0);
   $672 = HEAP32[$671>>2]|0;
   $673 = $672 & 65535;
   $674 = ((($20)) + 6|0);
   $675 = HEAP16[$674>>1]|0;
   $676 = $675 << 16 >> 16;
   $677 = Math_imul($673, $676)|0;
   $678 = $677 >> 16;
   $679 = (($667) + ($678))|0;
   $680 = (($657) + ($679))|0;
   $22 = $680;
   $681 = $22;
   $682 = $10;
   $683 = (16 + ($682))|0;
   $684 = (($683) - 5)|0;
   $685 = (($53) + ($684<<2)|0);
   $686 = HEAP32[$685>>2]|0;
   $687 = $686 >> 16;
   $688 = ((($20)) + 8|0);
   $689 = HEAP16[$688>>1]|0;
   $690 = $689 << 16 >> 16;
   $691 = Math_imul($687, $690)|0;
   $692 = $10;
   $693 = (16 + ($692))|0;
   $694 = (($693) - 5)|0;
   $695 = (($53) + ($694<<2)|0);
   $696 = HEAP32[$695>>2]|0;
   $697 = $696 & 65535;
   $698 = ((($20)) + 8|0);
   $699 = HEAP16[$698>>1]|0;
   $700 = $699 << 16 >> 16;
   $701 = Math_imul($697, $700)|0;
   $702 = $701 >> 16;
   $703 = (($691) + ($702))|0;
   $704 = (($681) + ($703))|0;
   $22 = $704;
   $705 = $22;
   $706 = $10;
   $707 = (16 + ($706))|0;
   $708 = (($707) - 6)|0;
   $709 = (($53) + ($708<<2)|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = $710 >> 16;
   $712 = ((($20)) + 10|0);
   $713 = HEAP16[$712>>1]|0;
   $714 = $713 << 16 >> 16;
   $715 = Math_imul($711, $714)|0;
   $716 = $10;
   $717 = (16 + ($716))|0;
   $718 = (($717) - 6)|0;
   $719 = (($53) + ($718<<2)|0);
   $720 = HEAP32[$719>>2]|0;
   $721 = $720 & 65535;
   $722 = ((($20)) + 10|0);
   $723 = HEAP16[$722>>1]|0;
   $724 = $723 << 16 >> 16;
   $725 = Math_imul($721, $724)|0;
   $726 = $725 >> 16;
   $727 = (($715) + ($726))|0;
   $728 = (($705) + ($727))|0;
   $22 = $728;
   $729 = $22;
   $730 = $10;
   $731 = (16 + ($730))|0;
   $732 = (($731) - 7)|0;
   $733 = (($53) + ($732<<2)|0);
   $734 = HEAP32[$733>>2]|0;
   $735 = $734 >> 16;
   $736 = ((($20)) + 12|0);
   $737 = HEAP16[$736>>1]|0;
   $738 = $737 << 16 >> 16;
   $739 = Math_imul($735, $738)|0;
   $740 = $10;
   $741 = (16 + ($740))|0;
   $742 = (($741) - 7)|0;
   $743 = (($53) + ($742<<2)|0);
   $744 = HEAP32[$743>>2]|0;
   $745 = $744 & 65535;
   $746 = ((($20)) + 12|0);
   $747 = HEAP16[$746>>1]|0;
   $748 = $747 << 16 >> 16;
   $749 = Math_imul($745, $748)|0;
   $750 = $749 >> 16;
   $751 = (($739) + ($750))|0;
   $752 = (($729) + ($751))|0;
   $22 = $752;
   $753 = $22;
   $754 = $10;
   $755 = (16 + ($754))|0;
   $756 = (($755) - 8)|0;
   $757 = (($53) + ($756<<2)|0);
   $758 = HEAP32[$757>>2]|0;
   $759 = $758 >> 16;
   $760 = ((($20)) + 14|0);
   $761 = HEAP16[$760>>1]|0;
   $762 = $761 << 16 >> 16;
   $763 = Math_imul($759, $762)|0;
   $764 = $10;
   $765 = (16 + ($764))|0;
   $766 = (($765) - 8)|0;
   $767 = (($53) + ($766<<2)|0);
   $768 = HEAP32[$767>>2]|0;
   $769 = $768 & 65535;
   $770 = ((($20)) + 14|0);
   $771 = HEAP16[$770>>1]|0;
   $772 = $771 << 16 >> 16;
   $773 = Math_imul($769, $772)|0;
   $774 = $773 >> 16;
   $775 = (($763) + ($774))|0;
   $776 = (($753) + ($775))|0;
   $22 = $776;
   $777 = $22;
   $778 = $10;
   $779 = (16 + ($778))|0;
   $780 = (($779) - 9)|0;
   $781 = (($53) + ($780<<2)|0);
   $782 = HEAP32[$781>>2]|0;
   $783 = $782 >> 16;
   $784 = ((($20)) + 16|0);
   $785 = HEAP16[$784>>1]|0;
   $786 = $785 << 16 >> 16;
   $787 = Math_imul($783, $786)|0;
   $788 = $10;
   $789 = (16 + ($788))|0;
   $790 = (($789) - 9)|0;
   $791 = (($53) + ($790<<2)|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = $792 & 65535;
   $794 = ((($20)) + 16|0);
   $795 = HEAP16[$794>>1]|0;
   $796 = $795 << 16 >> 16;
   $797 = Math_imul($793, $796)|0;
   $798 = $797 >> 16;
   $799 = (($787) + ($798))|0;
   $800 = (($777) + ($799))|0;
   $22 = $800;
   $801 = $22;
   $802 = $10;
   $803 = (16 + ($802))|0;
   $804 = (($803) - 10)|0;
   $805 = (($53) + ($804<<2)|0);
   $806 = HEAP32[$805>>2]|0;
   $807 = $806 >> 16;
   $808 = ((($20)) + 18|0);
   $809 = HEAP16[$808>>1]|0;
   $810 = $809 << 16 >> 16;
   $811 = Math_imul($807, $810)|0;
   $812 = $10;
   $813 = (16 + ($812))|0;
   $814 = (($813) - 10)|0;
   $815 = (($53) + ($814<<2)|0);
   $816 = HEAP32[$815>>2]|0;
   $817 = $816 & 65535;
   $818 = ((($20)) + 18|0);
   $819 = HEAP16[$818>>1]|0;
   $820 = $819 << 16 >> 16;
   $821 = Math_imul($817, $820)|0;
   $822 = $821 >> 16;
   $823 = (($811) + ($822))|0;
   $824 = (($801) + ($823))|0;
   $22 = $824;
   $825 = $5;
   $826 = ((($825)) + 2340|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = ($827|0)==(16);
   if ($828) {
    $829 = $22;
    $830 = $10;
    $831 = (16 + ($830))|0;
    $832 = (($831) - 11)|0;
    $833 = (($53) + ($832<<2)|0);
    $834 = HEAP32[$833>>2]|0;
    $835 = $834 >> 16;
    $836 = ((($20)) + 20|0);
    $837 = HEAP16[$836>>1]|0;
    $838 = $837 << 16 >> 16;
    $839 = Math_imul($835, $838)|0;
    $840 = $10;
    $841 = (16 + ($840))|0;
    $842 = (($841) - 11)|0;
    $843 = (($53) + ($842<<2)|0);
    $844 = HEAP32[$843>>2]|0;
    $845 = $844 & 65535;
    $846 = ((($20)) + 20|0);
    $847 = HEAP16[$846>>1]|0;
    $848 = $847 << 16 >> 16;
    $849 = Math_imul($845, $848)|0;
    $850 = $849 >> 16;
    $851 = (($839) + ($850))|0;
    $852 = (($829) + ($851))|0;
    $22 = $852;
    $853 = $22;
    $854 = $10;
    $855 = (16 + ($854))|0;
    $856 = (($855) - 12)|0;
    $857 = (($53) + ($856<<2)|0);
    $858 = HEAP32[$857>>2]|0;
    $859 = $858 >> 16;
    $860 = ((($20)) + 22|0);
    $861 = HEAP16[$860>>1]|0;
    $862 = $861 << 16 >> 16;
    $863 = Math_imul($859, $862)|0;
    $864 = $10;
    $865 = (16 + ($864))|0;
    $866 = (($865) - 12)|0;
    $867 = (($53) + ($866<<2)|0);
    $868 = HEAP32[$867>>2]|0;
    $869 = $868 & 65535;
    $870 = ((($20)) + 22|0);
    $871 = HEAP16[$870>>1]|0;
    $872 = $871 << 16 >> 16;
    $873 = Math_imul($869, $872)|0;
    $874 = $873 >> 16;
    $875 = (($863) + ($874))|0;
    $876 = (($853) + ($875))|0;
    $22 = $876;
    $877 = $22;
    $878 = $10;
    $879 = (16 + ($878))|0;
    $880 = (($879) - 13)|0;
    $881 = (($53) + ($880<<2)|0);
    $882 = HEAP32[$881>>2]|0;
    $883 = $882 >> 16;
    $884 = ((($20)) + 24|0);
    $885 = HEAP16[$884>>1]|0;
    $886 = $885 << 16 >> 16;
    $887 = Math_imul($883, $886)|0;
    $888 = $10;
    $889 = (16 + ($888))|0;
    $890 = (($889) - 13)|0;
    $891 = (($53) + ($890<<2)|0);
    $892 = HEAP32[$891>>2]|0;
    $893 = $892 & 65535;
    $894 = ((($20)) + 24|0);
    $895 = HEAP16[$894>>1]|0;
    $896 = $895 << 16 >> 16;
    $897 = Math_imul($893, $896)|0;
    $898 = $897 >> 16;
    $899 = (($887) + ($898))|0;
    $900 = (($877) + ($899))|0;
    $22 = $900;
    $901 = $22;
    $902 = $10;
    $903 = (16 + ($902))|0;
    $904 = (($903) - 14)|0;
    $905 = (($53) + ($904<<2)|0);
    $906 = HEAP32[$905>>2]|0;
    $907 = $906 >> 16;
    $908 = ((($20)) + 26|0);
    $909 = HEAP16[$908>>1]|0;
    $910 = $909 << 16 >> 16;
    $911 = Math_imul($907, $910)|0;
    $912 = $10;
    $913 = (16 + ($912))|0;
    $914 = (($913) - 14)|0;
    $915 = (($53) + ($914<<2)|0);
    $916 = HEAP32[$915>>2]|0;
    $917 = $916 & 65535;
    $918 = ((($20)) + 26|0);
    $919 = HEAP16[$918>>1]|0;
    $920 = $919 << 16 >> 16;
    $921 = Math_imul($917, $920)|0;
    $922 = $921 >> 16;
    $923 = (($911) + ($922))|0;
    $924 = (($901) + ($923))|0;
    $22 = $924;
    $925 = $22;
    $926 = $10;
    $927 = (16 + ($926))|0;
    $928 = (($927) - 15)|0;
    $929 = (($53) + ($928<<2)|0);
    $930 = HEAP32[$929>>2]|0;
    $931 = $930 >> 16;
    $932 = ((($20)) + 28|0);
    $933 = HEAP16[$932>>1]|0;
    $934 = $933 << 16 >> 16;
    $935 = Math_imul($931, $934)|0;
    $936 = $10;
    $937 = (16 + ($936))|0;
    $938 = (($937) - 15)|0;
    $939 = (($53) + ($938<<2)|0);
    $940 = HEAP32[$939>>2]|0;
    $941 = $940 & 65535;
    $942 = ((($20)) + 28|0);
    $943 = HEAP16[$942>>1]|0;
    $944 = $943 << 16 >> 16;
    $945 = Math_imul($941, $944)|0;
    $946 = $945 >> 16;
    $947 = (($935) + ($946))|0;
    $948 = (($925) + ($947))|0;
    $22 = $948;
    $949 = $22;
    $950 = $10;
    $951 = (16 + ($950))|0;
    $952 = (($951) - 16)|0;
    $953 = (($53) + ($952<<2)|0);
    $954 = HEAP32[$953>>2]|0;
    $955 = $954 >> 16;
    $956 = ((($20)) + 30|0);
    $957 = HEAP16[$956>>1]|0;
    $958 = $957 << 16 >> 16;
    $959 = Math_imul($955, $958)|0;
    $960 = $10;
    $961 = (16 + ($960))|0;
    $962 = (($961) - 16)|0;
    $963 = (($53) + ($962<<2)|0);
    $964 = HEAP32[$963>>2]|0;
    $965 = $964 & 65535;
    $966 = ((($20)) + 30|0);
    $967 = HEAP16[$966>>1]|0;
    $968 = $967 << 16 >> 16;
    $969 = Math_imul($965, $968)|0;
    $970 = $969 >> 16;
    $971 = (($959) + ($970))|0;
    $972 = (($949) + ($971))|0;
    $22 = $972;
   }
   $973 = $30;
   $974 = $10;
   $975 = (($973) + ($974<<2)|0);
   $976 = HEAP32[$975>>2]|0;
   $977 = $22;
   $978 = $977 << 4;
   $979 = (($976) + ($978))|0;
   $980 = $10;
   $981 = (16 + ($980))|0;
   $982 = (($53) + ($981<<2)|0);
   HEAP32[$982>>2] = $979;
   $983 = $10;
   $984 = (16 + ($983))|0;
   $985 = (($53) + ($984<<2)|0);
   $986 = HEAP32[$985>>2]|0;
   $987 = $986 >> 16;
   $988 = $23;
   $989 = $988&65535;
   $990 = $989 << 16 >> 16;
   $991 = Math_imul($987, $990)|0;
   $992 = $10;
   $993 = (16 + ($992))|0;
   $994 = (($53) + ($993<<2)|0);
   $995 = HEAP32[$994>>2]|0;
   $996 = $995 & 65535;
   $997 = $23;
   $998 = $997&65535;
   $999 = $998 << 16 >> 16;
   $1000 = Math_imul($996, $999)|0;
   $1001 = $1000 >> 16;
   $1002 = (($991) + ($1001))|0;
   $1003 = $10;
   $1004 = (16 + ($1003))|0;
   $1005 = (($53) + ($1004<<2)|0);
   $1006 = HEAP32[$1005>>2]|0;
   $1007 = $23;
   $1008 = $1007 >> 15;
   $1009 = (($1008) + 1)|0;
   $1010 = $1009 >> 1;
   $1011 = Math_imul($1006, $1010)|0;
   $1012 = (($1002) + ($1011))|0;
   $1013 = $1012 >> 7;
   $1014 = (($1013) + 1)|0;
   $1015 = $1014 >> 1;
   $1016 = ($1015|0)>(32767);
   if ($1016) {
    $1085 = 32767;
   } else {
    $1017 = $10;
    $1018 = (16 + ($1017))|0;
    $1019 = (($53) + ($1018<<2)|0);
    $1020 = HEAP32[$1019>>2]|0;
    $1021 = $1020 >> 16;
    $1022 = $23;
    $1023 = $1022&65535;
    $1024 = $1023 << 16 >> 16;
    $1025 = Math_imul($1021, $1024)|0;
    $1026 = $10;
    $1027 = (16 + ($1026))|0;
    $1028 = (($53) + ($1027<<2)|0);
    $1029 = HEAP32[$1028>>2]|0;
    $1030 = $1029 & 65535;
    $1031 = $23;
    $1032 = $1031&65535;
    $1033 = $1032 << 16 >> 16;
    $1034 = Math_imul($1030, $1033)|0;
    $1035 = $1034 >> 16;
    $1036 = (($1025) + ($1035))|0;
    $1037 = $10;
    $1038 = (16 + ($1037))|0;
    $1039 = (($53) + ($1038<<2)|0);
    $1040 = HEAP32[$1039>>2]|0;
    $1041 = $23;
    $1042 = $1041 >> 15;
    $1043 = (($1042) + 1)|0;
    $1044 = $1043 >> 1;
    $1045 = Math_imul($1040, $1044)|0;
    $1046 = (($1036) + ($1045))|0;
    $1047 = $1046 >> 7;
    $1048 = (($1047) + 1)|0;
    $1049 = $1048 >> 1;
    $1050 = ($1049|0)<(-32768);
    if ($1050) {
     $1085 = -32768;
    } else {
     $1051 = $10;
     $1052 = (16 + ($1051))|0;
     $1053 = (($53) + ($1052<<2)|0);
     $1054 = HEAP32[$1053>>2]|0;
     $1055 = $1054 >> 16;
     $1056 = $23;
     $1057 = $1056&65535;
     $1058 = $1057 << 16 >> 16;
     $1059 = Math_imul($1055, $1058)|0;
     $1060 = $10;
     $1061 = (16 + ($1060))|0;
     $1062 = (($53) + ($1061<<2)|0);
     $1063 = HEAP32[$1062>>2]|0;
     $1064 = $1063 & 65535;
     $1065 = $23;
     $1066 = $1065&65535;
     $1067 = $1066 << 16 >> 16;
     $1068 = Math_imul($1064, $1067)|0;
     $1069 = $1068 >> 16;
     $1070 = (($1059) + ($1069))|0;
     $1071 = $10;
     $1072 = (16 + ($1071))|0;
     $1073 = (($53) + ($1072<<2)|0);
     $1074 = HEAP32[$1073>>2]|0;
     $1075 = $23;
     $1076 = $1075 >> 15;
     $1077 = (($1076) + 1)|0;
     $1078 = $1077 >> 1;
     $1079 = Math_imul($1074, $1078)|0;
     $1080 = (($1070) + ($1079))|0;
     $1081 = $1080 >> 7;
     $1082 = (($1081) + 1)|0;
     $1083 = $1082 >> 1;
     $1085 = $1083;
    }
   }
   $1084 = $1085&65535;
   $1086 = $19;
   $1087 = $10;
   $1088 = (($1086) + ($1087<<1)|0);
   HEAP16[$1088>>1] = $1084;
   $1089 = $10;
   $1090 = (($1089) + 1)|0;
   $10 = $1090;
  }
  $1091 = $5;
  $1092 = ((($1091)) + 2332|0);
  $1093 = HEAP32[$1092>>2]|0;
  $1094 = (($53) + ($1093<<2)|0);
  dest=$53; src=$1094; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $1095 = $5;
  $1096 = ((($1095)) + 2332|0);
  $1097 = HEAP32[$1096>>2]|0;
  $1098 = $29;
  $1099 = (($1098) + ($1097<<2)|0);
  $29 = $1099;
  $1100 = $5;
  $1101 = ((($1100)) + 2332|0);
  $1102 = HEAP32[$1101>>2]|0;
  $1103 = $19;
  $1104 = (($1103) + ($1102<<1)|0);
  $19 = $1104;
  $1105 = $11;
  $1106 = (($1105) + 1)|0;
  $11 = $1106;
 }
 $1107 = $5;
 $1108 = ((($1107)) + 1284|0);
 dest=$1108; src=$53; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1109 = $31;
 _llvm_stackrestore(($1109|0));
 STACKTOP = sp;return;
}
function _silk_INVERSE32_varQ_549($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ($11|0)>(0);
 $13 = $3;
 $14 = (0 - ($13))|0;
 $15 = $12 ? $13 : $14;
 $16 = (_silk_CLZ32_551($15)|0);
 $17 = (($16) - 1)|0;
 $5 = $17;
 $18 = $3;
 $19 = $5;
 $20 = $18 << $19;
 $8 = $20;
 $21 = $8;
 $22 = $21 >> 16;
 $23 = (536870911 / ($22|0))&-1;
 $7 = $23;
 $24 = $7;
 $25 = $24 << 16;
 $10 = $25;
 $26 = $8;
 $27 = $26 >> 16;
 $28 = $7;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = Math_imul($27, $30)|0;
 $32 = $8;
 $33 = $32 & 65535;
 $34 = $7;
 $35 = $34&65535;
 $36 = $35 << 16 >> 16;
 $37 = Math_imul($33, $36)|0;
 $38 = $37 >> 16;
 $39 = (($31) + ($38))|0;
 $40 = (536870912 - ($39))|0;
 $41 = $40 << 3;
 $9 = $41;
 $42 = $10;
 $43 = $9;
 $44 = $43 >> 16;
 $45 = $7;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $9;
 $50 = $49 & 65535;
 $51 = $7;
 $52 = $51&65535;
 $53 = $52 << 16 >> 16;
 $54 = Math_imul($50, $53)|0;
 $55 = $54 >> 16;
 $56 = (($48) + ($55))|0;
 $57 = (($42) + ($56))|0;
 $58 = $9;
 $59 = $7;
 $60 = $59 >> 15;
 $61 = (($60) + 1)|0;
 $62 = $61 >> 1;
 $63 = Math_imul($58, $62)|0;
 $64 = (($57) + ($63))|0;
 $10 = $64;
 $65 = $5;
 $66 = (61 - ($65))|0;
 $67 = $4;
 $68 = (($66) - ($67))|0;
 $6 = $68;
 $69 = $6;
 $70 = ($69|0)<=(0);
 $71 = $6;
 if (!($70)) {
  $113 = ($71|0)<(32);
  if ($113) {
   $114 = $10;
   $115 = $6;
   $116 = $114 >> $115;
   $2 = $116;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  } else {
   $2 = 0;
   $117 = $2;
   STACKTOP = sp;return ($117|0);
  }
 }
 $72 = (0 - ($71))|0;
 $73 = -2147483648 >> $72;
 $74 = $6;
 $75 = (0 - ($74))|0;
 $76 = 2147483647 >> $75;
 $77 = ($73|0)>($76|0);
 $78 = $10;
 $79 = $6;
 $80 = (0 - ($79))|0;
 do {
  if ($77) {
   $81 = -2147483648 >> $80;
   $82 = ($78|0)>($81|0);
   if ($82) {
    $83 = $6;
    $84 = (0 - ($83))|0;
    $85 = -2147483648 >> $84;
    $112 = $85;
    break;
   }
   $86 = $10;
   $87 = $6;
   $88 = (0 - ($87))|0;
   $89 = 2147483647 >> $88;
   $90 = ($86|0)<($89|0);
   if ($90) {
    $91 = $6;
    $92 = (0 - ($91))|0;
    $93 = 2147483647 >> $92;
    $112 = $93;
    break;
   } else {
    $94 = $10;
    $112 = $94;
    break;
   }
  } else {
   $95 = 2147483647 >> $80;
   $96 = ($78|0)>($95|0);
   if ($96) {
    $97 = $6;
    $98 = (0 - ($97))|0;
    $99 = 2147483647 >> $98;
    $112 = $99;
    break;
   }
   $100 = $10;
   $101 = $6;
   $102 = (0 - ($101))|0;
   $103 = -2147483648 >> $102;
   $104 = ($100|0)<($103|0);
   if ($104) {
    $105 = $6;
    $106 = (0 - ($105))|0;
    $107 = -2147483648 >> $106;
    $112 = $107;
    break;
   } else {
    $108 = $10;
    $112 = $108;
    break;
   }
  }
 } while(0);
 $109 = $6;
 $110 = (0 - ($109))|0;
 $111 = $112 << $110;
 $2 = $111;
 $117 = $2;
 STACKTOP = sp;return ($117|0);
}
function _silk_DIV32_varQ_550($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ($14|0)>(0);
 $16 = $4;
 $17 = (0 - ($16))|0;
 $18 = $15 ? $16 : $17;
 $19 = (_silk_CLZ32_551($18)|0);
 $20 = (($19) - 1)|0;
 $7 = $20;
 $21 = $4;
 $22 = $7;
 $23 = $21 << $22;
 $11 = $23;
 $24 = $5;
 $25 = ($24|0)>(0);
 $26 = $5;
 $27 = (0 - ($26))|0;
 $28 = $25 ? $26 : $27;
 $29 = (_silk_CLZ32_551($28)|0);
 $30 = (($29) - 1)|0;
 $8 = $30;
 $31 = $5;
 $32 = $8;
 $33 = $31 << $32;
 $12 = $33;
 $34 = $12;
 $35 = $34 >> 16;
 $36 = (536870911 / ($35|0))&-1;
 $10 = $36;
 $37 = $11;
 $38 = $37 >> 16;
 $39 = $10;
 $40 = $39&65535;
 $41 = $40 << 16 >> 16;
 $42 = Math_imul($38, $41)|0;
 $43 = $11;
 $44 = $43 & 65535;
 $45 = $10;
 $46 = $45&65535;
 $47 = $46 << 16 >> 16;
 $48 = Math_imul($44, $47)|0;
 $49 = $48 >> 16;
 $50 = (($42) + ($49))|0;
 $13 = $50;
 $51 = $11;
 $52 = $12;
 $53 = ($52|0)<(0);
 $54 = $53 << 31 >> 31;
 $55 = $13;
 $56 = ($55|0)<(0);
 $57 = $56 << 31 >> 31;
 $58 = (___muldi3(($52|0),($54|0),($55|0),($57|0))|0);
 $59 = tempRet0;
 $60 = (_bitshift64Ashr(($58|0),($59|0),32)|0);
 $61 = tempRet0;
 $62 = $60 << 3;
 $63 = (($51) - ($62))|0;
 $11 = $63;
 $64 = $13;
 $65 = $11;
 $66 = $65 >> 16;
 $67 = $10;
 $68 = $67&65535;
 $69 = $68 << 16 >> 16;
 $70 = Math_imul($66, $69)|0;
 $71 = $11;
 $72 = $71 & 65535;
 $73 = $10;
 $74 = $73&65535;
 $75 = $74 << 16 >> 16;
 $76 = Math_imul($72, $75)|0;
 $77 = $76 >> 16;
 $78 = (($70) + ($77))|0;
 $79 = (($64) + ($78))|0;
 $13 = $79;
 $80 = $7;
 $81 = (29 + ($80))|0;
 $82 = $8;
 $83 = (($81) - ($82))|0;
 $84 = $6;
 $85 = (($83) - ($84))|0;
 $9 = $85;
 $86 = $9;
 $87 = ($86|0)<(0);
 $88 = $9;
 if (!($87)) {
  $130 = ($88|0)<(32);
  if ($130) {
   $131 = $13;
   $132 = $9;
   $133 = $131 >> $132;
   $3 = $133;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $3 = 0;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 }
 $89 = (0 - ($88))|0;
 $90 = -2147483648 >> $89;
 $91 = $9;
 $92 = (0 - ($91))|0;
 $93 = 2147483647 >> $92;
 $94 = ($90|0)>($93|0);
 $95 = $13;
 $96 = $9;
 $97 = (0 - ($96))|0;
 do {
  if ($94) {
   $98 = -2147483648 >> $97;
   $99 = ($95|0)>($98|0);
   if ($99) {
    $100 = $9;
    $101 = (0 - ($100))|0;
    $102 = -2147483648 >> $101;
    $129 = $102;
    break;
   }
   $103 = $13;
   $104 = $9;
   $105 = (0 - ($104))|0;
   $106 = 2147483647 >> $105;
   $107 = ($103|0)<($106|0);
   if ($107) {
    $108 = $9;
    $109 = (0 - ($108))|0;
    $110 = 2147483647 >> $109;
    $129 = $110;
    break;
   } else {
    $111 = $13;
    $129 = $111;
    break;
   }
  } else {
   $112 = 2147483647 >> $97;
   $113 = ($95|0)>($112|0);
   if ($113) {
    $114 = $9;
    $115 = (0 - ($114))|0;
    $116 = 2147483647 >> $115;
    $129 = $116;
    break;
   }
   $117 = $13;
   $118 = $9;
   $119 = (0 - ($118))|0;
   $120 = -2147483648 >> $119;
   $121 = ($117|0)<($120|0);
   if ($121) {
    $122 = $9;
    $123 = (0 - ($122))|0;
    $124 = -2147483648 >> $123;
    $129 = $124;
    break;
   } else {
    $125 = $13;
    $129 = $125;
    break;
   }
  }
 } while(0);
 $126 = $9;
 $127 = (0 - ($126))|0;
 $128 = $129 << $127;
 $3 = $128;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _silk_CLZ32_551($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_interpolate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $11 = $10;
  $12 = $9;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $10;
  $16 = (($14) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = $7;
  $20 = $10;
  $21 = (($19) + ($20<<1)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = $6;
  $25 = $10;
  $26 = (($24) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = (($23) - ($28))|0;
  $30 = $29&65535;
  $31 = $30 << 16 >> 16;
  $32 = $8;
  $33 = $32&65535;
  $34 = $33 << 16 >> 16;
  $35 = Math_imul($31, $34)|0;
  $36 = $35 >> 2;
  $37 = (($18) + ($36))|0;
  $38 = $37&65535;
  $39 = $5;
  $40 = $10;
  $41 = (($39) + ($40<<1)|0);
  HEAP16[$41>>1] = $38;
  $42 = $10;
  $43 = (($42) + 1)|0;
  $10 = $43;
 }
 STACKTOP = sp;return;
}
function _silk_NLSF_encode($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $$alloca_mul25 = 0, $$alloca_mul27 = 0, $$alloca_mul29 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $17 = sp + 24|0;
 $21 = sp + 232|0;
 $22 = sp + 200|0;
 $23 = sp + 168|0;
 $24 = sp + 136|0;
 $25 = sp + 104|0;
 $26 = sp + 264|0;
 $27 = sp + 72|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $31 = $8;
 $32 = $9;
 $33 = ((($32)) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $9;
 $36 = ((($35)) + 2|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 _silk_NLSF_stabilize($31,$34,$38);
 $39 = $9;
 $40 = HEAP16[$39>>1]|0;
 $41 = $40&65535;
 $42 = (_llvm_stacksave()|0);
 $30 = $42;
 $$alloca_mul = $41<<2;
 $43 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $44 = $8;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $9;
 $49 = HEAP16[$48>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = $9;
 $52 = ((($51)) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 _silk_NLSF_VQ($43,$44,$47,$50,$54);
 $55 = $12;
 $$alloca_mul25 = $55<<2;
 $56 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul25)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul25)|0)+15)&-16)|0);;
 $57 = $9;
 $58 = HEAP16[$57>>1]|0;
 $59 = $58 << 16 >> 16;
 $60 = $12;
 _silk_insertion_sort_increasing($43,$56,$59,$60);
 $61 = $12;
 $$alloca_mul27 = $61<<2;
 $62 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul27)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul27)|0)+15)&-16)|0);;
 $63 = $12;
 $64 = $63<<4;
 $$alloca_mul29 = $64;
 $65 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul29)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul29)|0)+15)&-16)|0);;
 $15 = 0;
 while(1) {
  $66 = $15;
  $67 = $12;
  $68 = ($66|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = $15;
  $70 = (($56) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $16 = $71;
  $72 = $9;
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $16;
  $76 = $9;
  $77 = ((($76)) + 2|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = Math_imul($75, $79)|0;
  $81 = (($74) + ($80)|0);
  $28 = $81;
  $14 = 0;
  while(1) {
   $82 = $14;
   $83 = $9;
   $84 = ((($83)) + 2|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85 << 16 >> 16;
   $87 = ($82|0)<($86|0);
   if (!($87)) {
    break;
   }
   $88 = $28;
   $89 = $14;
   $90 = (($88) + ($89)|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&255;
   $93 = $92&65535;
   $94 = $93 << 7;
   $95 = $94&65535;
   $96 = $14;
   $97 = (($23) + ($96<<1)|0);
   HEAP16[$97>>1] = $95;
   $98 = $8;
   $99 = $14;
   $100 = (($98) + ($99<<1)|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 << 16 >> 16;
   $103 = $14;
   $104 = (($23) + ($103<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = $105 << 16 >> 16;
   $107 = (($102) - ($106))|0;
   $108 = $107&65535;
   $109 = $14;
   $110 = (($21) + ($109<<1)|0);
   HEAP16[$110>>1] = $108;
   $111 = $14;
   $112 = (($111) + 1)|0;
   $14 = $112;
  }
  $113 = $9;
  $114 = ((($113)) + 2|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115 << 16 >> 16;
  _silk_NLSF_VQ_weights_laroia($24,$23,$116);
  $14 = 0;
  while(1) {
   $117 = $14;
   $118 = $9;
   $119 = ((($118)) + 2|0);
   $120 = HEAP16[$119>>1]|0;
   $121 = $120 << 16 >> 16;
   $122 = ($117|0)<($121|0);
   if (!($122)) {
    break;
   }
   $123 = $14;
   $124 = (($24) + ($123<<1)|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = $125 << 16 >> 16;
   $127 = $126 << 16;
   $128 = (_silk_SQRT_APPROX_556($127)|0);
   $20 = $128;
   $129 = $14;
   $130 = (($21) + ($129<<1)|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131 << 16 >> 16;
   $133 = $20;
   $134 = $133&65535;
   $135 = $134 << 16 >> 16;
   $136 = Math_imul($132, $135)|0;
   $137 = $136 >> 14;
   $138 = $137&65535;
   $139 = $14;
   $140 = (($22) + ($139<<1)|0);
   HEAP16[$140>>1] = $138;
   $141 = $14;
   $142 = (($141) + 1)|0;
   $14 = $142;
  }
  $14 = 0;
  while(1) {
   $143 = $14;
   $144 = $9;
   $145 = ((($144)) + 2|0);
   $146 = HEAP16[$145>>1]|0;
   $147 = $146 << 16 >> 16;
   $148 = ($143|0)<($147|0);
   if (!($148)) {
    break;
   }
   $149 = $10;
   $150 = $14;
   $151 = (($149) + ($150<<1)|0);
   $152 = HEAP16[$151>>1]|0;
   $153 = $152 << 16 >> 16;
   $154 = $153 << 5;
   $155 = $14;
   $156 = (($24) + ($155<<1)|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157 << 16 >> 16;
   $159 = (($154|0) / ($158|0))&-1;
   $160 = $159&65535;
   $161 = $14;
   $162 = (($25) + ($161<<1)|0);
   HEAP16[$162>>1] = $160;
   $163 = $14;
   $164 = (($163) + 1)|0;
   $14 = $164;
  }
  $165 = $9;
  $166 = $16;
  _silk_NLSF_unpack($27,$26,$165,$166);
  $167 = $15;
  $168 = $167<<4;
  $169 = (($65) + ($168)|0);
  $170 = $9;
  $171 = ((($170)) + 28|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $9;
  $174 = ((($173)) + 4|0);
  $175 = HEAP16[$174>>1]|0;
  $176 = $175 << 16 >> 16;
  $177 = $9;
  $178 = ((($177)) + 6|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $11;
  $181 = $9;
  $182 = ((($181)) + 2|0);
  $183 = HEAP16[$182>>1]|0;
  $184 = (_silk_NLSF_del_dec_quant($169,$22,$25,$26,$27,$172,$176,$179,$180,$183)|0);
  $185 = $15;
  $186 = (($62) + ($185<<2)|0);
  HEAP32[$186>>2] = $184;
  $187 = $9;
  $188 = ((($187)) + 12|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $13;
  $191 = $190 >> 1;
  $192 = $9;
  $193 = HEAP16[$192>>1]|0;
  $194 = $193 << 16 >> 16;
  $195 = Math_imul($191, $194)|0;
  $196 = (($189) + ($195)|0);
  $29 = $196;
  $197 = $16;
  $198 = ($197|0)==(0);
  $199 = $29;
  $200 = $16;
  if ($198) {
   $201 = (($199) + ($200)|0);
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = (256 - ($203))|0;
   $18 = $204;
  } else {
   $205 = (($200) - 1)|0;
   $206 = (($199) + ($205)|0);
   $207 = HEAP8[$206>>0]|0;
   $208 = $207&255;
   $209 = $29;
   $210 = $16;
   $211 = (($209) + ($210)|0);
   $212 = HEAP8[$211>>0]|0;
   $213 = $212&255;
   $214 = (($208) - ($213))|0;
   $18 = $214;
  }
  $215 = $18;
  $216 = (_silk_lin2log($215)|0);
  $217 = (1024 - ($216))|0;
  $19 = $217;
  $218 = $15;
  $219 = (($62) + ($218<<2)|0);
  $220 = HEAP32[$219>>2]|0;
  $221 = $19;
  $222 = $221&65535;
  $223 = $222 << 16 >> 16;
  $224 = $11;
  $225 = $224 >> 2;
  $226 = $225&65535;
  $227 = $226 << 16 >> 16;
  $228 = Math_imul($223, $227)|0;
  $229 = (($220) + ($228))|0;
  $230 = $15;
  $231 = (($62) + ($230<<2)|0);
  HEAP32[$231>>2] = $229;
  $232 = $15;
  $233 = (($232) + 1)|0;
  $15 = $233;
 }
 $234 = $12;
 _silk_insertion_sort_increasing($62,$17,$234,1);
 $235 = HEAP32[$17>>2]|0;
 $236 = (($56) + ($235<<2)|0);
 $237 = HEAP32[$236>>2]|0;
 $238 = $237&255;
 $239 = $7;
 HEAP8[$239>>0] = $238;
 $240 = $7;
 $241 = ((($240)) + 1|0);
 $242 = HEAP32[$17>>2]|0;
 $243 = $242<<4;
 $244 = (($65) + ($243)|0);
 $245 = $9;
 $246 = ((($245)) + 2|0);
 $247 = HEAP16[$246>>1]|0;
 $248 = $247 << 16 >> 16;
 $249 = $248;
 _memcpy(($241|0),($244|0),($249|0))|0;
 $250 = $8;
 $251 = $7;
 $252 = $9;
 _silk_NLSF_decode($250,$251,$252);
 $253 = HEAP32[$62>>2]|0;
 $254 = $30;
 _llvm_stackrestore(($254|0));
 STACKTOP = sp;return ($253|0);
}
function _silk_SQRT_APPROX_556($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $5 = sp;
 $2 = $0;
 $6 = $2;
 $7 = ($6|0)<=(0);
 if ($7) {
  $1 = 0;
  $39 = $1;
  STACKTOP = sp;return ($39|0);
 }
 $8 = $2;
 _silk_CLZ_FRAC_557($8,$4,$5);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 32768;
 } else {
  $3 = 46214;
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = $12 >> 1;
 $14 = $3;
 $15 = $14 >> $13;
 $3 = $15;
 $16 = $3;
 $17 = $3;
 $18 = $17 >> 16;
 $19 = HEAP32[$5>>2]|0;
 $20 = $19&65535;
 $21 = $20 << 16 >> 16;
 $22 = ($21*213)|0;
 $23 = $22&65535;
 $24 = $23 << 16 >> 16;
 $25 = Math_imul($18, $24)|0;
 $26 = $3;
 $27 = $26 & 65535;
 $28 = HEAP32[$5>>2]|0;
 $29 = $28&65535;
 $30 = $29 << 16 >> 16;
 $31 = ($30*213)|0;
 $32 = $31&65535;
 $33 = $32 << 16 >> 16;
 $34 = Math_imul($27, $33)|0;
 $35 = $34 >> 16;
 $36 = (($25) + ($35))|0;
 $37 = (($16) + ($36))|0;
 $3 = $37;
 $38 = $3;
 $1 = $38;
 $39 = $1;
 STACKTOP = sp;return ($39|0);
}
function _silk_CLZ_FRAC_557($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (_silk_CLZ32_558($7)|0);
 $6 = $8;
 $9 = $6;
 $10 = $4;
 HEAP32[$10>>2] = $9;
 $11 = $3;
 $12 = $6;
 $13 = (24 - ($12))|0;
 $14 = (_silk_ROR32_559($11,$13)|0);
 $15 = $14 & 127;
 $16 = $5;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _silk_CLZ32_558($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $1;
  $5 = (Math_clz32(($4|0))|0);
  $6 = (32 - ($5))|0;
  $7 = (32 - ($6))|0;
  $8 = $7;
 } else {
  $8 = 32;
 }
 STACKTOP = sp;return ($8|0);
}
function _silk_ROR32_559($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $4;
 $6 = $9;
 $10 = $4;
 $11 = (0 - ($10))|0;
 $7 = $11;
 $12 = $4;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $3;
  $2 = $14;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $15 = $4;
 $16 = ($15|0)<(0);
 $17 = $5;
 if ($16) {
  $18 = $7;
  $19 = $17 << $18;
  $20 = $5;
  $21 = $7;
  $22 = (32 - ($21))|0;
  $23 = $20 >>> $22;
  $24 = $19 | $23;
  $2 = $24;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 } else {
  $25 = $6;
  $26 = (32 - ($25))|0;
  $27 = $17 << $26;
  $28 = $5;
  $29 = $6;
  $30 = $28 >>> $29;
  $31 = $27 | $30;
  $2 = $31;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _silk_NLSF_VQ($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 while(1) {
  $15 = $10;
  $16 = $8;
  $17 = ($15|0)<($16|0);
  if (!($17)) {
   break;
  }
  $14 = 0;
  $11 = 0;
  while(1) {
   $18 = $11;
   $19 = $9;
   $20 = ($18|0)<($19|0);
   if (!($20)) {
    break;
   }
   $21 = $6;
   $22 = $11;
   $23 = (($21) + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 << 16 >> 16;
   $26 = $7;
   $27 = ((($26)) + 1|0);
   $7 = $27;
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $29 << 7;
   $31 = (($25) - ($30))|0;
   $12 = $31;
   $32 = $12;
   $33 = $32&65535;
   $34 = $33 << 16 >> 16;
   $35 = $12;
   $36 = $35&65535;
   $37 = $36 << 16 >> 16;
   $38 = Math_imul($34, $37)|0;
   $13 = $38;
   $39 = $6;
   $40 = $11;
   $41 = (($40) + 1)|0;
   $42 = (($39) + ($41<<1)|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43 << 16 >> 16;
   $45 = $7;
   $46 = ((($45)) + 1|0);
   $7 = $46;
   $47 = HEAP8[$45>>0]|0;
   $48 = $47&255;
   $49 = $48 << 7;
   $50 = (($44) - ($49))|0;
   $12 = $50;
   $51 = $13;
   $52 = $12;
   $53 = $52&65535;
   $54 = $53 << 16 >> 16;
   $55 = $12;
   $56 = $55&65535;
   $57 = $56 << 16 >> 16;
   $58 = Math_imul($54, $57)|0;
   $59 = (($51) + ($58))|0;
   $13 = $59;
   $60 = $14;
   $61 = $13;
   $62 = $61 >> 4;
   $63 = (($60) + ($62))|0;
   $14 = $63;
   $64 = $11;
   $65 = (($64) + 2)|0;
   $11 = $65;
  }
  $66 = $14;
  $67 = $5;
  $68 = $10;
  $69 = (($67) + ($68<<2)|0);
  HEAP32[$69>>2] = $66;
  $70 = $10;
  $71 = (($70) + 1)|0;
  $10 = $71;
 }
 STACKTOP = sp;return;
}
function _silk_NLSF_del_dec_quant($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $39 = sp + 232|0;
 $40 = sp + 384|0;
 $41 = sp + 360|0;
 $42 = sp + 200|0;
 $43 = sp + 184|0;
 $44 = sp + 168|0;
 $46 = sp + 80|0;
 $47 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = -10;
 while(1) {
  $48 = $20;
  $49 = ($48|0)<=(9);
  if (!($49)) {
   break;
  }
  $50 = $20;
  $51 = $50 << 10;
  $30 = $51;
  $52 = $30;
  $53 = (($52) + 1024)|0;
  $31 = $53;
  $54 = $20;
  $55 = ($54|0)>(0);
  do {
   if ($55) {
    $56 = $30;
    $57 = (($56) - 102)|0;
    $30 = $57;
    $58 = $31;
    $59 = (($58) - 102)|0;
    $31 = $59;
   } else {
    $60 = $20;
    $61 = ($60|0)==(0);
    if ($61) {
     $62 = $31;
     $63 = (($62) - 102)|0;
     $31 = $63;
     break;
    }
    $64 = $20;
    $65 = ($64|0)==(-1);
    $66 = $30;
    $67 = (($66) + 102)|0;
    $30 = $67;
    if (!($65)) {
     $68 = $31;
     $69 = (($68) + 102)|0;
     $31 = $69;
    }
   }
  } while(0);
  $70 = $30;
  $71 = $70 >> 16;
  $72 = $16;
  $73 = $72&65535;
  $74 = $73 << 16 >> 16;
  $75 = Math_imul($71, $74)|0;
  $76 = $30;
  $77 = $76 & 65535;
  $78 = $16;
  $79 = $78&65535;
  $80 = $79 << 16 >> 16;
  $81 = Math_imul($77, $80)|0;
  $82 = $81 >> 16;
  $83 = (($75) + ($82))|0;
  $84 = $20;
  $85 = (($84) + 10)|0;
  $86 = (($46) + ($85<<2)|0);
  HEAP32[$86>>2] = $83;
  $87 = $31;
  $88 = $87 >> 16;
  $89 = $16;
  $90 = $89&65535;
  $91 = $90 << 16 >> 16;
  $92 = Math_imul($88, $91)|0;
  $93 = $31;
  $94 = $93 & 65535;
  $95 = $16;
  $96 = $95&65535;
  $97 = $96 << 16 >> 16;
  $98 = Math_imul($94, $97)|0;
  $99 = $98 >> 16;
  $100 = (($92) + ($99))|0;
  $101 = $20;
  $102 = (($101) + 10)|0;
  $103 = (($47) + ($102<<2)|0);
  HEAP32[$103>>2] = $100;
  $104 = $20;
  $105 = (($104) + 1)|0;
  $20 = $105;
 }
 $22 = 1;
 HEAP32[$42>>2] = 0;
 HEAP16[$41>>1] = 0;
 $106 = $19;
 $107 = $106 << 16 >> 16;
 $108 = (($107) - 1)|0;
 $20 = $108;
 L13: while(1) {
  $109 = $15;
  $110 = $14;
  $111 = $20;
  $112 = (($110) + ($111<<1)|0);
  $113 = HEAP16[$112>>1]|0;
  $114 = $113 << 16 >> 16;
  $115 = (($109) + ($114)|0);
  $45 = $115;
  $116 = $13;
  $117 = $20;
  $118 = (($116) + ($117)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = $120 << 8;
  $38 = $121;
  $122 = $11;
  $123 = $20;
  $124 = (($122) + ($123<<1)|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $26 = $126;
  $21 = 0;
  while(1) {
   $127 = $21;
   $128 = $22;
   $129 = ($127|0)<($128|0);
   if (!($129)) {
    break;
   }
   $130 = $38;
   $131 = $130 >> 16;
   $132 = $21;
   $133 = (($41) + ($132<<1)|0);
   $134 = HEAP16[$133>>1]|0;
   $135 = $134 << 16 >> 16;
   $136 = Math_imul($131, $135)|0;
   $137 = $38;
   $138 = $137 & 65535;
   $139 = $21;
   $140 = (($41) + ($139<<1)|0);
   $141 = HEAP16[$140>>1]|0;
   $142 = $141 << 16 >> 16;
   $143 = Math_imul($138, $142)|0;
   $144 = $143 >> 16;
   $145 = (($136) + ($144))|0;
   $28 = $145;
   $146 = $26;
   $147 = $28;
   $148 = (($146) - ($147))|0;
   $27 = $148;
   $149 = $17;
   $150 = $149 << 16 >> 16;
   $151 = $150 >> 16;
   $152 = $27;
   $153 = $152&65535;
   $154 = $153 << 16 >> 16;
   $155 = Math_imul($151, $154)|0;
   $156 = $17;
   $157 = $156 << 16 >> 16;
   $158 = $157 & 65535;
   $159 = $27;
   $160 = $159&65535;
   $161 = $160 << 16 >> 16;
   $162 = Math_imul($158, $161)|0;
   $163 = $162 >> 16;
   $164 = (($155) + ($163))|0;
   $23 = $164;
   $165 = $23;
   $166 = ($165|0)>(9);
   if ($166) {
    $171 = 9;
   } else {
    $167 = $23;
    $168 = ($167|0)<(-10);
    $169 = $23;
    $170 = $168 ? -10 : $169;
    $171 = $170;
   }
   $23 = $171;
   $172 = $23;
   $173 = $172&255;
   $174 = $21;
   $175 = (($40) + ($174<<4)|0);
   $176 = $20;
   $177 = (($175) + ($176)|0);
   HEAP8[$177>>0] = $173;
   $178 = $23;
   $179 = (($178) + 10)|0;
   $180 = (($46) + ($179<<2)|0);
   $181 = HEAP32[$180>>2]|0;
   $30 = $181;
   $182 = $23;
   $183 = (($182) + 10)|0;
   $184 = (($47) + ($183<<2)|0);
   $185 = HEAP32[$184>>2]|0;
   $31 = $185;
   $186 = $30;
   $187 = $28;
   $188 = (($186) + ($187))|0;
   $30 = $188;
   $189 = $31;
   $190 = $28;
   $191 = (($189) + ($190))|0;
   $31 = $191;
   $192 = $30;
   $193 = $192&65535;
   $194 = $21;
   $195 = (($41) + ($194<<1)|0);
   HEAP16[$195>>1] = $193;
   $196 = $31;
   $197 = $196&65535;
   $198 = $21;
   $199 = $22;
   $200 = (($198) + ($199))|0;
   $201 = (($41) + ($200<<1)|0);
   HEAP16[$201>>1] = $197;
   $202 = $23;
   $203 = (($202) + 1)|0;
   $204 = ($203|0)>=(4);
   $205 = $23;
   do {
    if ($204) {
     $206 = (($205) + 1)|0;
     $207 = ($206|0)==(4);
     if ($207) {
      $208 = $45;
      $209 = $23;
      $210 = (($209) + 4)|0;
      $211 = (($208) + ($210)|0);
      $212 = HEAP8[$211>>0]|0;
      $213 = $212&255;
      $32 = $213;
      $33 = 280;
      break;
     } else {
      $214 = $23;
      $215 = $214&65535;
      $216 = $215 << 16 >> 16;
      $217 = ($216*43)|0;
      $218 = (108 + ($217))|0;
      $32 = $218;
      $219 = $32;
      $220 = (($219) + 43)|0;
      $33 = $220;
      break;
     }
    } else {
     $221 = ($205|0)<=(-4);
     if (!($221)) {
      $238 = $45;
      $239 = $23;
      $240 = (($239) + 4)|0;
      $241 = (($238) + ($240)|0);
      $242 = HEAP8[$241>>0]|0;
      $243 = $242&255;
      $32 = $243;
      $244 = $45;
      $245 = $23;
      $246 = (($245) + 1)|0;
      $247 = (($246) + 4)|0;
      $248 = (($244) + ($247)|0);
      $249 = HEAP8[$248>>0]|0;
      $250 = $249&255;
      $33 = $250;
      break;
     }
     $222 = $23;
     $223 = ($222|0)==(-4);
     if ($223) {
      $32 = 280;
      $224 = $45;
      $225 = $23;
      $226 = (($225) + 1)|0;
      $227 = (($226) + 4)|0;
      $228 = (($224) + ($227)|0);
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $33 = $230;
      break;
     } else {
      $231 = $23;
      $232 = $231&65535;
      $233 = $232 << 16 >> 16;
      $234 = Math_imul(-43, $233)|0;
      $235 = (108 + ($234))|0;
      $32 = $235;
      $236 = $32;
      $237 = (($236) - 43)|0;
      $33 = $237;
      break;
     }
    }
   } while(0);
   $251 = $21;
   $252 = (($42) + ($251<<2)|0);
   $253 = HEAP32[$252>>2]|0;
   $34 = $253;
   $254 = $26;
   $255 = $30;
   $256 = (($254) - ($255))|0;
   $29 = $256;
   $257 = $34;
   $258 = $29;
   $259 = $258&65535;
   $260 = $259 << 16 >> 16;
   $261 = $29;
   $262 = $261&65535;
   $263 = $262 << 16 >> 16;
   $264 = Math_imul($260, $263)|0;
   $265 = $12;
   $266 = $20;
   $267 = (($265) + ($266<<1)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = $268 << 16 >> 16;
   $270 = Math_imul($264, $269)|0;
   $271 = (($257) + ($270))|0;
   $272 = $18;
   $273 = $272&65535;
   $274 = $273 << 16 >> 16;
   $275 = $32;
   $276 = $275&65535;
   $277 = $276 << 16 >> 16;
   $278 = Math_imul($274, $277)|0;
   $279 = (($271) + ($278))|0;
   $280 = $21;
   $281 = (($42) + ($280<<2)|0);
   HEAP32[$281>>2] = $279;
   $282 = $26;
   $283 = $31;
   $284 = (($282) - ($283))|0;
   $29 = $284;
   $285 = $34;
   $286 = $29;
   $287 = $286&65535;
   $288 = $287 << 16 >> 16;
   $289 = $29;
   $290 = $289&65535;
   $291 = $290 << 16 >> 16;
   $292 = Math_imul($288, $291)|0;
   $293 = $12;
   $294 = $20;
   $295 = (($293) + ($294<<1)|0);
   $296 = HEAP16[$295>>1]|0;
   $297 = $296 << 16 >> 16;
   $298 = Math_imul($292, $297)|0;
   $299 = (($285) + ($298))|0;
   $300 = $18;
   $301 = $300&65535;
   $302 = $301 << 16 >> 16;
   $303 = $33;
   $304 = $303&65535;
   $305 = $304 << 16 >> 16;
   $306 = Math_imul($302, $305)|0;
   $307 = (($299) + ($306))|0;
   $308 = $21;
   $309 = $22;
   $310 = (($308) + ($309))|0;
   $311 = (($42) + ($310<<2)|0);
   HEAP32[$311>>2] = $307;
   $312 = $21;
   $313 = (($312) + 1)|0;
   $21 = $313;
  }
  $314 = $22;
  $315 = ($314|0)<=(2);
  L35: do {
   if ($315) {
    $21 = 0;
    while(1) {
     $316 = $21;
     $317 = $22;
     $318 = ($316|0)<($317|0);
     if (!($318)) {
      break;
     }
     $319 = $21;
     $320 = (($40) + ($319<<4)|0);
     $321 = $20;
     $322 = (($320) + ($321)|0);
     $323 = HEAP8[$322>>0]|0;
     $324 = $323 << 24 >> 24;
     $325 = (($324) + 1)|0;
     $326 = $325&255;
     $327 = $21;
     $328 = $22;
     $329 = (($327) + ($328))|0;
     $330 = (($40) + ($329<<4)|0);
     $331 = $20;
     $332 = (($330) + ($331)|0);
     HEAP8[$332>>0] = $326;
     $333 = $21;
     $334 = (($333) + 1)|0;
     $21 = $334;
    }
    $335 = $22;
    $336 = $335 << 1;
    $22 = $336;
    $337 = $22;
    $21 = $337;
    while(1) {
     $338 = $21;
     $339 = ($338|0)<(4);
     if (!($339)) {
      break L35;
     }
     $340 = $21;
     $341 = $22;
     $342 = (($340) - ($341))|0;
     $343 = (($40) + ($342<<4)|0);
     $344 = $20;
     $345 = (($343) + ($344)|0);
     $346 = HEAP8[$345>>0]|0;
     $347 = $21;
     $348 = (($40) + ($347<<4)|0);
     $349 = $20;
     $350 = (($348) + ($349)|0);
     HEAP8[$350>>0] = $346;
     $351 = $21;
     $352 = (($351) + 1)|0;
     $21 = $352;
    }
   } else {
    $353 = $20;
    $354 = ($353|0)>(0);
    if (!($354)) {
     break L13;
    }
    $21 = 0;
    while(1) {
     $355 = $21;
     $356 = ($355|0)<(4);
     if (!($356)) {
      break;
     }
     $357 = $21;
     $358 = (($42) + ($357<<2)|0);
     $359 = HEAP32[$358>>2]|0;
     $360 = $21;
     $361 = (($360) + 4)|0;
     $362 = (($42) + ($361<<2)|0);
     $363 = HEAP32[$362>>2]|0;
     $364 = ($359|0)>($363|0);
     $365 = $21;
     $366 = (($42) + ($365<<2)|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $21;
     if ($364) {
      $369 = (($44) + ($368<<2)|0);
      HEAP32[$369>>2] = $367;
      $370 = $21;
      $371 = (($370) + 4)|0;
      $372 = (($42) + ($371<<2)|0);
      $373 = HEAP32[$372>>2]|0;
      $374 = $21;
      $375 = (($43) + ($374<<2)|0);
      HEAP32[$375>>2] = $373;
      $376 = $21;
      $377 = (($43) + ($376<<2)|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = $21;
      $380 = (($42) + ($379<<2)|0);
      HEAP32[$380>>2] = $378;
      $381 = $21;
      $382 = (($44) + ($381<<2)|0);
      $383 = HEAP32[$382>>2]|0;
      $384 = $21;
      $385 = (($384) + 4)|0;
      $386 = (($42) + ($385<<2)|0);
      HEAP32[$386>>2] = $383;
      $387 = $21;
      $388 = (($41) + ($387<<1)|0);
      $389 = HEAP16[$388>>1]|0;
      $390 = $389 << 16 >> 16;
      $30 = $390;
      $391 = $21;
      $392 = (($391) + 4)|0;
      $393 = (($41) + ($392<<1)|0);
      $394 = HEAP16[$393>>1]|0;
      $395 = $21;
      $396 = (($41) + ($395<<1)|0);
      HEAP16[$396>>1] = $394;
      $397 = $30;
      $398 = $397&65535;
      $399 = $21;
      $400 = (($399) + 4)|0;
      $401 = (($41) + ($400<<1)|0);
      HEAP16[$401>>1] = $398;
      $402 = $21;
      $403 = (($402) + 4)|0;
      $404 = $21;
      $$sink = $403;$$sink2 = $404;
     } else {
      $405 = (($43) + ($368<<2)|0);
      HEAP32[$405>>2] = $367;
      $406 = $21;
      $407 = (($406) + 4)|0;
      $408 = (($42) + ($407<<2)|0);
      $409 = HEAP32[$408>>2]|0;
      $410 = $21;
      $411 = (($44) + ($410<<2)|0);
      HEAP32[$411>>2] = $409;
      $412 = $21;
      $413 = $21;
      $$sink = $412;$$sink2 = $413;
     }
     $414 = (($39) + ($$sink2<<2)|0);
     HEAP32[$414>>2] = $$sink;
     $415 = $21;
     $416 = (($415) + 1)|0;
     $21 = $416;
    }
    while(1) {
     $36 = 2147483647;
     $37 = 0;
     $24 = 0;
     $25 = 0;
     $21 = 0;
     while(1) {
      $417 = $21;
      $418 = ($417|0)<(4);
      $419 = $36;
      if (!($418)) {
       break;
      }
      $420 = $21;
      $421 = (($44) + ($420<<2)|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = ($419|0)>($422|0);
      if ($423) {
       $424 = $21;
       $425 = (($44) + ($424<<2)|0);
       $426 = HEAP32[$425>>2]|0;
       $36 = $426;
       $427 = $21;
       $24 = $427;
      }
      $428 = $37;
      $429 = $21;
      $430 = (($43) + ($429<<2)|0);
      $431 = HEAP32[$430>>2]|0;
      $432 = ($428|0)<($431|0);
      if ($432) {
       $433 = $21;
       $434 = (($43) + ($433<<2)|0);
       $435 = HEAP32[$434>>2]|0;
       $37 = $435;
       $436 = $21;
       $25 = $436;
      }
      $437 = $21;
      $438 = (($437) + 1)|0;
      $21 = $438;
     }
     $439 = $37;
     $440 = ($419|0)>=($439|0);
     if ($440) {
      break;
     }
     $441 = $24;
     $442 = (($39) + ($441<<2)|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = $443 ^ 4;
     $445 = $25;
     $446 = (($39) + ($445<<2)|0);
     HEAP32[$446>>2] = $444;
     $447 = $24;
     $448 = (($447) + 4)|0;
     $449 = (($42) + ($448<<2)|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = $25;
     $452 = (($42) + ($451<<2)|0);
     HEAP32[$452>>2] = $450;
     $453 = $24;
     $454 = (($453) + 4)|0;
     $455 = (($41) + ($454<<1)|0);
     $456 = HEAP16[$455>>1]|0;
     $457 = $25;
     $458 = (($41) + ($457<<1)|0);
     HEAP16[$458>>1] = $456;
     $459 = $25;
     $460 = (($43) + ($459<<2)|0);
     HEAP32[$460>>2] = 0;
     $461 = $24;
     $462 = (($44) + ($461<<2)|0);
     HEAP32[$462>>2] = 2147483647;
     $463 = $25;
     $464 = (($40) + ($463<<4)|0);
     $465 = $24;
     $466 = (($40) + ($465<<4)|0);
     dest=$464; src=$466; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    }
    $21 = 0;
    while(1) {
     $467 = $21;
     $468 = ($467|0)<(4);
     if (!($468)) {
      break L35;
     }
     $469 = $21;
     $470 = (($39) + ($469<<2)|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = $471 >> 2;
     $473 = $21;
     $474 = (($40) + ($473<<4)|0);
     $475 = $20;
     $476 = (($474) + ($475)|0);
     $477 = HEAP8[$476>>0]|0;
     $478 = $477 << 24 >> 24;
     $479 = (($478) + ($472))|0;
     $480 = $479&255;
     HEAP8[$476>>0] = $480;
     $481 = $21;
     $482 = (($481) + 1)|0;
     $21 = $482;
    }
   }
  } while(0);
  $483 = $20;
  $484 = (($483) + -1)|0;
  $20 = $484;
 }
 $23 = 0;
 $35 = 2147483647;
 $21 = 0;
 while(1) {
  $485 = $21;
  $486 = ($485|0)<(8);
  if (!($486)) {
   break;
  }
  $487 = $35;
  $488 = $21;
  $489 = (($42) + ($488<<2)|0);
  $490 = HEAP32[$489>>2]|0;
  $491 = ($487|0)>($490|0);
  if ($491) {
   $492 = $21;
   $493 = (($42) + ($492<<2)|0);
   $494 = HEAP32[$493>>2]|0;
   $35 = $494;
   $495 = $21;
   $23 = $495;
  }
  $496 = $21;
  $497 = (($496) + 1)|0;
  $21 = $497;
 }
 $21 = 0;
 while(1) {
  $498 = $21;
  $499 = $19;
  $500 = $499 << 16 >> 16;
  $501 = ($498|0)<($500|0);
  $502 = $23;
  if (!($501)) {
   break;
  }
  $503 = $502 & 3;
  $504 = (($40) + ($503<<4)|0);
  $505 = $21;
  $506 = (($504) + ($505)|0);
  $507 = HEAP8[$506>>0]|0;
  $508 = $10;
  $509 = $21;
  $510 = (($508) + ($509)|0);
  HEAP8[$510>>0] = $507;
  $511 = $21;
  $512 = (($511) + 1)|0;
  $21 = $512;
 }
 $513 = $502 >> 2;
 $514 = $10;
 $515 = HEAP8[$514>>0]|0;
 $516 = $515 << 24 >> 24;
 $517 = (($516) + ($513))|0;
 $518 = $517&255;
 HEAP8[$514>>0] = $518;
 $519 = $35;
 STACKTOP = sp;return ($519|0);
}
function _silk_corrVector_FLP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $13 = $8;
 $14 = (($13) - 1)|0;
 $15 = (($12) + ($14<<2)|0);
 $11 = $15;
 $10 = 0;
 while(1) {
  $16 = $10;
  $17 = $8;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $11;
  $20 = $6;
  $21 = $7;
  $22 = (+_silk_inner_product_FLP($19,$20,$21));
  $23 = $22;
  $24 = $9;
  $25 = $10;
  $26 = (($24) + ($25<<2)|0);
  HEAPF32[$26>>2] = $23;
  $27 = $11;
  $28 = ((($27)) + -4|0);
  $11 = $28;
  $29 = $10;
  $30 = (($29) + 1)|0;
  $10 = $30;
 }
 STACKTOP = sp;return;
}
function _silk_corrMatrix_FLP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $4;
 $14 = $6;
 $15 = (($14) - 1)|0;
 $16 = (($13) + ($15<<2)|0);
 $11 = $16;
 $17 = $11;
 $18 = $5;
 $19 = (+_silk_energy_FLP($17,$18));
 $10 = $19;
 $20 = $10;
 $21 = $20;
 $22 = $7;
 $23 = $6;
 $24 = 0;
 $25 = (($24) + 0)|0;
 $26 = (($22) + ($25<<2)|0);
 HEAPF32[$26>>2] = $21;
 $8 = 1;
 while(1) {
  $27 = $8;
  $28 = $6;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $11;
  $31 = $8;
  $32 = (0 - ($31))|0;
  $33 = (($30) + ($32<<2)|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $11;
  $36 = $8;
  $37 = (0 - ($36))|0;
  $38 = (($35) + ($37<<2)|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $34 * $39;
  $41 = $11;
  $42 = $5;
  $43 = $8;
  $44 = (($42) - ($43))|0;
  $45 = (($41) + ($44<<2)|0);
  $46 = +HEAPF32[$45>>2];
  $47 = $11;
  $48 = $5;
  $49 = $8;
  $50 = (($48) - ($49))|0;
  $51 = (($47) + ($50<<2)|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $46 * $52;
  $54 = $40 - $53;
  $55 = $54;
  $56 = $10;
  $57 = $56 + $55;
  $10 = $57;
  $58 = $10;
  $59 = $58;
  $60 = $7;
  $61 = $8;
  $62 = $6;
  $63 = Math_imul($61, $62)|0;
  $64 = $8;
  $65 = (($63) + ($64))|0;
  $66 = (($60) + ($65<<2)|0);
  HEAPF32[$66>>2] = $59;
  $67 = $8;
  $68 = (($67) + 1)|0;
  $8 = $68;
 }
 $69 = $4;
 $70 = $6;
 $71 = (($70) - 2)|0;
 $72 = (($69) + ($71<<2)|0);
 $12 = $72;
 $9 = 1;
 while(1) {
  $73 = $9;
  $74 = $6;
  $75 = ($73|0)<($74|0);
  if (!($75)) {
   break;
  }
  $76 = $11;
  $77 = $12;
  $78 = $5;
  $79 = (+_silk_inner_product_FLP($76,$77,$78));
  $10 = $79;
  $80 = $10;
  $81 = $80;
  $82 = $7;
  $83 = $9;
  $84 = $6;
  $85 = Math_imul($83, $84)|0;
  $86 = (($85) + 0)|0;
  $87 = (($82) + ($86<<2)|0);
  HEAPF32[$87>>2] = $81;
  $88 = $10;
  $89 = $88;
  $90 = $7;
  $91 = $6;
  $92 = 0;
  $93 = $9;
  $94 = (($92) + ($93))|0;
  $95 = (($90) + ($94<<2)|0);
  HEAPF32[$95>>2] = $89;
  $8 = 1;
  while(1) {
   $96 = $8;
   $97 = $6;
   $98 = $9;
   $99 = (($97) - ($98))|0;
   $100 = ($96|0)<($99|0);
   if (!($100)) {
    break;
   }
   $101 = $11;
   $102 = $8;
   $103 = (0 - ($102))|0;
   $104 = (($101) + ($103<<2)|0);
   $105 = +HEAPF32[$104>>2];
   $106 = $12;
   $107 = $8;
   $108 = (0 - ($107))|0;
   $109 = (($106) + ($108<<2)|0);
   $110 = +HEAPF32[$109>>2];
   $111 = $105 * $110;
   $112 = $11;
   $113 = $5;
   $114 = $8;
   $115 = (($113) - ($114))|0;
   $116 = (($112) + ($115<<2)|0);
   $117 = +HEAPF32[$116>>2];
   $118 = $12;
   $119 = $5;
   $120 = $8;
   $121 = (($119) - ($120))|0;
   $122 = (($118) + ($121<<2)|0);
   $123 = +HEAPF32[$122>>2];
   $124 = $117 * $123;
   $125 = $111 - $124;
   $126 = $125;
   $127 = $10;
   $128 = $127 + $126;
   $10 = $128;
   $129 = $10;
   $130 = $129;
   $131 = $7;
   $132 = $9;
   $133 = $8;
   $134 = (($132) + ($133))|0;
   $135 = $6;
   $136 = Math_imul($134, $135)|0;
   $137 = $8;
   $138 = (($136) + ($137))|0;
   $139 = (($131) + ($138<<2)|0);
   HEAPF32[$139>>2] = $130;
   $140 = $10;
   $141 = $140;
   $142 = $7;
   $143 = $8;
   $144 = $6;
   $145 = Math_imul($143, $144)|0;
   $146 = $9;
   $147 = $8;
   $148 = (($146) + ($147))|0;
   $149 = (($145) + ($148))|0;
   $150 = (($142) + ($149<<2)|0);
   HEAPF32[$150>>2] = $141;
   $151 = $8;
   $152 = (($151) + 1)|0;
   $8 = $152;
  }
  $153 = $12;
  $154 = ((($153)) + -4|0);
  $12 = $154;
  $155 = $9;
  $156 = (($155) + 1)|0;
  $9 = $156;
 }
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0;
 var $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0;
 var $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i18$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre10$i$i = 0;
 var $$sink1$i = 0, $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i205 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i209 = 0, $not$$i = 0, $not$7$i = 0, $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0;
 var $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[8392]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (33608 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[8392] = $24;
     } else {
      $25 = HEAP32[(33584)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(33576)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (33608 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[8392] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(33584)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(33588)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (33608 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[8392] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(33584)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(33576)>>2] = $84;
     HEAP32[(33588)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(33572)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (33872 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==(0|0);
     $$sink14$i = $141&1;
     $142 = (((($134)) + 16|0) + ($$sink14$i<<2)|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==(0|0);
     if ($144) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01926$i = $134;$$01935$i = $138;$146 = $143;
      while(1) {
       $145 = ((($146)) + 4|0);
       $147 = HEAP32[$145>>2]|0;
       $148 = $147 & -8;
       $149 = (($148) - ($6))|0;
       $150 = ($149>>>0)<($$01935$i>>>0);
       $$$0193$i = $150 ? $149 : $$01935$i;
       $$$0192$i = $150 ? $146 : $$01926$i;
       $151 = ((($146)) + 16|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ($152|0)==(0|0);
       $$sink1$i = $153&1;
       $154 = (((($146)) + 16|0) + ($$sink1$i<<2)|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($155|0)==(0|0);
       if ($156) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01926$i = $$$0192$i;$$01935$i = $$$0193$i;$146 = $155;
       }
      }
     }
     $157 = HEAP32[(33584)>>2]|0;
     $158 = ($157>>>0)>($$0192$lcssa$i>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = (($$0192$lcssa$i) + ($6)|0);
     $160 = ($159>>>0)>($$0192$lcssa$i>>>0);
     if (!($160)) {
      _abort();
      // unreachable;
     }
     $161 = ((($$0192$lcssa$i)) + 24|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ((($$0192$lcssa$i)) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ($164|0)==($$0192$lcssa$i|0);
     do {
      if ($165) {
       $175 = ((($$0192$lcssa$i)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$0192$lcssa$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $179;$$1198$i = $178;
        }
       } else {
        $$1196$i = $176;$$1198$i = $175;
       }
       while(1) {
        $181 = ((($$1196$i)) + 20|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = ($182|0)==(0|0);
        if (!($183)) {
         $$1196$i = $182;$$1198$i = $181;
         continue;
        }
        $184 = ((($$1196$i)) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         break;
        } else {
         $$1196$i = $185;$$1198$i = $184;
        }
       }
       $187 = ($157>>>0)>($$1198$i>>>0);
       if ($187) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $166 = ((($$0192$lcssa$i)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($157>>>0)>($167>>>0);
       if ($168) {
        _abort();
        // unreachable;
       }
       $169 = ((($167)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==($$0192$lcssa$i|0);
       if (!($171)) {
        _abort();
        // unreachable;
       }
       $172 = ((($164)) + 8|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==($$0192$lcssa$i|0);
       if ($174) {
        HEAP32[$169>>2] = $164;
        HEAP32[$172>>2] = $167;
        $$3$i = $164;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $188 = ($162|0)==(0|0);
     L73: do {
      if (!($188)) {
       $189 = ((($$0192$lcssa$i)) + 28|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = (33872 + ($190<<2)|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($$0192$lcssa$i|0)==($192|0);
       do {
        if ($193) {
         HEAP32[$191>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $194 = 1 << $190;
          $195 = $194 ^ -1;
          $196 = $108 & $195;
          HEAP32[(33572)>>2] = $196;
          break L73;
         }
        } else {
         $197 = HEAP32[(33584)>>2]|0;
         $198 = ($197>>>0)>($162>>>0);
         if ($198) {
          _abort();
          // unreachable;
         } else {
          $199 = ((($162)) + 16|0);
          $200 = HEAP32[$199>>2]|0;
          $201 = ($200|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $201&1;
          $202 = (((($162)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$202>>2] = $$3$i;
          $203 = ($$3$i|0)==(0|0);
          if ($203) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $204 = HEAP32[(33584)>>2]|0;
       $205 = ($204>>>0)>($$3$i>>>0);
       if ($205) {
        _abort();
        // unreachable;
       }
       $206 = ((($$3$i)) + 24|0);
       HEAP32[$206>>2] = $162;
       $207 = ((($$0192$lcssa$i)) + 16|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       do {
        if (!($209)) {
         $210 = ($204>>>0)>($208>>>0);
         if ($210) {
          _abort();
          // unreachable;
         } else {
          $211 = ((($$3$i)) + 16|0);
          HEAP32[$211>>2] = $208;
          $212 = ((($208)) + 24|0);
          HEAP32[$212>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $213 = ((($$0192$lcssa$i)) + 20|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214|0)==(0|0);
       if (!($215)) {
        $216 = HEAP32[(33584)>>2]|0;
        $217 = ($216>>>0)>($214>>>0);
        if ($217) {
         _abort();
         // unreachable;
        } else {
         $218 = ((($$3$i)) + 20|0);
         HEAP32[$218>>2] = $214;
         $219 = ((($214)) + 24|0);
         HEAP32[$219>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $220 = ($$0193$lcssa$i>>>0)<(16);
     if ($220) {
      $221 = (($$0193$lcssa$i) + ($6))|0;
      $222 = $221 | 3;
      $223 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = (($$0192$lcssa$i) + ($221)|0);
      $225 = ((($224)) + 4|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = $226 | 1;
      HEAP32[$225>>2] = $227;
     } else {
      $228 = $6 | 3;
      $229 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$229>>2] = $228;
      $230 = $$0193$lcssa$i | 1;
      $231 = ((($159)) + 4|0);
      HEAP32[$231>>2] = $230;
      $232 = (($159) + ($$0193$lcssa$i)|0);
      HEAP32[$232>>2] = $$0193$lcssa$i;
      $233 = ($37|0)==(0);
      if (!($233)) {
       $234 = HEAP32[(33588)>>2]|0;
       $235 = $37 >>> 3;
       $236 = $235 << 1;
       $237 = (33608 + ($236<<2)|0);
       $238 = 1 << $235;
       $239 = $8 & $238;
       $240 = ($239|0)==(0);
       if ($240) {
        $241 = $8 | $238;
        HEAP32[8392] = $241;
        $$pre$i = ((($237)) + 8|0);
        $$0189$i = $237;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $242 = ((($237)) + 8|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = HEAP32[(33584)>>2]|0;
        $245 = ($244>>>0)>($243>>>0);
        if ($245) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $243;$$pre$phi$iZ2D = $242;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $234;
       $246 = ((($$0189$i)) + 12|0);
       HEAP32[$246>>2] = $234;
       $247 = ((($234)) + 8|0);
       HEAP32[$247>>2] = $$0189$i;
       $248 = ((($234)) + 12|0);
       HEAP32[$248>>2] = $237;
      }
      HEAP32[(33576)>>2] = $$0193$lcssa$i;
      HEAP32[(33588)>>2] = $159;
     }
     $249 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $249;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $250 = ($0>>>0)>(4294967231);
   if ($250) {
    $$0197 = -1;
   } else {
    $251 = (($0) + 11)|0;
    $252 = $251 & -8;
    $253 = HEAP32[(33572)>>2]|0;
    $254 = ($253|0)==(0);
    if ($254) {
     $$0197 = $252;
    } else {
     $255 = (0 - ($252))|0;
     $256 = $251 >>> 8;
     $257 = ($256|0)==(0);
     if ($257) {
      $$0358$i = 0;
     } else {
      $258 = ($252>>>0)>(16777215);
      if ($258) {
       $$0358$i = 31;
      } else {
       $259 = (($256) + 1048320)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 8;
       $262 = $256 << $261;
       $263 = (($262) + 520192)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 4;
       $266 = $265 | $261;
       $267 = $262 << $265;
       $268 = (($267) + 245760)|0;
       $269 = $268 >>> 16;
       $270 = $269 & 2;
       $271 = $266 | $270;
       $272 = (14 - ($271))|0;
       $273 = $267 << $270;
       $274 = $273 >>> 15;
       $275 = (($272) + ($274))|0;
       $276 = $275 << 1;
       $277 = (($275) + 7)|0;
       $278 = $252 >>> $277;
       $279 = $278 & 1;
       $280 = $279 | $276;
       $$0358$i = $280;
      }
     }
     $281 = (33872 + ($$0358$i<<2)|0);
     $282 = HEAP32[$281>>2]|0;
     $283 = ($282|0)==(0|0);
     L117: do {
      if ($283) {
       $$2355$i = 0;$$3$i203 = 0;$$3350$i = $255;
       label = 81;
      } else {
       $284 = ($$0358$i|0)==(31);
       $285 = $$0358$i >>> 1;
       $286 = (25 - ($285))|0;
       $287 = $284 ? 0 : $286;
       $288 = $252 << $287;
       $$0342$i = 0;$$0347$i = $255;$$0353$i = $282;$$0359$i = $288;$$0362$i = 0;
       while(1) {
        $289 = ((($$0353$i)) + 4|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $290 & -8;
        $292 = (($291) - ($252))|0;
        $293 = ($292>>>0)<($$0347$i>>>0);
        if ($293) {
         $294 = ($292|0)==(0);
         if ($294) {
          $$414$i = $$0353$i;$$435113$i = 0;$$435712$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $292;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $295 = ((($$0353$i)) + 20|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = $$0359$i >>> 31;
        $298 = (((($$0353$i)) + 16|0) + ($297<<2)|0);
        $299 = HEAP32[$298>>2]|0;
        $300 = ($296|0)==(0|0);
        $301 = ($296|0)==($299|0);
        $or$cond2$i = $300 | $301;
        $$1363$i = $or$cond2$i ? $$0362$i : $296;
        $302 = ($299|0)==(0|0);
        $not$7$i = $302 ^ 1;
        $303 = $not$7$i&1;
        $$0359$$i = $$0359$i << $303;
        if ($302) {
         $$2355$i = $$1363$i;$$3$i203 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $299;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $304 = ($$2355$i|0)==(0|0);
      $305 = ($$3$i203|0)==(0|0);
      $or$cond$i = $304 & $305;
      if ($or$cond$i) {
       $306 = 2 << $$0358$i;
       $307 = (0 - ($306))|0;
       $308 = $306 | $307;
       $309 = $253 & $308;
       $310 = ($309|0)==(0);
       if ($310) {
        $$0197 = $252;
        break;
       }
       $311 = (0 - ($309))|0;
       $312 = $309 & $311;
       $313 = (($312) + -1)|0;
       $314 = $313 >>> 12;
       $315 = $314 & 16;
       $316 = $313 >>> $315;
       $317 = $316 >>> 5;
       $318 = $317 & 8;
       $319 = $318 | $315;
       $320 = $316 >>> $318;
       $321 = $320 >>> 2;
       $322 = $321 & 4;
       $323 = $319 | $322;
       $324 = $320 >>> $322;
       $325 = $324 >>> 1;
       $326 = $325 & 2;
       $327 = $323 | $326;
       $328 = $324 >>> $326;
       $329 = $328 >>> 1;
       $330 = $329 & 1;
       $331 = $327 | $330;
       $332 = $328 >>> $330;
       $333 = (($331) + ($332))|0;
       $334 = (33872 + ($333<<2)|0);
       $335 = HEAP32[$334>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $335;
      } else {
       $$4$ph$i = $$3$i203;$$4357$ph$i = $$2355$i;
      }
      $336 = ($$4357$ph$i|0)==(0|0);
      if ($336) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$414$i = $$4$ph$i;$$435113$i = $$3350$i;$$435712$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $337 = ((($$435712$i)) + 4|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = $338 & -8;
       $340 = (($339) - ($252))|0;
       $341 = ($340>>>0)<($$435113$i>>>0);
       $$$4351$i = $341 ? $340 : $$435113$i;
       $$4357$$4$i = $341 ? $$435712$i : $$414$i;
       $342 = ((($$435712$i)) + 16|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       $$sink2$i205 = $344&1;
       $345 = (((($$435712$i)) + 16|0) + ($$sink2$i205<<2)|0);
       $346 = HEAP32[$345>>2]|0;
       $347 = ($346|0)==(0|0);
       if ($347) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$414$i = $$4357$$4$i;$$435113$i = $$$4351$i;$$435712$i = $346;
        label = 85;
       }
      }
     }
     $348 = ($$4$lcssa$i|0)==(0|0);
     if ($348) {
      $$0197 = $252;
     } else {
      $349 = HEAP32[(33576)>>2]|0;
      $350 = (($349) - ($252))|0;
      $351 = ($$4351$lcssa$i>>>0)<($350>>>0);
      if ($351) {
       $352 = HEAP32[(33584)>>2]|0;
       $353 = ($352>>>0)>($$4$lcssa$i>>>0);
       if ($353) {
        _abort();
        // unreachable;
       }
       $354 = (($$4$lcssa$i) + ($252)|0);
       $355 = ($354>>>0)>($$4$lcssa$i>>>0);
       if (!($355)) {
        _abort();
        // unreachable;
       }
       $356 = ((($$4$lcssa$i)) + 24|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ((($$4$lcssa$i)) + 12|0);
       $359 = HEAP32[$358>>2]|0;
       $360 = ($359|0)==($$4$lcssa$i|0);
       do {
        if ($360) {
         $370 = ((($$4$lcssa$i)) + 20|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = ($371|0)==(0|0);
         if ($372) {
          $373 = ((($$4$lcssa$i)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $374;$$1374$i = $373;
          }
         } else {
          $$1370$i = $371;$$1374$i = $370;
         }
         while(1) {
          $376 = ((($$1370$i)) + 20|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if (!($378)) {
           $$1370$i = $377;$$1374$i = $376;
           continue;
          }
          $379 = ((($$1370$i)) + 16|0);
          $380 = HEAP32[$379>>2]|0;
          $381 = ($380|0)==(0|0);
          if ($381) {
           break;
          } else {
           $$1370$i = $380;$$1374$i = $379;
          }
         }
         $382 = ($352>>>0)>($$1374$i>>>0);
         if ($382) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $361 = ((($$4$lcssa$i)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($352>>>0)>($362>>>0);
         if ($363) {
          _abort();
          // unreachable;
         }
         $364 = ((($362)) + 12|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($$4$lcssa$i|0);
         if (!($366)) {
          _abort();
          // unreachable;
         }
         $367 = ((($359)) + 8|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==($$4$lcssa$i|0);
         if ($369) {
          HEAP32[$364>>2] = $359;
          HEAP32[$367>>2] = $362;
          $$3372$i = $359;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $383 = ($357|0)==(0|0);
       L164: do {
        if ($383) {
         $475 = $253;
        } else {
         $384 = ((($$4$lcssa$i)) + 28|0);
         $385 = HEAP32[$384>>2]|0;
         $386 = (33872 + ($385<<2)|0);
         $387 = HEAP32[$386>>2]|0;
         $388 = ($$4$lcssa$i|0)==($387|0);
         do {
          if ($388) {
           HEAP32[$386>>2] = $$3372$i;
           $cond$i209 = ($$3372$i|0)==(0|0);
           if ($cond$i209) {
            $389 = 1 << $385;
            $390 = $389 ^ -1;
            $391 = $253 & $390;
            HEAP32[(33572)>>2] = $391;
            $475 = $391;
            break L164;
           }
          } else {
           $392 = HEAP32[(33584)>>2]|0;
           $393 = ($392>>>0)>($357>>>0);
           if ($393) {
            _abort();
            // unreachable;
           } else {
            $394 = ((($357)) + 16|0);
            $395 = HEAP32[$394>>2]|0;
            $396 = ($395|0)!=($$4$lcssa$i|0);
            $$sink3$i = $396&1;
            $397 = (((($357)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$397>>2] = $$3372$i;
            $398 = ($$3372$i|0)==(0|0);
            if ($398) {
             $475 = $253;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $399 = HEAP32[(33584)>>2]|0;
         $400 = ($399>>>0)>($$3372$i>>>0);
         if ($400) {
          _abort();
          // unreachable;
         }
         $401 = ((($$3372$i)) + 24|0);
         HEAP32[$401>>2] = $357;
         $402 = ((($$4$lcssa$i)) + 16|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         do {
          if (!($404)) {
           $405 = ($399>>>0)>($403>>>0);
           if ($405) {
            _abort();
            // unreachable;
           } else {
            $406 = ((($$3372$i)) + 16|0);
            HEAP32[$406>>2] = $403;
            $407 = ((($403)) + 24|0);
            HEAP32[$407>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $408 = ((($$4$lcssa$i)) + 20|0);
         $409 = HEAP32[$408>>2]|0;
         $410 = ($409|0)==(0|0);
         if ($410) {
          $475 = $253;
         } else {
          $411 = HEAP32[(33584)>>2]|0;
          $412 = ($411>>>0)>($409>>>0);
          if ($412) {
           _abort();
           // unreachable;
          } else {
           $413 = ((($$3372$i)) + 20|0);
           HEAP32[$413>>2] = $409;
           $414 = ((($409)) + 24|0);
           HEAP32[$414>>2] = $$3372$i;
           $475 = $253;
           break;
          }
         }
        }
       } while(0);
       $415 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($415) {
         $416 = (($$4351$lcssa$i) + ($252))|0;
         $417 = $416 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = (($$4$lcssa$i) + ($416)|0);
         $420 = ((($419)) + 4|0);
         $421 = HEAP32[$420>>2]|0;
         $422 = $421 | 1;
         HEAP32[$420>>2] = $422;
        } else {
         $423 = $252 | 3;
         $424 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = $$4351$lcssa$i | 1;
         $426 = ((($354)) + 4|0);
         HEAP32[$426>>2] = $425;
         $427 = (($354) + ($$4351$lcssa$i)|0);
         HEAP32[$427>>2] = $$4351$lcssa$i;
         $428 = $$4351$lcssa$i >>> 3;
         $429 = ($$4351$lcssa$i>>>0)<(256);
         if ($429) {
          $430 = $428 << 1;
          $431 = (33608 + ($430<<2)|0);
          $432 = HEAP32[8392]|0;
          $433 = 1 << $428;
          $434 = $432 & $433;
          $435 = ($434|0)==(0);
          if ($435) {
           $436 = $432 | $433;
           HEAP32[8392] = $436;
           $$pre$i210 = ((($431)) + 8|0);
           $$0368$i = $431;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $437 = ((($431)) + 8|0);
           $438 = HEAP32[$437>>2]|0;
           $439 = HEAP32[(33584)>>2]|0;
           $440 = ($439>>>0)>($438>>>0);
           if ($440) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $438;$$pre$phi$i211Z2D = $437;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $354;
          $441 = ((($$0368$i)) + 12|0);
          HEAP32[$441>>2] = $354;
          $442 = ((($354)) + 8|0);
          HEAP32[$442>>2] = $$0368$i;
          $443 = ((($354)) + 12|0);
          HEAP32[$443>>2] = $431;
          break;
         }
         $444 = $$4351$lcssa$i >>> 8;
         $445 = ($444|0)==(0);
         if ($445) {
          $$0361$i = 0;
         } else {
          $446 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($446) {
           $$0361$i = 31;
          } else {
           $447 = (($444) + 1048320)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 8;
           $450 = $444 << $449;
           $451 = (($450) + 520192)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 4;
           $454 = $453 | $449;
           $455 = $450 << $453;
           $456 = (($455) + 245760)|0;
           $457 = $456 >>> 16;
           $458 = $457 & 2;
           $459 = $454 | $458;
           $460 = (14 - ($459))|0;
           $461 = $455 << $458;
           $462 = $461 >>> 15;
           $463 = (($460) + ($462))|0;
           $464 = $463 << 1;
           $465 = (($463) + 7)|0;
           $466 = $$4351$lcssa$i >>> $465;
           $467 = $466 & 1;
           $468 = $467 | $464;
           $$0361$i = $468;
          }
         }
         $469 = (33872 + ($$0361$i<<2)|0);
         $470 = ((($354)) + 28|0);
         HEAP32[$470>>2] = $$0361$i;
         $471 = ((($354)) + 16|0);
         $472 = ((($471)) + 4|0);
         HEAP32[$472>>2] = 0;
         HEAP32[$471>>2] = 0;
         $473 = 1 << $$0361$i;
         $474 = $475 & $473;
         $476 = ($474|0)==(0);
         if ($476) {
          $477 = $475 | $473;
          HEAP32[(33572)>>2] = $477;
          HEAP32[$469>>2] = $354;
          $478 = ((($354)) + 24|0);
          HEAP32[$478>>2] = $469;
          $479 = ((($354)) + 12|0);
          HEAP32[$479>>2] = $354;
          $480 = ((($354)) + 8|0);
          HEAP32[$480>>2] = $354;
          break;
         }
         $481 = HEAP32[$469>>2]|0;
         $482 = ($$0361$i|0)==(31);
         $483 = $$0361$i >>> 1;
         $484 = (25 - ($483))|0;
         $485 = $482 ? 0 : $484;
         $486 = $$4351$lcssa$i << $485;
         $$0344$i = $486;$$0345$i = $481;
         while(1) {
          $487 = ((($$0345$i)) + 4|0);
          $488 = HEAP32[$487>>2]|0;
          $489 = $488 & -8;
          $490 = ($489|0)==($$4351$lcssa$i|0);
          if ($490) {
           label = 139;
           break;
          }
          $491 = $$0344$i >>> 31;
          $492 = (((($$0345$i)) + 16|0) + ($491<<2)|0);
          $493 = $$0344$i << 1;
          $494 = HEAP32[$492>>2]|0;
          $495 = ($494|0)==(0|0);
          if ($495) {
           label = 136;
           break;
          } else {
           $$0344$i = $493;$$0345$i = $494;
          }
         }
         if ((label|0) == 136) {
          $496 = HEAP32[(33584)>>2]|0;
          $497 = ($496>>>0)>($492>>>0);
          if ($497) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$492>>2] = $354;
           $498 = ((($354)) + 24|0);
           HEAP32[$498>>2] = $$0345$i;
           $499 = ((($354)) + 12|0);
           HEAP32[$499>>2] = $354;
           $500 = ((($354)) + 8|0);
           HEAP32[$500>>2] = $354;
           break;
          }
         }
         else if ((label|0) == 139) {
          $501 = ((($$0345$i)) + 8|0);
          $502 = HEAP32[$501>>2]|0;
          $503 = HEAP32[(33584)>>2]|0;
          $504 = ($503>>>0)<=($$0345$i>>>0);
          $505 = ($503>>>0)<=($502>>>0);
          $506 = $505 & $504;
          if ($506) {
           $507 = ((($502)) + 12|0);
           HEAP32[$507>>2] = $354;
           HEAP32[$501>>2] = $354;
           $508 = ((($354)) + 8|0);
           HEAP32[$508>>2] = $502;
           $509 = ((($354)) + 12|0);
           HEAP32[$509>>2] = $$0345$i;
           $510 = ((($354)) + 24|0);
           HEAP32[$510>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $511 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $511;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $252;
      }
     }
    }
   }
  }
 } while(0);
 $512 = HEAP32[(33576)>>2]|0;
 $513 = ($512>>>0)<($$0197>>>0);
 if (!($513)) {
  $514 = (($512) - ($$0197))|0;
  $515 = HEAP32[(33588)>>2]|0;
  $516 = ($514>>>0)>(15);
  if ($516) {
   $517 = (($515) + ($$0197)|0);
   HEAP32[(33588)>>2] = $517;
   HEAP32[(33576)>>2] = $514;
   $518 = $514 | 1;
   $519 = ((($517)) + 4|0);
   HEAP32[$519>>2] = $518;
   $520 = (($515) + ($512)|0);
   HEAP32[$520>>2] = $514;
   $521 = $$0197 | 3;
   $522 = ((($515)) + 4|0);
   HEAP32[$522>>2] = $521;
  } else {
   HEAP32[(33576)>>2] = 0;
   HEAP32[(33588)>>2] = 0;
   $523 = $512 | 3;
   $524 = ((($515)) + 4|0);
   HEAP32[$524>>2] = $523;
   $525 = (($515) + ($512)|0);
   $526 = ((($525)) + 4|0);
   $527 = HEAP32[$526>>2]|0;
   $528 = $527 | 1;
   HEAP32[$526>>2] = $528;
  }
  $529 = ((($515)) + 8|0);
  $$0 = $529;
  STACKTOP = sp;return ($$0|0);
 }
 $530 = HEAP32[(33580)>>2]|0;
 $531 = ($530>>>0)>($$0197>>>0);
 if ($531) {
  $532 = (($530) - ($$0197))|0;
  HEAP32[(33580)>>2] = $532;
  $533 = HEAP32[(33592)>>2]|0;
  $534 = (($533) + ($$0197)|0);
  HEAP32[(33592)>>2] = $534;
  $535 = $532 | 1;
  $536 = ((($534)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = $$0197 | 3;
  $538 = ((($533)) + 4|0);
  HEAP32[$538>>2] = $537;
  $539 = ((($533)) + 8|0);
  $$0 = $539;
  STACKTOP = sp;return ($$0|0);
 }
 $540 = HEAP32[8510]|0;
 $541 = ($540|0)==(0);
 if ($541) {
  HEAP32[(34048)>>2] = 4096;
  HEAP32[(34044)>>2] = 4096;
  HEAP32[(34052)>>2] = -1;
  HEAP32[(34056)>>2] = -1;
  HEAP32[(34060)>>2] = 0;
  HEAP32[(34012)>>2] = 0;
  $542 = $1;
  $543 = $542 & -16;
  $544 = $543 ^ 1431655768;
  HEAP32[8510] = $544;
  $548 = 4096;
 } else {
  $$pre$i212 = HEAP32[(34048)>>2]|0;
  $548 = $$pre$i212;
 }
 $545 = (($$0197) + 48)|0;
 $546 = (($$0197) + 47)|0;
 $547 = (($548) + ($546))|0;
 $549 = (0 - ($548))|0;
 $550 = $547 & $549;
 $551 = ($550>>>0)>($$0197>>>0);
 if (!($551)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $552 = HEAP32[(34008)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(34000)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $558 = HEAP32[(34012)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L244: do {
  if ($560) {
   $561 = HEAP32[(33592)>>2]|0;
   $562 = ($561|0)==(0|0);
   L246: do {
    if ($562) {
     label = 163;
    } else {
     $$0$i$i = (34016);
     while(1) {
      $563 = HEAP32[$$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = ((($$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $570;
      }
     }
     $594 = (($547) - ($530))|0;
     $595 = $594 & $549;
     $596 = ($595>>>0)<(2147483647);
     if ($596) {
      $597 = (_sbrk(($595|0))|0);
      $598 = HEAP32[$$0$i$i>>2]|0;
      $599 = HEAP32[$565>>2]|0;
      $600 = (($598) + ($599)|0);
      $601 = ($597|0)==($600|0);
      if ($601) {
       $602 = ($597|0)==((-1)|0);
       if ($602) {
        $$2234243136$i = $595;
       } else {
        $$723947$i = $595;$$748$i = $597;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $597;$$2253$ph$i = $595;
       label = 171;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $$2234243136$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(34044)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      $579 = (($576) + ($574))|0;
      $580 = (0 - ($575))|0;
      $581 = $579 & $580;
      $582 = (($581) - ($574))|0;
      $583 = $578 ? 0 : $582;
      $$$i = (($583) + ($550))|0;
      $584 = HEAP32[(34000)>>2]|0;
      $585 = (($$$i) + ($584))|0;
      $586 = ($$$i>>>0)>($$0197>>>0);
      $587 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $586 & $587;
      if ($or$cond$i214) {
       $588 = HEAP32[(34008)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i215 = $590 | $591;
        if ($or$cond2$i215) {
         $$2234243136$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($$$i|0))|0);
       $593 = ($592|0)==($572|0);
       if ($593) {
        $$723947$i = $$$i;$$748$i = $572;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $592;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $603 = (0 - ($$2253$ph$i))|0;
     $604 = ($$2247$ph$i|0)!=((-1)|0);
     $605 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $605 & $604;
     $606 = ($545>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $606 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $616 = ($$2247$ph$i|0)==((-1)|0);
      if ($616) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $607 = HEAP32[(34048)>>2]|0;
     $608 = (($546) - ($$2253$ph$i))|0;
     $609 = (($608) + ($607))|0;
     $610 = (0 - ($607))|0;
     $611 = $609 & $610;
     $612 = ($611>>>0)<(2147483647);
     if (!($612)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $613 = (_sbrk(($611|0))|0);
     $614 = ($613|0)==((-1)|0);
     if ($614) {
      (_sbrk(($603|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $615 = (($611) + ($$2253$ph$i))|0;
      $$723947$i = $615;$$748$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $617 = HEAP32[(34012)>>2]|0;
   $618 = $617 | 4;
   HEAP32[(34012)>>2] = $618;
   $$4236$i = $$2234243136$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $619 = ($550>>>0)<(2147483647);
  if ($619) {
   $620 = (_sbrk(($550|0))|0);
   $621 = (_sbrk(0)|0);
   $622 = ($620|0)!=((-1)|0);
   $623 = ($621|0)!=((-1)|0);
   $or$cond5$i = $622 & $623;
   $624 = ($620>>>0)<($621>>>0);
   $or$cond11$i = $624 & $or$cond5$i;
   $625 = $621;
   $626 = $620;
   $627 = (($625) - ($626))|0;
   $628 = (($$0197) + 40)|0;
   $629 = ($627>>>0)>($628>>>0);
   $$$4236$i = $629 ? $627 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $630 = ($620|0)==((-1)|0);
   $not$$i = $629 ^ 1;
   $631 = $630 | $not$$i;
   $or$cond49$i = $631 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $620;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $632 = HEAP32[(34000)>>2]|0;
  $633 = (($632) + ($$723947$i))|0;
  HEAP32[(34000)>>2] = $633;
  $634 = HEAP32[(34004)>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[(34004)>>2] = $633;
  }
  $636 = HEAP32[(33592)>>2]|0;
  $637 = ($636|0)==(0|0);
  do {
   if ($637) {
    $638 = HEAP32[(33584)>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($$748$i>>>0)<($638>>>0);
    $or$cond12$i = $639 | $640;
    if ($or$cond12$i) {
     HEAP32[(33584)>>2] = $$748$i;
    }
    HEAP32[(34016)>>2] = $$748$i;
    HEAP32[(34020)>>2] = $$723947$i;
    HEAP32[(34028)>>2] = 0;
    $641 = HEAP32[8510]|0;
    HEAP32[(33604)>>2] = $641;
    HEAP32[(33600)>>2] = -1;
    HEAP32[(33620)>>2] = (33608);
    HEAP32[(33616)>>2] = (33608);
    HEAP32[(33628)>>2] = (33616);
    HEAP32[(33624)>>2] = (33616);
    HEAP32[(33636)>>2] = (33624);
    HEAP32[(33632)>>2] = (33624);
    HEAP32[(33644)>>2] = (33632);
    HEAP32[(33640)>>2] = (33632);
    HEAP32[(33652)>>2] = (33640);
    HEAP32[(33648)>>2] = (33640);
    HEAP32[(33660)>>2] = (33648);
    HEAP32[(33656)>>2] = (33648);
    HEAP32[(33668)>>2] = (33656);
    HEAP32[(33664)>>2] = (33656);
    HEAP32[(33676)>>2] = (33664);
    HEAP32[(33672)>>2] = (33664);
    HEAP32[(33684)>>2] = (33672);
    HEAP32[(33680)>>2] = (33672);
    HEAP32[(33692)>>2] = (33680);
    HEAP32[(33688)>>2] = (33680);
    HEAP32[(33700)>>2] = (33688);
    HEAP32[(33696)>>2] = (33688);
    HEAP32[(33708)>>2] = (33696);
    HEAP32[(33704)>>2] = (33696);
    HEAP32[(33716)>>2] = (33704);
    HEAP32[(33712)>>2] = (33704);
    HEAP32[(33724)>>2] = (33712);
    HEAP32[(33720)>>2] = (33712);
    HEAP32[(33732)>>2] = (33720);
    HEAP32[(33728)>>2] = (33720);
    HEAP32[(33740)>>2] = (33728);
    HEAP32[(33736)>>2] = (33728);
    HEAP32[(33748)>>2] = (33736);
    HEAP32[(33744)>>2] = (33736);
    HEAP32[(33756)>>2] = (33744);
    HEAP32[(33752)>>2] = (33744);
    HEAP32[(33764)>>2] = (33752);
    HEAP32[(33760)>>2] = (33752);
    HEAP32[(33772)>>2] = (33760);
    HEAP32[(33768)>>2] = (33760);
    HEAP32[(33780)>>2] = (33768);
    HEAP32[(33776)>>2] = (33768);
    HEAP32[(33788)>>2] = (33776);
    HEAP32[(33784)>>2] = (33776);
    HEAP32[(33796)>>2] = (33784);
    HEAP32[(33792)>>2] = (33784);
    HEAP32[(33804)>>2] = (33792);
    HEAP32[(33800)>>2] = (33792);
    HEAP32[(33812)>>2] = (33800);
    HEAP32[(33808)>>2] = (33800);
    HEAP32[(33820)>>2] = (33808);
    HEAP32[(33816)>>2] = (33808);
    HEAP32[(33828)>>2] = (33816);
    HEAP32[(33824)>>2] = (33816);
    HEAP32[(33836)>>2] = (33824);
    HEAP32[(33832)>>2] = (33824);
    HEAP32[(33844)>>2] = (33832);
    HEAP32[(33840)>>2] = (33832);
    HEAP32[(33852)>>2] = (33840);
    HEAP32[(33848)>>2] = (33840);
    HEAP32[(33860)>>2] = (33848);
    HEAP32[(33856)>>2] = (33848);
    HEAP32[(33868)>>2] = (33856);
    HEAP32[(33864)>>2] = (33856);
    $642 = (($$723947$i) + -40)|0;
    $643 = ((($$748$i)) + 8|0);
    $644 = $643;
    $645 = $644 & 7;
    $646 = ($645|0)==(0);
    $647 = (0 - ($644))|0;
    $648 = $647 & 7;
    $649 = $646 ? 0 : $648;
    $650 = (($$748$i) + ($649)|0);
    $651 = (($642) - ($649))|0;
    HEAP32[(33592)>>2] = $650;
    HEAP32[(33580)>>2] = $651;
    $652 = $651 | 1;
    $653 = ((($650)) + 4|0);
    HEAP32[$653>>2] = $652;
    $654 = (($$748$i) + ($642)|0);
    $655 = ((($654)) + 4|0);
    HEAP32[$655>>2] = 40;
    $656 = HEAP32[(34056)>>2]|0;
    HEAP32[(33596)>>2] = $656;
   } else {
    $$024367$i = (34016);
    while(1) {
     $657 = HEAP32[$$024367$i>>2]|0;
     $658 = ((($$024367$i)) + 4|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = (($657) + ($659)|0);
     $661 = ($$748$i|0)==($660|0);
     if ($661) {
      label = 188;
      break;
     }
     $662 = ((($$024367$i)) + 8|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = ($663|0)==(0|0);
     if ($664) {
      break;
     } else {
      $$024367$i = $663;
     }
    }
    if ((label|0) == 188) {
     $665 = ((($$024367$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($657>>>0)<=($636>>>0);
      $670 = ($$748$i>>>0)>($636>>>0);
      $or$cond50$i = $670 & $669;
      if ($or$cond50$i) {
       $671 = (($659) + ($$723947$i))|0;
       HEAP32[$658>>2] = $671;
       $672 = HEAP32[(33580)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($636)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($636) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(33592)>>2] = $681;
       HEAP32[(33580)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($636) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(34056)>>2]|0;
       HEAP32[(33596)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(33584)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(33584)>>2] = $$748$i;
     $752 = $$748$i;
    } else {
     $752 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (34016);
    while(1) {
     $691 = HEAP32[$$124466$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 196;
      break;
     }
     $693 = ((($$124466$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      $$0$i$i$i = (34016);
      break;
     } else {
      $$124466$i = $694;
     }
    }
    if ((label|0) == 196) {
     $696 = ((($$124466$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $700 = ((($$124466$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($636|0)==($718|0);
      do {
       if ($726) {
        $727 = HEAP32[(33580)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(33580)>>2] = $728;
        HEAP32[(33592)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(33588)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(33576)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(33576)>>2] = $734;
         HEAP32[(33588)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = $739 >>> 3;
         $744 = ($739>>>0)<(256);
         L311: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (33608 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $753 = ($752>>>0)>($746>>>0);
             if ($753) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[8392]|0;
            $761 = $760 & $759;
            HEAP32[8392] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre10$i$i = ((($748)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $763 = ($752>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi11$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $786;$$1293$i$i = $782;
              }
             } else {
              $$1291$i$i = $784;$$1293$i$i = $783;
             }
             while(1) {
              $788 = ((($$1291$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if (!($790)) {
               $$1291$i$i = $789;$$1293$i$i = $788;
               continue;
              }
              $791 = ((($$1291$i$i)) + 16|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               break;
              } else {
               $$1291$i$i = $792;$$1293$i$i = $791;
              }
             }
             $794 = ($752>>>0)>($$1293$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($752>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (33872 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(33572)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(33572)>>2] = $804;
             break L311;
            } else {
             $805 = HEAP32[(33584)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)!=($718|0);
              $$sink1$i$i = $809&1;
              $810 = (((($769)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$810>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(33584)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(33584)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i17$i = $828;$$0287$i$i = $829;
        } else {
         $$0$i17$i = $718;$$0287$i$i = $723;
        }
        $830 = ((($$0$i17$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0287$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0287$i$i)|0);
        HEAP32[$835>>2] = $$0287$i$i;
        $836 = $$0287$i$i >>> 3;
        $837 = ($$0287$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (33608 + ($838<<2)|0);
         $840 = HEAP32[8392]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[8392] = $844;
           $$pre$i18$i = ((($839)) + 8|0);
           $$0295$i$i = $839;$$pre$phi$i19$iZ2D = $$pre$i18$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(33584)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0295$i$i = $846;$$pre$phi$i19$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i19$iZ2D>>2] = $722;
         $849 = ((($$0295$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0295$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = $$0287$i$i >>> 8;
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0296$i$i = 0;
         } else {
          $854 = ($$0287$i$i>>>0)>(16777215);
          if ($854) {
           $$0296$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = $864 >>> 16;
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = $869 >>> 15;
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = $$0287$i$i >>> $873;
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0296$i$i = $876;
         }
        } while(0);
        $877 = (33872 + ($$0296$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0296$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(33572)>>2]|0;
        $882 = 1 << $$0296$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(33572)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ($$0296$i$i|0)==(31);
        $891 = $$0296$i$i >>> 1;
        $892 = (25 - ($891))|0;
        $893 = $890 ? 0 : $892;
        $894 = $$0287$i$i << $893;
        $$0288$i$i = $894;$$0289$i$i = $889;
        while(1) {
         $895 = ((($$0289$i$i)) + 4|0);
         $896 = HEAP32[$895>>2]|0;
         $897 = $896 & -8;
         $898 = ($897|0)==($$0287$i$i|0);
         if ($898) {
          label = 263;
          break;
         }
         $899 = $$0288$i$i >>> 31;
         $900 = (((($$0289$i$i)) + 16|0) + ($899<<2)|0);
         $901 = $$0288$i$i << 1;
         $902 = HEAP32[$900>>2]|0;
         $903 = ($902|0)==(0|0);
         if ($903) {
          label = 260;
          break;
         } else {
          $$0288$i$i = $901;$$0289$i$i = $902;
         }
        }
        if ((label|0) == 260) {
         $904 = HEAP32[(33584)>>2]|0;
         $905 = ($904>>>0)>($900>>>0);
         if ($905) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$900>>2] = $722;
          $906 = ((($722)) + 24|0);
          HEAP32[$906>>2] = $$0289$i$i;
          $907 = ((($722)) + 12|0);
          HEAP32[$907>>2] = $722;
          $908 = ((($722)) + 8|0);
          HEAP32[$908>>2] = $722;
          break;
         }
        }
        else if ((label|0) == 263) {
         $909 = ((($$0289$i$i)) + 8|0);
         $910 = HEAP32[$909>>2]|0;
         $911 = HEAP32[(33584)>>2]|0;
         $912 = ($911>>>0)<=($$0289$i$i>>>0);
         $913 = ($911>>>0)<=($910>>>0);
         $914 = $913 & $912;
         if ($914) {
          $915 = ((($910)) + 12|0);
          HEAP32[$915>>2] = $722;
          HEAP32[$909>>2] = $722;
          $916 = ((($722)) + 8|0);
          HEAP32[$916>>2] = $910;
          $917 = ((($722)) + 12|0);
          HEAP32[$917>>2] = $$0289$i$i;
          $918 = ((($722)) + 24|0);
          HEAP32[$918>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1051 = ((($710)) + 8|0);
      $$0 = $1051;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (34016);
     }
    }
    while(1) {
     $919 = HEAP32[$$0$i$i$i>>2]|0;
     $920 = ($919>>>0)>($636>>>0);
     if (!($920)) {
      $921 = ((($$0$i$i$i)) + 4|0);
      $922 = HEAP32[$921>>2]|0;
      $923 = (($919) + ($922)|0);
      $924 = ($923>>>0)>($636>>>0);
      if ($924) {
       break;
      }
     }
     $925 = ((($$0$i$i$i)) + 8|0);
     $926 = HEAP32[$925>>2]|0;
     $$0$i$i$i = $926;
    }
    $927 = ((($923)) + -47|0);
    $928 = ((($927)) + 8|0);
    $929 = $928;
    $930 = $929 & 7;
    $931 = ($930|0)==(0);
    $932 = (0 - ($929))|0;
    $933 = $932 & 7;
    $934 = $931 ? 0 : $933;
    $935 = (($927) + ($934)|0);
    $936 = ((($636)) + 16|0);
    $937 = ($935>>>0)<($936>>>0);
    $938 = $937 ? $636 : $935;
    $939 = ((($938)) + 8|0);
    $940 = ((($938)) + 24|0);
    $941 = (($$723947$i) + -40)|0;
    $942 = ((($$748$i)) + 8|0);
    $943 = $942;
    $944 = $943 & 7;
    $945 = ($944|0)==(0);
    $946 = (0 - ($943))|0;
    $947 = $946 & 7;
    $948 = $945 ? 0 : $947;
    $949 = (($$748$i) + ($948)|0);
    $950 = (($941) - ($948))|0;
    HEAP32[(33592)>>2] = $949;
    HEAP32[(33580)>>2] = $950;
    $951 = $950 | 1;
    $952 = ((($949)) + 4|0);
    HEAP32[$952>>2] = $951;
    $953 = (($$748$i) + ($941)|0);
    $954 = ((($953)) + 4|0);
    HEAP32[$954>>2] = 40;
    $955 = HEAP32[(34056)>>2]|0;
    HEAP32[(33596)>>2] = $955;
    $956 = ((($938)) + 4|0);
    HEAP32[$956>>2] = 27;
    ;HEAP32[$939>>2]=HEAP32[(34016)>>2]|0;HEAP32[$939+4>>2]=HEAP32[(34016)+4>>2]|0;HEAP32[$939+8>>2]=HEAP32[(34016)+8>>2]|0;HEAP32[$939+12>>2]=HEAP32[(34016)+12>>2]|0;
    HEAP32[(34016)>>2] = $$748$i;
    HEAP32[(34020)>>2] = $$723947$i;
    HEAP32[(34028)>>2] = 0;
    HEAP32[(34024)>>2] = $939;
    $958 = $940;
    while(1) {
     $957 = ((($958)) + 4|0);
     HEAP32[$957>>2] = 7;
     $959 = ((($958)) + 8|0);
     $960 = ($959>>>0)<($923>>>0);
     if ($960) {
      $958 = $957;
     } else {
      break;
     }
    }
    $961 = ($938|0)==($636|0);
    if (!($961)) {
     $962 = $938;
     $963 = $636;
     $964 = (($962) - ($963))|0;
     $965 = HEAP32[$956>>2]|0;
     $966 = $965 & -2;
     HEAP32[$956>>2] = $966;
     $967 = $964 | 1;
     $968 = ((($636)) + 4|0);
     HEAP32[$968>>2] = $967;
     HEAP32[$938>>2] = $964;
     $969 = $964 >>> 3;
     $970 = ($964>>>0)<(256);
     if ($970) {
      $971 = $969 << 1;
      $972 = (33608 + ($971<<2)|0);
      $973 = HEAP32[8392]|0;
      $974 = 1 << $969;
      $975 = $973 & $974;
      $976 = ($975|0)==(0);
      if ($976) {
       $977 = $973 | $974;
       HEAP32[8392] = $977;
       $$pre$i$i = ((($972)) + 8|0);
       $$0211$i$i = $972;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $978 = ((($972)) + 8|0);
       $979 = HEAP32[$978>>2]|0;
       $980 = HEAP32[(33584)>>2]|0;
       $981 = ($980>>>0)>($979>>>0);
       if ($981) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $979;$$pre$phi$i$iZ2D = $978;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $982 = ((($$0211$i$i)) + 12|0);
      HEAP32[$982>>2] = $636;
      $983 = ((($636)) + 8|0);
      HEAP32[$983>>2] = $$0211$i$i;
      $984 = ((($636)) + 12|0);
      HEAP32[$984>>2] = $972;
      break;
     }
     $985 = $964 >>> 8;
     $986 = ($985|0)==(0);
     if ($986) {
      $$0212$i$i = 0;
     } else {
      $987 = ($964>>>0)>(16777215);
      if ($987) {
       $$0212$i$i = 31;
      } else {
       $988 = (($985) + 1048320)|0;
       $989 = $988 >>> 16;
       $990 = $989 & 8;
       $991 = $985 << $990;
       $992 = (($991) + 520192)|0;
       $993 = $992 >>> 16;
       $994 = $993 & 4;
       $995 = $994 | $990;
       $996 = $991 << $994;
       $997 = (($996) + 245760)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 2;
       $1000 = $995 | $999;
       $1001 = (14 - ($1000))|0;
       $1002 = $996 << $999;
       $1003 = $1002 >>> 15;
       $1004 = (($1001) + ($1003))|0;
       $1005 = $1004 << 1;
       $1006 = (($1004) + 7)|0;
       $1007 = $964 >>> $1006;
       $1008 = $1007 & 1;
       $1009 = $1008 | $1005;
       $$0212$i$i = $1009;
      }
     }
     $1010 = (33872 + ($$0212$i$i<<2)|0);
     $1011 = ((($636)) + 28|0);
     HEAP32[$1011>>2] = $$0212$i$i;
     $1012 = ((($636)) + 20|0);
     HEAP32[$1012>>2] = 0;
     HEAP32[$936>>2] = 0;
     $1013 = HEAP32[(33572)>>2]|0;
     $1014 = 1 << $$0212$i$i;
     $1015 = $1013 & $1014;
     $1016 = ($1015|0)==(0);
     if ($1016) {
      $1017 = $1013 | $1014;
      HEAP32[(33572)>>2] = $1017;
      HEAP32[$1010>>2] = $636;
      $1018 = ((($636)) + 24|0);
      HEAP32[$1018>>2] = $1010;
      $1019 = ((($636)) + 12|0);
      HEAP32[$1019>>2] = $636;
      $1020 = ((($636)) + 8|0);
      HEAP32[$1020>>2] = $636;
      break;
     }
     $1021 = HEAP32[$1010>>2]|0;
     $1022 = ($$0212$i$i|0)==(31);
     $1023 = $$0212$i$i >>> 1;
     $1024 = (25 - ($1023))|0;
     $1025 = $1022 ? 0 : $1024;
     $1026 = $964 << $1025;
     $$0206$i$i = $1026;$$0207$i$i = $1021;
     while(1) {
      $1027 = ((($$0207$i$i)) + 4|0);
      $1028 = HEAP32[$1027>>2]|0;
      $1029 = $1028 & -8;
      $1030 = ($1029|0)==($964|0);
      if ($1030) {
       label = 289;
       break;
      }
      $1031 = $$0206$i$i >>> 31;
      $1032 = (((($$0207$i$i)) + 16|0) + ($1031<<2)|0);
      $1033 = $$0206$i$i << 1;
      $1034 = HEAP32[$1032>>2]|0;
      $1035 = ($1034|0)==(0|0);
      if ($1035) {
       label = 286;
       break;
      } else {
       $$0206$i$i = $1033;$$0207$i$i = $1034;
      }
     }
     if ((label|0) == 286) {
      $1036 = HEAP32[(33584)>>2]|0;
      $1037 = ($1036>>>0)>($1032>>>0);
      if ($1037) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1032>>2] = $636;
       $1038 = ((($636)) + 24|0);
       HEAP32[$1038>>2] = $$0207$i$i;
       $1039 = ((($636)) + 12|0);
       HEAP32[$1039>>2] = $636;
       $1040 = ((($636)) + 8|0);
       HEAP32[$1040>>2] = $636;
       break;
      }
     }
     else if ((label|0) == 289) {
      $1041 = ((($$0207$i$i)) + 8|0);
      $1042 = HEAP32[$1041>>2]|0;
      $1043 = HEAP32[(33584)>>2]|0;
      $1044 = ($1043>>>0)<=($$0207$i$i>>>0);
      $1045 = ($1043>>>0)<=($1042>>>0);
      $1046 = $1045 & $1044;
      if ($1046) {
       $1047 = ((($1042)) + 12|0);
       HEAP32[$1047>>2] = $636;
       HEAP32[$1041>>2] = $636;
       $1048 = ((($636)) + 8|0);
       HEAP32[$1048>>2] = $1042;
       $1049 = ((($636)) + 12|0);
       HEAP32[$1049>>2] = $$0207$i$i;
       $1050 = ((($636)) + 24|0);
       HEAP32[$1050>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1052 = HEAP32[(33580)>>2]|0;
  $1053 = ($1052>>>0)>($$0197>>>0);
  if ($1053) {
   $1054 = (($1052) - ($$0197))|0;
   HEAP32[(33580)>>2] = $1054;
   $1055 = HEAP32[(33592)>>2]|0;
   $1056 = (($1055) + ($$0197)|0);
   HEAP32[(33592)>>2] = $1056;
   $1057 = $1054 | 1;
   $1058 = ((($1056)) + 4|0);
   HEAP32[$1058>>2] = $1057;
   $1059 = $$0197 | 3;
   $1060 = ((($1055)) + 4|0);
   HEAP32[$1060>>2] = $1059;
   $1061 = ((($1055)) + 8|0);
   $$0 = $1061;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1062 = (___errno_location()|0);
 HEAP32[$1062>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $$pre441 = 0;
 var $$pre443 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond421 = 0, $cond422 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(33584)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(33588)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    HEAP32[(33576)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (33608 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[8392]|0;
     $38 = $37 & $36;
     HEAP32[8392] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre443 = ((($26)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi444Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi444Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($3>>>0)>($$1390>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (33872 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(33572)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(33572)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(33584)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)!=($16|0);
       $$sink3 = $86&1;
       $87 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$87>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(33584)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $101 = HEAP32[(33584)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $114 = ($113>>>0)<($10>>>0);
 if (!($114)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(33592)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(33580)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(33580)>>2] = $124;
   HEAP32[(33592)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(33588)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(33588)>>2] = 0;
   HEAP32[(33576)>>2] = 0;
   return;
  }
  $129 = HEAP32[(33588)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(33576)>>2]|0;
   $132 = (($131) + ($$1382))|0;
   HEAP32[(33576)>>2] = $132;
   HEAP32[(33588)>>2] = $113;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($113) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1382))|0;
  $138 = $116 >>> 3;
  $139 = ($116>>>0)<(256);
  L108: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (33608 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(33584)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[8392]|0;
     $156 = $155 & $154;
     HEAP32[8392] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre441 = ((($143)) + 8|0);
     $$pre$phi442Z2D = $$pre441;
    } else {
     $158 = HEAP32[(33584)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi442Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi442Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $183;$$1402 = $179;
       }
      } else {
       $$1398 = $181;$$1402 = $180;
      }
      while(1) {
       $185 = ((($$1398)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if (!($187)) {
        $$1398 = $186;$$1402 = $185;
        continue;
       }
       $188 = ((($$1398)) + 16|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = ($189|0)==(0|0);
       if ($190) {
        break;
       } else {
        $$1398 = $189;$$1402 = $188;
       }
      }
      $191 = HEAP32[(33584)>>2]|0;
      $192 = ($191>>>0)>($$1402>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(33584)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3400 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (33872 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(33572)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(33572)>>2] = $202;
        break L108;
       }
      } else {
       $203 = HEAP32[(33584)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)!=($10|0);
        $$sink5 = $207&1;
        $208 = (((($165)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$208>>2] = $$3400;
        $209 = ($$3400|0)==(0|0);
        if ($209) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(33584)>>2]|0;
     $211 = ($210>>>0)>($$3400>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3400)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3400)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(33584)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3400)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($113) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(33588)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(33576)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1382 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($113) + ($$1382)|0);
  HEAP32[$234>>2] = $$1382;
  $$2 = $$1382;
 }
 $235 = $$2 >>> 3;
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (33608 + ($237<<2)|0);
  $239 = HEAP32[8392]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[8392] = $243;
   $$pre = ((($238)) + 8|0);
   $$0403 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(33584)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0403)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0403;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 $252 = ($251|0)==(0);
 if ($252) {
  $$0396 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0396 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = $258 >>> 16;
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = $263 >>> 16;
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = $268 >>> 15;
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = $$2 >>> $272;
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0396 = $275;
  }
 }
 $276 = (33872 + ($$0396<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0396;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(33572)>>2]|0;
 $281 = 1 << $$0396;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(33572)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ($$0396|0)==(31);
   $290 = $$0396 >>> 1;
   $291 = (25 - ($290))|0;
   $292 = $289 ? 0 : $291;
   $293 = $$2 << $292;
   $$0383 = $293;$$0384 = $288;
   while(1) {
    $294 = ((($$0384)) + 4|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = $295 & -8;
    $297 = ($296|0)==($$2|0);
    if ($297) {
     label = 124;
     break;
    }
    $298 = $$0383 >>> 31;
    $299 = (((($$0384)) + 16|0) + ($298<<2)|0);
    $300 = $$0383 << 1;
    $301 = HEAP32[$299>>2]|0;
    $302 = ($301|0)==(0|0);
    if ($302) {
     label = 121;
     break;
    } else {
     $$0383 = $300;$$0384 = $301;
    }
   }
   if ((label|0) == 121) {
    $303 = HEAP32[(33584)>>2]|0;
    $304 = ($303>>>0)>($299>>>0);
    if ($304) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$299>>2] = $$1;
     $305 = ((($$1)) + 24|0);
     HEAP32[$305>>2] = $$0384;
     $306 = ((($$1)) + 12|0);
     HEAP32[$306>>2] = $$1;
     $307 = ((($$1)) + 8|0);
     HEAP32[$307>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $308 = ((($$0384)) + 8|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = HEAP32[(33584)>>2]|0;
    $311 = ($310>>>0)<=($$0384>>>0);
    $312 = ($310>>>0)<=($309>>>0);
    $313 = $312 & $311;
    if ($313) {
     $314 = ((($309)) + 12|0);
     HEAP32[$314>>2] = $$1;
     HEAP32[$308>>2] = $$1;
     $315 = ((($$1)) + 8|0);
     HEAP32[$315>>2] = $309;
     $316 = ((($$1)) + 12|0);
     HEAP32[$316>>2] = $$0384;
     $317 = ((($$1)) + 24|0);
     HEAP32[$317>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $318 = HEAP32[(33600)>>2]|0;
 $319 = (($318) + -1)|0;
 HEAP32[(33600)>>2] = $319;
 $320 = ($319|0)==(0);
 if ($320) {
  $$0212$in$i = (34024);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $321 = ($$0212$i|0)==(0|0);
  $322 = ((($$0212$i)) + 8|0);
  if ($321) {
   break;
  } else {
   $$0212$in$i = $322;
  }
 }
 HEAP32[(33600)>>2] = -1;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 20;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34128|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_490()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_490() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (30978 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 31066;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 31066;
  } else {
   $$01214 = 31066;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22508|0);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$27 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$27 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $27;HEAP32[tempDoublePtr+4>>2] = $25;$26 = +HEAPF64[tempDoublePtr>>3];
  $28 = $26 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $56 + $51;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function _lrintf($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_rintf((+$0)));
 $2 = (~~(($1)));
 return ($2|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 31]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229320 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240319 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249307 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262313 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230331 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241330 = 0, $$1244318 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242306 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$283$ = 0, $$290 = 0, $$291 = 0, $$3257 = 0;
 var $$3265 = 0, $$3272 = 0, $$3304 = 0, $$376 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $brmerge = 0, $brmerge312 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0;
 var $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $or$cond = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $storemerge = 0, $storemerge278 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 86;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249307 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249307;$39 = $27;
      break L12;
     }
     $30 = ((($$0249307)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249307 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_804($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$376 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$376;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)>(31);
  $50 = 1 << $48;
  $51 = $50 & 75913;
  $52 = ($51|0)==(0);
  $brmerge312 = $49 | $52;
  if ($brmerge312) {
   $$0262$lcssa = 0;$$lcssa295 = $46;$69 = $storemerge;
  } else {
   $$0262313 = 0;$54 = $46;$59 = $storemerge;
   while(1) {
    $53 = $54 << 24 >> 24;
    $55 = (($53) + -32)|0;
    $56 = 1 << $55;
    $57 = $56 | $$0262313;
    $58 = ((($59)) + 1|0);
    HEAP32[$5>>2] = $58;
    $60 = HEAP8[$58>>0]|0;
    $61 = $60 << 24 >> 24;
    $62 = (($61) + -32)|0;
    $63 = ($62>>>0)>(31);
    $64 = 1 << $62;
    $65 = $64 & 75913;
    $66 = ($65|0)==(0);
    $brmerge = $63 | $66;
    if ($brmerge) {
     $$0262$lcssa = $57;$$lcssa295 = $60;$69 = $58;
     break;
    } else {
     $$0262313 = $57;$54 = $60;$59 = $58;
    }
   }
  }
  $67 = ($$lcssa295<<24>>24)==(42);
  if ($67) {
   $68 = ((($69)) + 1|0);
   $70 = HEAP8[$68>>0]|0;
   $71 = $70 << 24 >> 24;
   $isdigittmp276 = (($71) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $72 = ((($69)) + 2|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(36);
    if ($74) {
     $75 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$75>>2] = 10;
     $76 = HEAP8[$68>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = (($77) + -48)|0;
     $79 = (($3) + ($78<<3)|0);
     $80 = $79;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 4)|0;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($69)) + 3|0);
     $$0259 = $82;$$2271 = 1;$storemerge278 = $86;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
   if ((label|0) == 22) {
    label = 0;
    $87 = ($$1270|0)==(0);
    if (!($87)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $88 = $arglist_current;
     $89 = ((0) + 4|0);
     $expanded4 = $89;
     $expanded = (($expanded4) - 1)|0;
     $90 = (($88) + ($expanded))|0;
     $91 = ((0) + 4|0);
     $expanded8 = $91;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $92 = $90 & $expanded6;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $arglist_next = ((($93)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $94;$$2271 = 0;$storemerge278 = $68;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $68;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $95 = ($$0259|0)<(0);
   $96 = $$0262$lcssa | 8192;
   $97 = (0 - ($$0259))|0;
   $$$0262 = $95 ? $96 : $$0262$lcssa;
   $$$0259 = $95 ? $97 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$101 = $storemerge278;
  } else {
   $98 = (_getint_805($5)|0);
   $99 = ($98|0)<(0);
   if ($99) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $98;$$1263 = $$0262$lcssa;$$3272 = $$1270;$101 = $$pre346;
  }
  $100 = HEAP8[$101>>0]|0;
  $102 = ($100<<24>>24)==(46);
  do {
   if ($102) {
    $103 = ((($101)) + 1|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = ($104<<24>>24)==(42);
    if (!($105)) {
     $132 = ((($101)) + 1|0);
     HEAP32[$5>>2] = $132;
     $133 = (_getint_805($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $133;$$pre347 = $$pre347$pre;
     break;
    }
    $106 = ((($101)) + 2|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107 << 24 >> 24;
    $isdigittmp274 = (($108) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $109 = ((($101)) + 3|0);
     $110 = HEAP8[$109>>0]|0;
     $111 = ($110<<24>>24)==(36);
     if ($111) {
      $112 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$112>>2] = 10;
      $113 = HEAP8[$106>>0]|0;
      $114 = $113 << 24 >> 24;
      $115 = (($114) + -48)|0;
      $116 = (($3) + ($115<<3)|0);
      $117 = $116;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (($117) + 4)|0;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($101)) + 4|0);
      HEAP32[$5>>2] = $123;
      $$0254 = $119;$$pre347 = $123;
      break;
     }
    }
    $124 = ($$3272|0)==(0);
    if (!($124)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $125 = $arglist_current2;
     $126 = ((0) + 4|0);
     $expanded11 = $126;
     $expanded10 = (($expanded11) - 1)|0;
     $127 = (($125) + ($expanded10))|0;
     $128 = ((0) + 4|0);
     $expanded15 = $128;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $129 = $127 & $expanded13;
     $130 = $129;
     $131 = HEAP32[$130>>2]|0;
     $arglist_next3 = ((($130)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $338 = $131;
    } else {
     $338 = 0;
    }
    HEAP32[$5>>2] = $106;
    $$0254 = $338;$$pre347 = $106;
   } else {
    $$0254 = -1;$$pre347 = $101;
   }
  } while(0);
  $$0252 = 0;$135 = $$pre347;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    break L1;
   }
   $139 = ((($135)) + 1|0);
   HEAP32[$5>>2] = $139;
   $140 = HEAP8[$135>>0]|0;
   $141 = $140 << 24 >> 24;
   $142 = (($141) + -65)|0;
   $143 = ((32870 + (($$0252*58)|0)|0) + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = (($145) + -1)|0;
   $147 = ($146>>>0)<(8);
   if ($147) {
    $$0252 = $145;$135 = $139;
   } else {
    break;
   }
  }
  $148 = ($144<<24>>24)==(0);
  if ($148) {
   $$0 = -1;
   break;
  }
  $149 = ($144<<24>>24)==(19);
  $150 = ($$0253|0)>(-1);
  do {
   if ($149) {
    if ($150) {
     $$0 = -1;
     break L1;
    } else {
     label = 48;
    }
   } else {
    if ($150) {
     $151 = (($4) + ($$0253<<2)|0);
     HEAP32[$151>>2] = $145;
     $152 = (($3) + ($$0253<<3)|0);
     $153 = $152;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($153) + 4)|0;
     $157 = $156;
     $158 = HEAP32[$157>>2]|0;
     $159 = $6;
     $160 = $159;
     HEAP32[$160>>2] = $155;
     $161 = (($159) + 4)|0;
     $162 = $161;
     HEAP32[$162>>2] = $158;
     label = 48;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_807($6,$145,$2);
   }
  } while(0);
  if ((label|0) == 48) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue;
   }
  }
  $163 = HEAP8[$135>>0]|0;
  $164 = $163 << 24 >> 24;
  $165 = ($$0252|0)!=(0);
  $166 = $164 & 15;
  $167 = ($166|0)==(3);
  $or$cond280 = $165 & $167;
  $168 = $164 & -33;
  $$0235 = $or$cond280 ? $168 : $164;
  $169 = $$1263 & 8192;
  $170 = ($169|0)==(0);
  $171 = $$1263 & -65537;
  $$1263$ = $170 ? $$1263 : $171;
  L70: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $178 = HEAP32[$6>>2]|0;
     HEAP32[$178>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 1:  {
     $179 = HEAP32[$6>>2]|0;
     HEAP32[$179>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 2:  {
     $180 = ($$1248|0)<(0);
     $181 = $180 << 31 >> 31;
     $182 = HEAP32[$6>>2]|0;
     $183 = $182;
     $184 = $183;
     HEAP32[$184>>2] = $$1248;
     $185 = (($183) + 4)|0;
     $186 = $185;
     HEAP32[$186>>2] = $181;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 3:  {
     $187 = $$1248&65535;
     $188 = HEAP32[$6>>2]|0;
     HEAP16[$188>>1] = $187;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 4:  {
     $189 = $$1248&255;
     $190 = HEAP32[$6>>2]|0;
     HEAP8[$190>>0] = $189;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 6:  {
     $191 = HEAP32[$6>>2]|0;
     HEAP32[$191>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    case 7:  {
     $192 = ($$1248|0)<(0);
     $193 = $192 << 31 >> 31;
     $194 = HEAP32[$6>>2]|0;
     $195 = $194;
     $196 = $195;
     HEAP32[$196>>2] = $$1248;
     $197 = (($195) + 4)|0;
     $198 = $197;
     HEAP32[$198>>2] = $193;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $199 = ($$0254>>>0)>(8);
    $200 = $199 ? $$0254 : 8;
    $201 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $200;$$3265 = $201;
    label = 60;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 60;
    break;
   }
   case 111:  {
    $217 = $6;
    $218 = $217;
    $219 = HEAP32[$218>>2]|0;
    $220 = (($217) + 4)|0;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (_fmt_o($219,$222,$11)|0);
    $224 = $$1263$ & 8;
    $225 = ($224|0)==(0);
    $226 = $223;
    $227 = (($12) - ($226))|0;
    $228 = ($$0254|0)>($227|0);
    $229 = (($227) + 1)|0;
    $230 = $225 | $228;
    $$0254$$0254$ = $230 ? $$0254 : $229;
    $$0228 = $223;$$1233 = 0;$$1238 = 33334;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$255 = $219;$257 = $222;
    label = 66;
    break;
   }
   case 105: case 100:  {
    $231 = $6;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (($231) + 4)|0;
    $235 = $234;
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)<(0);
    if ($237) {
     $238 = (_i64Subtract(0,0,($233|0),($236|0))|0);
     $239 = tempRet0;
     $240 = $6;
     $241 = $240;
     HEAP32[$241>>2] = $238;
     $242 = (($240) + 4)|0;
     $243 = $242;
     HEAP32[$243>>2] = $239;
     $$0232 = 1;$$0237 = 33334;$250 = $238;$251 = $239;
     label = 65;
     break L70;
    } else {
     $244 = $$1263$ & 2048;
     $245 = ($244|0)==(0);
     $246 = $$1263$ & 1;
     $247 = ($246|0)==(0);
     $$ = $247 ? 33334 : (33336);
     $$$ = $245 ? $$ : (33335);
     $248 = $$1263$ & 2049;
     $249 = ($248|0)!=(0);
     $$283$ = $249&1;
     $$0232 = $$283$;$$0237 = $$$;$250 = $233;$251 = $236;
     label = 65;
     break L70;
    }
    break;
   }
   case 117:  {
    $172 = $6;
    $173 = $172;
    $174 = HEAP32[$173>>2]|0;
    $175 = (($172) + 4)|0;
    $176 = $175;
    $177 = HEAP32[$176>>2]|0;
    $$0232 = 0;$$0237 = 33334;$250 = $174;$251 = $177;
    label = 65;
    break;
   }
   case 99:  {
    $267 = $6;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = $269&255;
    HEAP8[$13>>0] = $273;
    $$2 = $13;$$2234 = 0;$$2239 = 33334;$$2251 = $11;$$5 = 1;$$6268 = $171;
    break;
   }
   case 109:  {
    $274 = (___errno_location()|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = (_strerror($275)|0);
    $$1 = $276;
    label = 70;
    break;
   }
   case 115:  {
    $277 = HEAP32[$6>>2]|0;
    $278 = ($277|0)!=(0|0);
    $279 = $278 ? $277 : 33344;
    $$1 = $279;
    label = 70;
    break;
   }
   case 67:  {
    $286 = $6;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($286) + 4)|0;
    $290 = $289;
    $291 = HEAP32[$290>>2]|0;
    HEAP32[$8>>2] = $288;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$339 = $8;
    label = 74;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $292 = ($$0254|0)==(0);
    if ($292) {
     _pad_810($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$4258355 = $$0254;$339 = $$pre349;
     label = 74;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $314 = +HEAPF64[$6>>3];
    $315 = (_fmt_fp($0,$314,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $315;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 33334;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L94: do {
   if ((label|0) == 60) {
    label = 0;
    $202 = $6;
    $203 = $202;
    $204 = HEAP32[$203>>2]|0;
    $205 = (($202) + 4)|0;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = $$1236 & 32;
    $209 = (_fmt_x($204,$207,$11,$208)|0);
    $210 = ($204|0)==(0);
    $211 = ($207|0)==(0);
    $212 = $210 & $211;
    $213 = $$3265 & 8;
    $214 = ($213|0)==(0);
    $or$cond282 = $214 | $212;
    $215 = $$1236 >> 4;
    $216 = (33334 + ($215)|0);
    $$290 = $or$cond282 ? 33334 : $216;
    $$291 = $or$cond282 ? 0 : 2;
    $$0228 = $209;$$1233 = $$291;$$1238 = $$290;$$2256 = $$1255;$$4266 = $$3265;$255 = $204;$257 = $207;
    label = 66;
   }
   else if ((label|0) == 65) {
    label = 0;
    $252 = (_fmt_u($250,$251,$11)|0);
    $$0228 = $252;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$255 = $250;$257 = $251;
    label = 66;
   }
   else if ((label|0) == 70) {
    label = 0;
    $280 = (_memchr($$1,0,$$0254)|0);
    $281 = ($280|0)==(0|0);
    $282 = $280;
    $283 = $$1;
    $284 = (($282) - ($283))|0;
    $285 = (($$1) + ($$0254)|0);
    $$3257 = $281 ? $$0254 : $284;
    $$1250 = $281 ? $285 : $280;
    $$2 = $$1;$$2234 = 0;$$2239 = 33334;$$2251 = $$1250;$$5 = $$3257;$$6268 = $171;
   }
   else if ((label|0) == 74) {
    label = 0;
    $$0229320 = $339;$$0240319 = 0;$$1244318 = 0;
    while(1) {
     $293 = HEAP32[$$0229320>>2]|0;
     $294 = ($293|0)==(0);
     if ($294) {
      $$0240$lcssa = $$0240319;$$2245 = $$1244318;
      break;
     }
     $295 = (_wctomb($9,$293)|0);
     $296 = ($295|0)<(0);
     $297 = (($$4258355) - ($$0240319))|0;
     $298 = ($295>>>0)>($297>>>0);
     $or$cond285 = $296 | $298;
     if ($or$cond285) {
      $$0240$lcssa = $$0240319;$$2245 = $295;
      break;
     }
     $299 = ((($$0229320)) + 4|0);
     $300 = (($295) + ($$0240319))|0;
     $301 = ($$4258355>>>0)>($300>>>0);
     if ($301) {
      $$0229320 = $299;$$0240319 = $300;$$1244318 = $295;
     } else {
      $$0240$lcssa = $300;$$2245 = $295;
      break;
     }
    }
    $302 = ($$2245|0)<(0);
    if ($302) {
     $$0 = -1;
     break L1;
    }
    _pad_810($0,32,$$1260,$$0240$lcssa,$$1263$);
    $303 = ($$0240$lcssa|0)==(0);
    if ($303) {
     $$0240$lcssa357 = 0;
     label = 83;
    } else {
     $$1230331 = $339;$$1241330 = 0;
     while(1) {
      $304 = HEAP32[$$1230331>>2]|0;
      $305 = ($304|0)==(0);
      if ($305) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $306 = (_wctomb($9,$304)|0);
      $307 = (($306) + ($$1241330))|0;
      $308 = ($307|0)>($$0240$lcssa|0);
      if ($308) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break L94;
      }
      $309 = ((($$1230331)) + 4|0);
      _out_804($0,$9,$306);
      $310 = ($307>>>0)<($$0240$lcssa>>>0);
      if ($310) {
       $$1230331 = $309;$$1241330 = $307;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 83;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 66) {
   label = 0;
   $253 = ($$2256|0)>(-1);
   $254 = $$4266 & -65537;
   $$$4266 = $253 ? $254 : $$4266;
   $256 = ($255|0)!=(0);
   $258 = ($257|0)!=(0);
   $259 = $256 | $258;
   $260 = ($$2256|0)!=(0);
   $or$cond = $260 | $259;
   $261 = $$0228;
   $262 = (($12) - ($261))|0;
   $263 = $259 ^ 1;
   $264 = $263&1;
   $265 = (($262) + ($264))|0;
   $266 = ($$2256|0)>($265|0);
   $$2256$ = $266 ? $$2256 : $265;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 83) {
   label = 0;
   $311 = $$1263$ ^ 8192;
   _pad_810($0,32,$$1260,$$0240$lcssa357,$311);
   $312 = ($$1260|0)>($$0240$lcssa357|0);
   $313 = $312 ? $$1260 : $$0240$lcssa357;
   $$0243 = $313;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
   continue;
  }
  $316 = $$2251;
  $317 = $$2;
  $318 = (($316) - ($317))|0;
  $319 = ($$5|0)<($318|0);
  $$$5 = $319 ? $318 : $$5;
  $320 = (($$$5) + ($$2234))|0;
  $321 = ($$1260|0)<($320|0);
  $$2261 = $321 ? $320 : $$1260;
  _pad_810($0,32,$$2261,$320,$$6268);
  _out_804($0,$$2239,$$2234);
  $322 = $$6268 ^ 65536;
  _pad_810($0,48,$$2261,$320,$322);
  _pad_810($0,48,$$$5,$318,0);
  _out_804($0,$$2,$318);
  $323 = $$6268 ^ 8192;
  _pad_810($0,32,$$2261,$320,$323);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $139;
 }
 L113: do {
  if ((label|0) == 86) {
   $324 = ($0|0)==(0|0);
   if ($324) {
    $325 = ($$0269|0)==(0);
    if ($325) {
     $$0 = 0;
    } else {
     $$2242306 = 1;
     while(1) {
      $326 = (($4) + ($$2242306<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      if ($328) {
       $$2242$lcssa = $$2242306;
       break;
      }
      $330 = (($3) + ($$2242306<<3)|0);
      _pop_arg_807($330,$327,$2);
      $331 = (($$2242306) + 1)|0;
      $332 = ($$2242306|0)<(9);
      if ($332) {
       $$2242306 = $331;
      } else {
       $$2242$lcssa = $331;
       break;
      }
     }
     $329 = ($$2242$lcssa|0)<(10);
     if ($329) {
      $$3304 = $$2242$lcssa;
      while(1) {
       $335 = (($4) + ($$3304<<2)|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0);
       if (!($337)) {
        $$0 = -1;
        break L113;
       }
       $333 = (($$3304) + 1)|0;
       $334 = ($$3304|0)<(9);
       if ($334) {
        $$3304 = $333;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out_804($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_805($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg_807($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (33386 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad_810($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_804($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_804($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_811($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 33351;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (33352) : (33357);
  $$$ = $16 ? $$ : (33354);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_811($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 33370 : 33374;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 33378 : 33382;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad_810($0,32,$2,$31,$32);
   _out_804($0,$$0521,$$0520);
   _out_804($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad_810($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (33386 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad_810($0,32,$2,$106,$4);
    _out_804($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad_810($0,48,$2,$106,$107);
    _out_804($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad_810($0,48,$108,0,0);
    _out_804($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad_810($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad_810($0,32,$2,$323,$4);
   _out_804($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad_810($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out_804($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out_804($0,33402,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out_804($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad_810($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out_804($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out_804($0,33402,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out_804($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad_810($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out_804($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad_810($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_811($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_618()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_618() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 31]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 31]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((34132|0));
 return (34140|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((34132|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[5626]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[5626]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 31]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 31]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[5594]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 0]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(72|0),(16|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,32,16,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 15]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 15]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 15]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 15]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 15]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 15]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$13>>2] = $2;
      $33 = ((($1)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($1)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($1)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($1)) + 54|0);
        HEAP8[$42>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 15]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (33534|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (22840);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8536]|0;
 $1 = (($0) + 0)|0;
 HEAP32[8536] = $1;
 $2 = $0;
 return ($2|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _round(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _rintf(f) {
    f = +f;
    return (f - +Math_floor(f) != .5) ? +_round(f) : +_round(f / +2) * +2;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&0]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}

function b1(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_ii(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_ii(3);return 0;
}
function b4(p0) {
 p0 = p0|0; nullFunc_ii(4);return 0;
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_ii(6);return 0;
}
function b7(p0) {
 p0 = p0|0; nullFunc_ii(7);return 0;
}
function b8(p0) {
 p0 = p0|0; nullFunc_ii(8);return 0;
}
function b9(p0) {
 p0 = p0|0; nullFunc_ii(9);return 0;
}
function b10(p0) {
 p0 = p0|0; nullFunc_ii(10);return 0;
}
function b11(p0) {
 p0 = p0|0; nullFunc_ii(11);return 0;
}
function b12(p0) {
 p0 = p0|0; nullFunc_ii(12);return 0;
}
function b13(p0) {
 p0 = p0|0; nullFunc_ii(13);return 0;
}
function b14(p0) {
 p0 = p0|0; nullFunc_ii(14);return 0;
}
function b15(p0) {
 p0 = p0|0; nullFunc_ii(15);return 0;
}
function b16(p0) {
 p0 = p0|0; nullFunc_ii(16);return 0;
}
function b17(p0) {
 p0 = p0|0; nullFunc_ii(17);return 0;
}
function b18(p0) {
 p0 = p0|0; nullFunc_ii(19);return 0;
}
function b19(p0) {
 p0 = p0|0; nullFunc_ii(20);return 0;
}
function b20(p0) {
 p0 = p0|0; nullFunc_ii(21);return 0;
}
function b21(p0) {
 p0 = p0|0; nullFunc_ii(22);return 0;
}
function b22(p0) {
 p0 = p0|0; nullFunc_ii(23);return 0;
}
function b23(p0) {
 p0 = p0|0; nullFunc_ii(24);return 0;
}
function b24(p0) {
 p0 = p0|0; nullFunc_ii(25);return 0;
}
function b25(p0) {
 p0 = p0|0; nullFunc_ii(26);return 0;
}
function b26(p0) {
 p0 = p0|0; nullFunc_ii(27);return 0;
}
function b27(p0) {
 p0 = p0|0; nullFunc_ii(28);return 0;
}
function b28(p0) {
 p0 = p0|0; nullFunc_ii(29);return 0;
}
function b29(p0) {
 p0 = p0|0; nullFunc_ii(30);return 0;
}
function b30(p0) {
 p0 = p0|0; nullFunc_ii(31);return 0;
}
function b32(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b33(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b34(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b35(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(5);return 0;
}
function b36(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0;
}
function b37(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0;
}
function b38(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0;
}
function b39(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(10);return 0;
}
function b40(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(11);return 0;
}
function b41(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(12);return 0;
}
function b42(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(13);return 0;
}
function b43(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(14);return 0;
}
function b44(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(15);return 0;
}
function b45(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(16);return 0;
}
function b46(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(17);return 0;
}
function b47(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(18);return 0;
}
function b48(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(19);return 0;
}
function b49(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(21);return 0;
}
function b50(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(22);return 0;
}
function b51(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(23);return 0;
}
function b52(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(24);return 0;
}
function b53(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(25);return 0;
}
function b54(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(26);return 0;
}
function b55(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(27);return 0;
}
function b56(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(28);return 0;
}
function b57(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(29);return 0;
}
function b58(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(30);return 0;
}
function b59(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(31);return 0;
}
function b61() {
 ; nullFunc_v(0);
}
function b63(p0) {
 p0 = p0|0; nullFunc_vi(0);
}
function b64(p0) {
 p0 = p0|0; nullFunc_vi(1);
}
function b65(p0) {
 p0 = p0|0; nullFunc_vi(2);
}
function b66(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b67(p0) {
 p0 = p0|0; nullFunc_vi(8);
}
function b68(p0) {
 p0 = p0|0; nullFunc_vi(9);
}
function b69(p0) {
 p0 = p0|0; nullFunc_vi(10);
}
function b70(p0) {
 p0 = p0|0; nullFunc_vi(11);
}
function b71(p0) {
 p0 = p0|0; nullFunc_vi(13);
}
function b72(p0) {
 p0 = p0|0; nullFunc_vi(14);
}
function b73(p0) {
 p0 = p0|0; nullFunc_vi(15);
}
function b74(p0) {
 p0 = p0|0; nullFunc_vi(18);
}
function b75(p0) {
 p0 = p0|0; nullFunc_vi(19);
}
function b76(p0) {
 p0 = p0|0; nullFunc_vi(20);
}
function b77(p0) {
 p0 = p0|0; nullFunc_vi(21);
}
function b78(p0) {
 p0 = p0|0; nullFunc_vi(22);
}
function b79(p0) {
 p0 = p0|0; nullFunc_vi(23);
}
function b80(p0) {
 p0 = p0|0; nullFunc_vi(24);
}
function b81(p0) {
 p0 = p0|0; nullFunc_vi(25);
}
function b82(p0) {
 p0 = p0|0; nullFunc_vi(26);
}
function b83(p0) {
 p0 = p0|0; nullFunc_vi(27);
}
function b84(p0) {
 p0 = p0|0; nullFunc_vi(28);
}
function b85(p0) {
 p0 = p0|0; nullFunc_vi(29);
}
function b86(p0) {
 p0 = p0|0; nullFunc_vi(30);
}
function b87(p0) {
 p0 = p0|0; nullFunc_vi(31);
}
function b89(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(0);
}
function b90(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(1);
}
function b91(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(2);
}
function b92(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(3);
}
function b93(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(4);
}
function b94(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(5);
}
function b95(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(6);
}
function b96(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(7);
}
function b97(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(8);
}
function b98(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b99(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}
function b100(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function b101(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}
function b102(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(14);
}
function b104(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0);
}
function b105(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b106(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b107(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(3);
}
function b108(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(4);
}
function b109(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(5);
}
function b110(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(6);
}
function b111(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(7);
}
function b112(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(8);
}
function b113(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(9);
}
function b114(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11);
}
function b115(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(12);
}
function b116(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(13);
}
function b117(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(15);
}
function b119(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(0);
}
function b120(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(1);
}
function b121(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(2);
}
function b122(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(3);
}
function b123(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(4);
}
function b124(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}
function b125(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(6);
}
function b126(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(7);
}
function b127(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b128(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b129(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11);
}
function b130(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}
function b131(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}
function b132(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(15);
}
function b134(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(0);
}
function b135(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(1);
}
function b136(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(2);
}
function b137(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(3);
}
function b138(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(4);
}
function b139(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(5);
}
function b140(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(6);
}
function b141(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(7);
}
function b142(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(8);
}
function b143(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(9);
}
function b144(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(10);
}
function b145(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11);
}
function b146(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(12);
}
function b147(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(13);
}
function b148(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14);
}
function b149(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(15);
}
function b150(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(16);
}
function b151(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(17);
}
function b152(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(18);
}
function b153(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(20);
}
function b154(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(21);
}
function b155(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(22);
}
function b156(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(23);
}
function b157(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(24);
}
function b158(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(25);
}
function b159(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(26);
}
function b160(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(27);
}
function b161(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(28);
}
function b162(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(29);
}
function b163(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(30);
}
function b164(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(31);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b1,___stdio_close,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,__ZNKSt9bad_alloc4whatEv,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27
,b28,b29,b30];
var FUNCTION_TABLE_iiii = [b32,b33,___stdout_write,___stdio_seek,b34,b35,b36,b37,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,___stdio_write,b49,b50,b51,b52,b53,b54,b55,b56
,b57,b58,b59];
var FUNCTION_TABLE_v = [b61];
var FUNCTION_TABLE_vi = [b63,b64,b65,b66,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b67,b68,b69,b70,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b71,b72,b73,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84
,b85,b86,b87];
var FUNCTION_TABLE_viiii = [b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b100,b101,b102,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];
var FUNCTION_TABLE_viiiii = [b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b114,b115,b116,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b117];
var FUNCTION_TABLE_viiiiii = [b119,b120,b121,b122,b123,b124,b125,b126,b127,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b128,b129,b130,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b131,b132];
var FUNCTION_TABLE_viiiiiii = [b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,_downmix_float,b153,b154,b155,b156,b157,b158,b159,b160,b161
,b162,b163,b164];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _codec_opus_changeApplication: _codec_opus_changeApplication, _codec_opus_createNativeHandle: _codec_opus_createNativeHandle, _codec_opus_decode: _codec_opus_decode, _codec_opus_deleteNativeHandle: _codec_opus_deleteNativeHandle, _codec_opus_encode: _codec_opus_encode, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _rintf: _rintf, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__codec_opus_changeApplication = asm["_codec_opus_changeApplication"]; asm["_codec_opus_changeApplication"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__codec_opus_changeApplication.apply(null, arguments);
};

var real__codec_opus_createNativeHandle = asm["_codec_opus_createNativeHandle"]; asm["_codec_opus_createNativeHandle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__codec_opus_createNativeHandle.apply(null, arguments);
};

var real__codec_opus_decode = asm["_codec_opus_decode"]; asm["_codec_opus_decode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__codec_opus_decode.apply(null, arguments);
};

var real__codec_opus_deleteNativeHandle = asm["_codec_opus_deleteNativeHandle"]; asm["_codec_opus_deleteNativeHandle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__codec_opus_deleteNativeHandle.apply(null, arguments);
};

var real__codec_opus_encode = asm["_codec_opus_encode"]; asm["_codec_opus_encode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__codec_opus_encode.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__rintf = asm["_rintf"]; asm["_rintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rintf.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _codec_opus_changeApplication = Module["_codec_opus_changeApplication"] = asm["_codec_opus_changeApplication"];
var _codec_opus_createNativeHandle = Module["_codec_opus_createNativeHandle"] = asm["_codec_opus_createNativeHandle"];
var _codec_opus_decode = Module["_codec_opus_decode"] = asm["_codec_opus_decode"];
var _codec_opus_deleteNativeHandle = Module["_codec_opus_deleteNativeHandle"] = asm["_codec_opus_deleteNativeHandle"];
var _codec_opus_encode = Module["_codec_opus_encode"] = asm["_codec_opus_encode"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _rintf = Module["_rintf"] = asm["_rintf"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



